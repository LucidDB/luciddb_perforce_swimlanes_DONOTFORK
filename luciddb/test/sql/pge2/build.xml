<?xml version="1.0" encoding="UTF-8"?>
<!--
// $Id$
// LucidDB is a DBMS optimized for business intelligence.
// Copyright (C) 2005-2005 LucidEra, Inc.
// Copyright (C) 2005-2005 The Eigenbase Project
//
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version approved by The Eigenbase Project.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->

<project name="pge2" basedir="." default="test">
  <dirname property="pge2.dir" file="${ant.file.pge2}" />

  <property name="open.dir" location="../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" classpath="${ant.classpath}"/>
  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${pge2.dir}/gen" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${pge2.dir}/testlog" />

  <!-- directory where the csv files are copied -->
  <property name="csvsource.dir" value="/mnt/raksha/engineering/testdata/From_dif_delphi/eng/testdata/pge"/>
  <property name="csv.dir" value="${pge2.dir}/csv" />
  <property name="csv.copy.dir" value="${pge2.dir}/csv-copy" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <available file="${gensql.dir}" type="dir" property="sql.generated"/>
    <if>
      <isset property="sql.generated"/>
      <then/>
      <else>
        <filter token="open.dir" value="${open.dir}"/>
        <filter token="csv.dir" value="${csv.copy.dir}"/>

        <!-- generate config.properties file -->
        <copy file="prop.flatfile" tofile="config.properties"
          overwrite="true" filtering="true">
          <filterset>
            <filtersfile file="prop.flatfile"/>
          </filterset>
        </copy>

        <copy todir="${gensql.dir}tmp" overwrite="true" filtering="true">
          <fileset dir="${pge2.dir}" includes="*.tmpl"/>
          <globmapper from="*.tmpl" to="*"/>
          <filterset>
            <filtersfile file="config.properties"/>
          </filterset>
        </copy>
        <copy todir="${gensql.dir}/flatfile" overwrite="true" filtering="true">
          <fileset dir="${gensql.dir}tmp"/>
          <filterchain>
            <tokenfilter>
              <replaceregex pattern="^.*. . >.*@.*@.*" replace=". . . . . . . . > " flags="s"/>
              <replaceregex pattern="^.*@.*@.*" replace="" flags="s"/>
            </tokenfilter>
          </filterchain>
        </copy>
        <delete dir="${gensql.dir}tmp" quiet="true"/>

        <!-- copy over other .sql and .ref files -->
        <copy todir="${gensql.dir}/flatfile">
          <fileset dir="${pge2.dir}">
            <include name="**/*.sql"/>
            <include name="**/*.ref"/>
            <exclude name="gen/**"/>
          </fileset>
          <filterset>
            <filter token="PLAN" value=""/>
          </filterset>
        </copy>

        <!-- generate explain plan files -->
        <copy todir="${gensql.dir}/exp">
          <fileset dir="${pge2.dir}">
            <include name="**/*.sql"/>
            <exclude name="gen/**"/>
          </fileset>
          <filterset>
            <filter token="PLAN" 
              value="!set outputformat csv &#10;explain plan for"/>
          </filterset>
          <regexpmapper from="^(\d.*)\.(.*)$$" to="\1Exp.\2"/>
        </copy>
        <copy todir="${gensql.dir}/exp">
          <fileset dir="${gensql.dir}/flatfile">
            <include name="create.*"/>
            <include name="createi.*"/>
          </fileset>
        </copy>

      </else>
    </if>
  </target>

  <target name="test" depends="gen-all-sql">
    <blackhawk.fork
      basedir="${pge2.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <available file="${csvsource.dir}" type="dir"
      property="raksha.available"/>
    <if>
      <isset property="raksha.available"/>
      <then>
        <!-- sync raksha <-> csv.dir -->
        <sync todir="${csv.dir}" 
          overwrite="false"
          failonerror="false"
          verbose="true">
          <fileset dir="${csvsource.dir}"/>
        </sync>
      </then>
    </if>
    <available file="${csv.dir}" type="dir"
      property="csv.available"/>
    <if>
      <isset property="csv.available"/>
      <then> 
        <!-- sync csv.dir <-> csv-copy.dir -->
        <sync todir="${csv.copy.dir}"
          overwrite="true"
          verbose="true"
          failonerror="true">
          <fileset dir="${csv.dir}"/>
        </sync>
      </then>
      <else>
        <echo message="!! NO CSV FILES !!"/>
      </else>
    </if>
  </target>

  <target name="clean">
    <delete dir="${gensql.dir}"/>
    <delete dir="${bh.log.basedir}"/>
    <delete dir="${csv.copy.dir}"/>
    <delete>
      <fileset dir="${pge2.dir}" includes="**/*.err"/>
    </delete>
  </target>

  <target name="clean-csv">
    <antcall target="clean"/>
    <delete dir="${csv.dir}"/>
  </target>

</project>
