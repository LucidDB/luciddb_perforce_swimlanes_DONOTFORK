0: jdbc:luciddb:> -- Test index only scans, with and without deleted rows
0: jdbc:luciddb:> 
0: jdbc:luciddb:> -- create foreign server
0: jdbc:luciddb:> create server ff_server
. . . . . . . . > foreign data wrapper sys_file_wrapper
. . . . . . . . > options(
. . . . . . . . >     directory '@DIR@',
. . . . . . . . >     file_extension '.csv',
. . . . . . . . >     ctrl_file_extension '.bcp',
. . . . . . . . >     field_delimiter ',',
. . . . . . . . >     line_delimiter '\n',
. . . . . . . . >     quote_char '"',
. . . . . . . . >     escape_char '',
. . . . . . . . >     with_header 'yes',
. . . . . . . . >     num_rows_scan '9',
. . . . . . . . >     log_directory '@DIR@'
. . . . . . . . > );
0: jdbc:luciddb:> 
0: jdbc:luciddb:> create schema idxOnlyScan;
0: jdbc:luciddb:> set schema 'idxOnlyScan';
0: jdbc:luciddb:> 
0: jdbc:luciddb:> -- Create indexes on every column so index-only scans can be done on columns
0: jdbc:luciddb:> -- with different cardinalities
0: jdbc:luciddb:> 
0: jdbc:luciddb:> create table BENCH1M (
. . . . . . . . > "kseq" bigint primary key,
. . . . . . . . > "k2" bigint,
. . . . . . . . > "k4" bigint,
. . . . . . . . > "k5" bigint,
. . . . . . . . > "k10" bigint,
. . . . . . . . > "k25" bigint,
. . . . . . . . > "k100" bigint,
. . . . . . . . > "k1k" bigint,
. . . . . . . . > "k10k" bigint,
. . . . . . . . > "k40k" bigint,
. . . . . . . . > "k100k" bigint,
. . . . . . . . > "k250k" bigint,
. . . . . . . . > "k500k" bigint);
0: jdbc:luciddb:> create index ik2 on bench1m("k2");
0: jdbc:luciddb:> create index ik4 on bench1m("k4");
0: jdbc:luciddb:> create index ik5 on bench1m("k5");
0: jdbc:luciddb:> create index ik10 on bench1m("k10");
0: jdbc:luciddb:> create index ik25 on bench1m("k25");
0: jdbc:luciddb:> create index ik100 on bench1m("k100");
0: jdbc:luciddb:> create index ik1k on bench1m("k1k");
0: jdbc:luciddb:> create index ik10k on bench1m("k10k");
0: jdbc:luciddb:> create index ik40k on bench1m("k40k");
0: jdbc:luciddb:> create index ik100k on bench1m("k100k");
0: jdbc:luciddb:> create index ik250k on bench1m("k250k");
0: jdbc:luciddb:> create index ik500k on bench1m("k500k");
0: jdbc:luciddb:> 
0: jdbc:luciddb:> -- download
0: jdbc:luciddb:> INSERT INTO BENCH1M SELECT * FROM ff_server."BCP"."bench1M";
0: jdbc:luciddb:> 
0: jdbc:luciddb:> -- check the download
0: jdbc:luciddb:> select count(*) from bench1M;
+----------+
|  EXPR$0  |
+----------+
| 1000000  |
+----------+
0: jdbc:luciddb:> 
0: jdbc:luciddb:> -- analyze
0: jdbc:luciddb:> analyze table bench1m estimate statistics for all columns;
0: jdbc:luciddb:> 
0: jdbc:luciddb:> -- Use the plugin that will force usage of index-only scans
0: jdbc:luciddb:> alter session implementation
. . . . . . . . >     set jar sys_boot.sys_boot.luciddb_index_only_plugin;
0: jdbc:luciddb:> 
0: jdbc:luciddb:> ----------------------------------------------------------------------------
0: jdbc:luciddb:> -- First, exercise the most extreme case where the key values are in reverse
0: jdbc:luciddb:> -- order relative to the rid values
0: jdbc:luciddb:> ----------------------------------------------------------------------------
0: jdbc:luciddb:> 
0: jdbc:luciddb:> create table reverse(
. . . . . . . . >     a bigint generated always as identity (start with 1000000 increment by -1)
. . . . . . . . >         primary key,
. . . . . . . . >     b bigint);
0: jdbc:luciddb:> insert into reverse(b) select "kseq" from bench1m;
0: jdbc:luciddb:> analyze table reverse estimate statistics for all columns;
0: jdbc:luciddb:> select count(distinct a) from reverse;
+----------+
|  EXPR$0  |
+----------+
| 1000000  |
+----------+
0: jdbc:luciddb:> delete from reverse where 
. . . . . . . . >     b in (1, 2, 5, 7, 10, 17, 24, 885, 3201, 9708, 12024, 191842, 612844);
0: jdbc:luciddb:> select count(distinct a) from reverse;
+---------+
| EXPR$0  |
+---------+
| 999987  |
+---------+
0: jdbc:luciddb:> delete from reverse where b in
. . . . . . . . >     (select "kseq" from bench1m where
. . . . . . . . >         "k100" = 1 or "k1k" = 1 or "k10k" = 1 or "k40k" = 1 or "k100k" = 1 or
. . . . . . . . >         "k250k" = 1 or "k500k" = 1 or "kseq" = 1);
0: jdbc:luciddb:> select count(distinct a) from reverse;
+---------+
| EXPR$0  |
+---------+
| 988746  |
+---------+
0: jdbc:luciddb:> delete from reverse where b in
. . . . . . . . >     (select "kseq" from bench1m where
. . . . . . . . >         "k100" = 99 or "k1k" = 99 or "k10k" = 99 or "k40k" = 99 or
. . . . . . . . >         "k100k" = 99 or "k250k" = 99 or "k500k" = 99 or "kseq" = 99);
0: jdbc:luciddb:> select count(distinct a) from reverse;
+---------+
| EXPR$0  |
+---------+
| 977778  |
+---------+
0: jdbc:luciddb:> 
0: jdbc:luciddb:> ------------------------------------------------------------------------
0: jdbc:luciddb:> -- Now, do tests against all the different columns to exercise different
0: jdbc:luciddb:> -- key cardinalities
0: jdbc:luciddb:> ------------------------------------------------------------------------
0: jdbc:luciddb:> 
0: jdbc:luciddb:> select count(distinct "kseq") from bench1m;
+----------+
|  EXPR$0  |
+----------+
| 1000000  |
+----------+
0: jdbc:luciddb:> select "k2", count(*) from bench1m group by "k2" order by "k2";
+-----+---------+
| k2  | EXPR$1  |
+-----+---------+
| 1   | 499598  |
| 2   | 500402  |
+-----+---------+
0: jdbc:luciddb:> select "k4", count(*) from bench1m group by "k4" order by "k4";
+-----+---------+
| k4  | EXPR$1  |
+-----+---------+
| 1   | 249504  |
| 2   | 249725  |
| 3   | 249957  |
| 4   | 250814  |
+-----+---------+
0: jdbc:luciddb:> select "k5", count(*) from bench1m group by "k5" order by "k5";
+-----+---------+
| k5  | EXPR$1  |
+-----+---------+
| 1   | 199425  |
| 2   | 200425  |
| 3   | 200034  |
| 4   | 199964  |
| 5   | 200152  |
+-----+---------+
0: jdbc:luciddb:> select "k10", count(*) from bench1m group by "k10" order by "k10";
+------+---------+
| k10  | EXPR$1  |
+------+---------+
| 1    | 99870   |
| 2    | 100501  |
| 3    | 99949   |
| 4    | 99857   |
| 5    | 99842   |
| 6    | 100038  |
| 7    | 100017  |
| 8    | 100148  |
| 9    | 99960   |
| 10   | 99818   |
+------+---------+
0: jdbc:luciddb:> select count(distinct "k25") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 25      |
+---------+
0: jdbc:luciddb:> select "k25", count(*) from bench1m group by "k25" having count(*) > 40000
. . . . . . . . >     order by "k25";
+------+---------+
| k25  | EXPR$1  |
+------+---------+
| 1    | 40164   |
| 2    | 40089   |
| 4    | 40421   |
| 8    | 40139   |
| 11   | 40180   |
| 12   | 40013   |
| 16   | 40209   |
| 17   | 40058   |
| 18   | 40035   |
| 21   | 40532   |
| 22   | 40331   |
| 25   | 40144   |
+------+---------+
0: jdbc:luciddb:> select count(distinct "k100") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 100     |
+---------+
0: jdbc:luciddb:> select "k100", count(*) from bench1m group by "k100" having count(*) > 10150
. . . . . . . . >     order by "k100";
+-------+---------+
| k100  | EXPR$1  |
+-------+---------+
| 7     | 10164   |
| 34    | 10202   |
| 37    | 10162   |
| 60    | 10173   |
| 61    | 10173   |
| 65    | 10184   |
| 66    | 10190   |
| 91    | 10160   |
+-------+---------+
0: jdbc:luciddb:> select count(distinct "k1k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 1000    |
+---------+
0: jdbc:luciddb:> select "k1k", count(*) from bench1m group by "k1k" having count(*) > 1080
. . . . . . . . >     order by "k1k";
+------+---------+
| k1k  | EXPR$1  |
+------+---------+
| 247  | 1094    |
| 362  | 1097    |
| 367  | 1088    |
| 390  | 1095    |
| 464  | 1084    |
| 470  | 1085    |
| 571  | 1087    |
| 732  | 1089    |
| 786  | 1087    |
| 986  | 1087    |
+------+---------+
0: jdbc:luciddb:> select count(distinct "k10k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 10000   |
+---------+
0: jdbc:luciddb:> select "k10k", count(*) from bench1m group by "k10k" having count(*) > 130
. . . . . . . . >     order by "k10k";
+-------+---------+
| k10k  | EXPR$1  |
+-------+---------+
| 717   | 132     |
| 794   | 133     |
| 1299  | 134     |
| 1603  | 131     |
| 4131  | 134     |
| 4675  | 134     |
| 4687  | 131     |
| 4722  | 131     |
| 5086  | 134     |
| 5599  | 135     |
| 5860  | 133     |
| 7364  | 132     |
| 7715  | 131     |
| 8361  | 131     |
| 9752  | 133     |
+-------+---------+
0: jdbc:luciddb:> select count(distinct "k40k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 40000   |
+---------+
0: jdbc:luciddb:> select "k40k", count(*) from bench1m group by "k40k" having count(*) > 45
. . . . . . . . >     order by "k40k";
+--------+---------+
|  k40k  | EXPR$1  |
+--------+---------+
| 683    | 46      |
| 2765   | 46      |
| 16980  | 47      |
| 18680  | 47      |
| 30220  | 49      |
| 37574  | 46      |
+--------+---------+
0: jdbc:luciddb:> select count(distinct "k100k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 99994   |
+---------+
0: jdbc:luciddb:> select "k100k", count(*) from bench1m group by "k100k" having count(*) > 23
. . . . . . . . >     order by "k100k";
+--------+---------+
| k100k  | EXPR$1  |
+--------+---------+
| 128    | 26      |
| 3909   | 25      |
| 10939  | 25      |
| 39014  | 24      |
| 43456  | 24      |
| 50339  | 24      |
| 55030  | 26      |
| 56624  | 24      |
| 68837  | 24      |
| 70658  | 24      |
| 74109  | 24      |
| 79404  | 24      |
| 85831  | 24      |
| 91856  | 24      |
| 97654  | 24      |
+--------+---------+
0: jdbc:luciddb:> select count(distinct "k250k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 245439  |
+---------+
0: jdbc:luciddb:> select "k250k", count(*) from bench1m group by "k250k" having count(*) > 14
. . . . . . . . >     order by "k250k";
+---------+---------+
|  k250k  | EXPR$1  |
+---------+---------+
| 46027   | 15      |
| 46965   | 15      |
| 110323  | 15      |
| 170989  | 15      |
| 229676  | 16      |
+---------+---------+
0: jdbc:luciddb:> select count(distinct "k500k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 432041  |
+---------+
0: jdbc:luciddb:> select "k500k", count(*) from bench1m group by "k500k" having count(*) > 10
. . . . . . . . >     order by "k500k";
+--------+---------+
| k500k  | EXPR$1  |
+--------+---------+
| 10829  | 11      |
+--------+---------+
0: jdbc:luciddb:> 
0: jdbc:luciddb:> -- delete some random records and then rerun the count queries
0: jdbc:luciddb:> delete from bench1m where 
. . . . . . . . >     "kseq" in (1, 2, 5, 7, 10, 17, 24, 885, 3201, 9708, 12024, 191842, 612844);
0: jdbc:luciddb:> select count(distinct "kseq") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 999987  |
+---------+
0: jdbc:luciddb:> select "k2", count(*) from bench1m group by "k2" order by "k2";
+-----+---------+
| k2  | EXPR$1  |
+-----+---------+
| 1   | 499595  |
| 2   | 500392  |
+-----+---------+
0: jdbc:luciddb:> select "k4", count(*) from bench1m group by "k4" order by "k4";
+-----+---------+
| k4  | EXPR$1  |
+-----+---------+
| 1   | 249499  |
| 2   | 249720  |
| 3   | 249955  |
| 4   | 250813  |
+-----+---------+
0: jdbc:luciddb:> select "k5", count(*) from bench1m group by "k5" order by "k5";
+-----+---------+
| k5  | EXPR$1  |
+-----+---------+
| 1   | 199421  |
| 2   | 200425  |
| 3   | 200032  |
| 4   | 199959  |
| 5   | 200150  |
+-----+---------+
0: jdbc:luciddb:> select "k10", count(*) from bench1m group by "k10" order by "k10";
+------+---------+
| k10  | EXPR$1  |
+------+---------+
| 1    | 99867   |
| 2    | 100499  |
| 3    | 99947   |
| 4    | 99857   |
| 5    | 99841   |
| 6    | 100037  |
| 7    | 100017  |
| 8    | 100146  |
| 9    | 99958   |
| 10   | 99818   |
+------+---------+
0: jdbc:luciddb:> select count(distinct "k25") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 25      |
+---------+
0: jdbc:luciddb:> select "k25", count(*) from bench1m group by "k25" having count(*) > 40000
. . . . . . . . >     order by "k25";
+------+---------+
| k25  | EXPR$1  |
+------+---------+
| 1    | 40163   |
| 2    | 40089   |
| 4    | 40421   |
| 8    | 40138   |
| 11   | 40180   |
| 12   | 40013   |
| 16   | 40209   |
| 17   | 40057   |
| 18   | 40035   |
| 21   | 40532   |
| 22   | 40331   |
| 25   | 40143   |
+------+---------+
0: jdbc:luciddb:> select count(distinct "k100") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 100     |
+---------+
0: jdbc:luciddb:> select "k100", count(*) from bench1m group by "k100" having count(*) > 10150
. . . . . . . . >     order by "k100";
+-------+---------+
| k100  | EXPR$1  |
+-------+---------+
| 7     | 10164   |
| 34    | 10202   |
| 37    | 10162   |
| 60    | 10173   |
| 61    | 10172   |
| 65    | 10184   |
| 66    | 10190   |
| 91    | 10160   |
+-------+---------+
0: jdbc:luciddb:> select count(distinct "k1k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 1000    |
+---------+
0: jdbc:luciddb:> select "k1k", count(*) from bench1m group by "k1k" having count(*) > 1080
. . . . . . . . >     order by "k1k";
+------+---------+
| k1k  | EXPR$1  |
+------+---------+
| 247  | 1094    |
| 362  | 1097    |
| 367  | 1088    |
| 390  | 1095    |
| 464  | 1084    |
| 470  | 1085    |
| 571  | 1087    |
| 732  | 1089    |
| 786  | 1087    |
| 986  | 1087    |
+------+---------+
0: jdbc:luciddb:> select count(distinct "k10k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 10000   |
+---------+
0: jdbc:luciddb:> select "k10k", count(*) from bench1m group by "k10k" having count(*) > 130
. . . . . . . . >     order by "k10k";
+-------+---------+
| k10k  | EXPR$1  |
+-------+---------+
| 717   | 132     |
| 794   | 133     |
| 1299  | 134     |
| 1603  | 131     |
| 4131  | 134     |
| 4675  | 134     |
| 4687  | 131     |
| 4722  | 131     |
| 5086  | 134     |
| 5599  | 135     |
| 5860  | 133     |
| 7364  | 132     |
| 7715  | 131     |
| 8361  | 131     |
| 9752  | 133     |
+-------+---------+
0: jdbc:luciddb:> select count(distinct "k40k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 40000   |
+---------+
0: jdbc:luciddb:> select "k40k", count(*) from bench1m group by "k40k" having count(*) > 45
. . . . . . . . >     order by "k40k";
+--------+---------+
|  k40k  | EXPR$1  |
+--------+---------+
| 683    | 46      |
| 2765   | 46      |
| 16980  | 47      |
| 18680  | 47      |
| 30220  | 49      |
| 37574  | 46      |
+--------+---------+
0: jdbc:luciddb:> select count(distinct "k100k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 99994   |
+---------+
0: jdbc:luciddb:> select "k100k", count(*) from bench1m group by "k100k" having count(*) > 23
. . . . . . . . >     order by "k100k";
+--------+---------+
| k100k  | EXPR$1  |
+--------+---------+
| 128    | 26      |
| 3909   | 25      |
| 10939  | 25      |
| 39014  | 24      |
| 43456  | 24      |
| 50339  | 24      |
| 55030  | 26      |
| 56624  | 24      |
| 68837  | 24      |
| 70658  | 24      |
| 74109  | 24      |
| 79404  | 24      |
| 85831  | 24      |
| 91856  | 24      |
| 97654  | 24      |
+--------+---------+
0: jdbc:luciddb:> select count(distinct "k250k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 245439  |
+---------+
0: jdbc:luciddb:> select "k250k", count(*) from bench1m group by "k250k" having count(*) > 14
. . . . . . . . >     order by "k250k";
+---------+---------+
|  k250k  | EXPR$1  |
+---------+---------+
| 46027   | 15      |
| 46965   | 15      |
| 110323  | 15      |
| 170989  | 15      |
| 229676  | 16      |
+---------+---------+
0: jdbc:luciddb:> select count(distinct "k500k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 432038  |
+---------+
0: jdbc:luciddb:> select "k500k", count(*) from bench1m group by "k500k" having count(*) > 10
. . . . . . . . >     order by "k500k";
+--------+---------+
| k500k  | EXPR$1  |
+--------+---------+
| 10829  | 11      |
+--------+---------+
0: jdbc:luciddb:> 
0: jdbc:luciddb:> -- delete a larger number of records, then rerun the count queries
0: jdbc:luciddb:> delete from bench1m where
. . . . . . . . >     "k100" = 1 or "k1k" = 1 or "k10k" = 1 or "k40k" = 1 or "k100k" = 1 or
. . . . . . . . >     "k250k" = 1 or "k500k" = 1 or "kseq" = 1;
0: jdbc:luciddb:> select count(distinct "kseq") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 988746  |
+---------+
0: jdbc:luciddb:> select "k2", count(*) from bench1m group by "k2" order by "k2";
+-----+---------+
| k2  | EXPR$1  |
+-----+---------+
| 1   | 493997  |
| 2   | 494749  |
+-----+---------+
0: jdbc:luciddb:> select "k4", count(*) from bench1m group by "k4" order by "k4";
+-----+---------+
| k4  | EXPR$1  |
+-----+---------+
| 1   | 246702  |
| 2   | 246974  |
| 3   | 247164  |
| 4   | 247906  |
+-----+---------+
0: jdbc:luciddb:> select "k5", count(*) from bench1m group by "k5" order by "k5";
+-----+---------+
| k5  | EXPR$1  |
+-----+---------+
| 1   | 197143  |
| 2   | 198192  |
| 3   | 197787  |
| 4   | 197684  |
| 5   | 197940  |
+-----+---------+
0: jdbc:luciddb:> select "k10", count(*) from bench1m group by "k10" order by "k10";
+------+---------+
| k10  | EXPR$1  |
+------+---------+
| 1    | 98765   |
| 2    | 99452   |
| 3    | 98823   |
| 4    | 98711   |
| 5    | 98695   |
| 6    | 98942   |
| 7    | 98858   |
| 8    | 99044   |
| 9    | 98773   |
| 10   | 98683   |
+------+---------+
0: jdbc:luciddb:> select count(distinct "k25") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 25      |
+---------+
0: jdbc:luciddb:> select "k25", count(*) from bench1m group by "k25" having count(*) > 40000
. . . . . . . . >     order by "k25";
+------+---------+
| k25  | EXPR$1  |
+------+---------+
| 21   | 40091   |
+------+---------+
0: jdbc:luciddb:> select count(distinct "k100") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 99      |
+---------+
0: jdbc:luciddb:> select "k100", count(*) from bench1m group by "k100" having count(*) > 10150
. . . . . . . . >     order by "k100";
+-------+---------+
| k100  | EXPR$1  |
+-------+---------+
| 7     | 10154   |
| 34    | 10188   |
| 60    | 10157   |
| 61    | 10162   |
| 65    | 10172   |
| 66    | 10180   |
+-------+---------+
0: jdbc:luciddb:> select count(distinct "k1k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 999     |
+---------+
0: jdbc:luciddb:> select "k1k", count(*) from bench1m group by "k1k" having count(*) > 1080
. . . . . . . . >     order by "k1k";
+------+---------+
| k1k  | EXPR$1  |
+------+---------+
| 362  | 1086    |
| 390  | 1086    |
+------+---------+
0: jdbc:luciddb:> select count(distinct "k10k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 9999    |
+---------+
0: jdbc:luciddb:> select "k10k", count(*) from bench1m group by "k10k" having count(*) > 130
. . . . . . . . >     order by "k10k";
+-------+---------+
| k10k  | EXPR$1  |
+-------+---------+
| 794   | 133     |
| 1299  | 132     |
| 1603  | 131     |
| 4131  | 133     |
| 4675  | 134     |
| 4687  | 131     |
| 5086  | 133     |
| 5599  | 134     |
| 5860  | 133     |
| 7364  | 131     |
| 7715  | 131     |
| 8361  | 131     |
| 9752  | 132     |
+-------+---------+
0: jdbc:luciddb:> select count(distinct "k40k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 39999   |
+---------+
0: jdbc:luciddb:> select "k40k", count(*) from bench1m group by "k40k" having count(*) > 45
. . . . . . . . >     order by "k40k";
+--------+---------+
|  k40k  | EXPR$1  |
+--------+---------+
| 16980  | 46      |
| 30220  | 49      |
| 37574  | 46      |
+--------+---------+
0: jdbc:luciddb:> select count(distinct "k100k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 99992   |
+---------+
0: jdbc:luciddb:> select "k100k", count(*) from bench1m group by "k100k" having count(*) > 23
. . . . . . . . >     order by "k100k";
+--------+---------+
| k100k  | EXPR$1  |
+--------+---------+
| 128    | 26      |
| 3909   | 24      |
| 10939  | 24      |
| 39014  | 24      |
| 43456  | 24      |
| 50339  | 24      |
| 55030  | 26      |
| 68837  | 24      |
| 74109  | 24      |
| 79404  | 24      |
| 85831  | 24      |
| 91856  | 24      |
+--------+---------+
0: jdbc:luciddb:> select count(distinct "k250k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 245203  |
+---------+
0: jdbc:luciddb:> select "k250k", count(*) from bench1m group by "k250k" having count(*) > 14
. . . . . . . . >     order by "k250k";
+---------+---------+
|  k250k  | EXPR$1  |
+---------+---------+
| 46027   | 15      |
| 46965   | 15      |
| 110323  | 15      |
| 170989  | 15      |
| 229676  | 16      |
+---------+---------+
0: jdbc:luciddb:> select count(distinct "k500k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 430509  |
+---------+
0: jdbc:luciddb:> select "k500k", count(*) from bench1m group by "k500k" having count(*) > 9
. . . . . . . . >     order by "k500k";
+---------+---------+
|  k500k  | EXPR$1  |
+---------+---------+
| 10829   | 10      |
| 63121   | 10      |
| 95126   | 10      |
| 123777  | 10      |
| 130844  | 10      |
| 153862  | 10      |
| 158772  | 10      |
| 172262  | 10      |
| 178363  | 10      |
| 195828  | 10      |
| 208734  | 10      |
| 232943  | 10      |
| 291510  | 10      |
| 297788  | 10      |
| 307768  | 10      |
| 311715  | 10      |
| 341786  | 10      |
| 356666  | 10      |
| 365791  | 10      |
| 384892  | 10      |
+---------+---------+
0: jdbc:luciddb:> 
0: jdbc:luciddb:> -- delete some more records, and rerun the count queries
0: jdbc:luciddb:> delete from bench1m where
. . . . . . . . >     "k100" = 99 or "k1k" = 99 or "k10k" = 99 or "k40k" = 99 or
. . . . . . . . >     "k100k" = 99 or "k250k" = 99 or "k500k" = 99 or "kseq" = 99;
0: jdbc:luciddb:> select count(distinct "kseq") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 977778  |
+---------+
0: jdbc:luciddb:> select "k2", count(*) from bench1m group by "k2" order by "k2";
+-----+---------+
| k2  | EXPR$1  |
+-----+---------+
| 1   | 488540  |
| 2   | 489238  |
+-----+---------+
0: jdbc:luciddb:> select "k4", count(*) from bench1m group by "k4" order by "k4";
+-----+---------+
| k4  | EXPR$1  |
+-----+---------+
| 1   | 243981  |
| 2   | 244218  |
| 3   | 244422  |
| 4   | 245157  |
+-----+---------+
0: jdbc:luciddb:> select "k5", count(*) from bench1m group by "k5" order by "k5";
+-----+---------+
| k5  | EXPR$1  |
+-----+---------+
| 1   | 195000  |
| 2   | 196055  |
| 3   | 195612  |
| 4   | 195382  |
| 5   | 195729  |
+-----+---------+
0: jdbc:luciddb:> select "k10", count(*) from bench1m group by "k10" order by "k10";
+------+---------+
| k10  | EXPR$1  |
+------+---------+
| 1    | 97682   |
| 2    | 98382   |
| 3    | 97744   |
| 4    | 97629   |
| 5    | 97630   |
| 6    | 97841   |
| 7    | 97720   |
| 8    | 97945   |
| 9    | 97673   |
| 10   | 97532   |
+------+---------+
0: jdbc:luciddb:> select count(distinct "k25") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 25      |
+---------+
0: jdbc:luciddb:> select "k25", count(*) from bench1m group by "k25" having count(*) > 39000
. . . . . . . . >     order by "k25";
+------+---------+
| k25  | EXPR$1  |
+------+---------+
| 1    | 39327   |
| 2    | 39233   |
| 4    | 39555   |
| 5    | 39103   |
| 7    | 39119   |
| 8    | 39230   |
| 9    | 39072   |
| 10   | 39003   |
| 11   | 39302   |
| 12   | 39112   |
| 16   | 39320   |
| 17   | 39143   |
| 18   | 39134   |
| 21   | 39607   |
| 22   | 39427   |
| 23   | 39013   |
| 25   | 39212   |
+------+---------+
0: jdbc:luciddb:> select count(distinct "k100") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 98      |
+---------+
0: jdbc:luciddb:> select "k100", count(*) from bench1m group by "k100" having count(*) > 10150
. . . . . . . . >     order by "k100";
+-------+---------+
| k100  | EXPR$1  |
+-------+---------+
| 34    | 10176   |
| 65    | 10158   |
| 66    | 10169   |
+-------+---------+
0: jdbc:luciddb:> select count(distinct "k1k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 998     |
+---------+
0: jdbc:luciddb:> select "k1k", count(*) from bench1m group by "k1k" having count(*) > 1070
. . . . . . . . >     order by "k1k";
+------+---------+
| k1k  | EXPR$1  |
+------+---------+
| 362  | 1076    |
| 390  | 1071    |
+------+---------+
0: jdbc:luciddb:> select count(distinct "k10k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 9998    |
+---------+
0: jdbc:luciddb:> select "k10k", count(*) from bench1m group by "k10k" having count(*) > 130
. . . . . . . . >     order by "k10k";
+-------+---------+
| k10k  | EXPR$1  |
+-------+---------+
| 794   | 132     |
| 1603  | 131     |
| 4131  | 133     |
| 4675  | 131     |
| 5599  | 132     |
| 5860  | 133     |
+-------+---------+
0: jdbc:luciddb:> select count(distinct "k40k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 39998   |
+---------+
0: jdbc:luciddb:> select "k40k", count(*) from bench1m group by "k40k" having count(*) > 45
. . . . . . . . >     order by "k40k";
+--------+---------+
|  k40k  | EXPR$1  |
+--------+---------+
| 30220  | 48      |
| 37574  | 46      |
+--------+---------+
0: jdbc:luciddb:> select count(distinct "k100k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 99991   |
+---------+
0: jdbc:luciddb:> select "k100k", count(*) from bench1m group by "k100k" having count(*) > 23
. . . . . . . . >     order by "k100k";
+--------+---------+
| k100k  | EXPR$1  |
+--------+---------+
| 128    | 26      |
| 3909   | 24      |
| 39014  | 24      |
| 50339  | 24      |
| 55030  | 26      |
| 68837  | 24      |
| 74109  | 24      |
| 79404  | 24      |
| 85831  | 24      |
| 91856  | 24      |
+--------+---------+
0: jdbc:luciddb:> select count(distinct "k250k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 244974  |
+---------+
0: jdbc:luciddb:> select "k250k", count(*) from bench1m group by "k250k" having count(*) > 14
. . . . . . . . >     order by "k250k";
+---------+---------+
|  k250k  | EXPR$1  |
+---------+---------+
| 46027   | 15      |
| 46965   | 15      |
| 110323  | 15      |
| 170989  | 15      |
| 229676  | 16      |
+---------+---------+
0: jdbc:luciddb:> select count(distinct "k500k") from bench1m;
+---------+
| EXPR$0  |
+---------+
| 429013  |
+---------+
0: jdbc:luciddb:> select "k500k", count(*) from bench1m group by "k500k" having count(*) > 9
. . . . . . . . >     order by "k500k";
+---------+---------+
|  k500k  | EXPR$1  |
+---------+---------+
| 10829   | 10      |
| 63121   | 10      |
| 95126   | 10      |
| 123777  | 10      |
| 130844  | 10      |
| 158772  | 10      |
| 172262  | 10      |
| 178363  | 10      |
| 195828  | 10      |
| 208734  | 10      |
| 232943  | 10      |
| 291510  | 10      |
| 307768  | 10      |
| 311715  | 10      |
| 341786  | 10      |
| 356666  | 10      |
| 365791  | 10      |
| 384892  | 10      |
+---------+---------+
0: jdbc:luciddb:> 
0: jdbc:luciddb:> -------------------------------------------------------------------
0: jdbc:luciddb:> -- Verify that index-only scans are being used in the queries above
0: jdbc:luciddb:> -------------------------------------------------------------------
0: jdbc:luciddb:> 
0: jdbc:luciddb:> !set outputformat csv
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select count(distinct "kseq") from bench1m;
'column0'
'FennelToIteratorConverter'
'  FennelAggRel(groupCount=[0], EXPR$0=[COUNT($0)])'
'    LcsIndexAggRel(groupCount=[1])'
'      LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$BENCH1M], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select "k2", count(*) from bench1m group by "k2";
'column0'
'FennelToIteratorConverter'
'  LcsIndexAggRel(groupCount=[1], EXPR$1=[COUNT()])'
'    LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK2], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select "k4", count(*) from bench1m group by "k4";
'column0'
'FennelToIteratorConverter'
'  LcsIndexAggRel(groupCount=[1], EXPR$1=[COUNT()])'
'    LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK4], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select "k5", count(*) from bench1m group by "k5";
'column0'
'FennelToIteratorConverter'
'  LcsIndexAggRel(groupCount=[1], EXPR$1=[COUNT()])'
'    LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK5], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select "k10", count(*) from bench1m group by "k10";
'column0'
'FennelToIteratorConverter'
'  LcsIndexAggRel(groupCount=[1], EXPR$1=[COUNT()])'
'    LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK10], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select count(distinct "k25") from bench1m;
'column0'
'FennelToIteratorConverter'
'  FennelAggRel(groupCount=[0], EXPR$0=[COUNT($0)])'
'    LcsIndexAggRel(groupCount=[1])'
'      LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK25], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select "k25", count(*) from bench1m group by "k25" having count(*) > 39000;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1]], filterOp=[COMP_GT], filterOrdinals=[[1]], filterTuple=[[39000]], outputRowType=[RecordType(BIGINT k25, BIGINT NOT NULL EXPR$1) NOT NULL])'
'    LcsIndexAggRel(groupCount=[1], EXPR$1=[COUNT()])'
'      LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK25], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select count(distinct "k100") from bench1m;
'column0'
'FennelToIteratorConverter'
'  FennelAggRel(groupCount=[0], EXPR$0=[COUNT($0)])'
'    LcsIndexAggRel(groupCount=[1])'
'      LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK100], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select "k100", count(*) from bench1m group by "k100"
. . . . . . . . >     having count(*) > 10150;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1]], filterOp=[COMP_GT], filterOrdinals=[[1]], filterTuple=[[10150]], outputRowType=[RecordType(BIGINT k100, BIGINT NOT NULL EXPR$1) NOT NULL])'
'    LcsIndexAggRel(groupCount=[1], EXPR$1=[COUNT()])'
'      LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK100], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select count(distinct "k1k") from bench1m;
'column0'
'FennelToIteratorConverter'
'  FennelAggRel(groupCount=[0], EXPR$0=[COUNT($0)])'
'    LcsIndexAggRel(groupCount=[1])'
'      LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK1K], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select "k1k", count(*) from bench1m group by "k1k" having count(*) > 1070;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1]], filterOp=[COMP_GT], filterOrdinals=[[1]], filterTuple=[[1070]], outputRowType=[RecordType(BIGINT k1k, BIGINT NOT NULL EXPR$1) NOT NULL])'
'    LcsIndexAggRel(groupCount=[1], EXPR$1=[COUNT()])'
'      LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK1K], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select count(distinct "k10k") from bench1m;
'column0'
'FennelToIteratorConverter'
'  FennelAggRel(groupCount=[0], EXPR$0=[COUNT($0)])'
'    LcsIndexAggRel(groupCount=[1])'
'      LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK10K], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select "k10k", count(*) from bench1m group by "k10k" having count(*) > 130;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1]], filterOp=[COMP_GT], filterOrdinals=[[1]], filterTuple=[[130]], outputRowType=[RecordType(BIGINT k10k, BIGINT NOT NULL EXPR$1) NOT NULL])'
'    LcsIndexAggRel(groupCount=[1], EXPR$1=[COUNT()])'
'      LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK10K], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select count(distinct "k40k") from bench1m;
'column0'
'FennelToIteratorConverter'
'  FennelAggRel(groupCount=[0], EXPR$0=[COUNT($0)])'
'    LcsIndexAggRel(groupCount=[1])'
'      LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK40K], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select "k40k", count(*) from bench1m group by "k40k" having count(*) > 45;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1]], filterOp=[COMP_GT], filterOrdinals=[[1]], filterTuple=[[45]], outputRowType=[RecordType(BIGINT k40k, BIGINT NOT NULL EXPR$1) NOT NULL])'
'    LcsIndexAggRel(groupCount=[1], EXPR$1=[COUNT()])'
'      LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK40K], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select count(distinct "k100k") from bench1m;
'column0'
'FennelToIteratorConverter'
'  FennelAggRel(groupCount=[0], EXPR$0=[COUNT($0)])'
'    LcsIndexAggRel(groupCount=[1])'
'      LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK100K], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select "k100k", count(*) from bench1m group by "k100k" having count(*) > 23;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1]], filterOp=[COMP_GT], filterOrdinals=[[1]], filterTuple=[[23]], outputRowType=[RecordType(BIGINT k100k, BIGINT NOT NULL EXPR$1) NOT NULL])'
'    LcsIndexAggRel(groupCount=[1], EXPR$1=[COUNT()])'
'      LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK100K], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select count(distinct "k250k") from bench1m;
'column0'
'FennelToIteratorConverter'
'  FennelAggRel(groupCount=[0], EXPR$0=[COUNT($0)])'
'    LcsIndexAggRel(groupCount=[1])'
'      LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK250K], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select "k250k", count(*) from bench1m group by "k250k" having count(*) > 14;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1]], filterOp=[COMP_GT], filterOrdinals=[[1]], filterTuple=[[14]], outputRowType=[RecordType(BIGINT k250k, BIGINT NOT NULL EXPR$1) NOT NULL])'
'    LcsIndexAggRel(groupCount=[1], EXPR$1=[COUNT()])'
'      LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK250K], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select count(distinct "k500k") from bench1m;
'column0'
'FennelToIteratorConverter'
'  FennelAggRel(groupCount=[0], EXPR$0=[COUNT($0)])'
'    LcsIndexAggRel(groupCount=[1])'
'      LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK500K], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> explain plan for
. . . . . . . . >     select "k500k", count(*) from bench1m group by "k500k" having count(*) > 9;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1]], filterOp=[COMP_GT], filterOrdinals=[[1]], filterTuple=[[9]], outputRowType=[RecordType(BIGINT k500k, BIGINT NOT NULL EXPR$1) NOT NULL])'
'    LcsIndexAggRel(groupCount=[1], EXPR$1=[COUNT()])'
'      LcsIndexOnlyScanRel(table=[[LOCALDB, IDXONLYSCAN, BENCH1M]], index=[IK500K], projection=[[0, 1, 2, 3]])'
0: jdbc:luciddb:> 
0: jdbc:luciddb:> !quit
