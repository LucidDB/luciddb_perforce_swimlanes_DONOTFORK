-- Tests for db admin views

create schema dbavtest;
set schema 'dbavtest';

-- misc adding udf
create function adding(numA int, decA decimal(10,2))
returns decimal(10,2)
language sql
contains sql
return (numA + decA);

-- create procedure in DBAVTEST
create or replace procedure grant_select_for_schema(
in schemaname varchar(255), 
in username varchar(255))
language java
parameter style java
reads sql data
external name 'applib.applibJar:com.lucidera.luciddb.applib.security.GrantSelectForSchemaUdp.execute';

-- dba_routines & routine parameters
select catalog_name, schema_name, invocation_name, specific_name, 
  external_name, routine_type, is_table_function, parameter_style,
  is_deterministic, data_access
from sys_root.dba_routines
where schema_name='DBAVTEST'
order by 1,2,3,4;

select creation_timestamp < current_timestamp, 
  creation_timestamp <= last_modified_timestamp
from sys_root.dba_routines
where schema_name='DBAVTEST';

select routine_specific_name, parameter_name, ordinal_position, datatype, "PRECISION",
  dec_digits
from sys_root.dba_routine_parameters
where schema_name='DBAVTEST'
order by 1,3,2;

select count(distinct mof_id) 
from sys_root.dba_routine_parameters
where schema_name='DBAVTEST';

-- dba_functions and dba_function parameters
select catalog_name, schema_name, invocation_name, specific_name, 
  external_name, routine_type, is_table_function, parameter_style,
  is_deterministic, data_access
from sys_root.dba_functions
where schema_name='DBAVTEST'
order by 1,2,3,4;

select routine_specific_name, parameter_name, ordinal_position, datatype, "PRECISION",
  dec_digits
from sys_root.dba_function_parameters
where schema_name='DBAVTEST'
order by 1,3,2;

-- dba_schemas
create schema tt;

select catalog_name, schema_name
from sys_root.dba_schemas 
where schema_name='TT';

drop schema tt;

select catalog_name, schema_name
from sys_root.dba_schemas
where schema_name='TT';

-- dba_foreign_wrappers and dba_foreign_wrapper_options
create foreign data wrapper dbatest_ff_jdbc
library 'class net.sf.farrago.namespace.flatfile.FlatFileDataWrapper'
language java
options ( random_opt1 'random_opt_value');

select foreign_wrapper_name, library, "LANGUAGE"
from sys_root.dba_foreign_wrappers
where foreign_wrapper_name = 'DBATEST_FF_JDBC';

select foreign_wrapper_name, option_name, option_value
from sys_root.dba_foreign_wrapper_options
where foreign_wrapper_name = 'DBATEST_FF_JDBC';

-- dba_foreign_servers and dba_foreign_server_options
create server dbatest_ff_server
foreign data wrapper dbatest_ff_jdbc
options(    
    directory '@DIR@',
    file_extension '.csv',
    ctrl_file_extension '.bcp',
    field_delimiter ',',
    line_delimiter '\n',
    quote_char '"',
    escape_char '',
    with_header 'yes',
    num_rows_scan '1'
);

select foreign_wrapper_name, foreign_server_name, 
  creation_timestamp <= last_modified_timestamp
from sys_root.dba_foreign_servers
where foreign_wrapper_name='DBATEST_FF_JDBC';

select foreign_server_name, option_name, option_value
from sys_root.dba_foreign_server_options
where foreign_wrapper_name='DBATEST_FF_JDBC'
  and option_name <> 'DIRECTORY'
order by 1,2;

-- dba_foreign_tables and dba_foreign_table_options
create foreign table EMPS
server dbatest_ff_server
options(
SCHEMA_NAME 'BCP',
filename 'EMP'
);

analyze table EMPS compute statistics for all columns;

select foreign_server_name, foreign_table_name, 
  last_analyze_timestamp >= creation_timestamp
from sys_root.dba_foreign_tables
where foreign_wrapper_name='DBATEST_FF_JDBC';

select foreign_table_name, option_name, option_value
from sys_root.dba_foreign_table_options
where foreign_server_name='DBATEST_FF_SERVER'
order by 1,2;

-- dba_tables, dba_views, dba_stored_tables
create table dbavtest.table1(col1 int, col2 int default 3);

create view dbavtest.empview as 
select * from dbavtest.emps;

select catalog_name, schema_name, table_name, table_type
from sys_root.dba_tables
where schema_name='DBAVTEST'
order by table_name;

select count(distinct lineage_Id)
from sys_root.dba_tables
where schema_name='DBAVTEST';

select catalog_name, view_name, original_text
from sys_root.dba_views
where schema_name='DBAVTEST';

select table_name, last_analyze_row_count, 
  last_analyze_timestamp > creation_timestamp
from sys_root.dba_stored_tables
where schema_name='DBAVTEST'
order by 1;

-- dba_columns
select catalog_name, table_name, column_name, ordinal_position, datatype,
  "PRECISION", dec_digits, is_nullable, default_value
from sys_root.dba_columns
where schema_name='DBAVTEST'
order by 2,4;

-- dba_unclustered_indexes
create table dbavtest.table2(col1 int, col2 int, col3 int, col4 int, col5 int,
    col6 int,
    primary key(col6, col2),
    unique(col5, col1, col3));
create index i_table2_1 on dbavtest.table2(col2);
create index i_table2_2 on dbavtest.table2(col4, col1, col6);

select catalog_name, index_name, table_name, index_column_names, is_unique
    from sys_root.dba_unclustered_indexes
    where schema_name = 'DBAVTEST'
    order by 2;

-- dba_users
select name from sys_root.dba_users where name = 'BOBBYTABLES';
create user bobbytables;
select name from sys_root.dba_users where name = 'BOBBYTABLES';

-- dba_roles
select name from sys_root.dba_roles where name = 'TUV';
create role tuv;
select name from sys_root.dba_roles where name = 'TUV';

-- dba_element_grants
create table dbavtest.luvtuv(gluv int);
grant select on dbavtest.luvtuv to tuv;
select granted_schema, granted_element, grantee, action,
  grant_type
from sys_root.dba_element_grants
where granted_schema = 'DBAVTEST' and granted_element = 'LUVTUV' and
grantee = 'TUV' and action = 'SELECT' and grant_type = 'Role';

grant role tuv to bobbytables;

select grantee, action,
case
  when r.role is not null then r.role
  when grant_type = 'Role' then grantee
end as role_name,
grant_type
from sys_root.dba_element_grants
left outer join sys_root.dba_user_roles r
on action = 'INHERIT_ROLE' and r.role_mof_id = element_mof_id
where grantee = 'BOBBYTABLES' and action = 'INHERIT_ROLE' and
r.role = 'TUV' and grant_type = 'User';

create or replace function mult(n1 int, n2 int)
returns int
language sql
contains sql
return n1 * n2;

grant execute on specific function mult to tuv;
select granted_element, action, class_name
from sys_root.dba_element_grants
where granted_element = 'MULT' and action = 'EXECUTE' and class_name='Routine';
drop function mult;

-- dba_user_roles
select name, role from sys_root.dba_user_roles where name='BOBBYTABLES' and
role='TUV';

drop user bobbytables;
select name from sys_root.dba_users where name = 'BOBBYTABLES';
drop role tuv;
select name from sys_root.dba_roles where name = 'TUV';
select grantee from sys_root.dba_element_grants where grantee in ('TUV', 'BOBBYTABLES');
select name, role from sys_root.dba_user_roles where name='BOBBYTABLES' and
role='TUV';

-- dba_jars
select name, url, deployed from sys_root.dba_jars where name = 'APPLIBJAR';

-- test creator field
create user lala authorization 'Unknown' Default schema DBAVTEST;

!closeall
!connect jdbc:luciddb: LALA ""

create table dbavtest.lalatable(lolo int);

!closeall
!connect jdbc:luciddb: sa ""

select catalog_name, schema_name, table_name, table_type, creator
from sys_root.dba_tables
where creator='LALA';

-- just check that these can execute for now 
select * from sys_root.dba_system_parameters where false;
select * from sys_root.dba_sessions where false;
select * from sys_root.dba_sql_statements where false;
select * from sys_root.dba_repository_properties where false;
select * from sys_root.dba_repository_integrity_violations where false;
select * from sys_root.dba_objects_in_use where false;
select * from sys_root.dba_threads where false;
select * from sys_root.dba_thread_stack_entries where false;
select * from sys_root.dba_performance_counters where false;
select * from sys_root.dba_system_info where false;
select * from sys_root.user_session_parameters where false;
select * from sys_root.dba_auth_ids where false;

-- NOTE: zfong 10/26/07 - Commented out the following test because it does not
-- yield reliable results depending on whether or not Blackhawk creates a
-- new LucidDB instance in the "!closeall" calls above.  Temp pages associated
-- with segment allocation nodes are no longer freed at the end of a statement
-- and are instead freed when LucidDB is shutdown.  Therefore, if a new
-- LucidDB instance is not created, the count below returns 1 instead of 0.
--
-- check if number of temp allocated pages is 0
-- alter system deallocate old;
-- select counter_name, counter_value
-- from sys_root.dba_performance_counters
-- where counter_name = 'TempPagesAllocated';

-- LER-9476 -- make sure replacing the data server doesn't reset row counts
create schema s;
set schema 's';
create table rc(a int);
insert into rc values(1),(2),(3);
delete from rc where a = 2;
select table_name, current_row_count, deleted_row_count
    from sys_root.dba_stored_tables where table_name = 'RC';
set schema 'sys_boot.sys_boot';
set path 'sys_boot.sys_boot';
create or replace server sys_column_store_data_server
local data wrapper sys_column_store;
-- these row counts should remain non-zero
select table_name, current_row_count, deleted_row_count
    from localdb.sys_root.dba_stored_tables where table_name = 'RC';
