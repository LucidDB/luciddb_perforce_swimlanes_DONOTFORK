<?xml version="1.0" encoding="UTF-8"?>
<!--
// $Id$
// LucidDB is a DBMS optimized for business intelligence.
// Copyright (C) 2005-2005 LucidEra, Inc.
// Copyright (C) 2005-2005 The Eigenbase Project
//
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version approved by The Eigenbase Project.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->

<project name="rwconcurrency" basedir="." default="test">
  <dirname property="rwconcurrency.dir" file="${ant.file.rwconcurrency}" />

  <property name="open.dir" location="${rwconcurrency.dir}/../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${rwconcurrency.dir}/gen" />

  <!-- directory of flat files -->
  <property name="ffsource.dir" value="${open.dir}/thirdparty/tpch/dataMultiProcess"/>
  <property name="ff.dir" value="${rwconcurrency.dir}/ff"/>

  <!-- directory of big ref files -->
  <property name="bigrefsource.url" value="http://file01.lucidera.com/engineering/testdata/TPCH"/>

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="create-db">
    <condition property="db.created">
      <available file="${ffsource.dir}/${datasize}" type="dir"/>
    </condition>

    <if>
      <istrue value="${db.created}"/>
      <then/>
      <else>
        <exec executable="${thirdparty.dir}/tpch/createdbMultiProcess"
          dir="${thirdparty.dir}/tpch">
          <arg line="${datasize}"/>
        </exec>
      </else>
    </if>

    <sync todir="${ff.dir}/${datasize}" verbose="true">
      <fileset dir="${ffsource.dir}/${datasize}"/>
    </sync>


    <!-- generates 10 flatfiles for each table -->
    <condition property="db.created10">
      <available file="${ffsource.dir}/${datasize}-10" type="dir"/>
    </condition>
    <if>
      <istrue value="${db.created10}"/>
      <then/>
      <else>
        <exec executable="${thirdparty.dir}/tpch/createdbMultiProcess"
          dir="${thirdparty.dir}/tpch">
          <arg line="${datasize} 10"/>
        </exec>
      </else>
    </if>

    <copy todir="${ff.dir}/${datasize}" verbose="true">
      <fileset dir="${ffsource.dir}/${datasize}-10"/>
    </copy>

  </target>

  <target name="copy-big-ref-files">
    <condition property="to.download">
      <and>
        <http url="${bigrefsource.url}" />
        <not>
          <available file="${rwconcurrency.dir}/tpch-throughput-readonly.100M"/>
        </not>
      </and>
    </condition>
    <if>
      <isset property="to.download"/>
      <then>
        <!-- copy raksha -> rwconcurrency.dir -->
        <echo message="Downloading from Raksha..."/>
        <exec dir="${rwconcurrency.dir}" executable="wget">
          <arg line="--reject .html -q -np -nH --cut-dirs=4 ${bigrefsource.url}/tpch-throughput-readonly.100M" />
        </exec>
        <echo message="...download complete"/>
      </then>
    </if>
  </target>

  <target name="gen-sql">
    <!-- copy over sql.tmpl and template reference files -->
    <copy todir="${gensql.dir}/${datasize.param}" overwrite="true">
      <fileset dir="${rwconcurrency.dir}">
        <include name="*.${datasize.param}"/>
        <include name="*.tmpl"/>
      </fileset>
      <compositemapper>
        <globmapper from="*.${datasize.param}" to="*.ref"/>
        <globmapper from="*.tmpl" to="*"/>
      </compositemapper>
      <filterset>
        <filter token="FFDIR" value="${ff.dir}/${datasize.param}"/>
        <filter token="DIR" value="${gensql.dir}/${datasize.param}"/>
        <filter token="TEST_DIR" value="${rwconcurrency.dir}"/>
      </filterset>
    </copy>

    <!-- copy over other sql and ref files -->
    <copy todir="${gensql.dir}/${datasize.param}" overwrite="true">
      <fileset dir="${rwconcurrency.dir}">
        <include name="*.sql"/>
        <include name="*.mtsql"/>
        <include name="*.ref"/>
      </fileset>
    </copy>

  </target>

  <property name="testlog.dir" value="${rwconcurrency.dir}"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql -->
    <foreach list="100M" param="datasize.param" target="gen-sql"/>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <property name="bh.log.basedir" value="${rwconcurrency.dir}/testlog" />
    <property name="bh.filter.runDuration" value="short,medium,null"/> 
    <property file="run.properties"/>
    <blackhawk.fork
      basedir="${rwconcurrency.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="create-archive-dirs">
    <mkdir dir="${rwconcurrency.dir}/fullArchive"/>
    <mkdir dir="${rwconcurrency.dir}/fullArchive2"/>
  </target>

  <target name="testBackupRestore" depends="clean-test,gen-all-sql,create-archive-dirs">
    <antcall target="backup"/>
    <antcall target="restoreBackup"/>
    <antcall target="validateRestore"/>
    <antcall target="cancelBackup"/>
  </target>
  
  <target name="backup">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-concurBackup" />
    <property file="run.properties"/>
    <blackhawk.fork
      basedir="${rwconcurrency.dir}"
      testscript="backup.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="restoreBackup">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-concurRestore" />
    <property file="run.properties"/>
    <ant dir="${open.dir}/luciddb" target="restoreCatalog"/>
    <blackhawk.fork
      basedir="${rwconcurrency.dir}"
      testscript="restoreBackup.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="validateRestore">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-concurValidate" />
    <property file="run.properties"/>
    <blackhawk.fork
      basedir="${rwconcurrency.dir}"
      testscript="validateRestore.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="cancelBackup">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-cancelBackup" />
    <property file="run.properties"/>
    <blackhawk.fork
      basedir="${rwconcurrency.dir}"
      testscript="cancelBackup.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete dir="${ff.dir}"/>
    <delete file="datasize"/>
    <delete file="run.properties"/>
    <delete file="tpch-throughput-readonly.100M"/>
  </target>

  <target name="clean-test">
    <delete dir="${rwconcurrency.dir}/testlog"/>
    <delete dir="${rwconcurrency.dir}/bh-concurBackup"/>
    <delete dir="${rwconcurrency.dir}/bh-concurRestore"/>
    <delete dir="${rwconcurrency.dir}/bh-concurValidate"/>
    <delete dir="${rwconcurrency.dir}/bh-cancelBackup"/>
    <delete dir="${gensql.dir}"/>
    <delete dir="${rwconcurrency.dir}/fullArchive"/>
    <delete dir="${rwconcurrency.dir}/fullArchive2"/>
  </target>

</project>
