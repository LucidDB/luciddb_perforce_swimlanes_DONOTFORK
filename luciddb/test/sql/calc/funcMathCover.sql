-- funcMathCover.sql
-- Cover all internal math functions in the calculator

set schema 's';

SELECT n2, ABS(n2) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, ABS(n3) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, ABS(n4) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, ABS(n5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, ABS(n1) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n2, ABS(n2) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n3, ABS(n3) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n4, ABS(n4) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n5, ABS(n5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n1, ABS(n1) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n2, ABS(n2) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n3, ABS(n3) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n4, ABS(n4) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n5, ABS(n5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n1, ACOS(n1) FROM TEST_INTEGER_TABLE WHERE n1 < 1 AND n1 > -1 ORDER BY 1;
SELECT n2, ACOS(n2) FROM TEST_INTEGER_TABLE WHERE n2 < 1 AND n2 > -1 ORDER BY 1;
SELECT n3, ACOS(n3) FROM TEST_INTEGER_TABLE WHERE n3 < 1 AND n3 > -1 ORDER BY 1;
SELECT n4, ACOS(n4) FROM TEST_INTEGER_TABLE WHERE n4 < 1 AND n4 > -1 ORDER BY 1;
SELECT n5, ACOS(n5) FROM TEST_INTEGER_TABLE WHERE n5 < 1 AND n5 > -1 ORDER BY 1;
SELECT n1, ACOS(n1) FROM TEST_NUMERIC_TABLE WHERE n1 < 1 AND n1 > -1 ORDER BY 1;
SELECT n2, ACOS(n2) FROM TEST_NUMERIC_TABLE WHERE n2 < 1 AND n2 > -1 ORDER BY 1;
SELECT n3, ACOS(n3) FROM TEST_NUMERIC_TABLE WHERE n3 < 1 AND n3 > -1 ORDER BY 1;
SELECT n4, ACOS(n4) FROM TEST_NUMERIC_TABLE WHERE n4 < 1 AND n4 > -1 ORDER BY 1;
SELECT n5, ACOS(n5) FROM TEST_NUMERIC_TABLE WHERE n5 < 1 AND n5 > -1 ORDER BY 1;
SELECT n1, ACOS(n1) FROM TEST_REAL_TABLE WHERE n1 < 1 AND n1 > -1 ORDER BY 1;
SELECT n2, ACOS(n2) FROM TEST_REAL_TABLE WHERE n2 < 1 AND n2 > -1 ORDER BY 1;
SELECT n3, ACOS(n3) FROM TEST_REAL_TABLE WHERE n3 < 1 AND n3 > -1 ORDER BY 1;
SELECT n4, ACOS(n4) FROM TEST_REAL_TABLE WHERE n4 < 1 AND n4 > -1 ORDER BY 1;
SELECT n5, ACOS(n5) FROM TEST_REAL_TABLE WHERE n5 < 1 AND n5 > -1 ORDER BY 1;
SELECT n1, ASIN(n1) FROM TEST_INTEGER_TABLE WHERE n1 < 1 AND n1 > -1 ORDER BY 1;
SELECT n2, ASIN(n2) FROM TEST_INTEGER_TABLE WHERE n2 < 1 AND n2 > -1 ORDER BY 1;
SELECT n3, ASIN(n3) FROM TEST_INTEGER_TABLE WHERE n3 < 1 AND n3 > -1 ORDER BY 1;
SELECT n4, ASIN(n4) FROM TEST_INTEGER_TABLE WHERE n4 < 1 AND n4 > -1 ORDER BY 1;
SELECT n5, ASIN(n5) FROM TEST_INTEGER_TABLE WHERE n5 < 1 AND n5 > -1 ORDER BY 1;
SELECT n1, ASIN(n1) FROM TEST_NUMERIC_TABLE WHERE n1 < 1 AND n1 > -1 ORDER BY 1;
SELECT n2, ASIN(n2) FROM TEST_NUMERIC_TABLE WHERE n2 < 1 AND n2 > -1 ORDER BY 1;
SELECT n3, ASIN(n3) FROM TEST_NUMERIC_TABLE WHERE n3 < 1 AND n3 > -1 ORDER BY 1;
SELECT n4, ASIN(n4) FROM TEST_NUMERIC_TABLE WHERE n4 < 1 AND n4 > -1 ORDER BY 1;
SELECT n5, ASIN(n5) FROM TEST_NUMERIC_TABLE WHERE n5 < 1 AND n5 > -1 ORDER BY 1;
SELECT n1, ASIN(n1) FROM TEST_REAL_TABLE WHERE n1 < 1 AND n1 > -1 ORDER BY 1;
SELECT n2, ASIN(n2) FROM TEST_REAL_TABLE WHERE n2 < 1 AND n2 > -1 ORDER BY 1;
SELECT n3, ASIN(n3) FROM TEST_REAL_TABLE WHERE n3 < 1 AND n3 > -1 ORDER BY 1;
SELECT n4, ASIN(n4) FROM TEST_REAL_TABLE WHERE n4 < 1 AND n4 > -1 ORDER BY 1;
SELECT n5, ASIN(n5) FROM TEST_REAL_TABLE WHERE n5 < 1 AND n5 > -1 ORDER BY 1;
SELECT n1, ATAN(n1) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n2, ATAN(n2) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, ATAN(n3) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, ATAN(n4) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, ATAN(n5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, ATAN(n1) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n2, ATAN(n2) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n3, ATAN(n3) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n4, ATAN(n4) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n5, ATAN(n5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n1, ATAN(n1) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n2, ATAN(n2) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n3, ATAN(n3) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n4, ATAN(n4) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n5, ATAN(n5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n1, CEIL(n1) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n2, CEIL(n2) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, CEIL(n3) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, CEIL(n4) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, CEIL(n5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, CEIL(n1) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n2, CEIL(n2) FROM TEST_NUMERIC_TABLE ORDER BY 1;
-- FRG-52
-- Error is non-deterministic
-- SELECT n3, CEIL(n3) FROM TEST_NUMERIC_TABLE ORDER BY 1;
-- SELECT n4, CEIL(n4) FROM TEST_NUMERIC_TABLE ORDER BY 1;
-- SELECT n5, CEIL(n5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n1, CEIL(n1) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n2, CEIL(n2) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n3, CEIL(n3) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n4, CEIL(n4) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n5, CEIL(n5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n1, COS(n1) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n2, COS(n2) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, COS(n3) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, COS(n4) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, COS(n5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, COS(n1) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n2, COS(n2) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n3, COS(n3) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n4, COS(n4) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n5, COS(n5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n1, COS(n1) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n2, COS(n2) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n3, COS(n3) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n4, COS(n4) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n5, COS(n5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n1, COSH(n1) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n2, COSH(n2) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, COSH(n3) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, COSH(n4) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, COSH(n5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, COSH(n1) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n2, COSH(n2) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n3, COSH(n3) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n4, COSH(n4) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n5, COSH(n5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n1, COSH(n1) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n2, COSH(n2) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n3, COSH(n3) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n4, COSH(n4) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n5, COSH(n5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n1, EXP(n1) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n2, EXP(n2) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, EXP(n3) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, EXP(n4) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, EXP(n5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, EXP(n1) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n2, EXP(n2) FROM TEST_NUMERIC_TABLE ORDER BY 1; 

-- workaround for diffing ref files since precision differs depending on VM 
-- for floating point
SELECT n3, EXP(n3) FROM TEST_NUMERIC_TABLE 
WHERE n3 <> -3.00000 and n3 <> 3.00000 and n3 <> 124.44300 ORDER BY 1;
!set numberFormat #.############
SELECT n3, EXP(n3) FROM TEST_NUMERIC_TABLE
WHERE n3 between -3 and 3 ORDER BY 1;
!set numberFormat #.############E0
SELECT n3, EXP(n3) FROM TEST_NUMERIC_TABLE
WHERE n3 = 124.443;
!set numberFormat default
values ( EXP( cast( null as decimal(12, 5))));

SELECT n4, EXP(n4) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n5, EXP(n5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n1, EXP(n1) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n2, EXP(n2) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n3, EXP(n3) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n4, EXP(n4) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n5, EXP(n5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n1, FLOOR(n1) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n2, FLOOR(n2) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, FLOOR(n3) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, FLOOR(n4) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, FLOOR(n5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, FLOOR(n1) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n2, FLOOR(n2) FROM TEST_NUMERIC_TABLE ORDER BY 1;
-- FRG-52
-- Error is non-deterministic
-- SELECT n3, FLOOR(n3) FROM TEST_NUMERIC_TABLE ORDER BY 1;
-- SELECT n4, FLOOR(n4) FROM TEST_NUMERIC_TABLE ORDER BY 1;
-- SELECT n5, FLOOR(n5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n1, FLOOR(n1) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n2, FLOOR(n2) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n3, FLOOR(n3) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n4, FLOOR(n4) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n5, FLOOR(n5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n1, LN(ABS(n1)) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n2, LN(ABS(n2)) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, LN(ABS(n3)) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, LN(ABS(n4)) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, LN(ABS(n5)) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, LN(ABS(n1)) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n2, LN(ABS(n2)) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n3, LN(ABS(n3)) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n4, LN(ABS(n4)) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n5, LN(ABS(n5)) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n1, LN(ABS(n1)) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n2, LN(ABS(n2)) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n3, LN(ABS(n3)) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n4, LN(ABS(n4)) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n5, LN(ABS(n5)) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n1, LOG(ABS(n1)) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n2, LOG(ABS(n2)) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, LOG(ABS(n3)) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, LOG(ABS(n4)) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, LOG(ABS(n5)) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, LOG(ABS(n1)) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n2, LOG(ABS(n2)) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n3, LOG(ABS(n3)) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n4, LOG(ABS(n4)) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n5, LOG(ABS(n5)) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n1, LOG(ABS(n1)) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n2, LOG(ABS(n2)) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n3, LOG(ABS(n3)) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n4, LOG(ABS(n4)) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n5, LOG(ABS(n5)) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n1, MOD(n1, 5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n2, MOD(n2, 5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, MOD(n3, 5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, MOD(n4, 5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, MOD(n5, 5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, MOD(n1, 5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n2, MOD(n2, 5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
-- FRG-52
-- Error is non-deterministic
-- SELECT n3, MOD(n3, 5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
-- SELECT n4, MOD(n4, 5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
-- SELECT n5, MOD(n5, 5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
-- SELECT n1, MOD(n1, 5) FROM TEST_REAL_TABLE ORDER BY 1;
-- SELECT n2, MOD(n2, 5) FROM TEST_REAL_TABLE ORDER BY 1;
-- SELECT n3, MOD(n3, 5) FROM TEST_REAL_TABLE ORDER BY 1;
-- SELECT n4, MOD(n4, 5) FROM TEST_REAL_TABLE ORDER BY 1;
-- SELECT n5, MOD(n5, 5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n1, POW(n1, 5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n2, POW(n2, 5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, POW(n3, 5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, POW(n4, 5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, POW(n5, 5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, POW(n1, 5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n2, POW(n2, 5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n3, POW(n3, 5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n4, POW(n4, 5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n5, POW(n5, 5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n1, POW(n1, 5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n2, POW(n2, 5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n3, POW(n3, 5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n4, POW(n4, 5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n5, POW(n5, 5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n1, ROUND(n1, 5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n2, ROUND(n2, 5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, ROUND(n3, 5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, ROUND(n4, 5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, ROUND(n5, 5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, ROUND(n1, 5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n2, ROUND(n2, 5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n3, ROUND(n3, 5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n4, ROUND(n4, 5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n5, ROUND(n5, 5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n1, ROUND(n1, 5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n2, ROUND(n2, 5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n3, ROUND(n3, 5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n4, ROUND(n4, 5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n5, ROUND(n5, 5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n1, SIGN(n1) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n2, SIGN(n2) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, SIGN(n3) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, SIGN(n4) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, SIGN(n5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, SIGN(n1) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n2, SIGN(n2) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n3, SIGN(n3) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n4, SIGN(n4) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n5, SIGN(n5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n1, SIGN(n1) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n2, SIGN(n2) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n3, SIGN(n3) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n4, SIGN(n4) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n5, SIGN(n5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n1, SIN(n1) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n2, SIN(n2) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, SIN(n3) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, SIN(n4) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, SIN(n5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, SIN(n1) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n2, SIN(n2) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n3, SIN(n3) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n4, SIN(n4) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n5, SIN(n5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n1, SIN(n1) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n2, SIN(n2) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n3, SIN(n3) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n4, SIN(n4) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n5, SIN(n5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n1, SINH(n1) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n2, SINH(n2) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, SINH(n3) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, SINH(n4) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, SINH(n5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, SINH(n1) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n2, SINH(n2) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n3, SINH(n3) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n4, SINH(n4) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n5, SINH(n5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n1, SINH(n1) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n2, SINH(n2) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n3, SINH(n3) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n4, SINH(n4) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n5, SINH(n5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n1, SQRT(ABS(n1)) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n2, SQRT(ABS(n2)) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, SQRT(ABS(n3)) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, SQRT(ABS(n4)) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, SQRT(ABS(n5)) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, SQRT(ABS(n1)) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n2, SQRT(ABS(n2)) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n3, SQRT(ABS(n3)) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n4, SQRT(ABS(n4)) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n5, SQRT(ABS(n5)) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n1, SQRT(ABS(n1)) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n2, SQRT(ABS(n2)) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n3, SQRT(ABS(n3)) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n4, SQRT(ABS(n4)) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n5, SQRT(ABS(n5)) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n1, TAN(n1) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n2, TAN(n2) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, TAN(n3) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, TAN(n4) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, TAN(n5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, TAN(n1) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n2, TAN(n2) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n3, TAN(n3) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n4, TAN(n4) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n5, TAN(n5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n1, TAN(n1) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n2, TAN(n2) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n3, TAN(n3) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n4, TAN(n4) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n5, TAN(n5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n1, TANH(n1) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n2, TANH(n2) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, TANH(n3) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, TANH(n4) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, TANH(n5) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, TANH(n1) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n2, TANH(n2) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n3, TANH(n3) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n4, TANH(n4) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n5, TANH(n5) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n1, TANH(n1) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n2, TANH(n2) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n3, TANH(n3) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n4, TANH(n4) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n5, TANH(n5) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n1, TRUNC(n1, 2) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n2, TRUNC(n2, 2) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, TRUNC(n3, 2) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, TRUNC(n4, 2) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, TRUNC(n5, 2) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, TRUNC(n1, 2) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n2, TRUNC(n2, 2) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n3, TRUNC(n3, 2) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n4, TRUNC(n4, 2) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n5, TRUNC(n5, 2) FROM TEST_NUMERIC_TABLE ORDER BY 1;
SELECT n1, TRUNC(n1, 2) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n2, TRUNC(n2, 2) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n3, TRUNC(n3, 2) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n4, TRUNC(n4, 2) FROM TEST_REAL_TABLE ORDER BY 1;
SELECT n5, TRUNC(n5, 2) FROM TEST_REAL_TABLE ORDER BY 1;
-- VALUERANGE only valid for integers
SELECT n1, VALUERANGE(n1, 10) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n2, VALUERANGE(n2, 10) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n3, VALUERANGE(n3, 10) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n4, VALUERANGE(n4, 10) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n5, VALUERANGE(n5, 10) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, VALUERANGE(n1, 5.4) FROM TEST_INTEGER_TABLE ORDER BY 1;
SELECT n1, VALUERANGE(n1, (SELECT MIN(N2) FROM TEST_REAL_TABLE))
FROM TEST_INTEGER_TABLE ORDER BY 1;

-- End test
