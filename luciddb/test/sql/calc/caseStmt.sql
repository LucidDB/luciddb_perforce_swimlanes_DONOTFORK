-- test CASE statement

-- Test against our standard data set

set schema 's';

SELECT n1, (CASE WHEN (n1 < -100) THEN -100
 WHEN (n1 < 0) THEN 0
 WHEN (n1 < 100) THEN 100
 ELSE 1000
END)
FROM TEST_INTEGER_TABLE ORDER BY n1;
SELECT n1, (CASE WHEN (n1 < -100) THEN -100
 WHEN (n1 < 0) THEN 0
 WHEN (n1 < 100) THEN 100
 ELSE 1000
END)
FROM TEST_NUMERIC_TABLE ORDER BY n1;

-- FRG-209
SELECT n1, (CASE WHEN (n1 < -100) THEN -100
 WHEN (n1 < 0) THEN 0
 WHEN (n1 < 100) THEN 100
 ELSE 1000
END)
FROM TEST_REAL_TABLE WHERE N1 <> 1.001 OR N1 IS NULL ORDER BY n1;
-- set numberFormat since floating point differs based on VM
!set numberFormat 0.0000
SELECT n1, (CASE WHEN (n1 < -100) THEN -100
 WHEN (n1 < 0) THEN 0
 WHEN (n1 < 100) THEN 100
 ELSE 1000
END)
FROM TEST_REAL_TABLE WHERE N1 = CAST(1.001 as FLOAT);
!set numberFormat default


-- Mix up strings and non-strings
-- Return a string from a numeric value
SELECT n1, (CASE WHEN (n1 < -100) THEN 'Kirk'
 WHEN (n1 < 0) THEN 'Julian'
 WHEN (n1 < 100) THEN 'Bill'
 ELSE 'Tai'
END)
FROM TEST_INTEGER_TABLE ORDER BY n1;

-- Return a combination of strings and non-strings
SELECT n1, (CASE WHEN (n1 < -100) THEN -100
 WHEN (n1 < 0) THEN 'Kirk'
 WHEN (n1 < 100) THEN NULL
 ELSE 1000e-12
END)
FROM TEST_INTEGER_TABLE ORDER BY n1;
-- Return null
SELECT n1, (CASE WHEN (n1 < -100) THEN NULL
 WHEN (n1 < 0) THEN NULL
 WHEN (n1 < 100) THEN NULL
 ELSE NULL
END)
FROM TEST_INTEGER_TABLE ORDER BY n1;
-- Output into an expression with null
SELECT n1, (CASE WHEN (n1 < -100) THEN NULL
 WHEN (n1 < 0) THEN NULL
 WHEN (n1 < 100) THEN NULL
 ELSE NULL
END) * 14.553
FROM TEST_INTEGER_TABLE ORDER BY n1;

-- Check null values
-- simulate NVL(col, 0)
SELECT n1, (CASE WHEN n1 IS NULL THEN 0
 ELSE n1
END)
FROM TEST_INTEGER_TABLE ORDER BY n1;
SELECT n1, (CASE WHEN n1 IS NULL THEN 0
 ELSE n1
END)
FROM TEST_NUMERIC_TABLE ORDER BY n1;

-- FRG-209
SELECT n1, (CASE WHEN n1 IS NULL THEN 0
 ELSE n1
END)
FROM TEST_REAL_TABLE WHERE N1 <> 1.001 OR N1 IS NULL ORDER BY n1;
-- set numberFormat since floating point differs based on VM
!set numberFormat 0.0000
SELECT n1, (CASE WHEN n1 IS NULL THEN 0
 ELSE n1
END)
FROM TEST_REAL_TABLE WHERE N1 = CAST(1.001 as FLOAT);
!set numberFormat default


-- Do funky null <> null semantics so that it's in the regression
SELECT n1, (CASE n1 WHEN NULL THEN 0 ELSE n1 END)
FROM TEST_INTEGER_TABLE WHERE n1 IS NULL ORDER BY n1;
SELECT n1, (CASE n1 WHEN NULL THEN 0 ELSE n1 END)
FROM TEST_NUMERIC_TABLE WHERE n1 IS NULL ORDER BY n1;
SELECT n1, (CASE n1 WHEN NULL THEN 0 ELSE n1 END)
FROM TEST_REAL_TABLE WHERE n1 IS NULL ORDER BY n1;

-- Test more general short-form case statements
SELECT n1, (CASE n1 WHEN 0 THEN -100
 WHEN -1 THEN 0
 WHEN 123456 THEN 100
 ELSE 1000
END)
FROM TEST_INTEGER_TABLE ORDER BY n1;
SELECT n1, (CASE n1 WHEN 'Bunny Rabbit' THEN -100
 WHEN -1 THEN 0
 WHEN 123456 THEN 100
 ELSE 1000
END)
FROM TEST_INTEGER_TABLE ORDER BY n1;
SELECT n1, (CASE n1 WHEN 0 THEN -100
 WHEN {ts '1976-08-11'} THEN 0
 WHEN 123456 THEN 100
 ELSE 1000
END)
FROM TEST_INTEGER_TABLE ORDER BY n1;

-- CHAR VARCHAR Comparison
SELECT c2, (CASE c2 WHEN 'KIRK' THEN 100
 WHEN 'kirk' THEN 200
 WHEN '123456789X' THEN 1000
 ELSE 0
END)
FROM TEST_CHAR_TABLE ORDER BY c2;

-- Expressions inside the case statements
SELECT n1, n2, (CASE WHEN (n1 + n2 < -100) THEN 'Fi'
 WHEN (n1 * 10 - n2 < 0) THEN 'Feye'
 WHEN (n1 + n2 * 3 > 100) THEN 'Fo'
 WHEN (n1 * n2 > 0) THEN 'Fum'
 ELSE 'I smell the blood of an Englishman'
END)
FROM TEST_INTEGER_TABLE ORDER BY n1, n2;
SELECT n1, n2, (CASE WHEN (n1 + n2 < -100) THEN n1 + n2
 WHEN (n1 * 10 - n2 < 0) THEN n1 * 10 - n2
 WHEN (n1 + n2 * 3 > 100) THEN n1 + n2 * 3
 WHEN (n1 * n2 > 0) THEN n1 * n2
 ELSE NULL
END)
FROM TEST_INTEGER_TABLE ORDER BY n1, n2;


-- End test
