-- Create the Test tables for the rest of the calculator test.

-- create tablespace calc_test_space datafile 'CalcTest.dat' size 9600K;
create schema s;
set schema 's';

!set shownestederrs true
-- Note that I'd like to eliminate the boris table, but it's there (seemingly)
-- to stay. Therefore I'm creating other test tables that have all the other types
-- that we'll use later. When writing new tests or sql statements don't use
-- boris.
create table boris
(
nnull numeric(8,0),
n1 numeric(8,0),
n2 numeric(8,0),
n3 numeric(8,0),
snull varchar(40),
s1 varchar(40),
s2 varchar(40),
s3 varchar(40)
);

-- Integer table
CREATE TABLE TEST_INTEGER_TABLE
(
n1 INTEGER,
n2 INTEGER,
n3 INTEGER,
n4 INTEGER,
n5 INTEGER
);
-- Always have a null row to start.
INSERT INTO TEST_INTEGER_TABLE VALUES(null, null, null, null, null);
INSERT INTO TEST_INTEGER_TABLE VALUES(0, 0, 0, 0, 0);
INSERT INTO TEST_INTEGER_TABLE VALUES(1, 2, 3, 4, 5);
INSERT INTO TEST_INTEGER_TABLE VALUES(-1, -2, -3, -4, -5);
INSERT INTO TEST_INTEGER_TABLE VALUES(100, 200, 300, 400, 500);
INSERT INTO TEST_INTEGER_TABLE VALUES(-100, -200, -300, -400, -500);
INSERT INTO TEST_INTEGER_TABLE VALUES(1000, 2000, 3000, 4000, 5000);
INSERT INTO TEST_INTEGER_TABLE VALUES(-1000, -2000, -3000, -4000, -5000);
INSERT INTO TEST_INTEGER_TABLE VALUES(123456, 234567, 345678, 456789, 567890);
INSERT INTO TEST_INTEGER_TABLE VALUES(-123456, -234567, -345678, -456789, -567890);
INSERT INTO TEST_INTEGER_TABLE VALUES(2147483647, 32767, 127, 8, 1);
INSERT INTO TEST_INTEGER_TABLE VALUES(-2147483648, -32768, -128, -7, 0);
SELECT * FROM TEST_INTEGER_TABLE ORDER BY n1,n2,n3,n4,n5;

-- Numeric table. This one will have values that span between INT32 and INT64
CREATE TABLE TEST_NUMERIC_TABLE
(
n1 NUMERIC(8,0),
n2 NUMERIC(12,0),
n3 NUMERIC(12,5),
n4 NUMERIC(8,3),
n5 NUMERIC(15,10)
);
-- Always have a null row to start.
INSERT INTO TEST_NUMERIC_TABLE VALUES(null, null, null, null, null);
INSERT INTO TEST_NUMERIC_TABLE VALUES(0, 0, 0, 0, 0);
INSERT INTO TEST_NUMERIC_TABLE VALUES(1, 2, 3, 4, 5);
INSERT INTO TEST_NUMERIC_TABLE VALUES(-1, -2, -3, -4, -5);
INSERT INTO TEST_NUMERIC_TABLE VALUES(111, 222, 333, 444, 555);
INSERT INTO TEST_NUMERIC_TABLE VALUES(-111, -222, -333, -444, -555);
INSERT INTO TEST_NUMERIC_TABLE VALUES(1100, 2200, 3300.33, 4400.44, 5500.55);
INSERT INTO TEST_NUMERIC_TABLE VALUES(-1100, -2200, -3300.33, -4400.44, -5500.55);
INSERT INTO TEST_NUMERIC_TABLE VALUES(12345, 23456, 124.443, 98.887, 948.48373229);
INSERT INTO TEST_NUMERIC_TABLE VALUES(99999999, 999999999999, 9999999.99999, 99999.999, 99999.9999999999);
INSERT INTO TEST_NUMERIC_TABLE VALUES(-99999999, -999999999999, -9999999.99999, -99999.999, -99999.9999999999);
SELECT * FROM TEST_NUMERIC_TABLE ORDER BY n1,n2,n3,n4,n5;

-- REAL table. This one will have reals and doubles.
CREATE TABLE TEST_REAL_TABLE
(
n1 FLOAT,
n2 REAL,
n3 REAL,
n4 DOUBLE,
n5 DOUBLE
);
-- Always have a null row to start.
INSERT INTO TEST_REAL_TABLE VALUES(null, null, null, null, null);
INSERT INTO TEST_REAL_TABLE VALUES(1, 2, 3, 4, 5);
INSERT INTO TEST_REAL_TABLE VALUES(-1, -2, -3, -4, -5);
INSERT INTO TEST_REAL_TABLE VALUES(1.001, 2.002, 3.003, 4.004, 5.005);
INSERT INTO TEST_REAL_TABLE VALUES(1234567, 1234567, 1234567, 123456789012345, 123456789012345);
INSERT INTO TEST_REAL_TABLE VALUES(0.123456, 0.123456, 0.123456, 0.12345678901234, 0.12345678901234);
INSERT INTO TEST_REAL_TABLE VALUES(-1234567, -1234567, -1234567, -123456789012345, -123456789012345);
INSERT INTO TEST_REAL_TABLE VALUES(-0.123456, -0.123456, -0.123456, -0.12345678901234, -0.12345678901234);
INSERT INTO TEST_REAL_TABLE VALUES(12.33e30, 12.55e30, 12.77e31, 12876.32e202, 33324.443e303);
INSERT INTO TEST_REAL_TABLE VALUES(12.33e-30, 12.55e-30, 12.77e-31, 12876.32e-202, 33324.443e-303);
INSERT INTO TEST_REAL_TABLE VALUES(-12.33e30, -12.55e30, -12.77e31, -12876.32e202, -33324.443e303);
INSERT INTO TEST_REAL_TABLE VALUES(-12.33e-30, -12.55e-30, -12.77e-31, -12876.32e-202, -33324.443e-303);
INSERT INTO TEST_REAL_TABLE VALUES(1.0e-37, 1.0e38, 1.0e38, 1.0e-307, 1.0e308);
SELECT * FROM TEST_REAL_TABLE WHERE n1 <> 1.001 ORDER BY n1,n2,n3,n4,n5;
-- null row
SELECT * FROM TEST_REAL_TABLE WHERE n1 IS NULL;
-- Also test the very small numbers ; IDBA doesn't display them properly.
SELECT n1, n1 * 1e35 FROM TEST_REAL_TABLE
WHERE n1 < 0.00000001 AND n1 > -0.00000001
ORDER BY n1;
-- set numberFormat since floating point differs based on VM
!set numberFormat 0.0000
select * from TEST_REAL_TABLE where n1 = cast(1.001 as float);
!set numberFormat default
-- CHAR table.
CREATE TABLE TEST_CHAR_TABLE
(
c1 CHAR(5),
c2 CHAR(10),
c3 CHAR(20),
c4 CHAR(40),
c5 CHAR(254)
);
-- Always have a null row to start.
INSERT INTO TEST_CHAR_TABLE VALUES(null, null, null, null, null);
INSERT INTO TEST_CHAR_TABLE VALUES(
'12345',
'123456789X',
'123456789X123456789x',
'123456789X123456789x123456789X123456789X',
'123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-1234'
);
INSERT INTO TEST_CHAR_TABLE VALUES('KIRK', 'KIRK', 'KIRK', 'KIRK', 'KIRK');
INSERT INTO TEST_CHAR_TABLE VALUES('KIRK ', 'KIRK   ', 'KIRK   ', 'KIRK    ', 'KIRK         ');
INSERT INTO TEST_CHAR_TABLE VALUES('  kirk', 'kirk', '  kirk', 'kirk', '  kirk');
INSERT INTO TEST_CHAR_TABLE VALUES('Kirk', 'Kirk Is', 'Kirk Is Not', 'Kirk Is Not Boris', 'Kirk Is Not Boris, Thank God');
INSERT INTO TEST_CHAR_TABLE VALUES('kirk', 'kirk is', 'kirk is not', 'kirk is not boris', 'kirk is not boris, thank <insert possible ACLU suit here>');
INSERT INTO TEST_CHAR_TABLE VALUES('aAaA', 'bBbB   bBbB', 'cCcC    cCcCcC', 'hghgh    uiuiIIIU', 'POOOPOIUOJLJLJ   fkdlfjdTJKTJ dkljf JFDK dfjkld FJDK');
INSERT INTO TEST_CHAR_TABLE VALUES('  x  ', '4155551212', '8009763345', '800BROADBA', '011441719566412');
SELECT * FROM TEST_CHAR_TABLE ORDER BY c1,c2,c3,c4,c5;

-- Varchar table
CREATE TABLE TEST_VARCHAR_TABLE
(
s1 VARCHAR(5),
s2 VARCHAR(10),
s3 VARCHAR(20),
s4 VARCHAR(40),
s5 VARCHAR(256)
);
-- Always have a null row to start.
INSERT INTO TEST_VARCHAR_TABLE VALUES(null, null, null, null, null);
INSERT INTO TEST_VARCHAR_TABLE VALUES(
'12345',
'123456789X',
'123456789X123456789x',
'123456789X123456789x123456789X123456789X',
'123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-1234'
);
INSERT INTO TEST_VARCHAR_TABLE VALUES('KIRK', 'KIRK', 'KIRK', 'KIRK', 'KIRK');
INSERT INTO TEST_VARCHAR_TABLE VALUES('KIRK ', 'KIRK   ', 'KIRK   ', 'KIRK    ', 'KIRK         ');
INSERT INTO TEST_VARCHAR_TABLE VALUES('  kirk', 'kirk', '  kirk', 'kirk', '  kirk');
INSERT INTO TEST_VARCHAR_TABLE VALUES('Kirk', 'Kirk Is', 'Kirk Is Not', 'Kirk Is Not Boris', 'Kirk Is Not Boris, Thank God');
INSERT INTO TEST_VARCHAR_TABLE VALUES('kirk', 'kirk is', 'kirk is not', 'kirk is not boris', 'kirk is not boris, thank <insert possible ACLU suit here>');
INSERT INTO TEST_VARCHAR_TABLE VALUES('aAaA', 'bBbB   bBbB', 'cCcC    cCcCcC', 'hghgh    uiuiIIIU', 'POOOPOIUOJLJLJ   fkdlfjdTJKTJ dkljf JFDK dfjkld FJDK');
INSERT INTO TEST_VARCHAR_TABLE VALUES('  x  ', '4155551212', '8009763345', '800BROADBA', '011441719566412');
SELECT * FROM TEST_VARCHAR_TABLE ORDER BY s1,s2,s3,s4,s5;

-- Date table
CREATE TABLE TEST_DATE_TABLE
(
d1 DATE,
d2 DATE,
t1 TIME,
t2 TIME,
ts1 TIMESTAMP,
ts2 TIMESTAMP
);
INSERT INTO test_date_table VALUES(NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO test_date_table VALUES(cast ('1999-01-02' as date), cast('1999-02-03' as date), cast ('12:22' as time), cast ('02:33' as time), cast('1999-03-04' as timestamp), cast('1999-04-05' as timestamp));
INSERT INTO test_date_table VALUES(cast('1999-06-07' as date), cast('1999-07-08' as date), cast ('12:22' as time), cast ('02:33' as time), cast('1999-09-10' as timestamp), cast('1999-08-09' as timestamp));
INSERT INTO test_date_table VALUES(cast('1999-09-10' as date), cast('1999-10-11' as date), cast ('12:22' as time), cast ('02:33' as time), cast('1999-08-09' as timestamp), cast('1999-05-06' as timestamp));
INSERT INTO test_date_table VALUES(cast('1999-11-12' as date), cast('1999-12-11' as date), cast ('12:22' as time), cast ('02:33' as time), cast('1999-12-31' as timestamp), cast('1999-12-01' as timestamp));
-- FRG-22 TODO: check timestamp results after fix
SELECT * FROM TEST_DATE_TABLE ORDER BY d1,d2,t1,t2,ts1,ts2;

-- End CreateTestTables.sql
