-- negative test cases
create schema uc;
set schema 'uc';

alter session set "etlProcessId"='errors_uc';
alter session set "logDir"='@ERRLOGDIR@';

-- create constraint table
create table part_uc(
  partkey integer primary key,
  name varchar(55),
  mfgr varchar(25),
  brand varchar(10),
  type varchar(25),
  size integer,
  container varchar(10),
  retailprice decimal(15,2),
  comment varchar(23),
  constraint p_mfgr_name_unique UNIQUE(mfgr,name)
);

-- load constraint table w/20 rows
insert into part_uc select * from ff_tpch.bcp."part" where mod(F1,1000)=0;

-- check rowcounts before merge
select table_name, current_row_count, deleted_row_count
  from sys_root.dba_stored_tables
  where table_name='PART_UC';
select * from sys_root.user_session_parameters
  where param_name = 'lastUpsertRowsInserted';

-- update columns in constraint, with row rejection enabled
create view part_10000 as select * from ff_tpch.bcp."part" where F1 <= 10000;
alter session set "etlActionId"='merge_update_constrain_columns_keepgoing';
alter session set "errorMax" = 500;
merge into part_uc tgt
  using part_10000 src on partkey = F1
  when matched then
    update set mfgr='New'||mfgr, size=size+100 
  when not matched then
    insert values(F1,F2,F3,F4,F5,F6,F7,F8,F9);

-- check merge rolled back
select table_name, current_row_count, deleted_row_count
  from sys_root.dba_stored_tables
  where table_name='PART_UC';
select * from sys_root.user_session_parameters
  where param_name = 'lastUpsertRowsInserted';
select * from part_uc where size > 100;

-- rollback on error limit exceeded for insert
alter session set "etlActionId"='insert_error_limit_exceeded_setup';
alter session set "errorMax"=500;

insert into uc_src.nation_src select * from uc_src.nation_ft;
merge into uc_src.nation_src as tgt
  using uc_src.nation_ft as src 
  on tgt.nationkey=src.nationkey and mod(cast(tgt.nationkey as integer),5)=0 
  when matched then update set regionkey = ('2007-9-'||src.regionkey);

create table nation_uc(
  nationkey integer primary key,
  name varchar(25),
  regionkey integer,
  comment varchar(152),
  constraint n_nkey_rkey_unique UNIQUE(nationkey,regionkey)
);

alter session set "etlActionId"='insert_error_limit_exceeded';
alter session set "errorMax"=4;

insert into nation_uc select cast(nationkey as integer), name, 
  cast(regionkey as integer), comment from uc_src.nation_src;

-- verify rollback
select table_name, current_row_count, deleted_row_count
  from sys_root.dba_stored_tables
  where table_name='NATION_UC';
select * from sys_root.user_session_parameters
  where param_name='lastUpsertRowsInserted';

-- rollback on error limit exceeded for merge
alter session set "etlActionId"='merge_error_limit_exceeded_setup';
alter session set "errorMax"=500;

insert into nation_uc (nationkey) values (0),(5),(10),(15),(20);
insert into nation_uc select cast(nationkey as integer), name,
  cast(regionkey as integer), comment from uc_src.nation_src
  where nationkey in ('1', '4', '6', '8');
insert into uc_src.nation_src (nationkey, name, regionkey) 
  values ('1', 'one', '10'), ('4', 'four', '4'), ('6', 'six', '6'),
    ('8', 'eight', '8');

alter session set "etlActionId"='merge_error_limit_exceeded';
alter session set "errorMax"=7;

merge into nation_uc tgt
  using uc_src.nation_src src on cast(src.nationkey as integer) = tgt.nationkey
  when matched then
    update set name = cast(cast(src.regionkey as integer) as varchar(25));

-- verify rollback
select table_name, current_row_count, deleted_row_count
  from sys_root.dba_stored_tables
  where table_name='NATION_UC';
select * from sys_root.user_session_parameters
  where param_name='lastUpsertRowsInserted';
select nationkey, name, regionkey from nation_uc order by 1,2,3;

-- check error logs
select action_id, error_count, warning_count, "SQL"
  from errlogs.bcp."Summary"
  where process_id='errors_uc'
  order by 1,2,3,4;

-- cleanup
drop schema uc cascade;
truncate table uc_src.nation_src;