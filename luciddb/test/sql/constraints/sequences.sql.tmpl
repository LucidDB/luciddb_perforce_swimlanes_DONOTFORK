create server ff_bench
foreign data wrapper "FLAT FILE"
options(
  directory '@FFDIR@',
  file_extension '.csv',
  ctrl_file_extension '.bcp',
  field_delimiter ',',
  line_delimiter '\n',
  quote_char '"',
  escape_char '',
  with_header 'yes',
  num_rows_scan '3',
  log_directory '@LOGDIR@'
);

select count(*) from ff_bench.bcp."bench1M";

set schema 'uc_src';
create table bench1m_src(
  kseq integer,
  k2 integer,
  k4 integer,
  k5 integer,
  k10 integer,
  k25 integer,
  k100 integer,
  k1k integer,
  k10k integer,
  k40k integer,
  k100k integer,
  k250k integer,
  k500k integer
);

-- create indexes
create index b1m_k100k_idx on bench1m_src(k10k);
create index b1m_k500k_idx on bench1m_src(k250k);

-- basic single key and multiple key constraints
create schema uc;
set schema 'uc';

-- load source table
insert into uc_src.bench1m_src select * from ff_bench.bcp."bench1M";
analyze table uc_src.bench1m_src compute statistics for all columns;

-- check duplicate count for multikey k10k,k250k
select count(*) as dup_counts, sum(dups) as total_dup_rows from 
  (select count(*) as dups from uc_src.bench1m_src 
    group by k10k, k250k
    having count(*) > 1);

-- set session params
alter session set "errorMax" = 500;
alter session set "etlProcessId"='sequences_uc';
alter session set "logDir"='@ERRLOGDIR@';

-- create table w/ unique constraints
create table bench1m_uc(
  pkey bigint generated always as identity
    (minvalue 1 increment by 1) primary key,
  kseq integer,
  k2 integer,
  k4 integer,
  k5 integer,
  k10 integer,
  k25 integer,
  k100 integer,
  k1k integer,
  k10k integer,
  k40k integer,
  k100k integer,
  k250k integer,
  k500k integer,
  constraint b1m_kseq_unique UNIQUE(kseq),
  constraint b1m_k10k_k250k_unique UNIQUE(k10k,k250k)
);

-- insert 
alter session set "etlActionId"='insert_bench1m_uc';
insert into bench1m_uc (kseq, k2, k4, k5, k25, k100, k10k, k250k)
  select kseq, k2, k4, k5, k25, k100, k10k, k250k 
  from uc_src.bench1m_src;

-- check insertion
select * from bench1m_uc where pkey <> kseq;
select max(pkey), count(*) from bench1m_uc;
-- check duplicate count for multikey k10k,k250k
select count(*) as dup_counts, sum(dups) as total_dup_rows from 
  (select count(*) as dups from bench1m_uc 
    group by k10k, k250k
    having count(*) > 1);

-- check rowcounts before merge
select table_name, current_row_count, deleted_row_count
  from sys_root.dba_stored_tables
  where table_name='BENCH1M_UC';
select * from sys_root.user_session_parameters
  where param_name = 'lastUpsertRowsInserted';

-- merge on single key
alter session set "errorMax" = 500;
alter session set "etlActionId"='merge_single_bench1m_uc';
merge into bench1m_uc tgt
  using uc_src.bench1m_src src on src.kseq = tgt.pkey
  when matched then
    update set k10 = src.k10, k1k = src.k1k, k40k = src.k40k,
      k100k = src.k100k, k500k = src.k500k
  when not matched then
      insert (kseq, k2, k4, k5, k10, k25, k100, k1k, k10k, k40k, k100k, k250k,
        k500k) 
      values(src.kseq, src.k2, src.k4, src.k5, src.k10, src.k25,
        src.k100, src.k1k, 
        (case when mod(src.kseq, 2)=0
          then src.k10k+1000000000 else src.k10k end),
        src.k40k, src.k100k, src.k250k, src.k500k);

-- check rowcounts after merge, should insert 10 rows
select table_name, current_row_count, deleted_row_count
  from sys_root.dba_stored_tables
  where table_name='BENCH1M_UC';
select * from sys_root.user_session_parameters
  where param_name = 'lastUpsertRowsInserted';

-- check merge and duplicates
select count(*) from bench1m_uc where pkey <> kseq;
select count(*) as dup_counts, sum(dups) as total_dup_rows from 
  (select count(*) as dups from bench1m_uc 
    group by k10k, k250k
    having count(*) > 1);

-- merge on multiple key
-- increase errorMax, errors are counted per violation
alter session set "errorMax"=600;
alter session set "etlActionId"='merge_multi_bench1m_uc';
merge into bench1m_uc tgt
  using uc_src.bench1m_src src
  on tgt.k10k = src.k10k and tgt.k250k = src.k250k
  when matched then
    update set k2 = src.k2 + 10, k4= src.k4, k5 = src.k5, k25 = src.k25,
      k100 = src.k100, k1k = src.k1k, k40k = src.k40k, k100k = src.k100k, 
      k500k = src.k500k
  when not matched then
    insert (kseq) values kseq;

-- check rowcounts after merge
select table_name, current_row_count, deleted_row_count
  from sys_root.dba_stored_tables
  where table_name='BENCH1M_UC';
select * from sys_root.user_session_parameters
  where param_name = 'lastUpsertRowsInserted';

-- check merge and duplicates
select count(*) from bench1m_uc where k2 >= 10;
select count(*) as dup_counts, sum(dups) as total_dup_rows from 
  (select count(*) as dups from bench1m_uc
    group by k10k, k250k
    having count(*) > 1);
select count(distinct kseq) from bench1m_uc;
select count(distinct pkey), max(pkey) from bench1m_uc;

-- check error log count
select process_id, action_id, error_count, warning_count, "SQL"
  from errlogs.bcp."Summary"
  where process_id='sequences_uc'
  order by 1,2,3,4,5;

-- cleanup 
drop schema uc cascade;
truncate table uc_src.bench1m_src;
