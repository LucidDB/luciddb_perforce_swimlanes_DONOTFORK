-- basic single key and multiple key constraints
create schema uc;
set schema 'uc';

alter session set "etlProcessId"='basic_uc';
alter session set "logDir"='@ERRLOGDIR@';

create table part_uc(
  partkey integer primary key,
  name varchar(55),
  mfgr varchar(25),
  brand varchar(10),
  type varchar(25),
  size integer,
  container varchar(10),
  retailprice decimal(15,2),
  comment varchar(23),
  constraint p_brand_type_size_unique UNIQUE(brand,type,size)
);

-- successful insert with rows rejected
alter session set "etlActionId"='insert_success_rows_rejected';
alter session set "errorMax"=1040;

insert into part_uc select * from ff_tpch.bcp."part";

-- check merge
select count(*) from part_uc;
select count(*) as dup_counts, sum(dups) as total_dup_rows from
  (select count(*) as dups from part_uc
    group by brand, type, size
    having count(*) > 1);

-- check error logs
select error_count, warning_count, "SQL"
  from errlogs.bcp."Summary"
  where process_id='basic_uc'
    and action_id = 'insert_success_rows_rejected';

truncate table part_uc;

-- merge where unmatched source rows conflict with each other for a key other
-- than the match key
alter session set "etlActionId"='merge_unmatched_conflict_within_src';
alter session set "errorMax"=1040;

-- check rowcounts before merge
select table_name, current_row_count, deleted_row_count
  from sys_root.dba_stored_tables
  where table_name='PART_UC';
select * from sys_root.user_session_parameters
  where param_name = 'lastUpsertRowsInserted';

merge into part_uc tgt
  using ff_tpch.bcp."part" src on F1=partkey
  when matched then
    update set name='NEW!'
  when not matched then
    insert values (F1,F2,F3,F4,F5,F6,F7,F8,F9);

-- check merge
select table_name, current_row_count, deleted_row_count
  from sys_root.dba_stored_tables
  where table_name='PART_UC';
select * from sys_root.user_session_parameters
  where param_name = 'lastUpsertRowsInserted';
select count(*) from part_uc where name='NEW!';
select count(*) as dup_counts, sum(dups) as total_dup_rows from
  (select count(*) as dups from part_uc
    group by brand, type, size
    having count(*) > 1);

-- check error logs
select error_count, warning_count, "SQL"
  from errlogs.bcp."Summary"
  where process_id='basic_uc'
    and action_id = 'merge_unmatched_conflict_within_src';

-- merge where unmatched source rows conflict with each other and existing rows
-- for a key other than the match key
alter session set "etlActionId"='merge_unmatched_conflicts_in_src_and_tgt';
alter session set "errorMax"=1040;

merge into part_uc tgt
  using ff_tpch.bcp."part" src on F1=partkey
  when matched then 
    update set name='NEW!'
  when not matched then
    insert values (F1,F2,F3,F4,F5,F6,F7,F8,F9);

-- check merge
select table_name, current_row_count, deleted_row_count
  from sys_root.dba_stored_tables
  where table_name='PART_UC';
select * from sys_root.user_session_parameters
  where param_name = 'lastUpsertRowsInserted';
select count(*) from part_uc where name='NEW!';
select count(*) as dup_counts, sum(dups) as total_dup_rows from
  (select count(*) as dups from part_uc
    group by brand, type, size
    having count(*) > 1);

-- check error logs
select error_count, warning_count, "SQL"
  from errlogs.bcp."Summary"
  where process_id='basic_uc'
    and action_id = 'merge_unmatched_conflicts_in_src_and_tgt';

-- merge where unmatched source rows conflict with existing rows for a key
-- other than the match key
alter session set "etlActionId"='merge_unmatched_conflict_within_tgt';
alter session set "errorMax"=1000;
create view part_src_dups as
  select * from ff_tpch.bcp."part" as b where exists
    (select F4, F5, F6, count(F4||F5||cast(F6 as varchar(10)))
      from ff_tpch.bcp."part"
     where b.F4=F4 and b.F5=F5 and b.F6=F6
     group by F4, F5, F6
     having count(F4||F5||cast(F6 as varchar(10))) = 2);

merge into part_uc tgt
  using part_src_dups on F1=partkey
  when matched then 
    update set name='SUPERNEW!'
  when not matched then
    insert values (F1,F2,F3,F4,F5,F6,F7,F8,F9);

-- check merge
select table_name, current_row_count, deleted_row_count
  from sys_root.dba_stored_tables
  where table_name='PART_UC';
select * from sys_root.user_session_parameters
  where param_name = 'lastUpsertRowsInserted';
select count(*) from part_uc where name='SUPERNEW!';
select count(*) as dup_counts, sum(dups) as total_dup_rows from
  (select count(*) as dups from part_uc
    group by brand, type, size
    having count(*) > 1);

-- check error logs
select error_count, warning_count, "SQL"
  from errlogs.bcp."Summary"
  where process_id='basic_uc'
    and action_id = 'merge_unmatched_conflict_within_tgt';

-- merge where multiple source rows match a single target row
alter session set "etlActionId"='merge_match_multiple_src_per_tgt_setup';
alter session set "errorMax"=1800;
create view all_part_dups as
  select * from ff_tpch.bcp."part" as b 
    where exists 
      (select F4, F5, F6, count(F4||F5||cast(F6 as varchar(10)))
        from ff_tpch.bcp."part"
       where b.F4=F4 and b.F5=F5 and b.F6=F6
       group by F4, F5, F6
       having count(F4||F5||cast(F6 as varchar(10))) > 1);
insert into uc_src.part_src 
  select * from ff_tpch.bcp."part" 
  where F1 not in (select F1 from all_part_dups);
insert into uc_src.part_src
  select * from ff_tpch.bcp."part"
  where F1 <= 1000 and F1 not in (select F1 from all_part_dups);

alter session set "etlActionId"='merge_match_multiple_src_per_tgt';
merge into part_uc tgt
  using uc_src.part_src on p_partkey=partkey
  when matched then
    update set name='SUPERDELUX!'
  when not matched then
    insert values (p_partkey, p_name, p_mfgr, p_brand, p_type,
      p_size, p_container, p_retailprice, p_comment);

-- check merge
select table_name, current_row_count, deleted_row_count
  from sys_root.dba_stored_tables
  where table_name='PART_UC';
select * from sys_root.user_session_parameters
  where param_name = 'lastUpsertRowsInserted';
select count(*) from part_uc where name='SUPERDELUX!';
select count(*) as dup_counts, sum(dups) as total_dup_rows from
  (select count(*) as dups from part_uc
    group by brand, type, size
    having count(*) > 1);

-- check error logs
select action_id, error_count, warning_count, "SQL"
  from errlogs.bcp."Summary"
  where process_id='basic_uc'
    and action_id like 'merge_match_multiple_src_per_tgt%'
  order by 1,2,3,4;

-- the following updates will result in replacement of the existing column;
-- selecting the max rid column will confirm that replacement was done; the
-- value needs to match the value before the updates
-- as opposed
alter session set "errorMax" = 0;
select max(lcs_rid(partkey)) from part_uc;
update part_uc set partkey = partkey + 1;
select max(lcs_rid(partkey)) from part_uc;
select * from sys_root.user_session_parameters
  where param_name = 'lastUpsertRowsInserted';
update part_uc set partkey = partkey + 20000 where name <> 'SUPERDELUX!';
select max(lcs_rid(partkey)) from part_uc;
select * from sys_root.user_session_parameters
  where param_name = 'lastUpsertRowsInserted';

-- cleanup
drop table part_uc cascade;
drop view part_src_dups;
drop view all_part_dups;

-- update columns in constraint table row rejection disabled
alter session set "etlActionId"=
  'merge_update_constraint_columns_failfast_setup';
alter session set "errorMax"=500;

-- create constraint table
create table part_uc(
  partkey integer primary key,
  name varchar(55),
  mfgr varchar(25),
  brand varchar(10),
  type varchar(25),
  size integer,
  container varchar(10),
  retailprice decimal(15,2),
  comment varchar(23),
  constraint p_mfgr_name_unique UNIQUE(mfgr,name)
);

-- load constraint table w/20 rows
insert into part_uc 
select * from ff_tpch.bcp."part" where mod(F1,1000)=0;

-- check rowcounts before merge
select table_name, current_row_count, deleted_row_count
  from sys_root.dba_stored_tables
  where table_name='PART_UC';
select * from sys_root.user_session_parameters
  where param_name = 'lastUpsertRowsInserted';

create view part_10000 as select * from ff_tpch.bcp."part" where F1 <= 10000;
alter session set "etlActionId"='merge_update_constraint_columns_failfast';
alter session set "errorMax" = 0;
merge into part_uc tgt
  using part_10000 src on partkey = F1
  when matched then
    update set mfgr='New'||mfgr, size=size+100 
  when not matched then
    insert values(F1,F2,F3,F4,F5,F6,F7,F8,F9);

-- check merge
select table_name, current_row_count, deleted_row_count
  from sys_root.dba_stored_tables
  where table_name='PART_UC';
select * from sys_root.user_session_parameters
  where param_name = 'lastUpsertRowsInserted';
-- should get the 10 updated rows
select tgt.* 
from 
  table(applib.generate_crc(cursor(select * from part_uc))) tgt
  inner join 
  table(applib.generate_crc(cursor(select * from part_10000))) src
  on F1 = partkey
where tgt.crc_value <> src.crc_value
order by partkey;

-- check logs
select action_id, error_count, warning_count, "SQL"
  from errlogs.bcp."Summary"
  where process_id='basic_uc' 
    and action_id like 'merge_update_constraint_columns_failfast%';

-- constraint column ordering
alter session set "errorMax" = 1010;
alter session set "etlActionId"='insert_constraint_column_ordering_setup';
truncate table part_uc;
truncate table uc_src.part_src;
create table part_uc2(
  partkey integer primary key,
  name varchar(55),
  mfgr varchar(25),
  brand varchar(10),
  type varchar(25),
  size integer,
  container varchar(10),
  retailprice decimal(15,2),
  comment varchar(23),
  constraint p_name_mfgr_unique UNIQUE(name,mfgr)
);
insert into uc_src.part_src select * from ff_tpch.bcp."part";
insert into uc_src.part_src 
  select F1+1000000, F2, F3, F4, F5, F6, F7, F8, F9 
  from ff_tpch.bcp."part" where F1 <= 1000;

alter session set "etlActionId"='insert_constraint_column_ordering_1';
insert into part_uc select * from uc_src.part_src;
select count(*), count(distinct partkey) from part_uc;
select count(*) as dup_count, sum(dups) as total_dup_rows from
  (select count(*) as dups from part_uc
    group by mfgr, name
    having count(*) > 1);

alter session set "etlActionId"='insert_constraint_column_ordering_2';
insert into part_uc2 select * from uc_src.part_src;
select count(*), count(distinct partkey) from part_uc2;
select count(*) as dup_count, sum(dups) as total_dup_rows from
  (select count(*) as dups from part_uc2
    group by mfgr, name
    having count(*) > 1);

-- check result is the same
select * from table(applib.generate_crc(cursor(select * from part_uc))) as o 
  inner join table(applib.generate_crc(cursor(select * from part_uc2))) as t
  on o.partkey = t.partkey
where o.crc_value <> t.crc_value;

-- check error logs
select action_id, error_count, warning_count, "SQL"
  from errlogs.bcp."Summary"
  where process_id='basic_uc'
    and action_id like 'insert_constraint_column_ordering%'
  order by 1,2,3,4;

-- errors logged less than error limit
alter session set "etlActionId"='errLogMax_less_than_errMax';
alter session set "errorLogMax"=10;

truncate table part_uc;
insert into part_uc select * from uc_src.part_src;

select error_count, warning_count, "SQL"
  from errlogs.bcp."Summary"
  where process_id='basic_uc'
    and action_id='errLogMax_less_than_errMax';

-- TODO: find a way to check the logfiles whose names are generated with 
-- timestamps, etc.

-- cleanup
drop schema uc cascade;
truncate table uc_src.part_src;
