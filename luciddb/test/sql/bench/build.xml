<?xml version="1.0" encoding="UTF-8"?>
<!--
// $Id$
// LucidDB is a DBMS optimized for business intelligence.
// Copyright (C) 2005-2005 LucidEra, Inc.
// Copyright (C) 2005-2005 The Eigenbase Project
//
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version approved by The Eigenbase Project.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->

<project name="benchmark" basedir="." default="test">
  <dirname property="bench.dir" file="${ant.file.bench}" />

  <property name="open.dir" location="../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <!-- REVIEW: run.properties seems like something that should be global for -->
  <!-- all tests. for instance, testfile being by default test.xml, testhome, -->
  <!-- should probably be the current dir, etc. The prop config.prop may not -->
  <!-- belong here, as well as the filter. Those should be in this ant file -->
  <property file="run.properties"/>

  <!-- REVIEW: what is this used for? -->
  <taskdef name="var" classname="net.sf.antcontrib.property.Variable" classpath="${ant.classpath}"/>

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${bench.dir}/gen" />
  <!-- directory where blackhawk output should go -->
  <!--REVIEW: this should probably follow the convention of going into -->
  <!--testlogs? -->
  <property name="bhlogs.dir" value="${bench.dir}/bh" />
  <!-- directory where the csv files are copied -->
  <property name="csv.dir" value="${bench.dir}/csv" />

  <target name="gen-sql">
    <filter token="open.dir" value="${open.dir}"/>
    <filter token="csv.dir" value="${csv.dir}"/>

    <!-- generate config.properties file -->
    <copy file="${config.prop}" tofile="config.properties"
      overwrite="true" filtering="true">
      <filterset>
        <filtersfile file="${config.prop}"/>
      </filterset>
    </copy>

    <!-- generate all sql files -->
    <copy todir="${gensql.dir}tmp" overwrite="true"
      filtering="true">
      <fileset dir="${bench.dir}">
        <include name="**/*.tmpl"/>
      </fileset>
      <mapper type="glob" from="*.tmpl" to="*"/>
      <filterset>
        <filtersfile file="config.properties"/>
      </filterset>
    </copy>
    <copy todir="${gensql.dir}/${config.prop}" overwrite="true"
      filtering="true">
      <fileset dir="${gensql.dir}tmp"/>
      <filterchain>
        <tokenfilter>
          <replaceregex pattern="^.*. . >.*@.*@.*" replace=". . . . . . . . > " flags="s"/>
          <replaceregex pattern="^.*@.*@.*" replace="" flags="s"/>
        </tokenfilter>
      </filterchain>
    </copy>
    <delete dir="${gensql.dir}tmp" quiet="true"/>

    <!-- copy over all other .sql and .ref files -->
    <copy todir="${gensql.dir}/${config.prop}">
      <fileset dir="${bench.dir}">
        <include name="**/*.sql"/>
        <include name="**/*.ref"/>
        <exclude name="gen/**"/>
      </fileset>
    </copy>
  </target>

  <target name="copy-csv">
    <delete dir="${csv.dir}"/>
    <copy todir="${csv.dir}" overwrite="true">
      <!-- REVIEW: csvsource.dir shouldn't be defined in run.properties, since -->
      <!-- it is a "build time" thing. Should probably just have it in this -->
      <!-- build.xml file. Also, should check that it exists and print out some -->
      <!-- message if missing-->
      <fileset dir="${csvsource.dir}"/>
    </copy>
  </target>

  <target name="test">
    <antcall target="copy-csv"/>
    <antcall target="gen-sql"/>
    <ant dir="${open.dir}/luciddb" target="run_blackhawk"/>
  </target>

  <target name="testAllConfigs">
    <!-- oracle -->
    <!-- REVIEW: I believe this var, config.prop is only used to determine the -->
    <!-- log.basedir. Is it for anything else for the run? If this is the case -->
    <!-- you can just use that value in bh.log.basedir, and not bother with setting -->
    <!-- config.prop --->
    <var name="config.prop" value="prop.oracle"/>
    <!-- REVIEW: I would have a target that generates all possible sql files, -->
    <!-- and then have a test target that runs it. The advantage here is that -->
    <!-- if someone runs bh standalone, they can, without trying to tease out -->
    <!-- the generation manually, which will be hard. They only need to use a -->
    <!-- filter to test what they want. -->
    <!-- REVIEW: Is it possible for test all to simply be one bh call with no -->
    <!-- filter? and then create separate targets as convenience to run bh with -->
    <!-- filters. for instance testOracle, which will run bh with the oracle -->
    <!-- filter. -->
    <antcall target="gen-sql"/>
    <!-- REVIEW: shouldn't ${bench.dir}/bh be replaced by ${bhlogs.dir}? -->
    <var name="bh.log.basedir" value="${bench.dir}/bh/${config.prop}"/>
    <var name="bh.filter.dbs" value="oracle"/>
    <!-- REVIEW: i notice that ${config.prop} is being passed to the bh for -->
    <!-- inclusion in the test.xml. The danger here is that people will need to -->
    <!-- know BH's behavior for this setting, which isn't  that hard, but still -->
    <!-- requires some thought. The bigger issue is that the test cases will -->
    <!-- not be unique. What might be even better is to generate the bh -->
    <!-- test.xml files along with the sql files. At least at runtime, it's -->
    <!-- easy to then follow the logic. Another option perhaps is to utilize -->
    <!-- the name_prefix value rather than the name of the config file for -->
    <!-- things such as test case name, and test case parameters. -->
    <ant dir="${open.dir}/luciddb" target="run_blackhawk"/>

    <!-- sqlserver -->
    <var name="config.prop" value="prop.sqlserver"/>
    <antcall target="gen-sql"/>
    <var name="bh.log.basedir" value="${bench.dir}/bh/${config.prop}"/>
    <var name="bh.filter.dbs" value="sqlserver"/>
    <ant dir="${open.dir}/luciddb" target="run_blackhawk"/>

    <!-- csvjdbc -->
    <!-- REVIEW: is there a need to copy-csv more than once? -->
    <antcall target="copy-csv"/>
    <var name="config.prop" value="prop.csvjdbc"/>
    <antcall target="gen-sql"/>
    <var name="bh.log.basedir" value="${bench.dir}/bh/${config.prop}"/>
    <var name="bh.filter.dbs" value="csv"/>
    <ant dir="${open.dir}/luciddb" target="run_blackhawk"/>

    <!-- flatfile -->
    <antcall target="copy-csv"/>
    <var name="config.prop" value="prop.flatfile"/>
    <antcall target="gen-sql"/>
    <var name="bh.log.basedir" value="${bench.dir}/bh/${config.prop}"/>
    <var name="bh.filter.dbs" value="flatfile"/>
    <ant dir="${open.dir}/luciddb" target="run_blackhawk"/>
  </target>

  <target name="clean">
    <delete dir="${gensql.dir}"/>
    <delete dir="${bhlogs.dir}"/>
    <delete dir="${csv.dir}"/>
  </target>

  <target name="restoreCatalog">
    <ant dir="${open.dir}/luciddb" target="restoreCatalog"/>
  </target>

</project>
