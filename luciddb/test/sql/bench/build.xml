<?xml version="1.0" encoding="UTF-8"?>
<!--
// $Id$
// LucidDB is a DBMS optimized for business intelligence.
// Copyright (C) 2005-2005 LucidEra, Inc.
// Copyright (C) 2005-2005 The Eigenbase Project
//
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version approved by The Eigenbase Project.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->

<project name="benchmark" basedir="." default="test">
  <dirname property="bench.dir" file="${ant.file.bench}" />

  <property name="open.dir" location="../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <!--REVIEW: I'd recommend that the testfile remain "test.xml" and you have
  something like benchtest.xml as what is called repeatedly. But, also keep in 
  mind that eventually these test.xml files will be called from another test.xml
  file, so if there is something dependent on a local ant call to execute, we
  want to avoid it. So, perhaps eventually, we'll have one top level run.properties
  file that is global to all runs. Is that possible?-->
  <property file="run.properties"/>

  <taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" classpath="${ant.classpath}"/>
  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>
  
  <!-- REVIEW: how is this dir created? -->
  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${bench.dir}/gen" />

  <!-- directory where blackhawk output should go -->
  <property name="bhlogs.dir" value="${bench.dir}/testlog" />
  <property name="bh.log.basedir" value="${bhlogs.dir}" />

  <!-- directory of csv files -->
  <property name="csvsource.dir" value="/mnt/raksha/engineering/testdata/csv_BENCH"/>
  <property name="csv.dir" value="${bench.dir}/csv" />
  <property name="csv.copy.dir" value="${bench.dir}/csv-copy" />

  <target name="gen-sql">
    <filter token="open.dir" value="${open.dir}"/>
    <filter token="csv.dir" value="${csv.copy.dir}"/>

    <!-- generate config.properties file -->
    <copy file="${prop.source}" tofile="config.properties"
      overwrite="true" filtering="true">
      <filterset>
        <filtersfile file="${prop.source}"/>
      </filterset>
    </copy>

    <!-- generate all sql files -->
    <copy todir="${gensql.dir}tmp" overwrite="true"
      filtering="true">
      <fileset dir="${bench.dir}">
        <include name="**/*.tmpl"/>
      </fileset>
      <mapper type="glob" from="*.tmpl" to="*"/>
      <filterset>
        <filtersfile file="config.properties"/>
      </filterset>
    </copy>
    <copy todir="${gensql.dir}/${prop.source}" overwrite="true"
      filtering="true">
      <fileset dir="${gensql.dir}tmp"/>
      <filterchain>
        <tokenfilter>
          <replaceregex pattern="^.*. . >.*@.*@.*" replace=". . . . . . . . > " flags="s"/>
          <replaceregex pattern="^.*@.*@.*" replace="" flags="s"/>
        </tokenfilter>
      </filterchain>
    </copy>
    <delete dir="${gensql.dir}tmp" quiet="true"/>

    <!-- copy over all other .sql and .ref files -->
    <copy todir="${gensql.dir}/${prop.source}">
      <fileset dir="${bench.dir}">
        <include name="**/*.sql"/>
        <include name="**/*.ref"/>
        <exclude name="gen/**"/>
      </fileset>
    </copy>
  </target>
  
  <target name="gen-all-sql">
    <available file="${gensql.dir}" type="dir"
      property="sql.generated"/>
    <if>
      <isset property="sql.generated"/>
      <then/>
      <else>
        <foreach list="prop.oracle,prop.sqlserver,prop.flatfile,prop.csvjdbc" 
          param="prop.source"
          target="gen-sql"/>
      </else>
    </if>
  </target>
  
  <!-- REVIEW: If we need a global blackhawk ant target, can we make
  it a macro and import it? And also, if we use run.properties to set 
  characteristics  make it explicitly passed into the macro -->
  <!-- REVIEW: I don't see how test case names are being parameterized.-->
  <target name="test" depends="gen-all-sql">
    <ant dir="${open.dir}/luciddb" target="run_blackhawk"/>
  </target>
  
  <!-- REVIEW: who calls this target? If it is never called, the csv tests will
  presumably not run properly. -->
  <!-- restore from local copy of csv files -->
  <target name="copy-csv">
    <available file="${csv.dir}" type="dir"
      property="csv.available"/>
    <if>
      <isset property="csv.available"/>
      <then>
        <delete dir="${csv.copy.dir}"/>
        <copy todir="${csv.copy.dir}" overwrite="true">
          <fileset dir="${csv.dir}"/>
        </copy>
        <!-- copy bcp -->
        <copy todir="${csv.copy.dir}" overwrite="true">
          <fileset dir="${bench.dir}">
            <include name="**/*.bcp"/>
          </fileset>
        </copy>
      </then>
      <else>
        <antcall target="copy-remote-csv"/>
      </else>
    </if>
  </target>
  
  <!-- REVIEW: this is only called when there is no local copy. what 
  happens if raksha is refreshed, and out of sync with the local copy?
  perhaps the ant "sync" task will work here? or unix rsync.-->
  <!-- refresh from //raksha -->
  <target name="copy-remote-csv">
    <!-- refresh raksha -->
    <delete dir="${csv.dir}"/>
    <copy todir="${csv.dir}" overwrite="true">
      <fileset dir="${csvsource.dir}"/>
    </copy>
    <!-- refresh copy -->
    <antcall target="copy-csv"/>
  </target>

  <target name="clean">
    <delete dir="${gensql.dir}"/>
    <delete dir="${bhlogs.dir}"/>
    <delete dir="${csv.copy.dir}"/>
  </target>

  <target name="clean-csv">
    <antcall target="clean"/>
    <delete dir="${csv.dir}"/>
  </target>

  <target name="restoreCatalog">
    <ant dir="${open.dir}/luciddb" target="restoreCatalog"/>
  </target>

</project>
