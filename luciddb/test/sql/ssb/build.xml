<?xml version="1.0" encoding="UTF-8"?>
<!--
// $Id$
// LucidDB is a DBMS optimized for business intelligence.
// Copyright (C) 2005-2007 LucidEra, Inc.
// Copyright (C) 2005-2007 The Eigenbase Project
//
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version approved by The Eigenbase Project.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->

<project name="ssb" basedir="." default="test">
  <dirname property="ssb.dir" file="${ant.file.ssb}" />

  <property name="open.dir" location="${ssb.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" classpath="${ant.classpath}"/>
  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>
  <taskdef name="switch" classname="net.sf.antcontrib.logic.Switch" classpath="${ant.classpath}"/>

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${ssb.dir}/gen" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${ssb.dir}/testlog" />

  <!-- directory of flat files -->
  <property name="ffsource.dir" value="${open.dir}/thirdparty/ssb/gen"/>
  <property name="ff.dir" value="${ssb.dir}/ff"/>

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="set-sf">
    <switch value="${datasize}">
      <case value="100M"> <property name="sf" value="0.1"/> </case>
      <case value="1G"> <property name="sf" value="1"/> </case>
      <case value="10G"> <property name="sf" value="10"/> </case>
      <case value="30G"> <property name="sf" value="30"/> </case>
      <case value="100G"> <property name="sf" value="100"/> </case>
      <case value="300G"> <property name="sf" value="300"/> </case>
      <case value="1000G"> <property name="sf" value="1000"/> </case>
      <case value="3000G"> <property name="sf" value="3000"/> </case>
      <case value="10000G"> <property name="sf" value="10000"/> </case>
      <case value="30000G"> <property name="sf" value="30000"/> </case>
      <case value="100000G"> <property name="sf" value="100000"/> </case>
    </switch>
  </target>

  <target name="gen-sql" depends="set-sf">
    <!-- copy over sql.tmpl, and template reference and shell script files -->
    <copy todir="${gensql.dir}/${datasize.param}" overwrite="true">
      <fileset dir="${ssb.dir}">
        <include name="*.${datasize.param}"/>
        <include name="*.tmpl"/>
        <include name="*.sh"/>
      </fileset>
      <compositemapper>
        <globmapper from="*.${datasize.param}.sh" to="*.sh"/>
        <globmapper from="*.${datasize.param}" to="*.ref"/>
        <globmapper from="*.tmpl" to="*"/>
      </compositemapper>
      <filterset>
        <filter token="FFDIR" value="${ff.dir}/${datasize.param}"/>
        <filter token="DIR" value="${gensql.dir}/${datasize.param}"/>
        <filter token="SF" value="${sf}"/>
      </filterset>
    </copy>

    <!-- copy over other sql and ref files -->
    <copy todir="${gensql.dir}/${datasize.param}" overwrite="true">
      <fileset dir="${ssb.dir}">
        <include name="*.sql"/>
        <include name="*.ref"/>
      </fileset>
    </copy>

    <!-- change permissions on executables -->
    <chmod perm="u+x">
      <fileset dir="${gensql.dir}/${datasize.param}">
        <include name="*.sh"/>
      </fileset>
    </chmod>

  </target>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql -->
    <foreach list="${datasize}" param="datasize.param" target="gen-sql"/>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${ssb.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="create-db">
    <condition property="db.created">
      <available file="${ffsource.dir}/${datasize}" type="dir"/>
    </condition>

    <if>
      <istrue value="${db.created}"/>
      <then/>
      <else>
        <exec executable="${thirdparty.dir}/ssb/createdb"
          dir="${thirdparty.dir}/ssb">
          <arg line="${datasize}"/>
        </exec>
      </else>
    </if>

    <sync todir="${ff.dir}/${datasize}" verbose="true">
      <fileset dir="${ffsource.dir}/${datasize}"/>
    </sync>
  </target>

  <target name="alloc-space" depends="gen-all-sql">
    <!-- Make sure the server isn't running by doing a dummy extend of a
         single page.  The server can't be running while file space is
         being extended.
    -->
    <exec executable="${open.dir}/luciddb/lucidDbAllocFile" failonerror="true">
      <arg value="--append-pages=1"/>
      <arg value="${open.dir}/luciddb/catalog/db.dat"/>
    </exec>
    <ant dir="${open.dir}/luciddb" target="restoreCatalog"/>
    <exec executable="${gensql.dir}/${datasize}/allocSpace.sh"
      failonerror="true"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete dir="${ff.dir}"/>
    <delete file="datasize"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete dir="${gensql.dir}"/>
  </target>

  <target name="clean-ff" depends="clean">
    <delete dir="${ff.dir}"/>
  </target>

</project>
