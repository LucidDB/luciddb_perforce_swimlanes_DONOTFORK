<?xml version="1.0" encoding="UTF-8"?>
<!-- 
// $Id$
// LucidDB is a DBMS optimized for business intelligence.
// Copyright (C) 2005-2005 LucidEra, Inc.
// Copyright (C) 2005-2005 The Eigenbase Project
//
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version approved by The Eigenbase Project.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//  
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->

<!DOCTYPE project [

<!ENTITY FarragoProps
"
-Dnet.sf.farrago.home=${luciddb.dir}
-Dnet.sf.farrago.catalog=${project.catalog.dir}
-Djava.util.logging.config.file=${project.trace.propfile}
-Dnet.sf.farrago.defaultSessionFactoryLibraryName=class:com.lucidera.farrago.LucidDbSessionFactory
-Dnet.sf.farrago.test.jdbcDriverClass=com.lucidera.jdbc.LucidDbLocalDriver
">

<!ENTITY FarragoSqlLineProps
"
&FarragoProps;
-Dsqlline.historyFile=${sqlline.hist.file}
">

]>

<project name="luciddb" basedir="." default="test">
<taskdef resource="net/sf/antcontrib/antlib.xml" />

<dirname property="luciddb.dir" file="${ant.file.luciddb}" />

<!-- assume common parent of fennel, farrago and luciddb  -->
  <property name="open.dir" location=".."/>
  <fail unless="open.dir" />
  <property name="farrago.dir" location="${open.dir}/farrago"/>
  <property name="farrago.dist.dir" location="${farrago.dir}/dist"/>

  <!-- farrago distribution file -->
  <condition property="farrago.dist.file" 
    value="${farrago.dist.dir}/farrago.zip">
    <os family="windows"/>
  </condition>
  <condition property="farrago.dist.file" 
    value="${farrago.dist.dir}/farrago.tar.bz2">
    <not>
      <os family="windows"/>
    </not>
  </condition>

  <property name="fennel.dir" location="${open.dir}/fennel"/>

  <property environment="env" />
  <property file="${farrago.dir}/initBuild.properties" />
  <property file="${farrago.dir}/customBuild.properties" />

  <!-- directory in which classes are built -->
  <property name="classes.dir" location="${luciddb.dir}/classes" />

  <property name="luciddb.test.dir" location="${luciddb.dir}/test" />
  <property name="luciddb.plugin.dir" location="${luciddb.dir}/plugin" />
  <property name="applib.dir" location="${luciddb.plugin.dir}/applib" />

  <!-- directory in which catalog data is stored -->
  <property name="catalog.dir" location="${luciddb.dir}/catalog" />

  <!-- directory in which catalog XMI files are stored -->
  <property name="xmi.dir" location="${catalog.dir}/xmi" />

  <property name="release.properties.source" location="${xmi.dir}/FarragoRelease.properties" />

  <!-- directory in which catalog data is backed up -->
  <property name="catalog.backup.dir" location="${catalog.dir}/backup" />

  <property name="trace.dir" location="${luciddb.dir}/trace" />

  <property name="LucidDbTrace.properties" 
    location="${trace.dir}/LucidDbTrace.properties" />

  <property name="LucidDbTrace.log" location="${trace.dir}/LucidDbTrace.log" />

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${catalog.dir}" />
  <property name="project.trace.propfile" location="${LucidDbTrace.properties}" />

  <!-- directory for JUnit run output -->
  <property name="testlog.dir" location="${luciddb.dir}/testlog"/>

  <property name="testsrc.dir" location="${luciddb.test.dir}/sql"/>

  <property name="project.testlog.dir" location="${testlog.dir}" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

   <!-- Template developer configuration file. -->
  <property name="FarragoConfTemplate.xmi"
    location="${farrago.xmi.dir}/FarragoConfTemplate.xmi"/>

  <!-- Developer configuration file generated from template. -->
  <property name="LucidDbConf.xmi"
    location="${xmi.dir}/LucidDbConf.xmi"/>

  <!-- Set to a path to enable Fennel JNI handle tracing during tests. -->
  <property name="trace.fennel.handles" value=""/>

  <property name="dist.dir"
    location="${basedir}/dist"/>
  
  <property name="emma.luciddb.classes.dir" location="${luciddb.dir}/classes-cov"/>

  <!-- directory for init SQL scripts -->
  <property name="initSql.dir" value="${luciddb.dir}/initsql"/>

  <!-- Classpaths -->

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${classes.dir}"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${luciddb.plugin.dir}/FarragoMedJdbc3p.jar"/>
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <!-- classpath for emma-instrumented running tests via ant -->
  <path id="emma.test.classpath">
    <pathelement path="${emma.luciddb.classes.dir}"/>
    <pathelement path="${emma.farrago.classes.dir}"/>
    <pathelement path="${emma.classpath}"/>
    <pathelement path="${test.classpath}"/>
  </path>
  <property name="emma.test.classpath" refid="emma.test.classpath"/>

  <path id="luciddb.build.classpath">
    <pathelement path="${test.classpath}"/>
    <pathelement location="${farrago.classes.dir}"/>
  </path>
  <property name="luciddb.build.classpath" refid="luciddb.build.classpath"/>

  <path id="applib.build.classpath">
    <pathelement path="${applib.dir}"/>
    <pathelement path="${farrago.classes.dir}"/>
    <pathelement path="${resgen.dir}/lib/eigenbase-resgen.jar"/>
    <pathelement path="${resgen.dir}/lib/eigenbase-xom.jar"/>
  </path>
  <property name="applib.build.classpath" refid="applib.build.classpath"/>

  <path id="applib.run.classpath">
    <pathelement path="${farrago.run.classpath}"/>
    <pathelement path="${applib.dir}"/>
  </path>
  <property name="applib.run.classpath" refid="applib.run.classpath"/>

  <target name="gen-all-sql">
    <ant dir="test/sql/shortreg" target="gen-all-sql"/>
    <ant dir="test/sql/VI/tbs" target="gen-all-sql"/>
  </target>

<!-- Begin Experiment -->
  <taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" classpath="${ant.classpath}"/>
  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>

  <target name="gen-all-sql-x">
    <property name="target.name" value="gen-all-sql"/>
    <foreach param="target.file" target="call-subdir-target" inheritAll="true">
      <fileset dir="${basedir}/test/sql">
        <include name="**/build.xml"/>
        <exclude name="calc/**"/>
        <exclude name="conv_types/**"/>
        <exclude name="numerics/build.xml"/>
        <exclude name="txn/build.xml"/>
        <exclude name="udr/**"/>
        <exclude name="VI/recovery/build.xml"/>
        <exclude name="VI/build.xml"/>
      </fileset>
    </foreach>
  </target>

  <target name="call-subdir-target">
    <echo>
      This is the target.file: ${target.file}
    </echo>
    <ant antfile="${target.file}" target="${target.name}" inheritAll="false"/>
  </target>

  <target name="test-nondb" depends="gen-all-sql-x">
    <property file="run.properties"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh-nondb"/>
    <blackhawk.fork
      basedir="${luciddb.dir}"
      testscript="test-nightly-nondb.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="test-flatfile" depends="gen-all-sql-x">
    <property file="run.properties"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh-flatfile"/>
    <blackhawk.fork
      basedir="${luciddb.dir}"
      testscript="test-nightly-flatfile.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="test-oracle" depends="gen-all-sql-x">
    <property file="run.properties"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh-oracle"/>
    <blackhawk.fork
      basedir="${luciddb.dir}"
      testscript="test-nightly-oracle.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="test-sqlserver" depends="gen-all-sql-x">
    <property file="run.properties"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh-sqlserver"/>
    <blackhawk.fork
      basedir="${luciddb.dir}"
      testscript="test-nightly-sqlserver.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="test-csvjdbc" depends="gen-all-sql-x">
    <property file="run.properties"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh-csvjdbc"/>
    <blackhawk.fork
      basedir="${luciddb.dir}"
      testscript="test-nightly-csvjdbc.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="clean-subdirs">
    <property name="target.name" value="clean"/>
    <foreach param="target.file" target="call-subdir-target" inheritAll="true">
      <fileset dir="${basedir}/test/sql">
        <include name="**/build.xml"/>
      </fileset>
    </foreach>
  </target>

<!-- End Experiment-->

  <target name="test" depends="cleanApplib,createCatalog,buildJdbcPlugin,gen-all-sql">
    <property file="run.properties"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh"/>
    <blackhawk.fork
      basedir="${luciddb.dir}"
      testscript="test.xml"
      classpathref="test.classpath"/>
  </target>

  
  <target name="bhShortregSanity">
    <blackhawk.fork basedir="test/sql/shortreg" 
      testscript="test.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="emmaBh">
    <blackhawk.fork basedir="test/sql/shortreg" 
      testscript="test.xml"
      classpathref="emma.test.classpath"/>
  </target>
    

  <target name="compile" depends="clean,makeOutputDirs">
    <!-- compile farrago first -->    
    <ant dir="${farrago.dir}" target="compile"/>
    <farrago.javaCompile
      deprecation="off"
      srcdir="${luciddb.test.dir}/src"
      destdir="${classes.dir}"
      classpathref="luciddb.build.classpath">
      <include name="**/*.java" />
    </farrago.javaCompile>
    <antcall target="buildApplibPlugin"/>    
  </target>

  <!-- creates catalog and populates with initial metadata -->
  <target name="createCatalog" depends="compile">
    <antcall target="makeOutputDirs"/>
    <antcall target="copyFarragoCatalog"/>
    <antcall target="importConfig"/>
    <antcall target="configureTrace"/>
    <antcall target="populateCatalog"/>
    <!-- runInitSql needs FarragoMedJdbc.jar in the luciddb plugin dir -->
    <copy todir="${luciddb.plugin.dir}" file="${farrago.plugin.dir}/FarragoMedJdbc.jar"/>
    <antcall target="runInitSql"/>
    <antcall target="runLuciddbInitSql"/>
    <antcall target="backupCatalog"/>
  </target>

  <target name="clean" depends="clean-dist">
    <antcall target="cleanTestLogs"/>
    <delete quiet="true">
      <fileset dir="${classes.dir}" includes="**/*.java"/>
    </delete>
    <ant dir="test/sql/shortreg" target="clean"/>
    <ant dir="test/sql/txn" target="clean"/>
    <ant dir="test/sql/udr/udf" target="clean"/>
    <ant dir="test/sql/udr/udx" target="clean"/>
    <ant dir="test/sql/VI/tbs" target="clean"/>
  </target>

  <!-- Copies the Farrago unconfigured catalog to our catalog directory. -->
  <target name="copyFarragoCatalog" depends="cleanCatalogData">
    <copy todir="${catalog.dir}" file="${farrago.ReposStorage.propfile}">
      <fileset dir="${farrago.catalog.unconfigured.dir}" />
    </copy>
  </target>

  <!-- set up the default trace configuration file -->
  <target name="configureTrace">
    <mkdir dir="${trace.dir}"/>
    <farrago.configureTrace
      propFile="${LucidDbTrace.properties}" logFile="${LucidDbTrace.log}"/>
  </target>

  <!-- delete catalog data only -->
  <target name="cleanCatalogData">
    <mkdir dir="${catalog.dir}"/>
    <farrago.cleanCatalog catalogDir="${catalog.dir}"/>
  </target>

  <!-- generate developer configuration file and import it -->
  <target name="importConfig">
    <mkdir dir="${xmi.dir}"/>
    <copy file="${FarragoConfTemplate.xmi}"
      tofile="${LucidDbConf.xmi}" overwrite="true"/>
    <replace file="${LucidDbConf.xmi}">
      <replacefilter token="@checkpointInterval@" value="0"/>
      <replacefilter token="@cachePageSize@" value="32768"/>
      <replacefilter token="@cachePagesMax@" value="5000"/>
      <replacefilter token="@cachePagesInit@" value="5000"/>
      <replacefilter token="@groupCommitInterval@" value="0"/>
      <replacefilter token="@fennel.disabled@" value="${fennel.disabled}"/>
      <replacefilter token="@resourceDir@" value="$${FARRAGO_HOME}/catalog/fennel"/>
      <replacefilter token="@jniHandleTraceFile@" value="${trace.fennel.handles}"/>
    </replace>
    <farrago.mdrFork target="forked_importConfig"/>
  </target>

  <target name="forked_importConfig" depends="farrago.mdr_taskdef">
    <mdr>
      <readXMI
        file="${LucidDbConf.xmi}"
        extent="FarragoCatalog"/>
    </mdr>
  </target>

  <!-- back up the current catalog contents -->
  <target name="backupCatalog">
    <farrago.backupCatalog 
      catalogDir="${catalog.dir}" backupDir="${catalog.backup.dir}"/>
  </target>

  <!-- restore catalog from backup -->
  <target name="restoreCatalog" depends="cleanCatalogData">
    <copy todir="${catalog.dir}">
      <fileset dir="${catalog.backup.dir}"/>
    </copy>
  </target>

  <!-- write initial metadata to catalog -->
  <target name="populateCatalog">
    <farrago.javaExec classpathref="farrago.run.classpath"
      classname="net.sf.farrago.db.FarragoDatabase"/>
  </target>

  <!-- create various output directories -->
  <target name="makeOutputDirs">
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${testlog.dir}"/>
    <copy todir="${classes.dir}" file="${release.properties.source}"
      overwrite="true"/>
  </target>

  <target name="makePluginDirs">
    <mkdir dir="${luciddb.plugin.dir}"/>
    <mkdir dir="${luciddb.plugin.dir}/applib"/>
  </target>

  <!-- task for generating resources -->
  <taskdef name="resgen" classname="org.eigenbase.resgen.ResourceGenTask">
    <classpath refid="applib.run.classpath"/>
  </taskdef>

  <target name="runInitSql" >
    <filelist dir="${farrago.initsql.dir}" id="filelist.initsql"
      files="createStorageWrappers.sql,createSqljSchema.sql,createJdbcViews.sql"/>
    <pathconvert property="filelist.initsql" refid="filelist.initsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <junit printsummary="yes" fork="yes" haltonerror="yes" haltonfailure="yes"
      tempdir="${testlog.dir}">
      <classpath refid="farrago.sqlline.classpath"/>
      <jvmarg line="${assertions.jvmarg}"/>
      <jvmarg line="&FarragoSqlLineProps;"/>
      <sysproperty key="net.sf.farrago.fileset.unitsql"
        value="${filelist.initsql}"/>
      <formatter type="plain"/>
      <formatter type="xml"/> <!-- for integration builds -->
      <test todir="${testlog.dir}" name="net.sf.farrago.test.FarragoSqlTest" />
    </junit>
  </target>

  <macrodef name="runSqlTests">
    <attribute name="filelist" default="unspecified"/>
    <attribute name="sqltest.classpath" default="unspecified"/>
    <sequential>
      <junit printsummary="yes" fork="yes" haltonerror="yes" haltonfailure="yes"
        tempdir="${testlog.dir}">
        <classpath path="@{sqltest.classpath}"/>
        <jvmarg line="${assertions.jvmarg}"/>
        <jvmarg line="&FarragoSqlLineProps;"/>
        <sysproperty key="net.sf.farrago.fileset.unitsql"
          value="@{filelist}"/>
        <formatter type="plain"/>
        <formatter type="xml"/> <!-- for integration builds -->
        <test todir="${testlog.dir}" 
          name="com.lucidera.luciddb.test.LucidDbSqlTest" />
      </junit>
    </sequential>
  </macrodef>

  <!-- create FarragoMedJdbc3p plugin jar -->
  <!-- FarragoMedJdbc.jar + jtds and oracle jdbc drivers -->
  <target name="buildJdbcPlugin" depends="makePluginDirs">
    <!-- assume farrago jdbc plugin has already been created -->
    <jar jarfile="${luciddb.plugin.dir}/FarragoMedJdbc3p.jar"
      filesetmanifest="merge">
      <zipgroupfileset dir="${farrago.plugin.dir}">
        <include name="FarragoMedJdbc.jar"/>
      </zipgroupfileset>
      <zipgroupfileset dir="${open.dir}/thirdparty/jtds">
        <include name="jtds-1.2.jar"/>
      </zipgroupfileset>
      <zipgroupfileset dir="${env.LUCIDERA_PLATFORM_HOME}/thirdparty">
        <include name="ojdbc14_g.jar"/>
      </zipgroupfileset>
    </jar>
  </target>

<!-- create applib plugin jar -->
  <target name="buildApplibPlugin" 
    depends="makePluginDirs,checkApplibPluginUptodate" 
    unless="plugin.applib.uptodate">
    <antcall target="generateApplibResource"/>
    <farrago.javaCompile
      deprecation="off" 
      srcdir="${luciddb.dir}/src"
      destdir="${applib.dir}"
      classpathref="applib.build.classpath">
      <include name="**/applib/**/*.java"/>
      <exclude name="**/ApplibException.java"/>
    </farrago.javaCompile>
    <jar jarfile="${luciddb.plugin.dir}/applib.jar">
      <fileset dir="${applib.dir}">
        <include name="**/applib/**/*"/>
      </fileset>
    </jar>
  </target>

  <target name="generateApplibResource">
    <farrago.javaCompile
      deprecation="off"
      srcdir="${luciddb.dir}/src"
      destdir="${applib.dir}"
      classpathref="applib.build.classpath">
      <include name="**/ApplibException.java"/>
    </farrago.javaCompile>
    <resgen
      srcdir="${luciddb.dir}/src"
      destdir="${luciddb.dir}/src"
      resdir="${applib.dir}"
      style="functor"
      locales="en_US">
      <include name="com/lucidera/luciddb/applib/resource/ApplibResource.xml"/>
    </resgen>
  </target>

  <target name="checkApplibPluginUptodate">
    <uptodate property="plugin.applib.uptodate"
      targetfile="${luciddb.plugin.dir}/applib.jar">
      <srcfiles dir="${luciddb.dir}/src"> 
        <include name="**/applib/**/*.java"/>
        <include name="**/applib/**/*.xml"/>
      </srcfiles>
    </uptodate>
  </target>

  <target name="runLuciddbInitSql">
    <filelist dir="${initSql.dir}" id="filelist.InitSql"
      files="installApplib.sql"/>
    <pathconvert property="filelist.InitSql" 
      refid="filelist.InitSql" pathsep="${line.separator}"
      dirsep="${file.separator}" />
    <runSqlTests filelist="${filelist.InitSql}"
      sqltest.classpath="${test.classpath}"/>
  </target>

  <target name="cleanApplib">
    <delete dir="${applib.dir}" quiet="true"/>
    <delete quiet="true">
      <fileset dir="${luciddb.dir}/src">
        <include name="**/ApplibResource.java"/>
        <include name="**/ApplibResource_en_US.java"/>
      </fileset>
    </delete>
    <delete file="${luciddb.plugin.dir}/applib.jar" quiet="true"/>
  </target>

  <target name="shortreg" depends="compile" >
    <filelist dir="${testsrc.dir}/shortreg" id="filelist.shortregsql"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql,joinEq.sql"/>
    <pathconvert property="filelist.shortregsql" refid="filelist.shortregsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <runSqlTests filelist="${filelist.shortregsql}"
            sqltest.classpath="${test.classpath}"/>
  </target>


  <target name="emmaShortreg">
    <filelist dir="${testsrc.dir}/shortreg" id="filelist.shortregsql"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql,joinEq.sql"/>
    <pathconvert property="filelist.shortregsql" refid="filelist.shortregsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <runSqlTests filelist="${filelist.shortregsql}"
            sqltest.classpath="${emma.test.classpath}"/>
  </target>

  <target name="txn">
    <filelist dir="${testsrc.dir}/txn" id="filelist.txnsql"
      files="negative.sql,rollback.sql"/>
    <pathconvert property="filelist.txnsql" refid="filelist.txnsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <runSqlTests filelist="${filelist.txnsql}"
            sqltest.classpath="${test.classpath}"/>
  </target>

  <target name="emmaTxn">
    <filelist dir="${testsrc.dir}/txn" id="filelist.txnsql"
      files="negative.sql,rollback.sql"/>
    <pathconvert property="filelist.txnsql" refid="filelist.txnsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <runSqlTests filelist="${filelist.txnsql}"
            sqltest.classpath="${emma.test.classpath}"/>
  </target>

  <!-- Extra Short Regression -->
  <target name="shortregSanity" depends="createCatalog">
    <filelist dir="${testsrc.dir}/shortreg" id="filelist.shortregsql"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql,joinEqSanity.sql"/>
    <pathconvert property="filelist.shortregsql" refid="filelist.shortregsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <runSqlTests filelist="${filelist.shortregsql}" 
      sqltest.classpath="${test.classpath}"/>
  </target>

  <!-- Extra Short Regression -->
  <target name="emmaShortregSanity" depends="createCatalog">
    <filelist dir="${testsrc.dir}/shortreg" id="filelist.shortregsql"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql,joinEqSanity.sql"/>
    <pathconvert property="filelist.shortregsql" refid="filelist.shortregsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <runSqlTests filelist="${filelist.shortregsql}" 
      sqltest.classpath="${emma.test.classpath}"/>
  </target>

  <target name="cleanTestLogs">
    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="${testlog.dir}" includes="*.xml"/>
      <fileset dir="${testlog.dir}" includes="*.txt"/>
      <fileset dir="${testlog.dir}/bh"/>
      <fileset dir="${testsrc.dir}" includes="**/*.log"/>
      <fileset dir="${testsrc.dir}" includes="**/*.dif"/>
    </delete>
    <delete quiet="true" file="${LucidDbTrace.log}"/>
  </target>

  <available file="${farrago.dir}/classes-cov/com" property="farrago.classes-cov.exists"/>

  <target name="cov" if="farrago.classes-cov.exists">
    <antcall target="emmaClean"/>
    <antcall target="emmaInstr"/>
    <antcall target="emmaTest"/>
    <antcall target="emmaReport"/>
  </target>

  <target name="covAll" if="farrago.classes-cov.exists">
    <antcall target="emmaClean"/>
    <antcall target="emmaInstr"/>
    <antcall target="emmaTest"/>
    <antcall target="emmaShortreg"/>
    <antcall target="emmaReport"/>
  </target>

  <target name="emmaClean">
    <delete dir="${emma.luciddb.classes.dir}" quiet="true"/>
    <delete quiet="true">
      <fileset dir="." includes="coverage.*"/>
      <fileset dir="coverage"/>
    </delete>
    <mkdir dir="coverage"/>
    <mkdir dir="${emma.luciddb.classes.dir}"/>
  </target>

  <target name="emmaInstr" depends="emmaClean">
    <emma verbosity="verbose">
      <instr 
        mode="copy" 
        outdir="${emma.luciddb.classes.dir}" 
        instrpath="${classes.dir}">
        <filter excludes="*_Stub*"/>
      </instr>
    </emma>
  </target>
 
  <target name="emmaTest" depends="emmaInstr">
    <antcall target="emmaShortregSanity"/>
    <antcall target="emmaTxn"/>
    <antcall target="emmaBh" />
  </target>

  <target name="emmaReport">
    <emma verbosity="verbose">
      <report sourcepath="${luciddb.test.dir}/src,${farrago.src.dir}">
        <infileset dir="${farrago.dir}" includes="*.em"/>
        <infileset dir="." includes="*.em, *.ec"/>
        <html/>
        <xml/>
        <txt/>
      </report>
    </emma>
  </target>

  <!-- Experimental Area: Let's see about creating fine-grained tests with dependencies specified -->

  <macrodef name="xrunSqlTests">
    <attribute name="filelist" default="unspecified"/>
    <sequential>
      <junit printsummary="yes" fork="yes" forkmode="perBatch" haltonerror="no" haltonfailure="no"
        tempdir="${testlog.dir}">
        <classpath refid="test.classpath"/>
        <jvmarg line="${assertions.jvmarg}"/>
        <jvmarg line="&FarragoSqlLineProps;"/>
        <sysproperty key="net.sf.farrago.fileset.unitsql"
          value="@{filelist}"/>
        <formatter type="plain"/>
        <formatter type="xml"/> <!-- for integration builds -->
        <test todir="${testlog.dir}" 
          name="com.lucidera.luciddb.test.LucidDbSqlTest" />
      </junit>
    </sequential>
  </macrodef>

  <target name="x">
    <filelist dir="${testsrc.dir}/shortreg" id="filelist.shortregsql"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql,${testfile}"/>
    <pathconvert property="filelist.shortregsql" refid="filelist.shortregsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <xrunSqlTests filelist="${filelist.shortregsql}"/>
  </target>

  <!-- generic ant target that is parameterized by sql file -->
  <target name="run-sql-test">
    <echo>
      sql.files is ${sql.files}
    </echo>
    <junit printsummary="yes" fork="yes" haltonerror="yes" haltonfailure="yes"
      tempdir="${testlog.dir}">
      <classpath refid="test.classpath"/>
      <jvmarg line="${assertions.jvmarg}"/>
      <jvmarg line="&FarragoSqlLineProps;"/>
      <sysproperty key="net.sf.farrago.fileset.unitsql"
        value="${sql.files}"/>
      <formatter type="plain"/>
      <formatter type="xml"/> <!-- for integration builds -->
      <test todir="${testlog.dir}" name="com.lucidera.luciddb.test.LucidDbSqlTest" />
    </junit>
  </target>

  <!-- joinEqSanity test - Basic equi-join tests -->
  <target name="test-join-eq-sanity" depends="test-setup">
    <antcall target="run-sql-test">
      <param name="sql.files" value="${testsrc.dir}/shortreg/joinEqSanity.sql"/>
    </antcall>
  </target>

  <!-- joinEqSanity test - Basic equi-join tests -->
  <target name="test-join-eq" depends="test-setup">
    <antcall target="run-sql-test">
      <param name="sql.files" value="${testlog.dir}/shortreg/joinEq.sql"/>
    </antcall>
  </target>

  <!-- joinRng test - Range join tests. -->
  <target name="test-join-rng" depends="test-setup">
    <antcall target="run-sql-test">
      <param name="sql.files" value="${testsrc.log}/shortreg/joinRng.sql"/>
    </antcall>
  </target>

  <target name="test-setup" depends="createCatalog">
    <filelist dir="${testsrc.log}/shortreg" id="filelist.setup"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql"/>
    <pathconvert property="filelist.setup" refid="filelist.setup"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <antcall target="run-sql-test">
      <param name="sql.files" value="${filelist.setup}"/>
    </antcall>
  </target>

  <target name="dist" depends="clean-dist,buildJdbcPlugin">
    <property file="${release.properties.source}" />
    <property name="lucidera.release.spec" 
      value="${package.name}-${product.version.major}.${product.version.minor}.${product.version.point}"/>
    <property name="release.lib.dir" 
      location="${dist.dir}/${lucidera.release.spec}/lib"/>
    <property name="release.properties.target" 
      location="${release.lib.dir}/FarragoRelease.properties"/>

    <osfamily property="osfamily"/>

    <mkdir dir="${dist.dir}"/>

    <if>
      <equals arg1="${osfamily}" arg2="unix"/>
      <then>
	<exec executable="/bin/tar" spawn="false" dir="${dist.dir}"> 
          <arg value="--bzip2"/>
          <arg value="-xf"/>
          <arg value="${farrago.dist.file}"/>
        </exec>
      </then>
      <else>
        <unzip src="${farrago.dist.file}" dest="${dist.dir}"/>
      </else>
    </if>

    <ant target="rename-dir-to-luciddb" inheritAll="false">
	<property name="lu.package.name" value="${package.name}"/>
	<property name="lu.product.version.major" value="${product.version.major}"/>
	<property name="lu.product.version.minor" value="${product.version.minor}"/>
	<property name="lu.product.version.point" value="${product.version.point}"/>
    </ant>

    <copy todir="${dist.dir}/${lucidera.release.spec}/catalog">
      <fileset dir="${catalog.backup.dir}"/>
    </copy>
    <copy todir="${release.lib.dir}/plugin">
      <fileset dir="${luciddb.plugin.dir}"/>
    </copy>

    <copy file="${release.properties.source}"
      todir="${release.lib.dir}" overwrite="true"/>
    <chmod file="${release.properties.target}" perm="u+w" />
    <touch file="${release.properties.target}"/>

    <jar update="true" 
      destfile="${release.lib.dir}/farrago.jar"
      basedir="${release.lib.dir}"
      keepcompression="true" 
      includes="FarragoRelease.properties"/>
    <delete file="${release.properties.target}"/>

    <if>
      <equals arg1="${osfamily}" arg2="unix"/>
      <then>
	<exec executable="/bin/tar" spawn="false" dir="${dist.dir}"> 
          <arg value="--bzip2"/>
          <arg value="-cf"/>
          <arg value="${dist.dir}/luciddb.tar.bz2"/>
          <arg value="${lucidera.release.spec}"/>
        </exec>
      </then>
      <else>
        <zip destfile="${dist.dir}/luciddb.zip">
          <zipfileset dir="${dist.dir}/${lucidera.release.spec}" prefix="${lucidera.release.spec}"/>
        </zip>
      </else>
    </if>

  </target>

  <target name="clean-dist">
    <delete quiet="true" includeEmptyDirs="true">
      <fileset dir="${dist.dir}"/>
    </delete>
  </target>

  <target name="rename-dir-to-luciddb">
    <property file="${farrago.dist.dir}/FarragoRelease.properties" />
    <property 
      name="farrago.release.spec" 
      value="${package.name}-${product.version.major}.${product.version.minor}.${product.version.point}"/>

    <property 
      name="lucidera.release.spec" 
      value="${lu.package.name}-${lu.product.version.major}.${lu.product.version.minor}.${lu.product.version.point}"/>

    <delete quiet="true" includeEmptyDirs="true">
      <fileset dir="${dist.dir}/${lucidera.release.spec}"/>
    </delete>

    <move todir="${dist.dir}/${lucidera.release.spec}">
      <fileset dir="${dist.dir}/${farrago.release.spec}"/>
    </move>

  </target>

  <target name="createEclipseProject">

    <pathconvert property="eclipse.libpath" refid="luciddb.build.classpath"
      pathsep="&quot;/&gt;&#10;&lt;classpathentry kind=&quot;lib&quot; path=&quot;"/>
    <copy file="${luciddb.dir}/eclipse/.project" overwrite="true"
        tofile="${luciddb.dir}/.project">
    </copy>
    <copy file="${luciddb.dir}/eclipse/.classpath" overwrite="true"
        tofile="${luciddb.dir}/.classpath">
      <filterset>
        <filter token="LIBPATH" value="${eclipse.libpath}"/>
      </filterset>
    </copy>
    <replace file="${luciddb.dir}/.classpath" token="${farrago.catalog.src.dir}" value="/farrago/catalog/java"/>
    <replace file="${luciddb.dir}/.classpath" token="${farrago.classes.dir}" value="/farrago/classes"/>
    <replace file="${luciddb.dir}/.classpath" token="${classes.dir}" value="classes"/>
    <copy todir="${luciddb.dir}/.settings" overwrite="true">
      <fileset dir="${luciddb.dir}/eclipse/.settings"/>
    </copy>
  </target>

</project>
