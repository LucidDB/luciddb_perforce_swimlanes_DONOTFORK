<?xml version="1.0" encoding="UTF-8"?>
<!-- 
// $Id$
// LucidDB is a DBMS optimized for business intelligence.
// Copyright (C) 2005-2005 LucidEra, Inc.
// Copyright (C) 2005-2005 The Eigenbase Project
//
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version approved by The Eigenbase Project.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//  
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->

<!DOCTYPE project [

<!ENTITY FarragoProps
"
-Dnet.sf.farrago.home=${farrago.dir}
-Dnet.sf.farrago.catalog=${project.catalog.dir}
-Djava.util.logging.config.file=${project.trace.propfile}
-Dnet.sf.farrago.defaultSessionFactoryLibraryName=class:com.lucidera.farrago.LucidDbSessionFactory
-Dnet.sf.farrago.test.jdbcDriverClass=com.lucidera.jdbc.LucidDbLocalDriver
">

]>

<project name="luciddb" basedir="." default="test">
  <dirname property="luciddb.dir" file="${ant.file.luciddb}" />

  <!-- assume common parent of fennel, farrago and luciddb  -->
  <property name="open.dir" location=".."/>
  <fail unless="open.dir" />
  <property name="farrago.dir" location="${open.dir}/farrago"/>
  <property name="fennel.dir" location="${open.dir}/fennel"/>

  <property environment="env" />
  <property file="${farrago.dir}/initBuild.properties" />
  <property file="${farrago.dir}/customBuild.properties" />

  <!-- directory in which classes are built -->
  <property name="classes.dir" location="${luciddb.dir}/classes" />

  <property name="luciddb.test.dir" location="${luciddb.dir}/test" />
  <property name="luciddb.plugin.dir" location="${luciddb.dir}/plugin" />

  <!-- directory in which catalog data is stored -->
  <property name="catalog.dir" location="${luciddb.dir}/catalog" />

  <!-- directory in which catalog XMI files are stored -->
  <property name="xmi.dir" location="${catalog.dir}/xmi" />

  <!-- directory in which catalog data is backed up -->
  <property name="catalog.backup.dir" location="${catalog.dir}/backup" />

  <property name="trace.dir" location="${luciddb.dir}/trace" />

  <property name="LucidDbTrace.properties" 
    location="${trace.dir}/LucidDbTrace.properties" />

  <property name="LucidDbTrace.log" location="${trace.dir}/LucidDbTrace.log" />

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${catalog.dir}" />
  <property name="project.trace.propfile" location="${LucidDbTrace.properties}" />

  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory for JUnit run output -->
  <property name="testlog.dir" location="${luciddb.dir}/testlog"/>

  <property name="testsrc.dir" location="${luciddb.test.dir}/sql"/>

  <!-- Template developer configuration file. -->
  <property name="FarragoConfTemplate.xmi"
    location="${farrago.xmi.dir}/FarragoConfTemplate.xmi"/>

  <!-- Developer configuration file generated from template. -->
  <property name="LucidDbConf.xmi"
    location="${xmi.dir}/LucidDbConf.xmi"/>

  <!-- Set to a path to enable Fennel JNI handle tracing during tests. -->
  <property name="trace.fennel.handles" value=""/>

  <!-- Classpaths -->

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${classes.dir}"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${bh.run.classpath}"/>
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <path id="luciddb.build.classpath">
    <pathelement path="${test.classpath}"/>
    <pathelement location="${farrago.classes.dir}"/>
  </path>
  <property name="luciddb.build.classpath" refid="luciddb.build.classpath"/>

  <target name="test" depends="compile,createCatalog,buildJdbcPlugin">
    <antcall target="xreg"/>
    <!-- antcall target="txn"/ -->
    <antcall target="bh" />
  </target>

  <target name="bh">
    <blackhawk.fork basedir="test/sql/shortreg" 
      testscript="test.xml"
      classpathref="test.classpath"/>
  </target>
    

  <target name="compile" depends="clean,makeOutputDirs">
    <!-- compile farrago first -->    
    <ant dir="${farrago.dir}" target="compile"/>

    <farrago.javaCompile
      deprecation="off"
      srcdir="${luciddb.test.dir}/src"
      destdir="${classes.dir}"
      classpathref="luciddb.build.classpath">
      <include name="**/*.java" />
    </farrago.javaCompile>    
  </target>

  <!-- creates catalog and populates with initial metadata -->
  <target name="createCatalog">
    <antcall target="makeOutputDirs"/>
    <antcall target="copyFarragoCatalog"/>
    <antcall target="importConfig"/>
    <antcall target="configureTrace"/>
    <antcall target="populateCatalog"/>
    <antcall target="runInitSql"/>
    <antcall target="backupCatalog"/>
  </target>

  <target name="clean">
    <antcall target="cleanTestLogs"/>
    <delete quiet="true">
      <fileset dir="${classes.dir}" includes="**/*.java"/>
    </delete>
  </target>

  <!-- Copies the Farrago unconfigured catalog to our catalog directory. -->
  <target name="copyFarragoCatalog" depends="cleanCatalogData">
    <copy todir="${catalog.dir}" file="${farrago.ReposStorage.propfile}">
      <fileset dir="${farrago.catalog.unconfigured.dir}" />
    </copy>
  </target>

  <!-- set up the default trace configuration file -->
  <target name="configureTrace">
    <mkdir dir="${trace.dir}"/>
    <farrago.configureTrace
      propFile="${LucidDbTrace.properties}" logFile="${LucidDbTrace.log}"/>
  </target>

  <!-- delete catalog data only -->
  <target name="cleanCatalogData">
    <mkdir dir="${catalog.dir}"/>
    <farrago.cleanCatalog catalogDir="${catalog.dir}"/>
  </target>

  <!-- generate developer configuration file and import it -->
  <target name="importConfig">
    <mkdir dir="${xmi.dir}"/>
    <copy file="${FarragoConfTemplate.xmi}"
      tofile="${LucidDbConf.xmi}" overwrite="true"/>
    <replace file="${LucidDbConf.xmi}">
      <replacefilter token="@checkpointInterval@" value="0"/>
      <replacefilter token="@cachePageSize@" value="32768"/>
      <replacefilter token="@cachePagesMax@" value="5000"/>
      <replacefilter token="@cachePagesInit@" value="5000"/>
      <replacefilter token="@groupCommitInterval@" value="0"/>
      <replacefilter token="@fennel.disabled@" value="${fennel.disabled}"/>
      <replacefilter token="@resourceDir@" value="$${FARRAGO_HOME}/catalog/fennel"/>
      <replacefilter token="@jniHandleTraceFile@" value="${trace.fennel.handles}"/>
    </replace>
    <farrago.mdrFork target="forked_importConfig"/>
  </target>

  <target name="forked_importConfig" depends="farrago.mdr_taskdef">
    <mdr>
      <readXMI
        file="${LucidDbConf.xmi}"
        extent="FarragoCatalog"/>
    </mdr>
  </target>

  <!-- back up the current catalog contents -->
  <target name="backupCatalog">
    <farrago.backupCatalog 
      catalogDir="${catalog.dir}" backupDir="${catalog.backup.dir}"/>
  </target>

  <!-- restore catalog from backup -->
  <target name="restoreCatalog" depends="cleanCatalogData">
    <copy todir="${catalog.dir}">
      <fileset dir="${catalog.backup.dir}"/>
    </copy>
  </target>

  <!-- write initial metadata to catalog -->
  <target name="populateCatalog">
    <farrago.javaExec classpathref="farrago.run.classpath"
      classname="net.sf.farrago.db.FarragoDatabase"/>
  </target>

  <!-- create various output directories -->
  <target name="makeOutputDirs">
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${testlog.dir}"/>
    <copy todir="${classes.dir}" file="${xmi.dir}/FarragoRelease.properties"
      overwrite="true"/>
  </target>

  <target name="runInitSql" >
    <filelist dir="${farrago.initsql.dir}" id="filelist.initsql"
      files="createStorageWrappers.sql,createSqljSchema.sql,createJdbcViews.sql"/>
    <pathconvert property="filelist.initsql" refid="filelist.initsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <junit printsummary="yes" fork="yes" haltonerror="yes" haltonfailure="yes"
      tempdir="${testlog.dir}">
      <classpath refid="farrago.sqlline.classpath"/>
      <jvmarg line="${assertions.jvmarg}"/>
      <jvmarg line="&FarragoProps;"/>
      <sysproperty key="net.sf.farrago.fileset.unitsql"
        value="${filelist.initsql}"/>
      <formatter type="plain"/>
      <formatter type="xml"/> <!-- for integration builds -->
      <test todir="${testlog.dir}" name="net.sf.farrago.test.FarragoSqlTest" />
    </junit>
  </target>

  <macrodef name="runSqlTests">
    <attribute name="filelist" default="unspecified"/>
    <sequential>
      <junit printsummary="yes" fork="yes" haltonerror="yes" haltonfailure="yes"
        tempdir="${testlog.dir}">
        <classpath refid="test.classpath"/>
        <jvmarg line="${assertions.jvmarg}"/>
        <jvmarg line="&FarragoProps;"/>
        <sysproperty key="net.sf.farrago.fileset.unitsql"
          value="@{filelist}"/>
        <formatter type="plain"/>
        <formatter type="xml"/> <!-- for integration builds -->
        <test todir="${testlog.dir}" 
          name="com.lucidera.luciddb.test.LucidDbSqlTest" />
      </junit>
    </sequential>
  </macrodef>

  <!-- create FarragoMedJdbc3p plugin jar -->
  <!-- FarragoMedJdbc.jar + jtds and oracle jdbc drivers -->
  <target name="buildJdbcPlugin">
    <!-- assume farrago jdbc plugin has already been created -->
    <mkdir dir="${luciddb.plugin.dir}"/>
    <jar jarfile="${luciddb.plugin.dir}/FarragoMedJdbc3p.jar"
      filesetmanifest="merge">
      <zipgroupfileset dir="${farrago.plugin.dir}">
        <include name="FarragoMedJdbc.jar"/>
      </zipgroupfileset>
      <zipgroupfileset dir="${open.dir}/thirdparty/jtds">
        <include name="jtds-1.2.jar"/>
      </zipgroupfileset>
      <zipgroupfileset dir="${env.LUCIDERA_PLATFORM_HOME}/thirdparty">
        <include name="ojdbc14_g.jar"/>
      </zipgroupfileset>
    </jar>
  </target>

  <target name="shortreg" depends="compile" >
    <filelist dir="${testsrc.dir}/shortreg" id="filelist.shortregsql"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql,joinEq.sql"/>
    <pathconvert property="filelist.shortregsql" refid="filelist.shortregsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <runSqlTests filelist="${filelist.shortregsql}"/>
  </target>

  <target name="txn" depends="compile">
    <filelist dir="${testsrc.dir}/txn" id="filelist.txnsql"
      files="negative.sql,rollback.sql"/>
    <pathconvert property="filelist.txnsql" refid="filelist.txnsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <runSqlTests filelist="${filelist.txnsql}"/>
  </target>

  <!-- Extra Short Regression -->
  <target name="xreg" depends="compile,createCatalog">
    <filelist dir="${testsrc.dir}/shortreg" id="filelist.shortregsql"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql,joinEqSanity.sql"/>
    <pathconvert property="filelist.shortregsql" refid="filelist.shortregsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <runSqlTests filelist="${filelist.shortregsql}"/>
  </target>

  <target name="cleanTestLogs">
    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="${testlog.dir}" includes="*.xml"/>
      <fileset dir="${testlog.dir}" includes="*.txt"/>
      <fileset dir="${testlog.dir}/shortreg"/><!-- delete eventually-->
      <fileset dir="${testlog.dir}/txn"/><!-- delete eventually-->
      <fileset dir="${testsrc.dir}" includes="**/*.log"/>
      <fileset dir="${testsrc.dir}" includes="**/*.dif"/>
    </delete>
    <delete quiet="true" file="${LucidDbTrace.log}"/>
  </target>

  <!-- Experimental Area: Let's see about creating fine-grained tests with dependencies specified -->

  <macrodef name="xrunSqlTests">
    <attribute name="filelist" default="unspecified"/>
    <sequential>
      <junit printsummary="yes" fork="yes" forkmode="perBatch" haltonerror="no" haltonfailure="no"
        tempdir="${testlog.dir}">
        <classpath refid="test.classpath"/>
        <jvmarg line="${assertions.jvmarg}"/>
        <jvmarg line="&FarragoProps;"/>
        <sysproperty key="net.sf.farrago.fileset.unitsql"
          value="@{filelist}"/>
        <formatter type="plain"/>
        <formatter type="xml"/> <!-- for integration builds -->
        <test todir="${testlog.dir}" 
          name="com.lucidera.luciddb.test.LucidDbSqlTest" />
      </junit>
    </sequential>
  </macrodef>

  <target name="x">
    <filelist dir="${testsrc.dir}/shortreg" id="filelist.shortregsql"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql,${testfile}"/>
    <pathconvert property="filelist.shortregsql" refid="filelist.shortregsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <xrunSqlTests filelist="${filelist.shortregsql}"/>
  </target>

  <!-- generic ant target that is parameterized by sql file -->
  <target name="run-sql-test">
    <echo>
      sql.files is ${sql.files}
    </echo>
    <junit printsummary="yes" fork="yes" haltonerror="yes" haltonfailure="yes"
      tempdir="${testlog.dir}">
      <classpath refid="test.classpath"/>
      <jvmarg line="${assertions.jvmarg}"/>
      <jvmarg line="&FarragoProps;"/>
      <sysproperty key="net.sf.farrago.fileset.unitsql"
        value="${sql.files}"/>
      <formatter type="plain"/>
      <formatter type="xml"/> <!-- for integration builds -->
      <test todir="${testlog.dir}" name="com.lucidera.luciddb.test.LucidDbSqlTest" />
    </junit>
  </target>

  <!-- joinEqSanity test - Basic equi-join tests -->
  <target name="test-join-eq-sanity" depends="test-setup">
    <antcall target="run-sql-test">
      <param name="sql.files" value="${testsrc.dir}/shortreg/joinEqSanity.sql"/>
    </antcall>
  </target>

  <!-- joinEqSanity test - Basic equi-join tests -->
  <target name="test-join-eq" depends="test-setup">
    <antcall target="run-sql-test">
      <param name="sql.files" value="${testlog.dir}/shortreg/joinEq.sql"/>
    </antcall>
  </target>

  <!-- joinRng test - Range join tests. -->
  <target name="test-join-rng" depends="test-setup">
    <antcall target="run-sql-test">
      <param name="sql.files" value="${testsrc.log}/shortreg/joinRng.sql"/>
    </antcall>
  </target>

  <target name="test-setup" depends="compile,createCatalog">
    <filelist dir="${testsrc.log}/shortreg" id="filelist.setup"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql"/>
    <pathconvert property="filelist.setup" refid="filelist.setup"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <antcall target="run-sql-test">
      <param name="sql.files" value="${filelist.setup}"/>
    </antcall>
  </target>

</project>
