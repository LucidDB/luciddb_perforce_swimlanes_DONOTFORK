<?xml version="1.0" encoding="UTF-8"?>
<!--
// $Id$
// LucidDB is a DBMS optimized for business intelligence.
// Copyright (C) 2005-2007 LucidEra, Inc.
// Copyright (C) 2005-2007 The Eigenbase Project
//
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version approved by The Eigenbase Project.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->

<!DOCTYPE project [

<!ENTITY FarragoProps
"
-Dnet.sf.farrago.home=${luciddb.dir}
-Dnet.sf.farrago.catalog=${project.catalog.dir}
-Djava.util.logging.config.file=${project.trace.propfile}
-Dnet.sf.farrago.defaultSessionFactoryLibraryName=class:org.luciddb.session.LucidDbSessionFactory
-Dnet.sf.farrago.test.jdbcDriverClass=org.luciddb.jdbc.LucidDbLocalDriver
${farrago.test.jvmargs}
">

<!ENTITY FarragoSqlLineProps
"
&FarragoProps;
-Dsqlline.historyFile=${sqlline.hist.file}
">

]>

<project name="luciddb" default="test">
  <taskdef resource="net/sf/antcontrib/antlib.xml" />

  <dirname property="luciddb.dir" file="${ant.file.luciddb}" />
  <property environment="env" />
  <osfamily property="osfamily"/>

<!-- assume common parent of fennel, farrago and luciddb  -->
  <property name="open.dir" location="${luciddb.dir}/.."/>
  <fail unless="open.dir" />
  <property name="farrago.dir" location="${open.dir}/farrago"/>
  <property name="farrago.dist.dir" location="${farrago.dir}/dist"/>

  <property name="build.init.properties" location="${luciddb.dir}/build.init.properties" />
  <import file="${luciddb.dir}/properties.xml" />

  <!-- farrago distribution file -->
  <condition property="farrago.dist.file"
    value="${farrago.dist.dir}/farrago.zip">
    <os family="windows"/>
  </condition>
  <condition property="farrago.dist.file"
    value="${farrago.dist.dir}/farrago.tar.bz2">
    <not>
      <os family="windows"/>
    </not>
  </condition>

  <property name="fennel.dir" location="${open.dir}/fennel"/>

  <property file="${farrago.dir}/initBuild.properties" />
  <property file="${luciddb.dir}/customBuild.properties" />
  <!-- inherit Farrago custom build properties, but only if not already set 
       by LucidDB -->
  <property file="${farrago.dir}/customBuild.properties" />

  <!-- directory in which classes are built -->
  <property name="classes.dir" location="${luciddb.dir}/classes" />

  <property name="luciddb.test.dir" location="${luciddb.dir}/test" />
  <property name="luciddb.plugin.dir" location="${luciddb.dir}/plugin" />
  <property name="applib.dir" location="${luciddb.plugin.dir}/applib" />
  <property name="mbean.dir" location="${luciddb.plugin.dir}/mbean" />

  <!-- directory in which catalog data is stored -->
  <property name="catalog.dir" location="${luciddb.dir}/catalog" />

  <!-- directory in which catalog XMI files are stored -->
  <property name="xmi.dir" location="${catalog.dir}/xmi" />

  <!-- FIXME jvs 2-Jun-2007:  delete this file and generate it instead -->
  <!-- should not have burned-in version info like this anywhere -->
  <property name="release.properties.source" location="${xmi.dir}/FarragoRelease.properties" />

  <!-- directory in which catalog data is backed up -->
  <property name="catalog.backup.dir" location="${catalog.dir}/backup" />

  <property name="trace.dir" location="${luciddb.dir}/trace" />

  <property name="LucidDbTrace.properties"
    location="${trace.dir}/LucidDbTrace.properties" />

  <property name="LucidDbTrace.log" location="${trace.dir}/LucidDbTrace.log" />

  <property name="LucidDbMdrBuildTrace.properties"
    location="${trace.dir}/LucidDbMdrBuildTrace.properties" />

  <property name="LucidDbMdrBuildTrace.log" location="${trace.dir}/LucidDbMdrBuildTrace.log" />

  <!-- default LucidDb catalog schema name -->
  <property name="luciddb.catalog.schema" value="luciddb"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${catalog.dir}" />
  <property name="project.catalog.schema" value="${luciddb.catalog.schema}" />
  <property name="project.trace.propfile" location="${LucidDbTrace.properties}" />

  <!-- directory for JUnit run output -->
  <property name="testlog.dir" location="${luciddb.dir}/testlog"/>

  <property name="testsrc.dir" location="${luciddb.test.dir}/sql"/>

  <property name="project.testlog.dir" location="${testlog.dir}" />

  <!-- Default build mode is "dev", in this mode load some specific sqls needed for running -->
  <!-- the automated test targets  -->
  <property name="build.mode" value="developer"/>

  <import file="${open.dir}/farrago/buildMacros.xml" />
  <import file="${luciddb.dir}/buildMacros.xml" />

   <!-- Template developer configuration file. -->
  <property name="FarragoConfTemplate.xmi"
    location="${farrago.xmi.dir}/FarragoConfTemplate.xmi"/>

  <!-- Developer configuration file generated from template. -->
  <property name="LucidDbConf.xmi"
    location="${xmi.dir}/LucidDbConf.xmi"/>

  <!-- Set to a path to enable Fennel JNI handle tracing during tests. -->
  <property name="trace.fennel.handles" value=""/>

  <property name="dist.dir"
    location="${luciddb.dir}/dist"/>

  <property name="emma.luciddb.classes.dir" location="${luciddb.dir}/classes-cov"/>

  <property name="coverage.dir" value="${luciddb.dir}/coverage"/>

  <if>
    <equals arg1="${osfamily}" arg2="unix"/>
    <then>
      <property name="lu.release.file" location="${dist.dir}/luciddb.tar.bz2"/>
    </then>
    <else>
      <property name="lu.release.file" location="${dist.dir}/luciddb.zip"/>
    </else>
  </if>

  <!-- Classpaths -->

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${classes.dir}"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${luciddb.plugin.dir}/luciddb-mbean.jar"/>
    <pathelement path="${luciddb.plugin.dir}/applib.jar"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <!-- classpath for emma-instrumented running tests via ant -->
  <path id="emma.test.classpath">
    <pathelement path="${emma.luciddb.classes.dir}"/>
    <pathelement path="${emma.farrago.classes.dir}"/>
    <pathelement path="${emma.classpath}"/>
    <pathelement path="${test.classpath}"/>
  </path>
  <property name="emma.test.classpath" refid="emma.test.classpath"/>

  <path id="luciddb.build.classpath">
    <pathelement path="${test.classpath}"/>
    <pathelement location="${farrago.classes.dir}"/>
  </path>
  <property name="luciddb.build.classpath" refid="luciddb.build.classpath"/>

  <path id="applib.build.classpath">
    <pathelement path="${applib.dir}"/>
    <pathelement path="${farrago.classes.dir}"/>
    <pathelement path="${farrago.catalog.src.dir}"/>
    <pathelement path="${resgen.dir}/lib/eigenbase-resgen.jar"/>
    <pathelement path="${resgen.dir}/lib/eigenbase-xom.jar"/>
    <pathelement path="${mdrlibs.dir}/jmi.jar"/>
    <pathelement path="${jgrapht.dir}/jgrapht-jdk1.5.jar"/>
    <pathelement path="${openjava.dir}/openjava.jar"/>
  </path>
  <property name="applib.build.classpath" refid="applib.build.classpath"/>

  <path id="applib.run.classpath">
    <pathelement path="${farrago.run.classpath}"/>
    <pathelement path="${applib.dir}"/>
  </path>
  <property name="applib.run.classpath" refid="applib.run.classpath"/>

  <path id="mbean.build.classpath">
    <pathelement path="${mbean.dir}"/>
    <pathelement path="${farrago.classes.dir}"/>
    <pathelement path="${farrago.catalog.src.dir}"/>
    <pathelement path="${resgen.dir}/lib/eigenbase-resgen.jar"/>
    <pathelement path="${resgen.dir}/lib/eigenbase-xom.jar"/>
    <pathelement path="${mdrlibs.dir}/jmi.jar"/>
    <pathelement path="${jgrapht.dir}/jgrapht-jdk1.5.jar"/>
    <pathelement path="${openjava.dir}/openjava.jar"/>
  </path>
  <property name="mbean.build.classpath" refid="mbean.build.classpath"/>

  <path id="mbean.run.classpath">
    <pathelement path="${farrago.run.classpath}"/>
    <pathelement path="${mbean.dir}"/>
  </path>
  <property name="mbean.run.classpath" refid="mbean.run.classpath"/>

  <!-- LucidDb Defaults, can override in ${luciddb.dir}/customBuild.properties -->
  <property name="fennel.databaseInitSize" value="2000"/>
  <property name="fennel.tempInitSize" value="3000"/>
  <property name="fennel.checkpointInterval" value="0"/>
  <property name="fennel.cachePageSize" value="32768"/>
  <property name="fennel.cachePagesMax" value="5000"/>
  <property name="fennel.cachePagesInit" value="5000"/>
  <property name="fennel.groupCommitInterval" value="0"/>

  <target name="gen-bh-report">
    <xslt basedir="testlog" destdir="testlog" style="bh-html.xsl" includes="**/bh.xml" extension=".html"/>
    <xslt basedir="testlog" destdir="testlog" style="bh-xml.xsl" includes="**/bh.xml">
      <mapper type="regexp" from="^(.*)bh" to="\1/TEST-bh.xml" />
    </xslt>
    <!-- If test is failed, let it exit(ie.,BUILD FAILED)-->
    <length file="${luciddb.dir}/testlog/bh/bh.debug" property="bh.testres.filesize"/>
      <if>
        <equals arg1="${bh.testres.filesize}" arg2="0" />
          <then>
          </then>
      <else>
         <fail message="Some tests were failed."/>
      </else>
      </if>
  </target>

  <target name="gen-bh-report-all">
    <xslt basedir="." destdir="testlog/bh" style="bh-html.xsl" includes="**/bh.xml" extension=".html"/>
    <xslt basedir="." destdir="testlog/bh" style="bh-xml.xsl" includes="**/bh.xml">
      <mapper type="regexp" from="^(.*)bh" to="\1/TEST-bh.xml" />
    </xslt>
  </target>

  <taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" classpath="${ant.classpath}"/>
  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>

  <target name="gen-properties">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
  </target>

  <target name="gen-all-sql" depends="gen-properties">
    <property name="target.name" value="gen-all-sql"/>
    <foreach param="target.file" target="call-subdir-target" inheritAll="true">
      <path>
        <fileset dir="${luciddb.dir}/test/sql">
          <include name="**/build.xml"/>
        </fileset>
      </path>
    </foreach>
  </target>

  <target name="call-subdir-target">
    <echo>
      This is the target.file: ${target.file}
    </echo>
    <dirname property="target.dir" file="${target.file}" />
    <ant dir="${target.dir}" antfile="${target.file}" target="${target.name}" inheritAll="false">
        <property name="open.dir" location="${open.dir}"/>
    </ant>
  </target>

  <!-- Nightly tests -->
  <target name="test-nightly-all-init" depends="cleanJars,createCatalog">
    <antcall target="clean-subdirs"/>
    <antcall target="gen-all-sql"/>
  </target>

  <!-- temporarily added target for nightly test -->
  <target name="test-nondb-concurrency" depends="gen-properties">
    <property name="bh.filter.runDuration" value="short,medium,null"/>
    <property name="foreign.db" value="nondb"/>
    <property name="bh.log.gtlf.env.ForeignDb" value="ldb-nondb"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh-nondb-concurrent"/>
    <property file="run.properties"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test-nightly-nondb-concurrent.xml"
      classpathref="test.classpath"/>
  </target>
  <!-- end temporary target -->

  <target name="test-nondb" depends="gen-properties">
    <property name="bh.filter.runDuration" value="short,medium,null"/>
    <property name="foreign.db" value="nondb"/>
    <property name="bh.log.gtlf.env.ForeignDb" value="ldb-nondb"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh-nondb"/>
    <property file="run.properties"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test-nightly-nondb.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="test-nondb-backupRestore" depends="gen-properties">
    <ant dir="${luciddb.dir}/test/sql/backupRestore" target="test" inheritAll="false">
      <property name="foreign.db" value="nondb"/>
      <property name="bh.log.gtlf.env.ForeignDb" value="ldb-nondb"/>
      <property name="testlog.dir" value="${testlog.dir}"/>
    </ant>
  </target>

  <target name="test-nondb-concurrency-backupRestore" depends="gen-properties">
    <ant dir="${luciddb.dir}/test/sql/concurrency/backupRestore"
       target="test" inheritAll="false">
      <property name="foreign.db" value="nondb"/>
      <property name="bh.log.gtlf.env.ForeignDb" value="ldb-nondb"/>
      <property name="testlog.dir" value="${testlog.dir}"/>
    </ant>
  </target>

  <target name="test-flatfile" depends="gen-properties">
    <property name="bh.filter.runDuration" value="short,medium,null"/>
    <property name="foreign.db" value="flatfile"/>
    <property name="bh.log.gtlf.env.ForeignDb" value="ldb-flatfile"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh-flatfile"/>
    <property file="run.properties"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test-nightly-flatfile.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="test-oracle" depends="gen-properties">
    <property name="bh.filter.runDuration" value="short,medium,null"/>
    <property name="foreign.db" value="oracle"/>
    <property name="bh.log.gtlf.env.ForeignDb" value="ldb-oracle"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh-oracle"/>
    <property file="run.properties"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test-nightly-oracle.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="test-sqlserver" depends="gen-properties">
    <property name="bh.filter.runDuration" value="short,medium,null"/>
    <property name="foreign.db" value="sqlserver"/>
    <property name="bh.log.gtlf.env.ForeignDb" value="ldb-sqlserver"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh-sqlserver"/>
    <property file="run.properties"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test-nightly-sqlserver.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="test-csvjdbc" depends="gen-properties">
    <property name="bh.filter.runDuration" value="short,medium,null"/>
    <property name="foreign.db" value="csvjdbc"/>
    <property name="bh.log.gtlf.env.ForeignDb" value="ldb-csvjdbc"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh-csvjdbc"/>
    <property file="run.properties"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test-nightly-csvjdbc.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="clean-subdirs">
    <property name="target.name" value="clean"/>
    <foreach param="target.file" target="call-subdir-target" inheritAll="true">
      <fileset dir="${luciddb.dir}/test/sql">
        <include name="**/build.xml"/>
      </fileset>
    </foreach>
  </target>

  <target name="test-long">
    <property name="bh.filter.runDuration" value="long"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh-long"/>
    <property file="run.properties"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test-long.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="test-all" depends="cleanJars,createCatalog,gen-all-sql">
    <property name="bh.log.basedir" value="${testlog.dir}/bh"/>
    <property file="run.properties"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test-all.xml"
      classpathref="test.classpath"
      fail.on.error="false"/>
    <antcall target="gen-bh-report"/>
  </target>

  <!-- ************** test ****************** 
  Split 'test' to 'test-only' and 'test-only-setup' so Emma can plugin a instr.
  -->

  <target name="test" depends="test-only-setup,test-only">
  </target>

  <target name="test-only-setup" depends="cleanJars,createCatalog,gen-all-sql">
  </target>

  <target name="test-only">
    <property name="bh.log.gtlf.env.ForeignDb" value="ldb-sanity"/>
    <property name="bh.filter.knownFailures" value="false,null"/>
    <property file="run.properties"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test.xml"
      classpathref="test.classpath"
      fail.on.error="false"/>
    <antcall target="gen-bh-report"/>

  </target>

  <!-- ************** Emma ****************** 
  -->

  <target name="emmaTest" depends="cleanJars,createCatalog,gen-all-sql">
    <property name="bh.filter.knownFailures" value="false,null"/>
    <property file="run.properties"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test.xml"
      classpathref="emma.test.classpath"
      fail.on.error="false"/>
    <antcall target="gen-bh-report"/>
  </target>

  <target name="bhShortregSanity">
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}/test/sql/shortreg"
      testscript="test.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="emmaBh">
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}/test/sql/shortreg"
      testscript="test.xml"
      classpathref="emma.test.classpath"/>
  </target>


  <target name="compile" depends="clean,makeOutputDirs">
    <!-- compile farrago first -->
    <ant dir="${farrago.dir}" target="compile"/>
    <farrago.javaCompile
      deprecation="off"
      srcdir="${luciddb.test.dir}/src"
      destdir="${classes.dir}"
      classpathref="luciddb.build.classpath">
      <include name="**/*.java" />
      <exclude name="**/mbean/**/*.java"/>
    </farrago.javaCompile>
    <antcall target="buildApplibPlugin"/>
    <antcall target="buildMBeanPlugin"/>
    <antcall target="buildClientJar"/>
    <farrago.javaCompile
      deprecation="off"
      srcdir="${luciddb.test.dir}/src"
      destdir="${classes.dir}"
      classpathref="luciddb.build.classpath">
      <include name="**/mbean/**/*.java"/>
    </farrago.javaCompile>
  </target>

  <!-- creates catalog and populates with initial metadata -->
  <target name="createCatalog" depends="compile">
    <antcall target="makeOutputDirs"/>
    <antcall target="configureTrace"/>
    <antcall target="copyFarragoCatalog"/>
    <antcall target="importConfig"/>
    <antcall target="populateCatalog"/>
    <!-- runFarragoInitSql needs FarragoMedJdbc.jar in luciddb plugin dir-->
    <copy todir="${luciddb.plugin.dir}" file="${farrago.plugin.dir}/FarragoMedJdbc.jar"/>
    <antcall target="runFarragoInitSql"/>
    <antcall target="runLuciddbInitSql"/>
    <antcall target="backupCatalog"/>
    <antcall target="createCatalogScript"/>
    <antcall target="copyFennelFiles"/>
  </target>

  <target name="clean" depends="clean-dist">
    <antcall target="cleanTestLogs"/>
    <antcall target="cleanJars"/>
    <delete quiet="true">
      <fileset dir="${classes.dir}" includes="**/*.class"/>
    </delete>

    <!-- call clean target in sub dirs -->
    <ant dir="test/sql/backupRestore" target="clean"/>
    <ant dir="test/sql/bench" target="clean"/>    
    <ant dir="test/sql/calc" target="clean"/>
    <ant dir="test/sql/company" target="clean"/>
    <ant dir="test/sql/compositekey" target="clean"/>
    <ant dir="test/sql/concurrency" target="clean"/>
    <ant dir="test/sql/constraints" target="clean"/>
    <ant dir="test/sql/conv_types" target="clean"/>
    <ant dir="test/sql/datatypes" target="clean"/>
    <ant dir="test/sql/distribution" target="clean"/>
    <ant dir="test/sql/dml/delete" target="clean"/>
    <ant dir="test/sql/dml/merge" target="clean"/>
    <ant dir="test/sql/flatfile-specific" target="clean"/>
    <ant dir="test/sql/hashjoin" target="clean"/>
    <ant dir="test/sql/mbean" target="clean"/>
    <ant dir="test/sql/mondrian" target="clean"/>
    <ant dir="test/sql/numerics" target="clean"/>
    <ant dir="test/sql/oracle-specific" target="clean"/>
    <ant dir="test/sql/setops" target="clean"/>
    <ant dir="test/sql/shortreg" target="clean"/>
    <ant dir="test/sql/sqbm" target="clean"/>
    <ant dir="test/sql/sqlserver-specific" target="clean"/>
    <ant dir="test/sql/sys" target="clean"/>
    <ant dir="test/sql/tpch" target="clean"/>
    <ant dir="test/sql/ssb" target="clean"/>
    <ant dir="test/sql/txn" target="clean"/>
    <ant dir="test/sql/udr/udf" target="clean"/>
    <ant dir="test/sql/udr/udp" target="clean"/>
    <ant dir="test/sql/udr/udx" target="clean"/>
    <ant dir="test/sql/VI" target="clean"/>

    <delete file="run.properties"/>
  </target>

  <!-- Copies the Farrago unconfigured catalog to our catalog directory. -->
  <!-- Also copies Fennel resources to catalog/fennel. -->
  <target name="copyFarragoCatalog">
    <copy 
        todir="${catalog.dir}"
        file="${farrago.ReposStorage.propfile}"
        overwrite="true">
      <filterchain>
        <tokenfilter>
          <replacestring
            from="jdbc:mysql://localhost:3306/${farrago.catalog.schema}"
            to="jdbc:mysql://localhost:3306/${project.catalog.schema}"/>
          <replacestring
            from="jdbc:postgresql://localhost/${farrago.catalog.schema}"
            to="jdbc:postgresql://localhost/${project.catalog.schema}"/>
          <replaceregex
            pattern="(net\.sf\.farrago\.dev\.[^=]+)=(.*)${farrago.catalog.schema}(.*)"
            replace="\1=\2${project.catalog.schema}\3"/>
        </tokenfilter>
      </filterchain>
    </copy>

    <antcall target="cleanCatalogData"/>

    <farrago.restoreCatalog
      catalogDir="${catalog.dir}"
      backupDir="${farrago.catalog.unconfigured.dir}" 
      catalogOnly="true"/>      

    <mkdir dir="${catalog.dir}/fennel"/>
    <copy todir="${catalog.dir}/fennel" overwrite="true">
      <fileset dir="${farrago.catalog.dir}/fennel" includes="*.properties" />
    </copy>

    <farrago.setReposProvider/>

    <ac:if xmlns:ac="antlib:net.sf.antcontrib">
      <equals arg1="${farrago.enki.provider}" arg2="ENKI_HIBERNATE"/>
      <then>
        <copy 
            file="${farrago.catalog.dir}/templates/EnkiEhCache.xml"
            tofile="${classes.dir}/FarragoEhCache.xml"/>
      </then>
    </ac:if>
  </target>

  <!-- set up the default trace configuration file -->
  <target name="configureTrace">
    <mkdir dir="${trace.dir}"/>
    <farrago.configureTrace
      propFile="${LucidDbTrace.properties}" logFile="${LucidDbTrace.log}"/>
    <farrago.configureTrace
      propFile="${LucidDbMdrBuildTrace.properties}" logFile="${LucidDbMdrBuildTrace.log}"/>
  </target>

  <!-- delete catalog data only -->
  <target name="cleanCatalogData">
    <mkdir dir="${catalog.dir}"/>
    <farrago.cleanCatalog catalogDir="${catalog.dir}" dropStorage="true"/>
  </target>

  <!-- generate developer configuration file and import it -->
  <target name="importConfig">
    <mkdir dir="${xmi.dir}"/>
    <copy file="${FarragoConfTemplate.xmi}"
      tofile="${LucidDbConf.xmi}" overwrite="true"/>
    <replace file="${LucidDbConf.xmi}">
      <replacefilter token="@databaseInitSize@" value="${fennel.databaseInitSize}"/>
      <replacefilter token="@tempInitSize@" value="${fennel.tempInitSize}"/>
      <replacefilter token="@checkpointInterval@" value="${fennel.checkpointInterval}"/>
      <replacefilter token="@cachePageSize@" value="${fennel.cachePageSize}"/>
      <replacefilter token="@cachePagesMax@" value="${fennel.cachePagesMax}"/>
      <replacefilter token="@cachePagesInit@" value="${fennel.cachePagesInit}"/>
      <replacefilter token="@groupCommitInterval@" value="${fennel.groupCommitInterval}"/>
      <replacefilter token="@fennel.disabled@" value="${fennel.disabled}"/>
      <replacefilter token="@resourceDir@" value="$${FARRAGO_HOME}/catalog/fennel"/>
      <replacefilter token="@jniHandleTraceFile@" value="${trace.fennel.handles}"/>
      <replacefilter token="@calcVirtualMachine@" value="CALCVM_JAVA"/>
    </replace>
    <farrago.mdrFork target="forked_importConfig"/>
  </target>

  <target name="forked_importConfig" depends="farrago.mdr_taskdef">
    <mdr 
        propertiesFile="${catalog.dir}/ReposStorage.properties"
        logConfigFile="${LucidDbMdrBuildTrace.properties}">
      <propertyset>
        <propertyref name="FARRAGO_CATALOG_DIR"/>
      </propertyset>
      <importXMI
        file="${LucidDbConf.xmi}"
        extent="FarragoCatalog"/>
    </mdr>
  </target>

  <!-- back up the current catalog contents -->
  <target name="backupCatalog">
    <farrago.backupCatalog
      catalogDir="${catalog.dir}" backupDir="${catalog.backup.dir}"
      includeTempDataFile="true" />
  </target>

  <!-- restore catalog from backup -->
  <target name="restoreCatalog" depends="cleanCatalogData">
    <farrago.restoreCatalog
      catalogDir="${catalog.dir}" backupDir="${catalog.backup.dir}"/>
  </target>

  <!-- write initial metadata to catalog -->
  <target name="populateCatalog">
    <java fork="yes" failonerror="true"
      classpathref="farrago.run.classpath"
      classname="net.sf.farrago.db.FarragoDatabase">
      <jvmarg line="${assertions.jvmarg}"/>
      <jvmarg line="&FarragoProps;"/>
    </java>
  </target>

  <!-- create various output directories -->
  <target name="makeOutputDirs">
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${testlog.dir}"/>
    <copy todir="${classes.dir}" file="${release.properties.source}"
      overwrite="true"/>
    <!--
         Set jdbc.url.port.default in customBuild.properties to
         override JDBC listener port.
    -->
    <farrago.configureReleaseProperties
        file="${classes.dir}/FarragoRelease.properties"/>
  </target>

  <target name="makePluginDirs">
    <mkdir dir="${luciddb.plugin.dir}"/>
    <mkdir dir="${luciddb.plugin.dir}/applib"/>
    <mkdir dir="${luciddb.plugin.dir}/mbean"/>
  </target>

  <!-- task for generating resources -->
  <taskdef name="resgen" classname="org.eigenbase.resgen.ResourceGenTask">
    <classpath refid="applib.run.classpath"/>
  </taskdef>

  <!-- task for generating resources -->
  <taskdef name="resgen-mbean" classname="org.eigenbase.resgen.ResourceGenTask">
    <classpath refid="mbean.run.classpath"/>
  </taskdef>

  <target name="runFarragoInitSql">
    <pathconvert property="farrago.initsql.prop"
      refid="farrago.filelist.initsql" pathsep="${line.separator}"
      dirsep="${file.separator}" />
    <farrago.runSqlTest file="${farrago.initsql.prop}"/>
  </target>

  <!-- create plugin/LucidDbClient.jar -->
  <target name="buildClientJar" depends="makePluginDirs">
    <jar jarfile="${luciddb.plugin.dir}/LucidDbClient.jar"
      filesetmanifest="skip">
      <zipgroupfileset dir="${vjdbc.dir}/lib">
        <include name="vjdbc.jar"/>
        <include name="commons-logging-1.1.jar"/>
      </zipgroupfileset>
      <fileset dir="${luciddb.dir}/license/client">
        <include name="COPYING"/>
      </fileset>
      <fileset dir="${luciddb.dir}/classes">
        <include name="FarragoRelease.properties"/>
      </fileset>
      <fileset dir="${farrago.classes.dir}">
        <include
          name="org/luciddb/jdbc/LucidDbClientDriver.class"/>
        <include
          name="com/lucidera/jdbc/LucidDbRmiDriver.class"/>
        <include
          name="com/lucidera/jdbc/LucidDbHttpDriver.class"/>
        <include
          name="net/sf/farrago/jdbc/client/FarragoVjdbcClientDriver.class"/>
        <include
          name="net/sf/farrago/jdbc/client/FarragoVjdbcHttpClientDriver.class"/>
        <include
          name="net/sf/farrago/jdbc/client/FarragoUnregisteredVjdbcClientDriver.class"/>
        <include
          name="net/sf/farrago/jdbc/client/FarragoUnregisteredVjdbcHttpClientDriver.class"/>
        <include
          name="net/sf/farrago/jdbc/FarragoAbstractJdbcDriver.class"/>
        <include
          name="net/sf/farrago/release/*"/>
        <include
          name="org/eigenbase/util/property/*"/>
        <include
          name="org/eigenbase/util14/ConnectStringParser.class"/>
      </fileset>
    </jar>
  </target>

  <!-- create applib plugin jar -->
  <target name="buildApplibPlugin"
    depends="makePluginDirs,checkApplibPluginUptodate"
    unless="plugin.applib.uptodate">
    <antcall target="generateApplibResource"/>
    <farrago.javaCompile
      deprecation="off"
      srcdir="${luciddb.dir}/src"
      destdir="${applib.dir}"
      classpathref="applib.build.classpath">
      <include name="**/applib/**/*.java"/>
      <exclude name="**/ApplibException.java"/>
    </farrago.javaCompile>
    <jar jarfile="${luciddb.plugin.dir}/applib.jar">
      <fileset dir="${applib.dir}">
        <include name="**/applib/**/*"/>
      </fileset>
    </jar>
  </target>

  <target name="generateApplibResource">
    <farrago.javaCompile
      deprecation="off"
      srcdir="${luciddb.dir}/src"
      destdir="${applib.dir}"
      classpathref="applib.build.classpath">
      <include name="**/ApplibException.java"/>
    </farrago.javaCompile>
    <resgen
      srcdir="${luciddb.dir}/src"
      destdir="${luciddb.dir}/src"
      resdir="${applib.dir}"
      style="functor"
      locales="en_US">
      <include name="com/lucidera/luciddb/applib/resource/ApplibResource.xml"/>
    </resgen>
  </target>

  <target name="checkApplibPluginUptodate">
    <uptodate property="plugin.applib.uptodate"
      targetfile="${luciddb.plugin.dir}/applib.jar">
      <srcfiles dir="${luciddb.dir}/src">
        <include name="**/applib/**/*.java"/>
        <include name="**/applib/**/*.xml"/>
      </srcfiles>
    </uptodate>
  </target>

  <!-- create mbean plugin jar -->
  <target name="buildMBeanPlugin"
    depends="makePluginDirs,checkMBeanPluginUptodate"
    unless="plugin.mbean.uptodate">
    <antcall target="generateMBeanResource"/>
    <farrago.javaCompile
      deprecation="off"
      srcdir="${luciddb.dir}/src"
      destdir="${mbean.dir}"
      classpathref="mbean.build.classpath">
      <include name="**/mbean/**/*.java"/>
    </farrago.javaCompile>
    <jar jarfile="${luciddb.plugin.dir}/luciddb-mbean.jar">
      <fileset dir="${mbean.dir}">
        <include name="**/mbean/**/*"/>
      </fileset>
      <fileset dir="${farrago.classes.dir}">
        <include name="com/lucidera/jdbc/LucidDbLocalDriver.class"/>
      </fileset>
    </jar>
  </target>

  <target name="generateMBeanResource">
    <resgen
      srcdir="${luciddb.dir}/src"
      destdir="${luciddb.dir}/src"
      resdir="${mbean.dir}"
      style="functor"
      locales="en_US">
      <include name="com/lucidera/luciddb/mbean/resource/MBeanQuery.xml"/>
    </resgen>
  </target>

  <target name="checkMBeanPluginUptodate">
    <uptodate property="plugin.mbean.uptodate"
      targetfile="${luciddb.plugin.dir}/luciddb-mbean.jar">
      <srcfiles dir="${luciddb.dir}/src">
        <include name="**/mbean/**/*.java"/>
        <include name="**/mbean/**/*.xml"/>
      </srcfiles>
    </uptodate>
  </target>

  <target name="convertInitSqlScripts">
    <if> <equals arg1="${os.name}" arg2="Linux"/>
      <then>
        <copy file="${luciddb.initsql.dir}/setDeviceSchedulerType.sql.tmpl"
          tofile="${luciddb.initsql.dir}/setDeviceSchedulerType.sql"
          overwrite="true">
          <filterset>
            <filter token="SCHEDULER_TYPE" value="aioLinux"/>
          </filterset>
        </copy>
        <copy file="${luciddb.initsql.dir}/setDeviceSchedulerType.ref.tmpl"
          tofile="${luciddb.initsql.dir}/setDeviceSchedulerType.ref"
          overwrite="true">
          <filterset>
            <filter token="SCHEDULER_TYPE" value="aioLinux"/>
          </filterset>
        </copy>
      </then>
    </if>
  </target>

  <target name="runLuciddbInitSql" depends="convertInitSqlScripts">
    <pathconvert property="luciddb.initsql.prop"
      refid="luciddb.filelist.initsql" pathsep="${line.separator}"
      dirsep="${file.separator}" />
    <luciddb.runSqlTests filelist="${luciddb.initsql.prop}"
      sqltest.classpath="${test.classpath}"/>
  </target>

  <!-- REVIEW jvs 4-June-2006:  Should probably blow away plugin/*.jar -->
  <target name="cleanJars">
    <delete dir="${luciddb.plugin.dir}"/>
  </target>

<!--     <antcall target="cleanClientJar"/> -->
<!--     <antcall target="cleanApplib"/> -->
<!--     <antcall target="cleanMBean"/> -->
<!--     <antcall target="cleanJdbcPlugins"/> -->

  <target name="cleanJdbcPlugins">
    <delete file="${luciddb.plugin.dir}/FarragoMedJdbc3p.jar" quiet="true"/>
    <delete file="${luciddb.plugin.dir}/FarragoMedJdbc.jar" quiet="true"/>
  </target>

  <target name="cleanClientJar">
    <delete file="${luciddb.plugin.dir}/LucidDbClient.jar" quiet="true"/>
  </target>

  <target name="cleanApplib">
    <delete dir="${applib.dir}" quiet="true"/>
    <delete quiet="true">
      <fileset dir="${luciddb.dir}/src">
        <include name="**/ApplibResource.java"/>
        <include name="**/ApplibResource_en_US.java"/>
      </fileset>
    </delete>
    <delete file="${luciddb.plugin.dir}/applib.jar" quiet="true"/>
  </target>

  <target name="cleanMBean">
    <delete dir="${mbean.dir}" quiet="true"/>
    <delete quiet="true">
      <fileset dir="${luciddb.dir}/src">
        <include name="**/MBeanQuery.java"/>
        <include name="**/MBeanQuery_en_US.java"/>
      </fileset>
    </delete>
    <delete file="${luciddb.plugin.dir}/luciddb-mbean.jar" quiet="true"/>
  </target>

  <target name="shortreg" depends="compile" >
    <filelist dir="${testsrc.dir}/shortreg" id="filelist.shortregsql"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql,joinEq.sql"/>
    <pathconvert property="filelist.shortregsql" refid="filelist.shortregsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <luciddb.runSqlTests filelist="${filelist.shortregsql}"
            sqltest.classpath="${test.classpath}"/>
  </target>


  <target name="emmaShortreg">
    <filelist dir="${testsrc.dir}/shortreg" id="filelist.shortregsql"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql,joinEq.sql"/>
    <pathconvert property="filelist.shortregsql" refid="filelist.shortregsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <luciddb.runSqlTests filelist="${filelist.shortregsql}"
            sqltest.classpath="${emma.test.classpath}"/>
  </target>

  <target name="txn">
    <filelist dir="${testsrc.dir}/txn" id="filelist.txnsql"
      files="negative.sql,rollback.sql"/>
    <pathconvert property="filelist.txnsql" refid="filelist.txnsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <luciddb.runSqlTests filelist="${filelist.txnsql}"
            sqltest.classpath="${test.classpath}"/>
  </target>

  <target name="emmaTxn">
    <filelist dir="${testsrc.dir}/txn" id="filelist.txnsql"
      files="negative.sql,rollback.sql"/>
    <pathconvert property="filelist.txnsql" refid="filelist.txnsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <luciddb.runSqlTests filelist="${filelist.txnsql}"
            sqltest.classpath="${emma.test.classpath}"/>
  </target>

  <!-- Extra Short Regression -->
  <target name="shortregSanity" depends="createCatalog">
    <filelist dir="${testsrc.dir}/shortreg" id="filelist.shortregsql"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql,joinEqSanity.sql"/>
    <pathconvert property="filelist.shortregsql" refid="filelist.shortregsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <luciddb.runSqlTests filelist="${filelist.shortregsql}"
      sqltest.classpath="${test.classpath}"/>
  </target>

  <!-- Extra Short Regression -->
  <target name="emmaShortregSanity" depends="createCatalog">
    <filelist dir="${testsrc.dir}/shortreg" id="filelist.shortregsql"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql,joinEqSanity.sql"/>
    <pathconvert property="filelist.shortregsql" refid="filelist.shortregsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <luciddb.runSqlTests filelist="${filelist.shortregsql}"
      sqltest.classpath="${emma.test.classpath}"/>
  </target>

  <target name="cleanTestLogs">
    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="${testlog.dir}" includes="*.xml"/>
      <fileset dir="${testlog.dir}" includes="*.txt"/>
      <fileset dir="${testlog.dir}/bh"/>
      <fileset dir="${testsrc.dir}" includes="**/*.log"/>
      <fileset dir="${testsrc.dir}" includes="**/*.dif"/>
    </delete>
    <delete quiet="true" file="${LucidDbTrace.log}"/>
  </target>

  <available file="${farrago.dir}/classes-cov/com" property="farrago.classes-cov.exists"/>

  <target name="cov" if="farrago.classes-cov.exists">
    <antcall target="emmaClean"/>
    <antcall target="emmaInstr"/>
    <antcall target="emmaTest"/>
    <antcall target="emmaReport"/>
  </target>

  <target name="covAll" if="farrago.classes-cov.exists">
    <antcall target="emmaClean"/>
    <antcall target="emmaInstr"/>
    <antcall target="emmaTest"/>
    <antcall target="emmaShortreg"/>
    <antcall target="emmaReport"/>
  </target>

  <target name="emmaClean">
    <delete dir="${emma.luciddb.classes.dir}" quiet="true"/>
    <delete quiet="true">
        <fileset dir="${luciddb.dir}" includes="coverage.*"/>
        <fileset dir="${coverage.dir}"/>
    </delete>
    <mkdir dir="${coverage.dir}"/>
    <mkdir dir="${emma.luciddb.classes.dir}"/>
  </target>

  <target name="emmaInstr" depends="emmaClean">
    <emma verbosity="verbose">
      <instr
        mode="copy"
        outdir="${emma.luciddb.classes.dir}"
        metadatafile="${luciddb.dir}/coverage.em"
        instrpath="${classes.dir}">
        <filter excludes="*_Stub*"/>
      </instr>
    </emma>
  </target>

  <target name="emmaTest.old" depends="emmaInstr">
    <antcall target="emmaShortregSanity"/>
    <antcall target="emmaTxn"/>
    <antcall target="emmaBh" />
  </target>

  <target name="emmaReport">
    <emma verbosity="verbose">
      <report sourcepath="${luciddb.test.dir}/src,${farrago.src.dir}">
        <infileset dir="${luciddb.dir}" includes="*.em, *.ec"/>

        <html outfile="${coverage.dir}/coverage.html"/>
        <xml outfile="${coverage.dir}/coverage.xml"/>
        <txt outfile="${coverage.dir}/coverage.txt"/>
      </report>
    </emma>
  </target>

  <!-- Experimental Area: Let's see about creating fine-grained tests with dependencies specified -->

  <macrodef name="xrunSqlTests">
    <attribute name="filelist" default="unspecified"/>
    <sequential>
      <junit printsummary="yes" fork="yes" forkmode="perBatch" haltonerror="no" haltonfailure="no"
        tempdir="${testlog.dir}">
        <classpath refid="test.classpath"/>
        <jvmarg line="${assertions.jvmarg}"/>
        <jvmarg line="&FarragoSqlLineProps;"/>
        <sysproperty key="net.sf.farrago.fileset.unitsql"
          value="@{filelist}"/>
        <formatter type="plain"/>
        <formatter type="xml"/> <!-- for integration builds -->
        <test todir="${testlog.dir}"
          name="com.lucidera.luciddb.test.LucidDbSqlTest" />
      </junit>
    </sequential>
  </macrodef>

  <target name="x">
    <filelist dir="${testsrc.dir}/shortreg" id="filelist.shortregsql"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql,${testfile}"/>
    <pathconvert property="filelist.shortregsql" refid="filelist.shortregsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <xrunSqlTests filelist="${filelist.shortregsql}"/>
  </target>

  <!-- generic ant target that is parameterized by sql file -->
  <target name="run-sql-test">
    <echo>
      sql.files is ${sql.files}
    </echo>
    <junit printsummary="yes" fork="yes" haltonerror="yes" haltonfailure="yes"
      tempdir="${testlog.dir}">
      <classpath refid="test.classpath"/>
      <jvmarg line="${assertions.jvmarg}"/>
      <jvmarg line="&FarragoSqlLineProps;"/>
      <sysproperty key="net.sf.farrago.fileset.unitsql"
        value="${sql.files}"/>
      <formatter type="plain"/>
      <formatter type="xml"/> <!-- for integration builds -->
      <test todir="${testlog.dir}" name="com.lucidera.luciddb.test.LucidDbSqlTest" />
    </junit>
  </target>

  <!-- joinEqSanity test - Basic equi-join tests -->
  <target name="test-join-eq-sanity" depends="test-setup">
    <antcall target="run-sql-test">
      <param name="sql.files" value="${testsrc.dir}/shortreg/joinEqSanity.sql"/>
    </antcall>
  </target>

  <!-- joinEqSanity test - Basic equi-join tests -->
  <target name="test-join-eq" depends="test-setup">
    <antcall target="run-sql-test">
      <param name="sql.files" value="${testlog.dir}/shortreg/joinEq.sql"/>
    </antcall>
  </target>

  <!-- joinRng test - Range join tests. -->
  <target name="test-join-rng" depends="test-setup">
    <antcall target="run-sql-test">
      <param name="sql.files" value="${testsrc.log}/shortreg/joinRng.sql"/>
    </antcall>
  </target>

  <target name="test-setup" depends="createCatalog,gen-properties">
    <filelist dir="${testsrc.log}/shortreg" id="filelist.setup"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql"/>
    <pathconvert property="filelist.setup" refid="filelist.setup"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <antcall target="run-sql-test">
      <param name="sql.files" value="${filelist.setup}"/>
    </antcall>
  </target>

  <target name="dist" depends="clean-dist">
    <property file="${release.properties.source}" />
    <property name="lucidera.release.spec"
      value="${package.name}-${product.version.major}.${product.version.minor}.${product.version.point}"/>
    <property name="release.lib.dir"
      location="${dist.dir}/${lucidera.release.spec}/lib"/>
    <property name="lib.farrago.jar" 
      location="${release.lib.dir}/farrago.jar"/>
    <property name="release.plugin.dir"
      location="${dist.dir}/${lucidera.release.spec}/plugin"/>
    <property name="release.bin.dir"
      location="${dist.dir}/${lucidera.release.spec}/bin"/>
    <property name="release.install.dir"
      location="${dist.dir}/${lucidera.release.spec}/install"/>
    <property name="release.catalog.dir"
      location="${dist.dir}/${lucidera.release.spec}/catalog"/>
    <property name="release.properties.target"
      location="${release.lib.dir}/FarragoRelease.properties"/>

    <delete dir="${dist.dir}" quiet="true"/>
    <mkdir dir="${dist.dir}"/>

    <if>
      <equals arg1="${osfamily}" arg2="unix"/>
      <then>
        <exec executable="tar" spawn="false" dir="${dist.dir}">
          <arg value="--bzip2"/>
          <arg value="-xf"/>
          <arg value="${farrago.dist.file}"/>
        </exec>
      </then>
      <else>
        <unzip src="${farrago.dist.file}" dest="${dist.dir}"/>
      </else>
    </if>

    <ant target="rename-dir-to-luciddb" inheritAll="false">
      <property name="lu.package.name" value="${package.name}"/>
      <property name="lu.product.version.major" 
        value="${product.version.major}"/>
      <property name="lu.product.version.minor" 
        value="${product.version.minor}"/>
      <property name="lu.product.version.point" 
        value="${product.version.point}"/>
    </ant>
  
  	<!-- Remove RmiJdbc stuff 
	TODO: As soon as LDB-158 is resolved, we can remove this
	-->
  	<delete>
  	    <fileset dir="${dist.dir}/${lucidera.release.spec}/lib" includes="RmiJdbc*"/>
  	</delete>

    <delete dir="${dist.dir}/${lucidera.release.spec}/catalog" quiet="true"/>
    <mkdir dir="${dist.dir}/${lucidera.release.spec}/catalog"/>
    <copy todir="${dist.dir}/${lucidera.release.spec}/catalog"
      file="${farrago.ReposStorage.propfile}">
      <fileset dir="${catalog.backup.dir}">
        <exclude name="temp.dat"/>
      </fileset>
    </copy>
    <copy todir="${release.plugin.dir}">
      <fileset dir="${luciddb.plugin.dir}">
        <exclude name="applib/**"/>
        <exclude name="mbean/**"/>
      </fileset>
    </copy>
    <copy todir="${dist.dir}/${lucidera.release.spec}/examples">
      <fileset dir="${luciddb.dir}/examples"/>
    </copy>
    <copy todir="${dist.dir}/${lucidera.release.spec}/ext">
      <fileset dir="${luciddb.dir}/ext"/>
    </copy>
    <copy 
      file="${luciddb.dir}/license/README" 
      todir="${dist.dir}/${lucidera.release.spec}"
      overwrite="true" />

    <copy todir="${release.install.dir}" overwrite="true"
      file="${luciddb.dir}/initsql/catalog.sql"/>

    <copy file="${release.properties.source}"
      todir="${release.lib.dir}" overwrite="true"/>
    <chmod file="${release.properties.target}" perm="u+w" />
    <touch file="${release.properties.target}"/>

    <copy todir="${release.catalog.dir}/fennel" overwrite="true">
      <fileset dir="${luciddb.dir}/catalog/fennel" includes="*.properties"/>
    </copy>

    <war destfile="${dist.dir}/${lucidera.release.spec}/lib/vjdbc_servlet.war"
      update="true">
      <webinf dir="${luciddb.dir}/ext/vjdbc">
        <include name="vjdbc-config.xml"/>
      </webinf>
    </war>

    <if>
        <equals arg1="${osfamily}" arg2="unix"/>
      <then>
        <property name="sqllineClient" value="sqllineClient"/>
        <property name="sqllineEngine" value="sqllineEngine"/>
        <property name="farragoServer" value="farragoServer"/>
        <property name="lucidDbServer" value="lucidDbServer"/>
      </then>
      <else>
        <property name="sqllineClient" value="sqllineClient.bat"/>
        <property name="sqllineEngine" value="sqllineEngine.bat"/>
        <property name="farragoServer" value="farragoServer.bat"/>
        <property name="lucidDbServer" value="lucidDbServer.bat"/>
      </else>
    </if>

    <replace file="${release.bin.dir}/${sqllineClient}">
        <replacefilter token="jdbc:farrago:http://localhost"
        value="jdbc:luciddb:http://localhost"/>
        <replacefilter
        token="net.sf.farrago.jdbc.client.FarragoVjdbcHttpClientDriver"
        value="org.luciddb.jdbc.LucidDbClientDriver"/>
        <replacefilter token="guest" value="sa"/>
    </replace>
    <chmod file="${release.bin.dir}/${sqllineClient}" perm="u+x" />

    <move file="${release.bin.dir}/${farragoServer}"
      tofile="${release.bin.dir}/${lucidDbServer}"/>
    <replace file="${release.bin.dir}/${lucidDbServer}">
        <replacefilter token="net.sf.farrago.server.FarragoVjdbcServer"
        value="org.luciddb.session.LucidDbServer"/>
    </replace>
    <chmod file="${release.bin.dir}/${lucidDbServer}" perm="u+x" />

    <replace file="${release.bin.dir}/${sqllineEngine}">
        <replacefilter token="jdbc:farrago:" value="jdbc:luciddb:"/>
        <replacefilter
        token="net.sf.farrago.jdbc.engine.FarragoJdbcEngineDriver"
        value="org.luciddb.jdbc.LucidDbLocalDriver"/>
        <replacefilter token="guest" value="sa"/>
    </replace>
    <chmod file="${release.bin.dir}/${sqllineEngine}" perm="u+x" />

    <if>
      <and>
        <equals arg1="${osfamily}" arg2="unix"/>
        <not>
          <os family="mac"/>
        </not>
      </and>
      <then>
        <copy 
          file="${luciddb.dir}/allocFile" 
          todir="${release.bin.dir}"
          overwrite="true" />
        <chmod file="${release.bin.dir}/allocFile" perm="u+x" />
        <copy 
          file="${luciddb.dir}/lucidDbAllocFile" 
          todir="${release.bin.dir}"
          overwrite="true" />
        <chmod file="${release.bin.dir}/lucidDbAllocFile" perm="u+x" />
      </then>
    </if>

    <!-- we don't use the release.gpl flag any more. This block is for non-gpl
    <if>
      <not>
        <istrue value="${release.gpl}"/>
      </not>
      <then>
        <property name="jar.tmp.dir" location="${dist.dir}/farrago.jar.tmp.dir"/>

        <unjar src="${lib.farrago.jar}" dest="${jar.tmp.dir}" />

        <delete file="${lib.farrago.jar}"/>
        <jar update="true"
          destfile="${lib.farrago.jar}"
          basedir="${jar.tmp.dir}"
          keepcompression="true"/>

        <delete dir="${jar.tmp.dir}" quiet="true"/>
      </then>
    </if>
    -->

    <jar update="true"
      destfile="${lib.farrago.jar}"
      basedir="${release.lib.dir}"
      keepcompression="true"
      includes="FarragoRelease.properties"/>
    <delete file="${release.properties.target}"/>

    <if>
      <equals arg1="${osfamily}" arg2="unix"/>
      <then>
        <exec executable="tar" spawn="false" dir="${dist.dir}">
          <arg value="--bzip2"/>
          <arg value="-cf"/>
          <arg value="${lu.release.file}"/>
          <arg value="${lucidera.release.spec}"/>
        </exec>
      </then>
      <else>
          <zip destfile="${lu.release.file}">
          <zipfileset dir="${dist.dir}/${lucidera.release.spec}" prefix="${lucidera.release.spec}"/>
        </zip>
      </else>
    </if>

  </target>

  <target name="clean-dist">
    <basename property="exclude.file" file="${lu.release.file}"/>
    <delete quiet="true" includeEmptyDirs="true">
      <fileset dir="${dist.dir}">
          <exclude name="${exclude.file}"/>
      </fileset>
    </delete>
  </target>

  <target name="rename-dir-to-luciddb">
    <property file="${farrago.dist.dir}/FarragoRelease.properties" />
    <property
      name="farrago.release.spec"
      value="${package.name}-${product.version.major}.${product.version.minor}.${product.version.point}"/>

    <property
      name="lucidera.release.spec"
      value="${lu.package.name}-${lu.product.version.major}.${lu.product.version.minor}.${lu.product.version.point}"/>

    <delete quiet="true" includeEmptyDirs="true">
      <fileset dir="${dist.dir}/${lucidera.release.spec}"/>
    </delete>

    <move todir="${dist.dir}/${lucidera.release.spec}">
      <fileset dir="${dist.dir}/${farrago.release.spec}"/>
    </move>

  </target>

  <target name="createEclipseProject">

    <pathconvert property="eclipse.libpath" refid="luciddb.build.classpath"
      pathsep="&quot;/&gt;&#10;&lt;classpathentry kind=&quot;lib&quot; path=&quot;"/>
    <copy file="${luciddb.dir}/eclipse/.project" overwrite="true"
        tofile="${luciddb.dir}/.project">
    </copy>
    <copy file="${luciddb.dir}/eclipse/.classpath" overwrite="true"
        tofile="${luciddb.dir}/.classpath">
      <filterset>
        <filter token="LIBPATH" value="${eclipse.libpath}"/>
      </filterset>
    </copy>
    <replace file="${luciddb.dir}/.classpath" token="${farrago.catalog.src.dir}" value="/farrago/catalog/java"/>
    <replace file="${luciddb.dir}/.classpath" token="${farrago.classes.dir}" value="/farrago/classes"/>
    <replace file="${luciddb.dir}/.classpath" token="${classes.dir}" value="classes"/>
    <copy todir="${luciddb.dir}/.settings" overwrite="true">
      <fileset dir="${luciddb.dir}/eclipse/.settings"/>
    </copy>
  </target>

  <target name="createCatalogScript" depends="convertInitSqlScripts">
    <delete file="${luciddb.initsql.dir}/catalog.sql" quiet="true"/>
    <concat destfile="${luciddb.initsql.dir}/catalog.sql">
      <filelist refid="farrago.filelist.initsql"/>
      <filelist refid="luciddb.filelist.initsql"/>
    </concat>
  </target>

  <target name="copyFennelFiles">
    <if>
      <and>
        <equals arg1="${osfamily}" arg2="unix"/>
        <not>
          <os family="mac"/>
        </not>
      </and>
      <then>
        <copy file="${fennel.dir}/util/allocFile" overwrite="true"
          tofile="${luciddb.dir}/allocFile"/>
        <chmod file="${luciddb.dir}/allocFile" perm="u+x" />
      </then>
    </if>
  </target>

<!-- Begin Experiment -->

  <!-- ref file doesn't quite match yet, but makes it easier to compare -->
  <target name="testCatalogScript" depends="createCatalogScript">
    <pathconvert property="fcatalog.ref.prop"
      refid="farrago.filelist.initsql" pathsep="${line.separator}"
      dirsep="${file.separator}" >
      <globmapper from="*.sql" to="*.ref"/>
    </pathconvert>
    <concat destfile="${luciddb.initsql.dir}/catalog.tmp">
      <filelist dir="${file.separator}" files="${fcatalog.ref.prop}" />
      <filterchain>
        <tokenfilter>
          <replacestring from="0: jdbc:farrago:>" to="0: jdbc:luciddb:>"/>
        </tokenfilter>
      </filterchain>
    </concat>
    <pathconvert property="lcatalog.ref.prop"
      refid="luciddb.filelist.initsql" pathsep="${line.separator}"
      dirsep="${file.separator}" >
      <globmapper from="*.sql" to="*.ref"/>
    </pathconvert>
    <concat destfile="${luciddb.initsql.dir}/catalog.ref">
      <filelist dir="${luciddb.initsql.dir}" files="catalog.tmp"/>
      <filelist dir="${file.separator}" files="${lcatalog.ref.prop}"/>
    </concat>
    <luciddb.runSqlTests filelist="${luciddb.initsql.dir}/catalog.sql"
      sqltest.classpath="${test.classpath}"/>
  </target>

<!-- End Experiment-->

</project>
