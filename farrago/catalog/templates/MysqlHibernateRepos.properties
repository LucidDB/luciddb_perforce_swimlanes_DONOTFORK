# Hibernate configuration file.

# Configure Hibernate usage
org.eigenbase.enki.implementationType=ENKI_HIBERNATE

# Configure mysql connection
org.eigenbase.enki.hibernate.connection.driver_class=com.mysql.jdbc.Driver
org.eigenbase.enki.hibernate.connection.url=jdbc:mysql://localhost:3306/{SCHEMA}
org.eigenbase.enki.hibernate.connection.username=root
org.eigenbase.enki.hibernate.connection.password=

org.eigenbase.enki.hibernate.createSchema=AUTO

# Hibernate configuration parameters.  These property names are the
# property names available via org.hibernate.cfg.Configuration's
# setProperty(String, String) method.

# Configure Hibernate's SQL dialect for mysql
hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect

# Override cache settings from hibernate-base-config.xml
hibernate.cache.use_second_level_cache=true
hibernate.cache.use_query_cache=true

# Flush session after ever N type lookup insertions
org.eigenbase.enki.hibernate.typeLookupFlushSize=250

## Allows multiple session factories per VM (as opposed to Hibernate's built-in
## EhCacheProvider)
hibernate.cache.provider_class=net.sf.ehcache.hibernate.EhCacheProvider
net.sf.ehcache.configurationResourceName=/FarragoEhCache.xml

# Use batch fetching
hibernate.default_batch_fetch_size=25
hibernate.jdbc.batch_size=25

# Dump SQL to stdout.  This breaks diff-based unit tests.  An alternative is
# setting "org.hibernate.SQL.level=FINE" in trace properties.
#hibernate.show_sql=true

# Configure (for Farrago dev environment) SQL to delete and create storage
# These properties are used only at build time and may be deleted from 
# production storage configurations.
net.sf.farrago.dev.dropStorage=DROP DATABASE IF EXISTS {SCHEMA};
net.sf.farrago.dev.createStorage=CREATE DATABASE {SCHEMA};
net.sf.farrago.dev.connection.driver_class=com.mysql.jdbc.Driver
net.sf.farrago.dev.connection.url=jdbc:mysql://localhost:3306/
net.sf.farrago.dev.connection.username=root
net.sf.farrago.dev.connection.password=
