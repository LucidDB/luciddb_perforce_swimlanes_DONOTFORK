0: jdbc:farragotest:> -- $Id$
0: jdbc:farragotest:> 
0: jdbc:farragotest:> explain plan for select jplus(1, 1) from (values(true));
+----------------------------------------------------------------------------------------------------+
|                                              column0                                               |
+----------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0=[{inputs}], expr#1=[true], expr#2=[1], expr#3=[JPLUS($t2, $t2)], EXPR$0=[$t3])  |
|   IterOneRowRel                                                                                    |
+----------------------------------------------------------------------------------------------------+
0: jdbc:farragotest:> 
0: jdbc:farragotest:> explain plan for select cplus(1, 1) from (values(true));
+--------------------------------------------------------------------------------------------------------+
|                                                column0                                                 |
+--------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                              |
|   FennelCalcRel(expr#0=[{inputs}], expr#1=[true], expr#2=[1], expr#3=[CPLUS($t2, $t2)], EXPR$0=[$t3])  |
|     FennelValuesRel(tuples=[[{ 0 }]])                                                                  |
+--------------------------------------------------------------------------------------------------------+
0: jdbc:farragotest:> 
0: jdbc:farragotest:> explain plan for select cplus(1, 1), jplus(2, 2) from (values(true));
+----------------------------------------------------------------------------------------------------------------------------+
|                                                          column0                                                           |
+----------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                  |
|   FennelCalcRel(expr#0..1=[{inputs}], expr#2=[CPLUS($t0, $t0)], EXPR$0=[$t2], EXPR$1=[$t1])                                |
|     IteratorToFennelConverter                                                                                              |
|       IterCalcRel(expr#0=[{inputs}], expr#1=[true], expr#2=[1], expr#3=[2], expr#4=[JPLUS($t3, $t3)], $0=[$t2], $1=[$t4])  |
|         IterOneRowRel                                                                                                      |
+----------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farragotest:> 
0: jdbc:farragotest:> -- Dtbug 446: The plan should compute start in fennel, then go to iter
0: jdbc:farragotest:> -- convention (because it needs to end up in iter convention).
0: jdbc:farragotest:> explain plan for select jplus(2, 2), cplus(1, 1) from (values(true));
+----------------------------------------------------------------------------------------------------------------------------+
|                                                          column0                                                           |
+----------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                  |
|   FennelCalcRel(expr#0..1=[{inputs}], expr#2=[CPLUS($t1, $t1)], EXPR$0=[$t0], EXPR$1=[$t2])                                |
|     IteratorToFennelConverter                                                                                              |
|       IterCalcRel(expr#0=[{inputs}], expr#1=[true], expr#2=[2], expr#3=[JPLUS($t2, $t2)], expr#4=[1], $0=[$t3], $1=[$t4])  |
|         IterOneRowRel                                                                                                      |
+----------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farragotest:> 
0: jdbc:farragotest:> explain plan for select cplus(jplus(1, 1), 2) from (values(true));
+----------------------------------------------------------------------------------------------------------------------------+
|                                                          column0                                                           |
+----------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                  |
|   FennelCalcRel(expr#0..1=[{inputs}], expr#2=[CPLUS($t0, $t1)], EXPR$0=[$t2])                                              |
|     IteratorToFennelConverter                                                                                              |
|       IterCalcRel(expr#0=[{inputs}], expr#1=[true], expr#2=[1], expr#3=[JPLUS($t2, $t2)], expr#4=[2], $0=[$t3], $1=[$t4])  |
|         IterOneRowRel                                                                                                      |
+----------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farragotest:> 
0: jdbc:farragotest:> -- Dtbug 446: This plan is sub-optimal -- there should be no
0: jdbc:farragotest:> -- back-to-back FennelCalcRel's.
0: jdbc:farragotest:> explain plan for select jplus(cplus(1, 1), 2) from (values(true));
+----------------------------------------------------------------------------------------------------------------------------+
|                                                          column0                                                           |
+----------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..1=[{inputs}], expr#2=[JPLUS($t0, $t1)], EXPR$0=[$t2])                                                  |
|   FennelToIteratorConverter                                                                                                |
|     FennelCalcRel(expr#0=[{inputs}], expr#1=[true], expr#2=[1], expr#3=[2], expr#4=[CPLUS($t2, $t2)], $0=[$t4], $1=[$t3])  |
|       FennelValuesRel(tuples=[[{ 0 }]])                                                                                    |
+----------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farragotest:> 
0: jdbc:farragotest:> explain plan for select empno, cplus(jplus(deptno, empid), age), jplus(cplus(deptno, empid), age), age from sales.emps;
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                              column0                                                                               |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..3=[{inputs}], expr#4=[JPLUS($t3, $t1)], EMPNO=[$t0], EXPR$1=[$t2], EXPR$2=[$t4], AGE=[$t1])                                                    |
|   FennelToIteratorConverter                                                                                                                                        |
|     FennelCalcRel(expr#0..4=[{inputs}], expr#5=[CPLUS($t4, $t3)], expr#6=[CPLUS($t1, $t2)], $0=[$t0], $1=[$t3], $2=[$t5], $3=[$t6])                                |
|       IteratorToFennelConverter                                                                                                                                    |
|         IterCalcRel(expr#0..3=[{inputs}], expr#4=[JPLUS($t1, $t2)], proj#0..4=[{exprs}])                                                                           |
|           FennelToIteratorConverter                                                                                                                                |
|             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2, 5, 6]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])  |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farragotest:> 
0: jdbc:farragotest:> explain plan for select * from sales.emps where jplus(deptno, 1) = 100;
+-------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                           column0                                                                           |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..9=[{inputs}], expr#10=[1], expr#11=[JPLUS($t2, $t10)], expr#12=[100], expr#13=[=($t11, $t12)], proj#0..9=[{exprs}], $condition=[$t13])  |
|   FennelToIteratorConverter                                                                                                                                 |
|     FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])              |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farragotest:> 
0: jdbc:farragotest:> -- Dtbug 446: This plan is sub-optimal -- there should be no
0: jdbc:farragotest:> -- back-to-back FennelCalcRel's.
0: jdbc:farragotest:> explain plan for select * from sales.emps where jplus(cplus(deptno, 1), 2) = 100;
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                column0                                                                                 |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..12=[{inputs}], expr#13=[JPLUS($t10, $t11)], expr#14=[=($t13, $t12)], proj#0..9=[{exprs}], $condition=[$t14])                                       |
|   FennelToIteratorConverter                                                                                                                                            |
|     FennelCalcRel(expr#0..9=[{inputs}], expr#10=[1], expr#11=[2], expr#12=[100], expr#13=[CPLUS($t2, $t10)], proj#0..9=[{exprs}], $10=[$t13], $11=[$t11], $12=[$t12])  |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])                       |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farragotest:> 
0: jdbc:farragotest:> explain plan for select * from sales.emps where cplus(jplus(deptno, 1), 2) = 100;
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                column0                                                                                 |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                              |
|   FennelCalcRel(expr#0..12=[{inputs}], expr#13=[CPLUS($t10, $t11)], expr#14=[=($t13, $t12)], proj#0..9=[{exprs}], $condition=[$t14])                                   |
|     IteratorToFennelConverter                                                                                                                                          |
|       IterCalcRel(expr#0..9=[{inputs}], expr#10=[1], expr#11=[JPLUS($t2, $t10)], expr#12=[2], expr#13=[100], proj#0..9=[{exprs}], $10=[$t11], $11=[$t12], $12=[$t13])  |
|         FennelToIteratorConverter                                                                                                                                      |
|           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])                   |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farragotest:> 
0: jdbc:farragotest:> -- TODO zfong 4/28/06 - reenable the following two queries once FRG-90 is
0: jdbc:farragotest:> -- resolved.  With the addition of the new PushProjectPastFilterRule, the
0: jdbc:farragotest:> -- two queries below take even longer to run, so they have been temporarily
0: jdbc:farragotest:> -- disabled.
0: jdbc:farragotest:> --
0: jdbc:farragotest:> -- explain plan for select cplus(jplus(deptno, 1), 2), jplus(cplus(deptno, 1), 2) from sales.emps where cplus(jplus(deptno, 1), 2) = 100 or jplus(cplus(deptno, 1), 2) = 100;
0: jdbc:farragotest:> --
0: jdbc:farragotest:> -- explain plan for select jplus(cplus(deptno, 1), 2), cplus(jplus(deptno, 1), 2) from sales.emps where cplus(jplus(deptno, 1), 2) = 100 or jplus(cplus(deptno, 1), 2) = 100;
0: jdbc:farragotest:> 
0: jdbc:farragotest:> explain plan for select jplus(cplus(deptno, 1), 2), cplus(jplus(deptno, 1), 2) from sales.emps where slacker;
+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                           column0                                                                            |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..2=[{inputs}], expr#3=[JPLUS($t0, $t1)], EXPR$0=[$t3], EXPR$1=[$t2])                                                                      |
|   FennelToIteratorConverter                                                                                                                                  |
|     FennelCalcRel(expr#0..3=[{inputs}], expr#4=[CPLUS($t0, $t1)], expr#5=[CPLUS($t3, $t2)], $0=[$t4], $1=[$t2], $2=[$t5])                                    |
|       IteratorToFennelConverter                                                                                                                              |
|         IterCalcRel(expr#0..1=[{inputs}], expr#2=[1], expr#3=[2], expr#4=[JPLUS($t0, $t2)], $0=[$t0], $1=[$t2], $2=[$t3], $3=[$t4], $condition=[$t1])        |
|           FennelToIteratorConverter                                                                                                                          |
|             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2, 8]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])  |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farragotest:> 
0: jdbc:farragotest:> -- Test top-most level can be implemented in any calc and last
0: jdbc:farragotest:> -- expression isn't a RexCall.  dtbug 210
0: jdbc:farragotest:> -- Dtbug 446: Plan should not have back-to-back FennelCalcRel's.
0: jdbc:farragotest:> explain plan for select deptno + jplus(cplus(deptno, 1), 2), empno from sales.emps;
+-------------------------------------------------------------------------------------------------------------------------------------+
|                                                               column0                                                               |
+-------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..3=[{inputs}], expr#4=[JPLUS($t2, $t3)], expr#5=[+($t1, $t4)], EXPR$0=[$t5], EMPNO=[$t0])                        |
|   FennelToIteratorConverter                                                                                                         |
|     FennelCalcRel(expr#0..1=[{inputs}], expr#2=[1], expr#3=[2], expr#4=[CPLUS($t1, $t2)], proj#0..1=[{exprs}], $2=[$t4], $3=[$t3])  |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                 |
+-------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farragotest:> 
0: jdbc:farragotest:> -- Equivalent to dtbug 210
0: jdbc:farragotest:> explain plan for select cplus(t.r."second", 1) from (select jrow(deptno, empno) as r from sales.emps) as t;
+--------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                  column0                                                                   |
+--------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                  |
|   FennelCalcRel(expr#0..1=[{inputs}], expr#2=[CPLUS($t0, $t1)], EXPR$0=[$t2])                                                              |
|     IteratorToFennelConverter                                                                                                              |
|       IterCalcRel(expr#0..1=[{inputs}], expr#2=[JROW($t1, $t0)], expr#3=[$t2.first], expr#4=[$t2.second], expr#5=[1], $0=[$t4], $1=[$t5])  |
|         FennelToIteratorConverter                                                                                                          |
|           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                    |
+--------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farragotest:> 
0: jdbc:farragotest:> -- Found a bug related to this expression while debugging dtbug 210.
0: jdbc:farragotest:> -- Dtbug 446: Plan should not have back-to-back FennelCalcRel's.
0: jdbc:farragotest:> explain plan for select t.r."second" from (select jrow(deptno, cplus(empno, 1)) as r from sales.emps) as t;
+----------------------------------------------------------------------------------------------------------------------+
|                                                       column0                                                        |
+----------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..1=[{inputs}], expr#2=[JROW($t0, $t1)], expr#3=[$t2.second], second=[$t3])                        |
|   FennelToIteratorConverter                                                                                          |
|     FennelCalcRel(expr#0..1=[{inputs}], expr#2=[1], expr#3=[CPLUS($t0, $t2)], $0=[$t1], $1=[$t3])                    |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])  |
+----------------------------------------------------------------------------------------------------------------------+
0: jdbc:farragotest:> 
0: jdbc:farragotest:> # End autoCalcRule.sql
0: jdbc:farragotest:> 
0: jdbc:farragotest:> !quit
