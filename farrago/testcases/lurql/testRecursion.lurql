# $Id:$

# Test a static recursion that doesn't go very far
EXPLAIN
select *
from class Operation then (
    recursively (
        follow association CanRaise forward
    )
);

# Test a simple dynamic recursion
EXPLAIN AND EXECUTE
select *
from class "Class" where name='Exception' then (
    recursively (
        follow association Generalizes forward
    )
);

# Test a bigger dynamic recursion
EXECUTE
select *
from class "Class" where name='ModelElement' then (
    recursively (
        follow association Generalizes backward
    )
);

# Test recursion without GATHER:  finds all superclass attributes
EXPLAIN AND EXECUTE
select a
from class "Class" where name='Package' then (
    recursively (
        follow association Generalizes forward
    ) then (
        follow association Contains destination class Attribute as a
    )
);

# Test recursion with GATHER outside:  equivalent to previous query
EXPLAIN AND EXECUTE
select a
from class "Class" where name='Package' then (
    recursively (
        follow association Generalizes forward
    )
) gather with parent then (
    follow association Contains destination class Attribute as a
);

# Test recursion with GATHER at same level: finds only attributes for
# start class because of confusing syntax; this syntax is deprecated
# and will be removed soon
EXPLAIN AND EXECUTE
select a
from class "Class" where name='Package' then (
    recursively (
        follow association Generalizes forward
    ) gather with parent then (
        follow association Contains destination class Attribute as a
    )
);

# Test recursion with GATHER inside:  this makes the GATHER
# part of the recursion
EXPLAIN AND EXECUTE
select a
from class "Class" where name='Package' then (
    recursively (
        (
            follow association Generalizes forward
            union
            follow association DependsOn forward
        ) gather then (
            follow association Generalizes backward
        )
    )
) gather with parent then (
    follow association Contains destination class Attribute as a
);

