/*
// $Id$
// Saffron preprocessor and data engine
// (C) Copyright 2002-2003 Disruptive Technologies, Inc.
// (C) Copyright 2003-2004 John V. Sichi
// You must accept the terms in LICENSE.html to use this software.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2.1
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/

package org.eigenbase.runtime;

import java.util.*;

/**
 * <code>CalcIterator</code> is an abstract base for iterator implementations
 * generated by IterCalcRel.
 */
public abstract class CalcIterator implements Iterator
{
    //~ Instance fields -------------------------------------------------------

    protected Iterator inputIterator;

    protected Object nextRow;

    //~ Constructors ----------------------------------------------------------

    /**
     * Constructor.
     *
     * @param inputIterator iterator producing results to be transformed
     */
    protected CalcIterator(Iterator inputIterator)
    {
        this.inputIterator = inputIterator;
    }

    //~ Methods ---------------------------------------------------------------

    // implement Iterator
    public Object next()
    {
        // REVIEW: All of this pussy-footing around is pointless.  Maybe need a
        // new calling convention which calls straight to calcNext() and
        // understands that null means finis.
        if (nextRow == null) {
            if (!hasNext()) {
                throw new NoSuchElementException();
            }
        }
        Object obj = nextRow;
        nextRow = null;
        return obj;
    }

    // implement Iterator
    public boolean hasNext()
    {
        if (nextRow != null) {
            return true;
        }
        nextRow = calcNext();
        return (nextRow != null);
    }

    // implement Iterator
    public void remove()
    {
        inputIterator.remove();
    }

    /**
     * Method to be implemented by subclasses to calculate next row.
     *
     * @return row or null if no more
     */
    protected abstract Object calcNext();
}


// End CalcIterator.java
