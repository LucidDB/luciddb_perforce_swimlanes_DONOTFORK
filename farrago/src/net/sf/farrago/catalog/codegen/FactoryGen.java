/*
// Farrago is a relational database management system.
// Copyright (C) 2003-2004 John V. Sichi.
// Copyright (C) 2003-2004 Disruptive Tech
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2.1
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/
package net.sf.farrago.catalog.codegen;

import java.io.*;
import java.util.*;

import javax.jmi.model.*;
import javax.jmi.reflect.*;

import net.sf.farrago.FarragoPackage;
import net.sf.farrago.catalog.FarragoModelLoader;
import net.sf.farrago.util.*;

import org.eigenbase.util.*;

import org.netbeans.api.mdr.*;
import org.netbeans.lib.jmi.util.*;


/**
 * FactoryGen generates a factory class for a JMI model.  It's purely a
 * convenience; JMI already provides factory methods, but their invocation
 * requires a long ugly expression involving lots of redundancy.  For
 * an example of the generated output, see FarragoMetadataFactory.
 *
 * @author John V. Sichi
 * @version $Id$
 */
public class FactoryGen
{
    //~ Methods ---------------------------------------------------------------

    /**
     * Main generator entry point invoked by build.xml (target
     * "generateMetadataFactory").
     *
     * @param args <ul>
     * <li>args[0] = target file for .java output
     * <li>args[1] = target package name
     * <li>args[2] = target class name
     * <li>args[3] = source package Java metaclass name
     * <li>args[4] = source extent name
     *        </ul>
     */
    public static void main(String [] args)
        throws ClassNotFoundException, IOException
    {
        assert (args.length == 5);
        FileWriter writer = new FileWriter(args[0]);
        String targetPackageName = args[1];
        String targetClassName = args[2];
        String sourcePackageJavaMetaclassName = args[3];
        String sourceExtentName = args[4];

        FarragoModelLoader modelLoader = null;
        PrintWriter pw = new PrintWriter(writer);
        try {
            pw.println("// This code generated by FactoryGen -- do not edit");
            pw.println();
            pw.print("package ");
            pw.print(targetPackageName);
            pw.println(";");
            pw.println();
            pw.print("public class ");
            pw.println(targetClassName);
            pw.println("{");
            pw.print("    private ");
            pw.print(sourcePackageJavaMetaclassName);
            pw.println(" rootPackage;");
            pw.println();
            pw.print("    public void setRootPackage(");
            pw.print(sourcePackageJavaMetaclassName);
            pw.println(" p)");
            pw.println("    {");
            pw.println("        this.rootPackage = p;");
            pw.println("    }");
            pw.println();
            pw.print("    public ");
            pw.print(sourcePackageJavaMetaclassName);
            pw.println(" getRootPackage()");
            pw.println("    {");
            pw.println("        return rootPackage;");
            pw.println("    }");
            pw.println();

            modelLoader = new FarragoModelLoader();
            FarragoPackage farragoPackage =
                modelLoader.loadModel(sourceExtentName, false);
            generatePackage(pw, farragoPackage, "rootPackage");

            pw.println("}");
        } finally {
            pw.flush();
            writer.close();
            if (modelLoader != null) {
                modelLoader.close();
            }
        }
    }

    private static void generatePackage(
        PrintWriter pw,
        RefPackage refPackage,
        String packageAccessor)
        throws ClassNotFoundException
    {
        TagProvider tagProvider = new TagProvider();

        // first generate accessor for package
        Class pkgInterface = JmiUtil.getJavaInterfaceForRefPackage(refPackage);
        pw.print("    public ");
        pw.print(pkgInterface.getName());
        pw.print(" get");
        pw.print(ReflectUtil.getUnqualifiedClassName(pkgInterface));
        pw.println("()");
        pw.println("    {");
        pw.print("        return ");
        pw.print(packageAccessor);
        pw.println(";");
        pw.println("    }");
        pw.println();

        // then generate factory methods for all classes in package
        Iterator iter = refPackage.refAllClasses().iterator();
        while (iter.hasNext()) {
            RefClass refClass = (RefClass) iter.next();
            MofClass mofClass = (MofClass) refClass.refMetaObject();
            if (mofClass.isAbstract()) {
                continue;
            }
            Class classInterface =
                JmiUtil.getJavaInterfaceForRefClass(refClass);
            String unqualifiedInterfaceName =
                ReflectUtil.getUnqualifiedClassName(classInterface);
            pw.print("    public ");
            pw.print(classInterface.getName());
            pw.print(" new");
            pw.print(unqualifiedInterfaceName);
            pw.println("()");
            pw.println("    {");
            pw.print("        return get");
            pw.print(ReflectUtil.getUnqualifiedClassName(pkgInterface));
            pw.print("().get");
            pw.print(unqualifiedInterfaceName);
            pw.print("().create");
            pw.print(unqualifiedInterfaceName);
            pw.println("();");
            pw.println("    }");
            pw.println();
        }
        iter = refPackage.refAllPackages().iterator();
        while (iter.hasNext()) {
            RefPackage refSubPackage = (RefPackage) iter.next();
            MofPackage mofSubPackage =
                (MofPackage) refSubPackage.refMetaObject();

            String subPackageName = mofSubPackage.getName();

            // This is a trick to detect and skip the package aliases which are
            // created for imports.
            Package javaPackage = refPackage.getClass().getPackage();
            Package childJavaPackage = refSubPackage.getClass().getPackage();
            if (!childJavaPackage.getName().equals(javaPackage.getName() + "."
                        + subPackageName.toLowerCase())) {
                continue;
            }

            subPackageName = tagProvider.getSubstName(mofSubPackage);

            generatePackage(pw, refSubPackage,
                packageAccessor + ".get" + subPackageName + "()");
        }
    }
}


// End FactoryGen.java
