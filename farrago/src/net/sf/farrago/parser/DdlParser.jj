/*
// $Id$
// Farrago is an extensible data management system.
// Copyright (C) 2005-2005 The Eigenbase Project
// Copyright (C) 2004-2005 Disruptive Tech
// Copyright (C) 2005-2005 Red Square, Inc.
// Portions Copyright (C) 2003-2005 John V. Sichi
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later Eigenbase-approved version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

options {
    STATIC = false;
    JAVA_UNICODE_ESCAPE = true;
    IGNORE_CASE = true;
}

PARSER_BEGIN(FarragoParserImpl)

package net.sf.farrago.parser.impl;

import net.sf.farrago.parser.*;
import net.sf.farrago.catalog.*;
import net.sf.farrago.resource.*;
import net.sf.farrago.ddl.*;
import net.sf.farrago.query.*;
import net.sf.farrago.session.*;
import org.eigenbase.sql.*;
import org.eigenbase.sql.fun.*;
import org.eigenbase.sql.parser.*;
import org.eigenbase.sql.type.*;
import org.eigenbase.util.*;
import org.eigenbase.resource.*;
import net.sf.farrago.resource.*;
import java.util.*;
import javax.jmi.reflect.*;
import java.sql.*;

import net.sf.farrago.cwm.*;
import net.sf.farrago.cwm.core.*;
import net.sf.farrago.cwm.datatypes.*;
import net.sf.farrago.cwm.relational.*;
import net.sf.farrago.cwm.relational.enumerations.*;
import net.sf.farrago.cwm.keysindexes.*;
import net.sf.farrago.cwm.behavioral.*;

import net.sf.farrago.fem.med.*;
import net.sf.farrago.fem.sql2003.*;


/**
 * Farrago SQL parser implementation, generated from DdlParser.jj and
 * CommonParser.jj by JavaCC.
 *
 * @author John V. Sichi
 * @version $Id$
 */
public class FarragoParserImpl extends FarragoAbstractParserImpl {
    public SqlParserPos getCurrentPosition()
    {
        return new SqlParserPos(
            token.beginLine,
            token.beginColumn);
    }
}

PARSER_END(FarragoParserImpl)


/*****************************************
 * Syntactical Descriptions              *
 *****************************************/

/**
 * Allows an OVER clause following a table expression as an extension to
 * standard SQL syntax. The default implementation of this production is empty.
 */
SqlNode TableOverOpt() :
{
}
{
    { return null; }
}

/*
 * Parses dialect-specific keywords immediately following the SELECT keyword.
 */
void SqlSelectKeywords(List keywords) :
{}
{
    E()
}

String NonReservedKeyWord() :
{
    String kw;
}
{
    (
        kw = CommonNonReservedKeyWord()
        {
            return kw;
        }
        |
        kw = DdlNonReservedKeyWord()
        {
            return kw;
        }
    )
}

CwmModelElement ExtensionModelDefinition() :
{
}
{
    (
        LOOKAHEAD({false}) <NULL>
    )
        {
            return null;
        }
}

CwmModelElement ExtensionModelSchemaObjDefinition() :
{
}
{
    (
        LOOKAHEAD({false}) <NULL>
    )
        {
            return null;
        }
}

CwmModelElement ExtensionModelDrop() :
{
}
{
    (
        LOOKAHEAD({false}) <NULL>
    )
        {
            return null;
        }
}

DdlStmt ExtensionModelAlter() :
{
}
{
    (
        LOOKAHEAD({false}) <NULL>
    )
        {
            return null;
        }
}

// End DdlParser.jj
