/*
// $Id$
// Farrago is an extensible data management system.
// Copyright (C) 2005-2005 The Eigenbase Project
// Copyright (C) 2005-2005 Disruptive Tech
// Copyright (C) 2005-2005 LucidEra, Inc.
// Portions Copyright (C) 2003-2005 John V. Sichi
//
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version approved by The Eigenbase Project.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
package net.sf.farrago.util;

import java.io.*;

import javax.xml.parsers.*;

import org.apache.xerces.jaxp.*;
import org.eigenbase.util.*;
import org.w3c.dom.*;
import org.xml.sax.*;


/**
 * Static XML utilities.
 *
 * @author John V. Sichi
 * @version $Id$
 */
public abstract class XmlUtil
{
    //~ Static fields/initializers --------------------------------------------

    // REVIEW:  I'm pretty sure this is thread-safe.  Would one more level
    // down (a shared DocumentBuilder) also be thread-safe?  Probably not.
    private static DocumentBuilderFactory docBuilderFactory =
        new DocumentBuilderFactoryImpl();

    //~ Methods ---------------------------------------------------------------

    /**
     * Gets the value of an int attribute from an XML element.
     *
     * @param element element to access
     * @param attrName name of attribute to access
     * @param defaultValue default value to use if attribute not present
     *
     * @return int value
     */
    public static int getIntAttribute(
        Element element,
        String attrName,
        int defaultValue)
    {
        String val = element.getAttribute(attrName);
        if (val.length() == 0) {
            return defaultValue;
        } else {
            return Integer.parseInt(val);
        }
    }

    /**
     * Appends an empty tag as a child of an existing element.
     *
     * @param parentElement element to which to append new child
     * @param tagName tag name to assign new child
     *
     * @return child
     */
    public static Element appendChildElement(
        Element parentElement,
        String tagName)
    {
        Element childElement =
            parentElement.getOwnerDocument().createElement(tagName);
        parentElement.appendChild(childElement);
        return childElement;
    }

    /**
     * Creates a new DOM document with an empty top-level tag.
     *
     * @param tagName name for the empty tag
     *
     * @return the top-level element
     */
    public static Element newDocumentElement(String tagName)
    {
        try {
            Document doc =
                docBuilderFactory.newDocumentBuilder().newDocument();
            return doc.createElement(tagName);
        } catch (Exception ex) {
            throw Util.newInternal(ex);
        }
    }

    /**
     * Parses an XML string into DOM.  Parse failures result in an internal
     * error, so this method should only be used in contexts where valid XML
     * is guaranteed (e.g. the XML was generated by trusted code, not
     * imported).
     *
     * @param xmlString the XML to parse
     *
     * @return DOM representation
     */
    public static Element parseStringToDom(String xmlString)
    {
        try {
            DocumentBuilder docBuilder =
                docBuilderFactory.newDocumentBuilder();
            Document doc =
                docBuilder.parse(new InputSource(new StringReader(xmlString)));
            return doc.getDocumentElement();
        } catch (Exception ex) {
            throw Util.newInternal(ex);
        }
    }
}


// End XmlUtil.java
