/*
// $Id$
// Farrago is an extensible data management system.
// Copyright (C) 2006-2006 The Eigenbase Project
// Copyright (C) 2006-2006 Disruptive Tech
// Copyright (C) 2006-2006 LucidEra, Inc.
//
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version approved by The Eigenbase Project.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
package net.sf.farrago.runtime;

import org.eigenbase.util.*;

/**
 * FarragoUdrRuntime exposes a runtime support interface which can be used by
 * implementations of Farrago user-defined routines.  For an example of how to
 * use this interface, see {@link
 * net.sf.farrago.test.FarragoTestUDR#generateRandomNumber}.
 *
 *<p>
 *
 * NOTE: By relying on this interface, your UDR becomes dependent on Farrago.
 *
 * @author John V. Sichi
 * @version $Id$
 */
public abstract class FarragoUdrRuntime
{
    /**
     * Accesses the context object for the calling UDR.
     *
     * @return context object, or null if none has been set yet
     */
    public static Object getContext()
    {
        FarragoUdrInvocationFrame frame =
            FarragoRuntimeContext.getUdrInvocationFrame();
        return frame.udrContext.getObject();
    }

    /**
     * Stores the context object for the calling UDR.  If the
     * given context object implements the {@link ClosableAllocation}
     * interface, its closeAllocation method will be called automatically
     * when statement execution ends.
     *
     * @param context new context object to set
     */
    public static void setContext(Object context)
    {
        FarragoUdrInvocationFrame frame =
            FarragoRuntimeContext.getUdrInvocationFrame();
        frame.udrContext.setObject(context);
        if (context instanceof ClosableAllocation) {
            frame.context.addAllocation((ClosableAllocation) context);
        }
    }

    /**
     * If this UDR invocation was generated by a {@link FarragoMedDataServer},
     * invokes that server's getRuntimeSupport method.  Otherwise,
     * throws IllegalStateException.
     *
     * @param param server-specific runtime parameter
     *
     * @return server-specific runtime support object
     */
    public static Object getDataServerRuntimeSupport(Object param)
    {
        FarragoUdrInvocationFrame frame =
            FarragoRuntimeContext.getUdrInvocationFrame();
        String serverMofId = frame.udrContext.getServerMofId();
        if (serverMofId == null) {
            throw new IllegalStateException();
        }
        return frame.context.getDataServerRuntimeSupport(
            serverMofId,
            param);
    }
}

// End FarragoUdrRuntime.java
