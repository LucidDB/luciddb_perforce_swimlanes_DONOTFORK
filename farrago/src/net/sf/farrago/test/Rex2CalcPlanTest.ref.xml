<?xml version="1.0" ?>
<Root>
    <TestCase name="testAggCount">
        <Resource name="expectedInit">
            <![CDATA[
O s8;
I s4;
C s8;
V 0;
T;
MOVE O0, C0 /* 0: COUNT($t0) */;
RETURN /* 1: */;]]>
        </Resource>
        <Resource name="expectedAdd">
            <![CDATA[
O s8;
I s4;
C s8;
V 1;
T;
ADD O0, O0, C0 /* 0: COUNT($t0) */;
RETURN /* 1: */;]]>
        </Resource>
        <Resource name="expectedDrop">
            <![CDATA[
O s8;
I s4;
C s8;
V 1;
T;
SUB O0, O0, C0 /* 0: COUNT($t0) */;
RETURN /* 1: */;]]>
        </Resource>
        <Resource name="expectedDropOptimized">
            <![CDATA[
O s8;
C s8;
V 1;
T;
SUB O0, O0, C0 /* 0: COUNT($t0) */;
RETURN /* 1: */;]]>
        </Resource>
        <Resource name="expectedDropMapping">
            <![CDATA[
{}]]>
        </Resource>
    </TestCase>
    <TestCase name="testAggSum">
        <Resource name="expectedInit">
            <![CDATA[
O s4;
I s4;
C s4;
V 0;
T;
MOVE O0, C0 /* 0: SUM($t0) */;
RETURN /* 1: */;]]>
        </Resource>
        <Resource name="expectedAdd">
            <![CDATA[
O s4;
I s4;
T;
ADD O0, O0, I0 /* 0: SUM($t0) */;
RETURN /* 1: */;]]>
        </Resource>
        <Resource name="expectedDrop">
            <![CDATA[
O s4;
I s4;
T;
SUB O0, O0, I0 /* 0: SUM($t0) */;
RETURN /* 1: */;]]>
        </Resource>
        <Resource name="expectedDropOptimized">
            <![CDATA[
O s4;
I s4;
T;
SUB O0, O0, I0 /* 0: SUM($t0) */;
RETURN /* 1: */;]]>
        </Resource>
        <Resource name="expectedDropMapping">
            <![CDATA[
{0}]]>
        </Resource>
    </TestCase>
    <TestCase name="testAggSumExp">
        <Resource name="expectedInit">
            <![CDATA[
O s4, s8;
I s4, s4, s4;
C s4, s8;
V 0, 0;
T;
MOVE O0, C0 /* 0: SUM($t2) */;
MOVE O1, C1 /* 1: COUNT($t0) */;
RETURN /* 2: */;]]>
        </Resource>
        <Resource name="expectedAdd">
            <![CDATA[
O s4, s8;
I s4, s4, s4;
C s8;
V 1;
T;
ADD O0, O0, I2 /* 0: SUM($t2) */;
ADD O1, O1, C0 /* 1: COUNT($t0) */;
RETURN /* 2: */;]]>
        </Resource>
        <Resource name="expectedDrop">
            <![CDATA[
O s4, s8;
I s4, s4, s4;
C s8;
V 1;
T;
SUB O0, O0, I2 /* 0: SUM($t2) */;
SUB O1, O1, C0 /* 1: COUNT($t0) */;
RETURN /* 2: */;]]>
        </Resource>
        <Resource name="expectedDropOptimized">
            <![CDATA[
O s4, s8;
I s4;
C s8;
V 1;
T;
SUB O0, O0, I0 /* 0: SUM($t2) */;
SUB O1, O1, C0 /* 1: COUNT($t0) */;
RETURN /* 2: */;]]>
        </Resource>
        <Resource name="expectedDropMapping">
            <![CDATA[
{2}]]>
        </Resource>
    </TestCase>
    <TestCase name="testSimplePassThroughFilter">
        <Resource name="expectedProgram">
            <![CDATA[
O s4, s4;
I s4;
L bo, bo;
S bo;
C s4, bo, bo, vc,5;
V 10, 1, 0, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t9) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
ISNULL L1, I0 /* 5: */;
JMPF @9, L1 /* 6: */;
RAISE C3 /* 7: */;
RETURN /* 8: */;
REF O0, I0 /* 9: */;
ISNULL L1, I0 /* 10: */;
JMPF @14, L1 /* 11: */;
RAISE C3 /* 12: */;
RETURN /* 13: */;
REF O1, I0 /* 14: */;
RETURN /* 15: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testSimplyEqualsFilter">
        <Resource name="expectedProgram">
            <![CDATA[
O s4;
I s4;
L bo, bo;
S bo;
C s4, bo, bo, vc,5;
V 123, 1, 0, 0x3232303034 /* 22004 */;
T;
EQ L0, I0, C0 /* 0: =($t0, $t9) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
ISNULL L1, I0 /* 5: */;
JMPF @9, L1 /* 6: */;
RAISE C3 /* 7: */;
RETURN /* 8: */;
REF O0, I0 /* 9: */;
RETURN /* 10: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testSimplyEqualsFilterWithComments">
        <Resource name="expectedProgram">
            <![CDATA[
O s4;
I vc,20, s4;
L c,20, bo, s4, bo, bo, bo;
S bo;
C c,4, s4, s4, s4, bo, bo, vc,5;
V 0x5761656C /* Wael */, 0, 123, 0, 1, 0, 0x3232303034 /* 22004 */;
T;
CALL 'castA(L0, I0) /* 0: */;
CALL 'strCmpA(L2, L0, C0) /* 1: */;
EQ L1, L2, C1 /* 2: =($t1, $t9) */;
EQ L3, C2, C3 /* 3: =($t11, $t12) */;
AND L4, L1, L3 /* 4: AND($t10, $t13) */;
JMPT @8, L4 /* 5: */;
MOVE S0, C4 /* 6: */;
RETURN /* 7: */;
MOVE S0, C5 /* 8: */;
ISNULL L5, I1 /* 9: */;
JMPF @13, L5 /* 10: */;
RAISE C6 /* 11: */;
RETURN /* 12: */;
REF O0, I1 /* 13: */;
RETURN /* 14: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testSimplyEqualsFilterShortCircuit">
        <Resource name="expectedProgram">
            <![CDATA[
O s4;
I s4;
L bo, bo;
S bo;
C s4, bo, bo, vc,5;
V 123, 1, 0, 0x3232303034 /* 22004 */;
T;
EQ L0, I0, C0 /* 0: =($t0, $t9) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
ISNULL L1, I0 /* 5: */;
JMPF @9, L1 /* 6: */;
RAISE C3 /* 7: */;
RETURN /* 8: */;
REF O0, I0 /* 9: */;
RETURN /* 10: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testBooleanExpressions">
        <Resource name="expectedProgram">
            <![CDATA[
O s4;
I s4;
L bo, bo, bo, bo, bo, bo;
S bo;
C bo, bo, vc,5;
V 1, 0, 0x3232303034 /* 22004 */;
T;
NOT L0, C0 /* 0: NOT($t9) */;
AND L1, C0, L0 /* 1: AND($t9, $t10) */;
AND L2, L0, C0 /* 2: AND($t10, $t9) */;
AND L3, C1, L2 /* 3: AND($t12, $t13) */;
OR L4, L1, L3 /* 4: OR($t11, $t14) */;
JMPT @8, L4 /* 5: */;
MOVE S0, C0 /* 6: */;
RETURN /* 7: */;
MOVE S0, C1 /* 8: */;
ISNULL L5, I0 /* 9: */;
JMPF @13, L5 /* 10: */;
RAISE C2 /* 11: */;
RETURN /* 12: */;
REF O0, I0 /* 13: */;
RETURN /* 14: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testScalarExpression">
        <Resource name="expectedProgram">
            <![CDATA[
O s4;
I s4;
L bo, s4, s4, s4, s4, s4, bo;
S bo;
C s4, bo, bo, s4, vc,5;
V 10, 1, 0, 2, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t15) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
MUL L1, C3, C3 /* 5: *($t9, $t9) */;
SUB L2, C3, L1 /* 6: -($t9, $t10) */;
DIV L3, C3, C3 /* 7: /($t9, $t9) */;
ADD L4, L2, L3 /* 8: +($t11, $t12) */;
SUB L5, L4, C3 /* 9: -($t13, $t9) */;
ISNULL L6, L5 /* 10: */;
JMPF @14, L6 /* 11: */;
RAISE C4 /* 12: */;
RETURN /* 13: */;
REF O0, L5 /* 14: */;
RETURN /* 15: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testMixedExpression">
        <Resource name="expectedProgram">
            <![CDATA[
O vc,20, s4;
I vc,20, s4;
L c,20, bo, s4, bo, bo, s4, bo;
S bo;
C c,4, s4, s4, bo, bo, s4, vc,5;
V 0x46726564 /* Fred */, 0, 10, 1, 0, 2, 0x3232303034 /* 22004 */;
T;
CALL 'castA(L0, I0) /* 0: */;
CALL 'strCmpA(L2, L0, C0) /* 1: */;
EQ L1, L2, C1 /* 2: =($t1, $t11) */;
GT L3, I1, C2 /* 3: >($t0, $t13) */;
AND L4, L1, L3 /* 4: AND($t12, $t14) */;
JMPT @8, L4 /* 5: */;
MOVE S0, C3 /* 6: */;
RETURN /* 7: */;
MOVE S0, C4 /* 8: */;
MUL L5, C5, C5 /* 9: *($t9, $t9) */;
ISNULL L6, I0 /* 10: */;
JMPF @14, L6 /* 11: */;
RAISE C6 /* 12: */;
RETURN /* 13: */;
REF O0, I0 /* 14: */;
ISNULL L6, L5 /* 15: */;
JMPF @19, L6 /* 16: */;
RAISE C6 /* 17: */;
RETURN /* 18: */;
REF O1, L5 /* 19: */;
RETURN /* 20: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testNumbers">
        <Resource name="expectedProgram">
            <![CDATA[
O bo, d;
I s4;
L bo, d, d, d, d, d, d, d, d, d, bo, d, d, d, bo;
S bo;
C s4, bo, bo, s4, s4, d, s8, d, s4, d, s8, vc,5;
V 10, 1, 0, 1, -2, -3E-1, -4, 1E1, 5, 1E200, 4, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t29) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
CAST L1, C4 /* 5: CAST($t10):DOUBLE NOT NULL */;
MUL L2, L1, C5 /* 6: *($t10, $t11) */;
CAST L3, C6 /* 7: CAST($t14):DOUBLE NOT NULL */;
DIV L4, L3, C7 /* 8: /INT($t15, $t16) */;
DIV L5, L2, L4 /* 9: /($t12, $t17) */;
CAST L6, C3 /* 10: CAST($t9):DOUBLE NOT NULL */;
ADD L7, L6, L5 /* 11: +($t9, $t18) */;
NEG L8, L7 /* 12: -($t19) */;
CAST L9, C8 /* 13: CAST($t21):DOUBLE NOT NULL */;
GE L10, L8, L9 /* 14: >=($t20, $t21) */;
CAST L11, C10 /* 15: CAST($t25):DOUBLE NOT NULL */;
DIV L12, L11, C7 /* 16: /INT($t26, $t16) */;
DIV L13, C9, L12 /* 17: /($t23, $t27) */;
ISNULL L14, L10 /* 18: */;
JMPF @22, L14 /* 19: */;
RAISE C11 /* 20: */;
RETURN /* 21: */;
REF O0, L10 /* 22: */;
ISNULL L14, L13 /* 23: */;
JMPF @27, L14 /* 24: */;
RAISE C11 /* 25: */;
RETURN /* 26: */;
REF O1, L13 /* 27: */;
RETURN /* 28: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testHexBitBinaryString">
        <Resource name="expectedProgram">
            <![CDATA[
O bo;
I s4;
L bo, bo, s4, bo;
S bo;
C s4, bo, bo, b,2, b,3, s4, vc,5;
V 10, 1, 0, 0x0001, 0xFFEEDD, 0, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t12) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
CALL 'strCmpOct(L2, C3, C4) /* 5: */;
EQ L1, L2, C5 /* 6: =($t9, $t10) */;
ISNULL L3, L1 /* 7: */;
JMPF @11, L3 /* 8: */;
RAISE C6 /* 9: */;
RETURN /* 10: */;
REF O0, L1 /* 11: */;
RETURN /* 12: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testStringLiterals">
        <Resource name="expectedProgram">
            <![CDATA[
O c,3, c,0, c,3;
I s4;
L bo, bo;
S bo;
C s4, bo, bo, c,3, c,0, c,3, vc,5;
V 10, 1, 0, 0x614263 /* aBc */, 0x /*  */, 0x616263 /* abc */, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t12) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
ISNULL L1, C3 /* 5: */;
JMPF @9, L1 /* 6: */;
RAISE C6 /* 7: */;
RETURN /* 8: */;
REF O0, C3 /* 9: */;
ISNULL L1, C4 /* 10: */;
JMPF @14, L1 /* 11: */;
RAISE C6 /* 12: */;
RETURN /* 13: */;
REF O1, C4 /* 14: */;
ISNULL L1, C5 /* 15: */;
JMPF @19, L1 /* 16: */;
RAISE C6 /* 17: */;
RETURN /* 18: */;
REF O2, C5 /* 19: */;
RETURN /* 20: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testSimpleCompare">
        <Resource name="expectedProgram">
            <![CDATA[
O bo, bo, bo, bo, bo, bo;
I s4;
L bo, bo, bo, bo, bo, bo, bo, bo, bo, bo, bo, bo, bo;
S bo;
C s4, bo, bo, s4, s4, vc,5;
V 10, 1, 0, 1, 2, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t21) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
NE L1, C3, C4 /* 5: <>($t9, $t10) */;
EQ L2, C3, C4 /* 6: =($t9, $t10) */;
EQ L3, L2, C1 /* 7: =($t12, true) IS TRUE($t12) */;
EQ L4, L3, C2 /* 8: =($t13, false) IS FALSE($t13) */;
ISNULL L5, L4 /* 9: IS NULL($t14) */;
ISNULL L6, L5 /* 10: IS NULL($t15) */;
EQ L7, C1, C1 /* 11: =($t17, true) */;
NOT L8, L7 /* 12: NOT(=($t17, true)) IS NOT TRUE($t17) */;
EQ L9, C1, C2 /* 13: =($t17, false) */;
NOT L10, L9 /* 14: NOT(=($t17, false)) IS NOT FALSE($t17) */;
ISNOTNULL L11, C1 /* 15: IS NOT NULL($t17) */;
ISNULL L12, L1 /* 16: */;
JMPF @20, L12 /* 17: */;
RAISE C5 /* 18: */;
RETURN /* 19: */;
REF O0, L1 /* 20: */;
ISNULL L12, L6 /* 21: */;
JMPF @25, L12 /* 22: */;
RAISE C5 /* 23: */;
RETURN /* 24: */;
REF O1, L6 /* 25: */;
ISNULL L12, L8 /* 26: */;
JMPF @30, L12 /* 27: */;
RAISE C5 /* 28: */;
RETURN /* 29: */;
REF O2, L8 /* 30: */;
ISNULL L12, L10 /* 31: */;
JMPF @35, L12 /* 32: */;
RAISE C5 /* 33: */;
RETURN /* 34: */;
REF O3, L10 /* 35: */;
ISNULL L12, L11 /* 36: */;
JMPF @40, L12 /* 37: */;
RAISE C5 /* 38: */;
RETURN /* 39: */;
REF O4, L11 /* 40: */;
ISNULL L12, L11 /* 41: */;
JMPF @45, L12 /* 42: */;
RAISE C5 /* 43: */;
RETURN /* 44: */;
REF O5, L11 /* 45: */;
RETURN /* 46: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testArithmeticOperators">
        <Resource name="expectedProgram">
            <![CDATA[
O d, s4, s8, s4, s8, d, d;
I s4;
L bo, d, d, d, s4, s8, s8, s8, s4, s8, d, d, d, bo;
S bo;
C s4, bo, bo, s8, d, s4, s8, s8, vc,5;
V 10, 1, 0, 10, 1E1, 1, 5000000000, 11, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t26) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
CAST L1, C3 /* 5: CAST($t10):DOUBLE NOT NULL */;
DIV L2, L1, C4 /* 6: /INT($t11, $t12) */;
CALL 'POW(L3, L2, L2) /* 7: POWER($t13, $t13) */;
MOD L4, C5, C5 /* 8: MOD($t15, $t15) */;
CALL 'ABS(L5, C6) /* 9: ABS($t17) */;
CAST L6, C5 /* 10: CAST($t15):BIGINT NOT NULL */;
CALL 'ABS(L7, L6) /* 11: ABS(CAST($t15):BIGINT NOT NULL) */;
CAST L8, L7 /* 12: CAST(ABS(CAST($t15):BIGINT NOT NULL)):INTEGER NOT NULL ABS($t15) */;
CALL 'ABS(L9, C7) /* 13: ABS($t21) Reinterpret($t22) */;
CAST L10, C5 /* 14: CAST($t15):DOUBLE NOT NULL */;
CALL 'LN(L11, L10) /* 15: LN($t15) */;
CALL 'LOG10(L12, L10) /* 16: LOG10($t15) */;
ISNULL L13, L3 /* 17: */;
JMPF @21, L13 /* 18: */;
RAISE C8 /* 19: */;
RETURN /* 20: */;
REF O0, L3 /* 21: */;
ISNULL L13, L4 /* 22: */;
JMPF @26, L13 /* 23: */;
RAISE C8 /* 24: */;
RETURN /* 25: */;
REF O1, L4 /* 26: */;
ISNULL L13, L5 /* 27: */;
JMPF @31, L13 /* 28: */;
RAISE C8 /* 29: */;
RETURN /* 30: */;
REF O2, L5 /* 31: */;
ISNULL L13, L8 /* 32: */;
JMPF @36, L13 /* 33: */;
RAISE C8 /* 34: */;
RETURN /* 35: */;
REF O3, L8 /* 36: */;
ISNULL L13, L9 /* 37: */;
JMPF @41, L13 /* 38: */;
RAISE C8 /* 39: */;
RETURN /* 40: */;
REF O4, L9 /* 41: */;
ISNULL L13, L11 /* 42: */;
JMPF @46, L13 /* 43: */;
RAISE C8 /* 44: */;
RETURN /* 45: */;
REF O5, L11 /* 46: */;
ISNULL L13, L12 /* 47: */;
JMPF @51, L13 /* 48: */;
RAISE C8 /* 49: */;
RETURN /* 50: */;
REF O6, L12 /* 51: */;
RETURN /* 52: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testFunctionInFunction">
        <Resource name="expectedProgram">
            <![CDATA[
O d;
I s4;
L bo, d, d, s8, s8, s4, s4, d, d, bo;
S bo;
C s4, bo, bo, s8, d, s4, s4, vc,5;
V 10, 1, 0, 30, 1E1, 2, 1, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t19) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
CAST L1, C3 /* 5: CAST($t14):DOUBLE NOT NULL */;
DIV L2, L1, C4 /* 6: /INT($t15, $t16) */;
CAST L3, C5 /* 7: CAST($t10):BIGINT NOT NULL */;
CALL 'ABS(L4, L3) /* 8: ABS(CAST($t10):BIGINT NOT NULL) */;
CAST L5, L4 /* 9: CAST(ABS(CAST($t10):BIGINT NOT NULL)):INTEGER NOT NULL ABS($t10) */;
ADD L6, L5, C6 /* 10: +($t11, $t12) */;
CAST L7, L6 /* 11: CAST($t13):DOUBLE NOT NULL */;
CALL 'POW(L8, L2, L7) /* 12: POWER($t17, $t13) */;
ISNULL L9, L8 /* 13: */;
JMPF @17, L9 /* 14: */;
RAISE C7 /* 15: */;
RETURN /* 16: */;
REF O0, L8 /* 17: */;
RETURN /* 18: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testCaseExpressions">
        <Resource name="expectedProgram">
            <![CDATA[
O c,11, s4;
I s4;
L bo, c,11, s4, bo, bo, c,11, c,11, s4, s4, bo, s4, bo;
S bo;
C s4, bo, bo, s4, s4, c,4, c,11, c,0, vc,5;
V 10, 1, 0, 1, 2, 0x7761656C /* wael */, 0x7761656C7320636C6F6E65 /* waels clone */,  /* <NULL> */, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t21) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
ADD L2, C3, C3 /* 5: +($t9, $t9) */;
EQ L3, L2, C3 /* 6: =($t10, $t9) */;
EQ L4, L2, C4 /* 7: =($t10, $t13) */;
JMPF @13, L3 /* 8: */;
JMPN @13, L3 /* 9: */;
CALL 'castA(L5, C5) /* 10: CAST($t12):CHAR(11) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" */;
MOVE L1, L5 /* 11: */;
JMP @19 /* 12: */;
JMPF @18, L4 /* 13: */;
JMPN @18, L4 /* 14: */;
CALL 'castA(L6, C6) /* 15: CAST($t15):CHAR(11) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" */;
MOVE L1, L6 /* 16: */;
JMP @19 /* 17: */;
MOVE L1, C7 /* 18: CASE($t11, $t12, $t14, $t15, $t17) */;
ADD L8, L2, C4 /* 19: +($t10, $t13) */;
EQ L9, C3, C3 /* 20: =($t9, $t9) */;
JMPF @25, L9 /* 21: */;
JMPN @25, L9 /* 22: */;
MOVE L7, L8 /* 23: */;
JMP @27 /* 24: */;
ADD L10, C4, C0 /* 25: +($t13, $t21) */;
MOVE L7, L10 /* 26: CASE($t19, $t20, $t22) */;
REF O0, L1 /* 27: */;
ISNULL L11, L7 /* 28: */;
JMPF @32, L11 /* 29: */;
RAISE C8 /* 30: */;
RETURN /* 31: */;
REF O1, L7 /* 32: */;
RETURN /* 33: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testNullifExpression">
        <Resource name="expectedProgram">
            <![CDATA[
O s4;
I s4;
L bo, s4, bo, s4;
S bo;
C s4, bo, bo, s4, s4, s4;
V 10, 1, 0, 1, 2,  /* <NULL> */;
T;
GT L0, I0, C0 /* 0: >($t0, $t15) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
EQ L2, C3, C4 /* 5: =($t9, $t10) */;
JMPF @10, L2 /* 6: */;
JMPN @10, L2 /* 7: */;
MOVE L1, C5 /* 8: */;
JMP @12 /* 9: */;
CAST L3, C3 /* 10: CAST($t9):INTEGER */;
MOVE L1, L3 /* 11: CASE($t11, $t13, $t9) */;
REF O0, L1 /* 12: */;
RETURN /* 13: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testCoalesce">
        <Resource name="expectedProgram">
            <![CDATA[
O s4;
I s4;
L bo, s4, bo, bo, bo;
S bo;
C s4, bo, bo, s4, s4, s4, vc,5;
V 10, 1, 0, 1, 2, 3, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t15) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
ISNOTNULL L2, C3 /* 5: IS NOT NULL($t9) */;
JMPF @10, L2 /* 6: */;
JMPN @10, L2 /* 7: */;
MOVE L1, C3 /* 8: */;
JMP @16 /* 9: */;
ISNOTNULL L3, C4 /* 10: IS NOT NULL($t11) */;
JMPF @15, L3 /* 11: */;
JMPN @15, L3 /* 12: */;
MOVE L1, C4 /* 13: */;
JMP @16 /* 14: */;
MOVE L1, C5 /* 15: CASE($t10, $t9, $t12, $t11, $t13) */;
ISNULL L4, L1 /* 16: */;
JMPF @20, L4 /* 17: */;
RAISE C6 /* 18: */;
RETURN /* 19: */;
REF O0, L1 /* 20: */;
RETURN /* 21: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testCase1">
        <Resource name="expectedProgram">
            <![CDATA[
O s4;
I s4;
L bo, s4, bo;
S bo;
C s4, bo, bo, s4, vc,5;
V 10, 1, 0, 0, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t13) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
MOVE L1, C3 /* 5: CASE($t9, $t10, $t11) */;
ISNULL L2, L1 /* 6: */;
JMPF @10, L2 /* 7: */;
RAISE C4 /* 8: */;
RETURN /* 9: */;
REF O0, L1 /* 10: */;
RETURN /* 11: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testCase2">
        <Resource name="expectedProgram">
            <![CDATA[
O s4;
I s4, bo;
L bo, s4, bo;
S bo;
C s4, bo, bo, s4, s4, vc,5;
V 10, 1, 0, 2, 0, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t14) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
JMPF @9, I1 /* 5: */;
JMPN @9, I1 /* 6: */;
MOVE L1, C3 /* 7: */;
JMP @11 /* 8: */;
MOVE L1, C4 /* 9: */;
JMP @11 /* 10: CASE($t8, $t9, $t10, $t11, $t12) */;
ISNULL L2, L1 /* 11: */;
JMPF @15, L2 /* 12: */;
RAISE C5 /* 13: */;
RETURN /* 14: */;
REF O0, L1 /* 15: */;
RETURN /* 16: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testCase3">
        <Resource name="expectedProgram">
            <![CDATA[
O s4;
I s4;
L bo, s4, bo, s4;
S bo;
C s4, bo, bo, s4, s4, s4;
V 10, 1, 0, 1,  /* <NULL> */, 0;
T;
GT L0, I0, C0 /* 0: >($t0, $t15) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
EQ L2, C3, C3 /* 5: =($t9, $t9) */;
JMPF @10, L2 /* 6: */;
JMPN @10, L2 /* 7: */;
MOVE L1, C4 /* 8: */;
JMP @12 /* 9: */;
CAST L3, C5 /* 10: CAST($t13):INTEGER */;
MOVE L1, L3 /* 11: CASE($t10, $t12, $t13) */;
REF O0, L1 /* 12: */;
RETURN /* 13: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testCharEq">
        <Resource name="expectedProgram">
            <![CDATA[
O bo;
I s4;
L bo, bo, s4, bo;
S bo;
C s4, bo, bo, c,1, c,1, s4, vc,5;
V 10, 1, 0, 0x61 /* a */, 0x62 /* b */, 0, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t12) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
CALL 'strCmpA(L2, C3, C4) /* 5: */;
EQ L1, L2, C5 /* 6: =($t9, $t10) */;
ISNULL L3, L1 /* 7: */;
JMPF @11, L3 /* 8: */;
RAISE C6 /* 9: */;
RETURN /* 10: */;
REF O0, L1 /* 11: */;
RETURN /* 12: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testCharNe">
        <Resource name="expectedProgram">
            <![CDATA[
O bo;
I s4;
L bo, bo, s4, bo;
S bo;
C s4, bo, bo, c,1, c,1, s4, vc,5;
V 10, 1, 0, 0x61 /* a */, 0x62 /* b */, 0, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t12) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
CALL 'strCmpA(L2, C3, C4) /* 5: */;
NE L1, L2, C5 /* 6: <>($t9, $t10) */;
ISNULL L3, L1 /* 7: */;
JMPF @11, L3 /* 8: */;
RAISE C6 /* 9: */;
RETURN /* 10: */;
REF O0, L1 /* 11: */;
RETURN /* 12: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testCharGt">
        <Resource name="expectedProgram">
            <![CDATA[
O bo;
I s4;
L bo, bo, s4, bo;
S bo;
C s4, bo, bo, c,1, c,1, s4, vc,5;
V 10, 1, 0, 0x61 /* a */, 0x62 /* b */, 0, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t12) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
CALL 'strCmpA(L2, C3, C4) /* 5: */;
GT L1, L2, C5 /* 6: >($t9, $t10) */;
ISNULL L3, L1 /* 7: */;
JMPF @11, L3 /* 8: */;
RAISE C6 /* 9: */;
RETURN /* 10: */;
REF O0, L1 /* 11: */;
RETURN /* 12: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testCharLt">
        <Resource name="expectedProgram">
            <![CDATA[
O bo;
I s4;
L bo, bo, s4, bo;
S bo;
C s4, bo, bo, c,1, c,1, s4, vc,5;
V 10, 1, 0, 0x61 /* a */, 0x62 /* b */, 0, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t12) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
CALL 'strCmpA(L2, C3, C4) /* 5: */;
LT L1, L2, C5 /* 6: <($t9, $t10) */;
ISNULL L3, L1 /* 7: */;
JMPF @11, L3 /* 8: */;
RAISE C6 /* 9: */;
RETURN /* 10: */;
REF O0, L1 /* 11: */;
RETURN /* 12: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testCharGe">
        <Resource name="expectedProgram">
            <![CDATA[
O bo;
I s4;
L bo, bo, s4, bo;
S bo;
C s4, bo, bo, c,1, c,1, s4, vc,5;
V 10, 1, 0, 0x61 /* a */, 0x62 /* b */, 0, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t12) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
CALL 'strCmpA(L2, C3, C4) /* 5: */;
GE L1, L2, C5 /* 6: >=($t9, $t10) */;
ISNULL L3, L1 /* 7: */;
JMPF @11, L3 /* 8: */;
RAISE C6 /* 9: */;
RETURN /* 10: */;
REF O0, L1 /* 11: */;
RETURN /* 12: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testCharLe">
        <Resource name="expectedProgram">
            <![CDATA[
O bo;
I s4;
L bo, bo, s4, bo;
S bo;
C s4, bo, bo, c,1, c,1, s4, vc,5;
V 10, 1, 0, 0x61 /* a */, 0x62 /* b */, 0, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t12) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
CALL 'strCmpA(L2, C3, C4) /* 5: */;
LE L1, L2, C5 /* 6: <=($t9, $t10) */;
ISNULL L3, L1 /* 7: */;
JMPF @11, L3 /* 8: */;
RAISE C6 /* 9: */;
RETURN /* 10: */;
REF O0, L1 /* 11: */;
RETURN /* 12: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testBinaryGt">
        <Resource name="expectedProgram">
            <![CDATA[
O bo;
I s4;
L bo, bo, s4, bo;
S bo;
C s4, bo, bo, b,1, b,1, s4, vc,5;
V 10, 1, 0, 0xFF, 0x01, 0, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t12) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
CALL 'strCmpOct(L2, C3, C4) /* 5: */;
GT L1, L2, C5 /* 6: >($t9, $t10) */;
ISNULL L3, L1 /* 7: */;
JMPF @11, L3 /* 8: */;
RAISE C6 /* 9: */;
RETURN /* 10: */;
REF O0, L1 /* 11: */;
RETURN /* 12: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testStringFunctions">
        <Resource name="expectedProgram">
            <![CDATA[
O s4, c,1, c,1, s4, vc,1, vc,2, vc,1, vc,2, vc,1, c,3;
I s4;
L bo, s4, c,1, c,1, s4, vc,1, vc,2, vc,1, c,2, vc,2, vc,1, c,3, c,2, bo;
S bo;
C s4, bo, bo, c,1, s4, s4, c,1, vc,5;
V 10, 1, 0, 0x61 /* a */, 1, 1, 0x62 /* b */, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t21) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
CALL 'strLenCharA(L1, C3) /* 5: CHAR_LENGTH($t9) */;
CALL 'strToUpperA(L2, C3) /* 6: UPPER($t9) */;
CALL 'strToLowerA(L3, C3) /* 7: LOWER($t9) */;
CALL 'strPosA(L4, C3, C3) /* 8: POSITION($t9, $t9) */;
CALL 'strTrimA(L5, C3, C3, C4, C4) /* 9: TRIM($t14, $t9, $t9) */;
CALL 'strOverlayA4(L6, C3, C3, C5) /* 10: OVERLAY($t9, $t9, $t16) */;
CALL 'strSubStringA3(L7, C3, C5) /* 11: SUBSTRING($t9, $t16) */;
CALL 'castA(L8, C3) /* 12: CAST($t9):CHAR(2) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL */;
CALL 'strSubStringA3(L9, L8, C5) /* 13: SUBSTRING($t19, $t16) */;
CALL 'strSubStringA4(L10, C3, C5, C0) /* 14: SUBSTRING($t9, $t16, $t21) */;
CALL 'strCatA3(L12, C3, C3) /* 15: ||($t9, $t9) */;
CALL 'strCatA3(L11, L12, C6) /* 16: ||($t23, $t24) */;
ISNULL L13, L1 /* 17: */;
JMPF @21, L13 /* 18: */;
RAISE C7 /* 19: */;
RETURN /* 20: */;
REF O0, L1 /* 21: */;
ISNULL L13, L2 /* 22: */;
JMPF @26, L13 /* 23: */;
RAISE C7 /* 24: */;
RETURN /* 25: */;
REF O1, L2 /* 26: */;
ISNULL L13, L3 /* 27: */;
JMPF @31, L13 /* 28: */;
RAISE C7 /* 29: */;
RETURN /* 30: */;
REF O2, L3 /* 31: */;
ISNULL L13, L4 /* 32: */;
JMPF @36, L13 /* 33: */;
RAISE C7 /* 34: */;
RETURN /* 35: */;
REF O3, L4 /* 36: */;
ISNULL L13, L5 /* 37: */;
JMPF @41, L13 /* 38: */;
RAISE C7 /* 39: */;
RETURN /* 40: */;
REF O4, L5 /* 41: */;
ISNULL L13, L6 /* 42: */;
JMPF @46, L13 /* 43: */;
RAISE C7 /* 44: */;
RETURN /* 45: */;
REF O5, L6 /* 46: */;
ISNULL L13, L7 /* 47: */;
JMPF @51, L13 /* 48: */;
RAISE C7 /* 49: */;
RETURN /* 50: */;
REF O6, L7 /* 51: */;
ISNULL L13, L9 /* 52: */;
JMPF @56, L13 /* 53: */;
RAISE C7 /* 54: */;
RETURN /* 55: */;
REF O7, L9 /* 56: */;
ISNULL L13, L10 /* 57: */;
JMPF @61, L13 /* 58: */;
RAISE C7 /* 59: */;
RETURN /* 60: */;
REF O8, L10 /* 61: */;
ISNULL L13, L11 /* 62: */;
JMPF @66, L13 /* 63: */;
RAISE C7 /* 64: */;
RETURN /* 65: */;
REF O9, L11 /* 66: */;
RETURN /* 67: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testPosition">
        <Resource name="expectedProgram">
            <![CDATA[
O s4, s4, s4;
I s4;
L bo, c,1, s4, c,2, s4, c,3, s4, bo;
S bo;
C s4, bo, bo, c,1, c,2, c,3, c,5, vc,5;
V 10, 1, 0, 0x61 /* a */, 0x6261 /* ba */, 0x616263 /* abc */, 0x6262616263 /* bbabc */, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t19) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
CALL 'castA(L1, C3) /* 5: CAST($t9):CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL */;
CALL 'strPosA(L2, C3, L1) /* 6: POSITION($t9, $t10) */;
CALL 'castA(L3, C4) /* 7: CAST($t12):CHAR(2) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL */;
CALL 'strPosA(L4, C3, L3) /* 8: POSITION($t9, $t13) */;
CALL 'castA(L5, C5) /* 9: CAST($t15):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL */;
CALL 'strPosA(L6, L5, C6) /* 10: POSITION($t16, $t17) */;
ISNULL L7, L2 /* 11: */;
JMPF @15, L7 /* 12: */;
RAISE C7 /* 13: */;
RETURN /* 14: */;
REF O0, L2 /* 15: */;
ISNULL L7, L4 /* 16: */;
JMPF @20, L7 /* 17: */;
RAISE C7 /* 18: */;
RETURN /* 19: */;
REF O1, L4 /* 20: */;
ISNULL L7, L6 /* 21: */;
JMPF @25, L7 /* 22: */;
RAISE C7 /* 23: */;
RETURN /* 24: */;
REF O2, L6 /* 25: */;
RETURN /* 26: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testOverlay">
        <Resource name="expectedProgram">
            <![CDATA[
O vc,5, vc,6;
I s4;
L bo, c,3, vc,5, c,3, vc,6, bo;
S bo;
C s4, bo, bo, c,2, c,3, s4, vc,5;
V 10, 1, 0, 0x3132 /* 12 */, 0x616263 /* abc */, 1, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t16) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
CALL 'castA(L1, C4) /* 5: CAST($t10):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL */;
CALL 'strOverlayA4(L2, C3, L1, C5) /* 6: OVERLAY($t9, $t11, $t12) */;
CALL 'castA(L3, C3) /* 7: CAST($t9):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL */;
CALL 'strOverlayA4(L4, L3, C4, C5) /* 8: OVERLAY($t14, $t10, $t12) */;
ISNULL L5, L2 /* 9: */;
JMPF @13, L5 /* 10: */;
RAISE C6 /* 11: */;
RETURN /* 12: */;
REF O0, L2 /* 13: */;
ISNULL L5, L4 /* 14: */;
JMPF @18, L5 /* 15: */;
RAISE C6 /* 16: */;
RETURN /* 17: */;
REF O1, L4 /* 18: */;
RETURN /* 19: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testLikeAndSimilar">
        <Resource name="expectedProgram">
            <![CDATA[
O bo, bo, bo, bo;
I s4;
L bo, bo, bo, bo, bo, bo;
S bo;
C s4, bo, bo, c,1, c,1, c,1, vc,5;
V 10, 1, 0, 0x61 /* a */, 0x62 /* b */, 0x63 /* c */, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t16) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
CALL 'strLikeA3(L1, C3, C4) /* 5: LIKE($t9, $t10) */;
CALL 'strLikeA4(L2, C3, C4, C5) /* 6: LIKE($t9, $t10, $t12) */;
CALL 'strSimilarA3(L3, C3, C3) /* 7: SIMILAR TO($t9, $t9) */;
CALL 'strSimilarA4(L4, C3, C3, C5) /* 8: SIMILAR TO($t9, $t9, $t12) */;
ISNULL L5, L1 /* 9: */;
JMPF @13, L5 /* 10: */;
RAISE C6 /* 11: */;
RETURN /* 12: */;
REF O0, L1 /* 13: */;
ISNULL L5, L2 /* 14: */;
JMPF @18, L5 /* 15: */;
RAISE C6 /* 16: */;
RETURN /* 17: */;
REF O1, L2 /* 18: */;
ISNULL L5, L3 /* 19: */;
JMPF @23, L5 /* 20: */;
RAISE C6 /* 21: */;
RETURN /* 22: */;
REF O2, L3 /* 23: */;
ISNULL L5, L4 /* 24: */;
JMPF @28, L5 /* 25: */;
RAISE C6 /* 26: */;
RETURN /* 27: */;
REF O3, L4 /* 28: */;
RETURN /* 29: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testBetween1">
        <Resource name="expectedProgram">
            <![CDATA[
O s4;
I s4;
L bo, bo, bo, bo;
S bo;
C s4, s4, bo, bo, vc,5;
V 40, 60, 1, 0, 0x3232303034 /* 22004 */;
T;
GE L0, I0, C0 /* 0: >=($t0, $t9) */;
LE L1, I0, C1 /* 1: <=($t0, $t11) */;
AND L2, L0, L1 /* 2: AND($t10, $t12) */;
JMPT @6, L2 /* 3: */;
MOVE S0, C2 /* 4: */;
RETURN /* 5: */;
MOVE S0, C3 /* 6: */;
ISNULL L3, I0 /* 7: */;
JMPF @11, L3 /* 8: */;
RAISE C4 /* 9: */;
RETURN /* 10: */;
REF O0, I0 /* 11: */;
RETURN /* 12: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testBetween2">
        <Resource name="expectedProgram">
            <![CDATA[
O s4;
I s4;
L bo, bo, bo, bo;
S bo;
C s4, s4, bo, bo, vc,5;
V 40, 60, 1, 0, 0x3232303034 /* 22004 */;
T;
GE L0, I0, C0 /* 0: >=($t0, $t9) */;
LE L1, I0, C1 /* 1: <=($t0, $t11) */;
AND L2, L0, L1 /* 2: AND($t10, $t12) */;
JMPT @6, L2 /* 3: */;
MOVE S0, C2 /* 4: */;
RETURN /* 5: */;
MOVE S0, C3 /* 6: */;
ISNULL L3, I0 /* 7: */;
JMPF @11, L3 /* 8: */;
RAISE C4 /* 9: */;
RETURN /* 10: */;
REF O0, I0 /* 11: */;
RETURN /* 12: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testBetween3">
        <Resource name="expectedProgram">
            <![CDATA[
O s4;
I s4;
L bo, bo, bo, bo, bo;
S bo;
C s4, s4, bo, bo, vc,5;
V 40, 60, 1, 0, 0x3232303034 /* 22004 */;
T;
GE L0, I0, C0 /* 0: >=($t0, $t9) */;
LE L1, I0, C1 /* 1: <=($t0, $t11) */;
AND L2, L0, L1 /* 2: AND($t10, $t12) */;
NOT L3, L2 /* 3: NOT($t13) */;
JMPT @7, L3 /* 4: */;
MOVE S0, C2 /* 5: */;
RETURN /* 6: */;
MOVE S0, C3 /* 7: */;
ISNULL L4, I0 /* 8: */;
JMPF @12, L4 /* 9: */;
RAISE C4 /* 10: */;
RETURN /* 11: */;
REF O0, I0 /* 12: */;
RETURN /* 13: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testBetween4">
        <Resource name="expectedProgram">
            <![CDATA[
O s4;
I s4;
L bo, bo, bo, bo, bo, bo, bo, bo;
S bo;
C s4, s4, bo, bo, vc,5;
V 40, 60, 1, 0, 0x3232303034 /* 22004 */;
T;
GE L0, I0, C0 /* 0: >=($t0, $t9) */;
LE L1, I0, C1 /* 1: <=($t0, $t11) */;
AND L2, L0, L1 /* 2: AND($t10, $t12) */;
GE L3, I0, C1 /* 3: >=($t0, $t11) */;
LE L4, I0, C0 /* 4: <=($t0, $t9) */;
AND L5, L3, L4 /* 5: AND($t14, $t15) */;
OR L6, L2, L5 /* 6: OR($t13, $t16) */;
JMPT @10, L6 /* 7: */;
MOVE S0, C2 /* 8: */;
RETURN /* 9: */;
MOVE S0, C3 /* 10: */;
ISNULL L7, I0 /* 11: */;
JMPF @15, L7 /* 12: */;
RAISE C4 /* 13: */;
RETURN /* 14: */;
REF O0, I0 /* 15: */;
RETURN /* 16: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testCastNull">
        <Resource name="expectedProgram">
            <![CDATA[
O vc,1, s4;
I s4;
L bo;
S bo;
C s4, bo, bo, vc,0, s4;
V 10, 1, 0,  /* <NULL> */,  /* <NULL> */;
T;
GT L0, I0, C0 /* 0: >($t0, $t12) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
REF O0, C3 /* 5: */;
REF O1, C4 /* 6: */;
RETURN /* 7: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testJdbcFunctionSyntax">
        <Resource name="expectedProgram">
            <![CDATA[
O d;
I s4;
L bo, d, d, d, bo;
S bo;
C s4, bo, bo, s8, d, vc,5;
V 10, 1, 0, 10, 1E1, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t15) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
CAST L1, C3 /* 5: CAST($t10):DOUBLE NOT NULL */;
DIV L2, L1, C4 /* 6: /INT($t11, $t12) */;
CALL 'LN(L3, L2) /* 7: LN($t13) */;
ISNULL L4, L3 /* 8: */;
JMPF @12, L4 /* 9: */;
RAISE C5 /* 10: */;
RETURN /* 11: */;
REF O0, L3 /* 12: */;
RETURN /* 13: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testMixingTypes">
        <Resource name="expectedProgram">
            <![CDATA[
O s8;
I s4;
L bo, s8, s8, s8, bo;
S bo;
C s4, bo, bo, s4, s8, vc,5;
V 10, 1, 0, 1, 10, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t16) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
CAST L1, C3 /* 5: CAST($t9):BIGINT NOT NULL */;
MUL L2, L1, C4 /* 6: *($t9, $t11) */;
ADD L3, L2, C4 /* 7: +($t12, $t13) Reinterpret($t14) */;
ISNULL L4, L3 /* 8: */;
JMPF @12, L4 /* 9: */;
RAISE C5 /* 10: */;
RETURN /* 11: */;
REF O0, L3 /* 12: */;
RETURN /* 13: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testCastCharTypesToNumbersAndBack">
        <Resource name="expectedProgram">
            <![CDATA[
O vc,3, c,3, vc,3, c,3, s8, s1, d;
I s4;
L bo, s8, vc,3, c,3, vc,3, c,3, s8, s1, d, bo;
S bo;
C s4, bo, bo, s4, s8, s4, s4, c,3, vc,5;
V 10, 1, 0, 123, 123, 3, 1, 0x313233 /* 123 */, 0x3232303034 /* 22004 */;
T;
GT L0, I0, C0 /* 0: >($t0, $t19) */;
JMPT @4, L0 /* 1: */;
MOVE S0, C1 /* 2: */;
RETURN /* 3: */;
MOVE S0, C2 /* 4: */;
CAST L1, C3 /* 5: CAST($t9):BIGINT NOT NULL */;
CALL 'castA(L2, L1) /* 6: CAST(CAST($t9):BIGINT NOT NULL):VARCHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL CAST($t9):VARCHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL */;
CALL 'castA(L3, L1) /* 7: CAST(CAST($t9):BIGINT NOT NULL):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL CAST($t9):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL */;
CALL 'castA(L4, C4, C5, C6) /* 8: CAST($t12):VARCHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL */;
CALL 'castA(L5, C4, C5, C6) /* 9: CAST($t12):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL */;
CALL 'castA(L6, C7) /* 10: CAST($t15):BIGINT NOT NULL */;
CAST L7, L6 /* 11: CAST(CAST($t15):BIGINT NOT NULL):TINYINT NOT NULL CAST($t15):TINYINT NOT NULL */;
CALL 'castA(L8, C7) /* 12: CAST($t15):DOUBLE NOT NULL */;
ISNULL L9, L2 /* 13: */;
JMPF @17, L9 /* 14: */;
RAISE C8 /* 15: */;
RETURN /* 16: */;
REF O0, L2 /* 17: */;
ISNULL L9, L3 /* 18: */;
JMPF @22, L9 /* 19: */;
RAISE C8 /* 20: */;
RETURN /* 21: */;
REF O1, L3 /* 22: */;
ISNULL L9, L4 /* 23: */;
JMPF @27, L9 /* 24: */;
RAISE C8 /* 25: */;
RETURN /* 26: */;
REF O2, L4 /* 27: */;
ISNULL L9, L5 /* 28: */;
JMPF @32, L9 /* 29: */;
RAISE C8 /* 30: */;
RETURN /* 31: */;
REF O3, L5 /* 32: */;
ISNULL L9, L6 /* 33: */;
JMPF @37, L9 /* 34: */;
RAISE C8 /* 35: */;
RETURN /* 36: */;
REF O4, L6 /* 37: */;
ISNULL L9, L7 /* 38: */;
JMPF @42, L9 /* 39: */;
RAISE C8 /* 40: */;
RETURN /* 41: */;
REF O5, L7 /* 42: */;
ISNULL L9, L8 /* 43: */;
JMPF @47, L9 /* 44: */;
RAISE C8 /* 45: */;
RETURN /* 46: */;
REF O6, L8 /* 47: */;
RETURN /* 48: */;]]>
        </Resource>
    </TestCase>
    <TestCase name="testWindowedMinMax">
        <Resource name="expectedInit">
            <![CDATA[
O vb,8;
I s4, vc,20, vc,10, s4, s8, s4, s4, s4, bo;
L s8;
T;
CAST L0, I0 /* 0: CAST($t0):BIGINT NOT NULL */;
CALL 'WinAggInit(O0, L0) /* 1: $HISTOGRAM($t9) */;
RETURN /* 2: */;]]>
        </Resource>
        <Resource name="expectedAdd">
            <![CDATA[
O vb,8;
I s4, vc,20, vc,10, s4, s8, s4, s4, s4, bo;
L s8;
T;
CAST L0, I0 /* 0: CAST($t0):BIGINT NOT NULL */;
CALL 'WinAggAdd(L0, O0) /* 1: $HISTOGRAM($t9) */;
RETURN /* 2: */;]]>
        </Resource>
        <Resource name="expectedDrop">
            <![CDATA[
O vb,8;
I s4, vc,20, vc,10, s4, s8, s4, s4, s4, bo;
L s8;
T;
CAST L0, I0 /* 0: CAST($t0):BIGINT NOT NULL */;
CALL 'WinAggDrop(L0, O0) /* 1: $HISTOGRAM($t9) */;
RETURN /* 2: */;]]>
        </Resource>
        <Resource name="expectedOutput">
            <![CDATA[
O s4, s4;
I s4, vc,20, vc,10, s4, s8, s4, s4, s4, bo, vb,8;
L s8, s4, s8, s4;
T;
CALL 'WinAggMin(L0, I9) /* 0: $HISTOGRAM_MIN($t9) */;
CAST L1, L0 /* 1: CAST($t10):INTEGER */;
CALL 'WinAggMax(L2, I9) /* 2: $HISTOGRAM_MAX($t9) */;
CAST L3, L2 /* 3: CAST($t12):INTEGER */;
REF O0, L1 /* 4: */;
REF O1, L3 /* 5: */;
RETURN /* 6: */;]]>
        </Resource>
        <Resource name="expectedDropOptimized">
            <![CDATA[
O vb,8;
I s4;
L s8;
T;
CAST L0, I0 /* 0: CAST($t0):BIGINT NOT NULL */;
CALL 'WinAggDrop(L0, O0) /* 1: $HISTOGRAM($t9) */;
RETURN /* 2: */;]]>
        </Resource>
        <Resource name="expectedDropMapping">
            <![CDATA[{0}]]>
        </Resource>
    </TestCase>
    <TestCase name="testWindowedFirstLastValue">
        <Resource name="expectedInit">
            <![CDATA[
O vb,8, vb,8;
I s4, vc,20, vc,10, s4, s8, s4, s4, s4, bo;
L s8, s4, s8;
C s4;
V 1;
T;
CAST L0, I0 /* 0: CAST($t0):BIGINT NOT NULL */;
CALL 'WinAggInit(O0, L0) /* 1: $HISTOGRAM($t9) */;
ADD L1, I0, C0 /* 2: +($t0, $t11) */;
CAST L2, L1 /* 3: CAST($t12):BIGINT NOT NULL */;
CALL 'WinAggInit(O1, L2) /* 4: $HISTOGRAM($t13) */;
RETURN /* 5: */;]]>
        </Resource>
        <Resource name="expectedAdd">
            <![CDATA[
O vb,8, vb,8;
I s4, vc,20, vc,10, s4, s8, s4, s4, s4, bo;
L s8, s4, s8;
C s4;
V 1;
T;
CAST L0, I0 /* 0: CAST($t0):BIGINT NOT NULL */;
CALL 'WinAggAdd(L0, O0) /* 1: $HISTOGRAM($t9) */;
ADD L1, I0, C0 /* 2: +($t0, $t11) */;
CAST L2, L1 /* 3: CAST($t12):BIGINT NOT NULL */;
CALL 'WinAggAdd(L2, O1) /* 4: $HISTOGRAM($t13) */;
RETURN /* 5: */;]]>
        </Resource>
        <Resource name="expectedDrop">
            <![CDATA[
O vb,8, vb,8;
I s4, vc,20, vc,10, s4, s8, s4, s4, s4, bo;
L s8, s4, s8;
C s4;
V 1;
T;
CAST L0, I0 /* 0: CAST($t0):BIGINT NOT NULL */;
CALL 'WinAggDrop(L0, O0) /* 1: $HISTOGRAM($t9) */;
ADD L1, I0, C0 /* 2: +($t0, $t11) */;
CAST L2, L1 /* 3: CAST($t12):BIGINT NOT NULL */;
CALL 'WinAggDrop(L2, O1) /* 4: $HISTOGRAM($t13) */;
RETURN /* 5: */;]]>
        </Resource>
        <Resource name="expectedOutput">
            <![CDATA[
O s4, s4, s4, s4;
I s4, vc,20, vc,10, s4, s8, s4, s4, s4, bo, vb,8, vb,8;
L s8, s4, s8, s4, s8, s4, s4, s8, s4, s4, bo;
C s4, s4, vc,5;
V 2, 3, 0x3232303034 /* 22004 */;
T;
CALL 'WinAggFirstValue(L0, I9) /* 0: $HISTOGRAM_FIRST_VALUE($t9) */;
CAST L1, L0 /* 1: CAST($t11):INTEGER NOT NULL */;
CALL 'WinAggLastValue(L2, I9) /* 2: $HISTOGRAM_LAST_VALUE($t9) */;
CAST L3, L2 /* 3: CAST($t13):INTEGER NOT NULL */;
CALL 'WinAggFirstValue(L4, I10) /* 4: $HISTOGRAM_FIRST_VALUE($t10) */;
CAST L5, L4 /* 5: CAST($t15):INTEGER NOT NULL */;
ADD L6, L5, C0 /* 6: +($t16, $t17) */;
CALL 'WinAggMin(L7, I10) /* 7: $HISTOGRAM_MIN($t10) */;
CAST L8, L7 /* 8: CAST($t20):INTEGER */;
ADD L9, C1, L8 /* 9: +($t19, $t21) */;
ISNULL L10, L1 /* 10: */;
JMPF @14, L10 /* 11: */;
RAISE C2 /* 12: */;
RETURN /* 13: */;
REF O0, L1 /* 14: */;
ISNULL L10, L3 /* 15: */;
JMPF @19, L10 /* 16: */;
RAISE C2 /* 17: */;
RETURN /* 18: */;
REF O1, L3 /* 19: */;
ISNULL L10, L6 /* 20: */;
JMPF @24, L10 /* 21: */;
RAISE C2 /* 22: */;
RETURN /* 23: */;
REF O2, L6 /* 24: */;
REF O3, L9 /* 25: */;
RETURN /* 26: */;]]>
        </Resource>
        <Resource name="expectedDropOptimized">
            <![CDATA[
O vb,8, vb,8;
I s4;
L s8, s4, s8;
C s4;
V 1;
T;
CAST L0, I0 /* 0: CAST($t0):BIGINT NOT NULL */;
CALL 'WinAggDrop(L0, O0) /* 1: $HISTOGRAM($t9) */;
ADD L1, I0, C0 /* 2: +($t0, $t11) */;
CAST L2, L1 /* 3: CAST($t12):BIGINT NOT NULL */;
CALL 'WinAggDrop(L2, O1) /* 4: $HISTOGRAM($t13) */;
RETURN /* 5: */;]]>
        </Resource>
        <Resource name="expectedDropMapping">
            <![CDATA[{0}]]>
        </Resource>
    </TestCase>
    <TestCase name="testWindowDisallowPartial">
        <Resource name="expectedInit">
            <![CDATA[
O s8, s8, s4;
I s4, vc,20, vc,10, s4, s8, s4, s4, s4, bo;
C s8, s4;
V 0, 0;
T;
MOVE O0, C0 /* 0: COUNT() */;
MOVE O1, C0 /* 1: COUNT($t0) */;
MOVE O2, C1 /* 2: $SUM0($t0) */;
RETURN /* 3: */;]]>
        </Resource>
        <Resource name="expectedAdd">
            <![CDATA[
O s8, s8, s4;
I s4, vc,20, vc,10, s4, s8, s4, s4, s4, bo;
C s8;
V 1;
T;
ADD O0, O0, C0 /* 0: COUNT() */;
ADD O1, O1, C0 /* 1: COUNT($t0) */;
ADD O2, O2, I0 /* 2: $SUM0($t0) */;
RETURN /* 3: */;]]>
        </Resource>
        <Resource name="expectedDrop">
            <![CDATA[
O s8, s8, s4;
I s4, vc,20, vc,10, s4, s8, s4, s4, s4, bo;
C s8;
V 1;
T;
SUB O0, O0, C0 /* 0: COUNT() */;
SUB O1, O1, C0 /* 1: COUNT($t0) */;
SUB O2, O2, I0 /* 2: $SUM0($t0) */;
RETURN /* 3: */;]]>
        </Resource>
        <Resource name="expectedOutput">
            <![CDATA[
O s4, s4, s4;
I s4, vc,20, vc,10, s4, s8, s4, s4, s4, bo, s8, s8, s4;
L s4, bo, s4, bo, s8, s8, s8, s8, s4, s8, s8, s4;
C s8, s8, s4, s8;
V 2, 0,  /* <NULL> */,  /* <NULL> */;
T;
GE L1, I9, C0 /* 0: >=($t9, $t12) */;
GT L3, I10, C1 /* 1: >($t10, $t14) */;
JMPF @6, L3 /* 2: */;
JMPN @6, L3 /* 3: */;
MOVE L2, I11 /* 4: */;
JMP @7 /* 5: */;
MOVE L2, C2 /* 6: CASE($t15, $t11, $t17) */;
JMPF @11, L1 /* 7: */;
JMPN @11, L1 /* 8: */;
MOVE L0, L2 /* 9: */;
JMP @12 /* 10: */;
MOVE L0, C2 /* 11: CASE($t13, $t18, $t16) */;
JMPF @17, L1 /* 12: */;
JMPN @17, L1 /* 13: */;
CAST L5, I10 /* 14: CAST($t10):BIGINT */;
MOVE L4, L5 /* 15: */;
JMP @18 /* 16: */;
MOVE L4, C3 /* 17: CASE($t13, $t10, $t16) */;
CAST L6, L0 /* 18: CAST($t19):BIGINT */;
DIV L7, L6, L4 /* 19: /($t19, $t20) */;
CAST L8, L7 /* 20: CAST($t21):INTEGER */;
CAST L9, L2 /* 21: CAST($t18):BIGINT NOT NULL */;
DIV L10, L9, I10 /* 22: /($t18, $t10) */;
CAST L11, L10 /* 23: CAST($t23):INTEGER */;
REF O0, L0 /* 24: */;
REF O1, L8 /* 25: */;
REF O2, L11 /* 26: */;
RETURN /* 27: */;]]>
        </Resource>
        <Resource name="expectedDropOptimized">
            <![CDATA[
O s8, s8, s4;
I s4;
C s8;
V 1;
T;
SUB O0, O0, C0 /* 0: COUNT() */;
SUB O1, O1, C0 /* 1: COUNT($t0) */;
SUB O2, O2, I0 /* 2: $SUM0($t0) */;
RETURN /* 3: */;]]>
        </Resource>
        <Resource name="expectedDropMapping">
            <![CDATA[{0}]]>
        </Resource>
    </TestCase>
    <TestCase name="testCaseStatement">
        <Resource name="expectedProgram">
            <![CDATA[
O s4, s4, s4;
I s4, s4;
L s4, s4, bo, bo, s4, s4, bo;
C s4, s4, s4, s4, s4, vc,5;
V 3, 1000, 1, 2,  /* <NULL> */, 0x3232303034 /* 22004 */;
T;
ADD L1, I1, C0 /* 0: +($t7, $t11) */;
LT L2, L1, C1 /* 1: <($t12, $t13) */;
GT L3, I0, C2 /* 2: >($t0, $t9) */;
JMPF @8, L3 /* 3: */;
JMPN @8, L3 /* 4: */;
CAST L4, C2 /* 5: CAST($t9):INTEGER */;
MOVE L0, L4 /* 6: */;
JMP @14 /* 7: */;
JMPF @13, L2 /* 8: */;
JMPN @13, L2 /* 9: */;
CAST L5, C3 /* 10: CAST($t15):INTEGER */;
MOVE L0, L5 /* 11: */;
JMP @14 /* 12: */;
MOVE L0, C4 /* 13: CASE($t10, $t9, $t14, $t15, $t17) */;
ISNULL L6, I0 /* 14: */;
JMPF @18, L6 /* 15: */;
RAISE C5 /* 16: */;
RETURN /* 17: */;
REF O0, I0 /* 18: */;
REF O1, L0 /* 19: */;
ISNULL L6, L1 /* 20: */;
JMPF @24, L6 /* 21: */;
RAISE C5 /* 22: */;
RETURN /* 23: */;
REF O2, L1 /* 24: */;
RETURN /* 25: */;]]>
        </Resource>
    </TestCase>
</Root>
