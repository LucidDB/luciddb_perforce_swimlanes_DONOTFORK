> -- $Id$
> -- Test ROW constructor
> 
> -- NOTE:  sales.depts is used because optimizer fails
> -- when onerow is replaced with values().  
> -- Should change once optimizer is fixed.
> 
> -- NOTE:  field names of ROW constructors are implementation-defined.
> -- These tests rely on Farrago implementation specifics.  Once
> -- supported, should use ROW CAST in most cases to assign names.
> 
> -- test row single field access
> select t.r."EXPR$0"
> from (select row(1,2) r from sales.depts) t;
+---------+
| EXPR$0  |
+---------+
| 1       |
| 1       |
| 1       |
+---------+
> 
> -- test row multiple field access
> select t.r."EXPR$1", t.r."EXPR$0"
> from (select row(1,2) r from sales.depts) t;
+---------+---------+
| EXPR$1  | EXPR$0  |
+---------+---------+
| 2       | 1       |
| 2       | 1       |
| 2       | 1       |
+---------+---------+
> 
> -- test without ROW noiseword
> select t.r."EXPR$1", t.r."EXPR$0"
> from (select (1,2) r from sales.depts) t;
+---------+---------+
| EXPR$1  | EXPR$0  |
+---------+---------+
| 2       | 1       |
| 2       | 1       |
| 2       | 1       |
+---------+---------+
> 
> -- something deeper
> select t.r."EXPR$1"."EXPR$2"
> from (select ((1,2),(3,4,5)) r from sales.depts) t;
+---------+
| EXPR$2  |
+---------+
| 5       |
| 5       |
| 5       |
+---------+
> 
> -- test whether optimizer expands expressions redundantly
> !set outputformat csv
> explain plan for
> select t.r."EXPR$1", t.r."EXPR$0"
> from (select row(1,2) r from sales.depts) t;
'column0'
'IterCalcRel(expr#0=[{inputs}], expr#1=[2], expr#2=[1], EXPR$1=[$t1], EXPR$0=[$t2])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> !quit
