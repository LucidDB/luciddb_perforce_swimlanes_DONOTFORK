0: jdbc:farrago:> -- $Id$
0: jdbc:farrago:> -- Test queries with UDF invocations
0: jdbc:farrago:> 
0: jdbc:farrago:> create schema udftest;
0: jdbc:farrago:> 
0: jdbc:farrago:> set schema 'udftest';
0: jdbc:farrago:> 
0: jdbc:farrago:> set path 'udftest';
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test basic SQL-defined function
0: jdbc:farrago:> create function celsius_to_fahrenheit(c double)
. . . . . . . . > returns double
. . . . . . . . > contains sql
. . . . . . . . > return c*1.8 + 32;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test usage of rewritten builtin
0: jdbc:farrago:> create function coalesce2(x varchar(128),y varchar(128))
. . . . . . . . > returns varchar(128)
. . . . . . . . > contains sql
. . . . . . . . > return coalesce(x,y);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  implicit cast not allowed
0: jdbc:farrago:> create function bad_atoi(x varchar(128))
. . . . . . . . > returns integer
. . . . . . . . > contains sql
. . . . . . . . > return x;
Error: Result expression type VARCHAR(128) from routine "UDFTEST"."BAD_ATOI" does not match declared return type INTEGER (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test that explicit cast does occur
0: jdbc:farrago:> create function good_atoi(x varchar(128))
. . . . . . . . > returns integer
. . . . . . . . > contains sql
. . . . . . . . > return cast(x as integer);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test something mildly complicated
0: jdbc:farrago:> create function stirfry(x varchar(128))
. . . . . . . . > returns varchar(128)
. . . . . . . . > contains sql
. . . . . . . . > return case when x like 'A%' then upper(x)||'gator' else lower(x) end;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test CALLED ON NULL INPUT
0: jdbc:farrago:> create function replace_null(x varchar(128))
. . . . . . . . > returns varchar(128)
. . . . . . . . > contains sql
. . . . . . . . > called on null input
. . . . . . . . > return coalesce(x,'null and void');
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test RETURNS NULL ON NULL INPUT
0: jdbc:farrago:> create function dont_replace_null(x varchar(128))
. . . . . . . . > returns varchar(128)
. . . . . . . . > contains sql
. . . . . . . . > returns null on null input
. . . . . . . . > return coalesce(x,'null and void');
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test external Java function
0: jdbc:farrago:> create function noargs()
. . . . . . . . > returns varchar(128)
. . . . . . . . > language java
. . . . . . . . > no sql
. . . . . . . . > external name 'class net.sf.farrago.test.FarragoTestUDR.noargs';
0: jdbc:farrago:> 
0: jdbc:farrago:> create function substring24(s varchar(128))
. . . . . . . . > returns varchar(2)
. . . . . . . . > language java
. . . . . . . . > no sql
. . . . . . . . > external name 'class net.sf.farrago.test.FarragoTestUDR.substring24';
0: jdbc:farrago:> 
0: jdbc:farrago:> create function prim_int_to_hex_string(i int)
. . . . . . . . > returns varchar(128)
. . . . . . . . > language java
. . . . . . . . > no sql
. . . . . . . . > external name 'class net.sf.farrago.test.FarragoTestUDR.toHexString';
0: jdbc:farrago:> 
0: jdbc:farrago:> create function obj_int_to_hex_string(i int)
. . . . . . . . > returns varchar(128)
. . . . . . . . > language java
. . . . . . . . > no sql
. . . . . . . . > called on null input
. . . . . . . . > external name 
. . . . . . . . > 'class net.sf.farrago.test.FarragoTestUDR.toHexString(java.lang.Integer)';
0: jdbc:farrago:> 
0: jdbc:farrago:> create function null_preserving_int_to_hex_string(i int)
. . . . . . . . > returns varchar(128)
. . . . . . . . > language java
. . . . . . . . > no sql
. . . . . . . . > returns null on null input
. . . . . . . . > external name 
. . . . . . . . > 'class net.sf.farrago.test.FarragoTestUDR.toHexString(java.lang.Integer)';
0: jdbc:farrago:> 
0: jdbc:farrago:> create function decimal_abs(n decimal(6, 4)) 
. . . . . . . . > returns decimal(6, 4)
. . . . . . . . > language java
. . . . . . . . > no sql
. . . . . . . . > external name
. . . . . . . . > 'class net.sf.farrago.test.FarragoTestUDR.decimalAbs(java.math.BigDecimal)';
0: jdbc:farrago:> 
0: jdbc:farrago:> create function atoi(s varchar(128))
. . . . . . . . > returns int
. . . . . . . . > language java
. . . . . . . . > no sql
. . . . . . . . > deterministic
. . . . . . . . > external name 'class net.sf.farrago.test.FarragoTestUDR.atoi';
0: jdbc:farrago:> 
0: jdbc:farrago:> create function atoi_with_null_for_err(s varchar(128))
. . . . . . . . > returns int
. . . . . . . . > language java
. . . . . . . . > no sql
. . . . . . . . > external name 'class net.sf.farrago.test.FarragoTestUDR.atoiWithNullForErr';
0: jdbc:farrago:> 
0: jdbc:farrago:> create function get_java_property(name varchar(128))
. . . . . . . . > returns varchar(128)
. . . . . . . . > language java
. . . . . . . . > no sql
. . . . . . . . > external name 'class java.lang.System.getProperty';
0: jdbc:farrago:> 
0: jdbc:farrago:> create procedure set_java_property(in name varchar(128),in val varchar(128))
. . . . . . . . > language java
. . . . . . . . > no sql
. . . . . . . . > external name 'class net.sf.farrago.test.FarragoTestUDR.setSystemProperty';
0: jdbc:farrago:> 
0: jdbc:farrago:> create function access_sql_illegal()
. . . . . . . . > returns int
. . . . . . . . > language java
. . . . . . . . > no sql
. . . . . . . . > external name 'class net.sf.farrago.test.FarragoTestUDR.accessSql';
0: jdbc:farrago:> 
0: jdbc:farrago:> create function access_sql_legal()
. . . . . . . . > returns int
. . . . . . . . > language java
. . . . . . . . > contains sql
. . . . . . . . > external name 'class net.sf.farrago.test.FarragoTestUDR.accessSql';
0: jdbc:farrago:> 
0: jdbc:farrago:> create function throw_sql_exception()
. . . . . . . . > returns int
. . . . . . . . > language java
. . . . . . . . > no sql
. . . . . . . . > external name 'class net.sf.farrago.test.FarragoTestUDR.throwSQLException';
0: jdbc:farrago:> 
0: jdbc:farrago:> create function throw_npe()
. . . . . . . . > returns int
. . . . . . . . > language java
. . . . . . . . > no sql
. . . . . . . . > external name 'class net.sf.farrago.test.FarragoTestUDR.throwNPE';
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test UDF which depends on FarragoUdrRuntime
0: jdbc:farrago:> create function generate_random_number(seed bigint)
. . . . . . . . > returns bigint
. . . . . . . . > language java
. . . . . . . . > no sql
. . . . . . . . > not deterministic
. . . . . . . . > external name 'class net.sf.farrago.test.FarragoTestUDR.generateRandomNumber';
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test UDF which depends on FarragoUdrRuntime, with
0: jdbc:farrago:> -- ClosableAllocation support
0: jdbc:farrago:> create function gargle()
. . . . . . . . > returns integer
. . . . . . . . > language java
. . . . . . . . > no sql
. . . . . . . . > deterministic
. . . . . . . . > external name 'class net.sf.farrago.test.FarragoTestUDR.gargle';
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test a function that uses another function
0: jdbc:farrago:> create function celsius_to_rankine(c double)
. . . . . . . . > returns double
. . . . . . . . > contains sql
. . . . . . . . > return celsius_to_fahrenheit(c) + 459.67;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  we don't allow recursion
0: jdbc:farrago:> create function factorial(x integer)
. . . . . . . . > returns integer
. . . . . . . . > contains sql
. . . . . . . . > return case when x = 1 then x else x*factorial(x-1) end;
Error: Object definition contains recursive cycle (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- UDX
0: jdbc:farrago:> create function ramp(n int)
. . . . . . . . > returns table(i int)
. . . . . . . . > language java
. . . . . . . . > parameter style system defined java
. . . . . . . . > no sql
. . . . . . . . > external name 'class net.sf.farrago.test.FarragoTestUDR.ramp';
0: jdbc:farrago:> 
0: jdbc:farrago:> -- UDX with input
0: jdbc:farrago:> create function stringify(c cursor, delimiter varchar(128))
. . . . . . . . > returns table(v varchar(65535))
. . . . . . . . > language java
. . . . . . . . > parameter style system defined java
. . . . . . . . > no sql
. . . . . . . . > external name 'class net.sf.farrago.test.FarragoTestUDR.stringify';
0: jdbc:farrago:> 
0: jdbc:farrago:> -- UDX with input from which output row type is derived
0: jdbc:farrago:> create function digest(c cursor)
. . . . . . . . > returns table(c.*, row_digest int)
. . . . . . . . > language java
. . . . . . . . > parameter style system defined java
. . . . . . . . > no sql
. . . . . . . . > external name 'class net.sf.farrago.test.FarragoTestUDR.digest';
0: jdbc:farrago:> 
0: jdbc:farrago:> create view ramp_view as select * from table(ramp(3));
0: jdbc:farrago:> 
0: jdbc:farrago:> create view stringified_view as 
. . . . . . . . > select * 
. . . . . . . . > from table(stringify(
. . . . . . . . >     cursor(select * from sales.depts where deptno=20 order by 1),
. . . . . . . . >     '|'));
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  we don't allow mutual recursion either
0: jdbc:farrago:> create schema crypto
. . . . . . . . > create function alice(x double)
. . . . . . . . > returns double
. . . . . . . . > contains sql
. . . . . . . . > return bob(x*13)
. . . . . . . . > create function bob(x double)
. . . . . . . . > returns double
. . . . . . . . > contains sql
. . . . . . . . > return alice(x/17);
Error: Object definition contains recursive cycle (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test forward reference
0: jdbc:farrago:> create schema crypto2
. . . . . . . . > create function alice(x double)
. . . . . . . . > returns double
. . . . . . . . > contains sql
. . . . . . . . > return bob(x*13)
. . . . . . . . > create function bob(x double)
. . . . . . . . > returns double
. . . . . . . . > contains sql
. . . . . . . . > return x/17;
0: jdbc:farrago:> 
0: jdbc:farrago:> values celsius_to_fahrenheit(0);
+---------+
| EXPR$0  |
+---------+
| 32.0    |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values celsius_to_fahrenheit(100);
+---------+
| EXPR$0  |
+---------+
| 212.0   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail due to datatype mismatch
0: jdbc:farrago:> values celsius_to_fahrenheit('freezing');
Error: From line 1, column 8 to line 1, column 40: No match found for function signature CELSIUS_TO_FAHRENHEIT(<CHARACTER>) (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> values celsius_to_rankine(0);
+---------+
| EXPR$0  |
+---------+
| 491.67  |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values celsius_to_rankine(-273);
+---------------------+
|       EXPR$0        |
+---------------------+
| 0.2699999999999818  |
+---------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values coalesce2('hello','goodbye');
+---------+
| EXPR$0  |
+---------+
| hello   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values coalesce2('hello',cast(null as varchar(128)));
+---------+
| EXPR$0  |
+---------+
| hello   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values coalesce2(cast(null as varchar(128)),'goodbye');
+----------+
|  EXPR$0  |
+----------+
| goodbye  |
+----------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values good_atoi('451');
+---------+
| EXPR$0  |
+---------+
| 451     |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- this should fail
0: jdbc:farrago:> values good_atoi('nineoneone');
Error: Cannot assign 'nineoneone' to a NUMERIC value: NumberFormatException (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> values stirfry('Alley');
+-------------+
|   EXPR$0    |
+-------------+
| ALLEYgator  |
+-------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values stirfry('LaRa');
+---------+
| EXPR$0  |
+---------+
| lara    |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values replace_null('not null');
+-----------+
|  EXPR$0   |
+-----------+
| not null  |
+-----------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values replace_null(cast(null as varchar(128)));
+----------------+
|     EXPR$0     |
+----------------+
| null and void  |
+----------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values dont_replace_null('not null');
+-----------+
|  EXPR$0   |
+-----------+
| not null  |
+-----------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values dont_replace_null(cast(null as varchar(128)));
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values noargs();
+-----------------------------+
|           EXPR$0            |
+-----------------------------+
| get your kicks on route 66  |
+-----------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values substring24('superman');
+---------+
| EXPR$0  |
+---------+
| pe      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- this should fail with a Java exception
0: jdbc:farrago:> values substring24(cast(null as varchar(128)));
Error: java.lang.NullPointerException: null (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> values prim_int_to_hex_string(255);
+---------+
| EXPR$0  |
+---------+
| ff      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- this should fail with an SQL exception for NULL detected
0: jdbc:farrago:> values prim_int_to_hex_string(cast(null as integer));
Error: Target "I" cannot be assigned null value (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> values obj_int_to_hex_string(255);
+---------+
| EXPR$0  |
+---------+
| ff      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- this should return 'nada'
0: jdbc:farrago:> values obj_int_to_hex_string(cast(null as integer));
+---------+
| EXPR$0  |
+---------+
| nada    |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values null_preserving_int_to_hex_string(255);
+---------+
| EXPR$0  |
+---------+
| ff      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- this should return null
0: jdbc:farrago:> values null_preserving_int_to_hex_string(cast(null as integer));
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:>     values decimal_abs(-54.1234);
+----------+
|  EXPR$0  |
+----------+
| 54.1234  |
+----------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values atoi('451');
+---------+
| EXPR$0  |
+---------+
| 451     |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- this should fail with a Java exception
0: jdbc:farrago:> values atoi(cast(null as varchar(128)));
Error: java.lang.NumberFormatException: null (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- this should fail with a Java exception
0: jdbc:farrago:> values atoi('Posey');
Error: java.lang.NumberFormatException: For input string: "Posey" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> values atoi_with_null_for_err('451');
+---------+
| EXPR$0  |
+---------+
| 451     |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- this should return null
0: jdbc:farrago:> values atoi_with_null_for_err(cast(null as varchar(128)));
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- this should return null
0: jdbc:farrago:> values atoi_with_null_for_err('Violet');
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> call set_java_property('net.sf.farrago.test.grue', 'lurker');
0: jdbc:farrago:> 
0: jdbc:farrago:> values get_java_property('net.sf.farrago.test.grue');
+---------+
| EXPR$0  |
+---------+
| lurker  |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- verify that we can pass null to procedures without cast
0: jdbc:farrago:> -- FRG-128:  find out why we can't do the same for functions
0: jdbc:farrago:> -- (maybe because of different overloading rules)
0: jdbc:farrago:> -- should fail with NullPointerException
0: jdbc:farrago:> call set_java_property('net.sf.farrago.test.grue', null);
Error: java.lang.NullPointerException: null (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- here's the inconsistent function behavior
0: jdbc:farrago:> values get_java_property(null);
Error: From line 1, column 26 to line 1, column 29: Illegal use of 'NULL' (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> values access_sql_illegal();
+---------+
| EXPR$0  |
+---------+
| 0       |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values access_sql_legal();
+---------+
| EXPR$0  |
+---------+
| 777     |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail
0: jdbc:farrago:> values throw_sql_exception();
Error: nothing but a failure (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail
0: jdbc:farrago:> values throw_npe();
Error: java.lang.NullPointerException: null (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- runtime context
0: jdbc:farrago:> select generate_random_number(42) as rng from sales.depts order by 1;
+-----------------------+
|          RNG          |
+-----------------------+
| -5843495416241995736  |
| -5025562857975149833  |
| 5694868678511409995   |
+-----------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- runtime context:  verify that the two instances produce
0: jdbc:farrago:> -- identical sequences independently (no interference)
0: jdbc:farrago:> select generate_random_number(42) as rng1, generate_random_number(42) as rng2
. . . . . . . . > from sales.depts order by 1;
+-----------------------+-----------------------+
|         RNG1          |         RNG2          |
+-----------------------+-----------------------+
| -5843495416241995736  | -5843495416241995736  |
| -5025562857975149833  | -5025562857975149833  |
| 5694868678511409995   | 5694868678511409995   |
+-----------------------+-----------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- runtime context:  verify that the two instances produce
0: jdbc:farrago:> -- different sequences independently (no interference)
0: jdbc:farrago:> select generate_random_number(42) as rng1, generate_random_number(43) as rng2
. . . . . . . . > from sales.depts order by 1;
+-----------------------+-----------------------+
|         RNG1          |         RNG2          |
+-----------------------+-----------------------+
| -5843495416241995736  | -2715953330829768452  |
| -5025562857975149833  | -5027215341191833961  |
| 5694868678511409995   | -2231744817504418815  |
+-----------------------+-----------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- runtime context:  verify closeAllocation
0: jdbc:farrago:> values get_java_property('feeble');
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
0: jdbc:farrago:> values gargle();
+---------+
| EXPR$0  |
+---------+
| 0       |
+---------+
0: jdbc:farrago:> values get_java_property('feeble');
+---------+
| EXPR$0  |
+---------+
| minded  |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> !set outputformat csv
0: jdbc:farrago:> 
0: jdbc:farrago:> -- verify that constant reduction is NOT used for non-deterministic functions
0: jdbc:farrago:> explain plan for values generate_random_number(42);
'column0'
'IterCalcRel(expr#0=[{inputs}], expr#1=[42], expr#2=[CAST($t1):BIGINT], expr#3=[GENERATE_RANDOM_NUMBER($t2)], expr#4=[CAST($t3):BIGINT], EXPR$0=[$t4])'
'  IterOneRowRel'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- verify that constant reduction IS used for deterministic functions
0: jdbc:farrago:> -- with constant input
0: jdbc:farrago:> explain plan for select atoi('99') from sales.depts;
'column0'
'IterCalcRel(expr#0=[{inputs}], expr#1=[99], expr#2=[CAST($t1):INTEGER], EXPR$0=[$t2])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- verify that constant reduction is NOT used for deterministic functions
0: jdbc:farrago:> -- with non-constant input
0: jdbc:farrago:> explain plan for select atoi(name) from sales.depts;
'column0'
'IterCalcRel(expr#0=[{inputs}], expr#1=[CAST($t0):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#2=[ATOI($t1)], expr#3=[CAST($t2):INTEGER], EXPR$0=[$t3])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> !set outputformat table
0: jdbc:farrago:> 
0: jdbc:farrago:> -- udx invocation
0: jdbc:farrago:> select * from table(ramp(5)) order by 1;
+----+
| I  |
+----+
| 0  |
| 1  |
| 2  |
| 3  |
| 4  |
+----+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- udx invocation via view
0: jdbc:farrago:> select * from ramp_view order by 1;
+----+
| I  |
+----+
| 0  |
| 1  |
| 2  |
+----+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- udx invocation with restart on RHS of Cartesian product
0: jdbc:farrago:> select count(*) from sales.depts, table(ramp(5));
+---------+
| EXPR$0  |
+---------+
| 15      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- udx invocation with input
0: jdbc:farrago:> select upper(v)
. . . . . . . . > from table(stringify(
. . . . . . . . >     cursor(select * from sales.depts order by 1),
. . . . . . . . >     '|'))
. . . . . . . . > order by 1;
+---------------+
|    EXPR$0     |
+---------------+
| 10|SALES      |
| 20|MARKETING  |
| 30|ACCOUNTS   |
+---------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- udx invocation with input via view
0: jdbc:farrago:> select * from stringified_view;
+---------------+
|       V       |
+---------------+
| 20|Marketing  |
+---------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- udx invocation with input auto-propagated to output
0: jdbc:farrago:> select * 
. . . . . . . . > from table(digest(cursor(select * from sales.depts)))
. . . . . . . . > order by row_digest;
+---------+------------+--------------+
| DEPTNO  |    NAME    |  ROW_DIGEST  |
+---------+------------+--------------+
| 30      | Accounts   | -2072502236  |
| 10      | Sales      | 79649014     |
| 20      | Marketing  | 1070197274   |
+---------+------------+--------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> set path 'crypto2';
0: jdbc:farrago:> 
0: jdbc:farrago:> values alice(12);
+--------------------+
|       EXPR$0       |
+--------------------+
| 9.176470588235293  |
+--------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values bob(19);
+---------------------+
|       EXPR$0        |
+---------------------+
| 1.1176470588235294  |
+---------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- verify path selection and overloading
0: jdbc:farrago:> 
0: jdbc:farrago:> create schema v1
. . . . . . . . > 
. . . . . . . . > create function important_constant()
. . . . . . . . > returns integer
. . . . . . . . > contains sql
. . . . . . . . > return 5
. . . . . . . . > 
. . . . . . . . > create function confusing(x integer)
. . . . . . . . > returns varchar(128)
. . . . . . . . > specific confusing_integer
. . . . . . . . > contains sql
. . . . . . . . > return 'INTEGER:  '||cast(x as varchar(128))
. . . . . . . . > 
. . . . . . . . > create function confusing(x smallint)
. . . . . . . . > returns varchar(128)
. . . . . . . . > specific confusing_smallint
. . . . . . . . > contains sql
. . . . . . . . > return 'SMALLINT:  '||cast(x as varchar(128))
. . . . . . . . > 
. . . . . . . . > create function confusing(x varchar(128))
. . . . . . . . > returns varchar(128)
. . . . . . . . > specific confusing_varchar
. . . . . . . . > contains sql
. . . . . . . . > return 'VARCHAR:  '||x
. . . . . . . . > 
. . . . . . . . > create function confusing(x char(20))
. . . . . . . . > returns varchar(128)
. . . . . . . . > specific confusing_char
. . . . . . . . > contains sql
. . . . . . . . > return 'CHAR:  '||x
. . . . . . . . > ;
0: jdbc:farrago:> 
0: jdbc:farrago:> create schema v2
. . . . . . . . > 
. . . . . . . . > create function important_constant()
. . . . . . . . > returns integer
. . . . . . . . > contains sql
. . . . . . . . > return 17
. . . . . . . . > 
. . . . . . . . > create function amusing(x smallint,y varchar(128))
. . . . . . . . > returns integer
. . . . . . . . > specific amusing1
. . . . . . . . > contains sql
. . . . . . . . > return 9
. . . . . . . . > 
. . . . . . . . > create function amusing(x bigint,y int)
. . . . . . . . > returns integer
. . . . . . . . > specific amusing2
. . . . . . . . > contains sql
. . . . . . . . > return 10
. . . . . . . . > 
. . . . . . . . > create function amusing(x int,y bigint)
. . . . . . . . > returns integer
. . . . . . . . > specific amusing3
. . . . . . . . > contains sql
. . . . . . . . > return 11
. . . . . . . . > 
. . . . . . . . > create function confusing(x integer)
. . . . . . . . > returns varchar(128)
. . . . . . . . > specific confusing_integer
. . . . . . . . > contains sql
. . . . . . . . > return 'V2INTEGER:  '||cast(x as varchar(128))
. . . . . . . . > 
. . . . . . . . > create function "UPPER"(x integer)
. . . . . . . . > returns integer
. . . . . . . . > specific upper1
. . . . . . . . > contains sql
. . . . . . . . > return x+1
. . . . . . . . > 
. . . . . . . . > create function "UPPER"(x varchar(128))
. . . . . . . . > returns varchar(128)
. . . . . . . . > specific upper2
. . . . . . . . > contains sql
. . . . . . . . > return x||'_plus_one'
. . . . . . . . > 
. . . . . . . . > create function "LOWER"(x integer)
. . . . . . . . > returns integer
. . . . . . . . > contains sql
. . . . . . . . > return x-1
. . . . . . . . > 
. . . . . . . . > ;
0: jdbc:farrago:> 
0: jdbc:farrago:> set path 'v1';
0: jdbc:farrago:> values important_constant();
+---------+
| EXPR$0  |
+---------+
| 5       |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values v2.important_constant();
+---------+
| EXPR$0  |
+---------+
| 17      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> set path 'v2';
0: jdbc:farrago:> values important_constant();
+---------+
| EXPR$0  |
+---------+
| 17      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values v1.important_constant();
+---------+
| EXPR$0  |
+---------+
| 5       |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> set path 'v1,v2';
0: jdbc:farrago:> values important_constant();
+---------+
| EXPR$0  |
+---------+
| 5       |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> set path 'v2,v1';
0: jdbc:farrago:> values important_constant();
+---------+
| EXPR$0  |
+---------+
| 17      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> set path 'udftest';
0: jdbc:farrago:> -- should fail
0: jdbc:farrago:> values important_constant();
Error: From line 1, column 8 to line 1, column 27: No match found for function signature IMPORTANT_CONSTANT() (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> set path 'v1';
0: jdbc:farrago:> 
0: jdbc:farrago:> values confusing(5);
+--------------+
|    EXPR$0    |
+--------------+
| INTEGER:  5  |
+--------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values confusing(cast(5 as tinyint));
+---------------+
|    EXPR$0     |
+---------------+
| SMALLINT:  5  |
+---------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values confusing('hello');
+------------------------------+
|            EXPR$0            |
+------------------------------+
| CHAR:  hello                 |
+------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values confusing(cast('hello' as varchar(5)));
+------------------+
|      EXPR$0      |
+------------------+
| VARCHAR:  hello  |
+------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> set path 'v2,v1';
0: jdbc:farrago:> 
0: jdbc:farrago:> values confusing(5);
+----------------+
|     EXPR$0     |
+----------------+
| V2INTEGER:  5  |
+----------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- v2 shouldn't hide the better match from v1 here
0: jdbc:farrago:> values confusing('hello');
+------------------------------+
|            EXPR$0            |
+------------------------------+
| CHAR:  hello                 |
+------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- verify that parameter filtering is left-to-right
0: jdbc:farrago:> values amusing(cast(null as smallint),cast(null as integer));
+---------+
| EXPR$0  |
+---------+
| 11      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test resolution against builtins
0: jdbc:farrago:> 
0: jdbc:farrago:> values upper(7);
+---------+
| EXPR$0  |
+---------+
| 8       |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values upper('cobol');
+-----------------+
|     EXPR$0      |
+-----------------+
| cobol_plus_one  |
+-----------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values information_schema."UPPER"('cobol');
+---------+
| EXPR$0  |
+---------+
| COBOL   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values lower(7);
+---------+
| EXPR$0  |
+---------+
| 6       |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values lower('COBOL');
+---------+
| EXPR$0  |
+---------+
| cobol   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail
0: jdbc:farrago:> values confusing(true);
Error: From line 1, column 8 to line 1, column 22: No match found for function signature CONFUSING(<BOOLEAN>) (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> !quit
