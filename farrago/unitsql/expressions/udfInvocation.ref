> -- $Id$
> -- Test queries with UDF invocations
> 
> create schema udftest;
> 
> set schema 'udftest';
> 
> set path 'udftest';
> 
> -- test basic SQL-defined function
> create function celsius_to_fahrenheit(c double)
> returns double
> contains sql
> return c*1.8 + 32;
> 
> -- test usage of rewritten builtin
> create function coalesce2(x varchar(128),y varchar(128))
> returns varchar(128)
> contains sql
> return coalesce(x,y);
> 
> -- should fail:  implicit cast not allowed
> create function bad_atoi(x varchar(128))
> returns integer
> contains sql
> return x;
Error: Result expression type VARCHAR(128) from routine "UDFTEST"."BAD_ATOI" does not match declared return type INTEGER (state=,code=0)
> 
> -- test that explicit cast does occur
> create function good_atoi(x varchar(128))
> returns integer
> contains sql
> return cast(x as integer);
> 
> -- test something mildly complicated
> create function stirfry(x varchar(128))
> returns varchar(128)
> contains sql
> return case when x like 'A%' then upper(x)||'gator' else lower(x) end;
> 
> -- test CALLED ON NULL INPUT
> create function replace_null(x varchar(128))
> returns varchar(128)
> contains sql
> called on null input
> return coalesce(x,'null and void');
> 
> -- test RETURNS NULL ON NULL INPUT
> create function dont_replace_null(x varchar(128))
> returns varchar(128)
> contains sql
> returns null on null input
> return coalesce(x,'null and void');
> 
> -- test external Java function
> create function noargs()
> returns varchar(128)
> language java
> no sql
> external name 'class net.sf.farrago.test.FarragoTestUDR.noargs';
> 
> create function substring24(s varchar(128))
> returns varchar(2)
> language java
> no sql
> external name 'class net.sf.farrago.test.FarragoTestUDR.substring24';
> 
> create function prim_int_to_hex_string(i int)
> returns varchar(128)
> language java
> no sql
> external name 'class net.sf.farrago.test.FarragoTestUDR.toHexString';
> 
> create function obj_int_to_hex_string(i int)
> returns varchar(128)
> language java
> no sql
> called on null input
> external name 
> 'class net.sf.farrago.test.FarragoTestUDR.toHexString(java.lang.Integer)';
> 
> create function null_preserving_int_to_hex_string(i int)
> returns varchar(128)
> language java
> no sql
> returns null on null input
> external name 
> 'class net.sf.farrago.test.FarragoTestUDR.toHexString(java.lang.Integer)';
> 
> create function decimal_abs(n decimal(6, 4)) 
> returns decimal(6, 4)
> language java
> no sql
> external name
> 'class net.sf.farrago.test.FarragoTestUDR.decimalAbs(java.math.BigDecimal)';
> 
> create function atoi(s varchar(128))
> returns int
> language java
> no sql
> deterministic
> external name 'class net.sf.farrago.test.FarragoTestUDR.atoi';
> 
> create function null_preserving_atoi(s varchar(128))
> returns int
> language java
> no sql
> returns null on null input
> deterministic
> external name 'class net.sf.farrago.test.FarragoTestUDR.atoi';
> 
> create function atoi_with_null_for_err(s varchar(128))
> returns int
> language java
> no sql
> external name 'class net.sf.farrago.test.FarragoTestUDR.atoiWithNullForErr';
> 
> create function get_java_property(name varchar(128))
> returns varchar(128)
> language java
> no sql
> external name 'class java.lang.System.getProperty';
> 
> create procedure set_java_property(in name varchar(128),in val varchar(128))
> language java
> no sql
> external name 'class net.sf.farrago.test.FarragoTestUDR.setSystemProperty';
> 
> create function access_sql_illegal()
> returns int
> language java
> no sql
> external name 'class net.sf.farrago.test.FarragoTestUDR.accessSql';
> 
> create function access_sql_legal()
> returns int
> language java
> contains sql
> external name 'class net.sf.farrago.test.FarragoTestUDR.accessSql';
> 
> create function throw_sql_exception()
> returns int
> language java
> no sql
> external name 'class net.sf.farrago.test.FarragoTestUDR.throwSQLException';
> 
> create function throw_npe()
> returns int
> language java
> no sql
> external name 'class net.sf.farrago.test.FarragoTestUDR.throwNPE';
> 
> 
> -- test UDF which depends on FarragoUdrRuntime
> create function generate_random_number(seed bigint)
> returns bigint
> language java
> no sql
> not deterministic
> external name 'class net.sf.farrago.test.FarragoTestUDR.generateRandomNumber';
> 
> -- alias to avoid common subexpression elimination
> create function generate_random_number2(seed bigint)
> returns bigint
> language java
> no sql
> not deterministic
> external name 'class net.sf.farrago.test.FarragoTestUDR.generateRandomNumber';
> 
> -- test UDF which depends on FarragoUdrRuntime, with
> -- ClosableAllocation support
> create function gargle()
> returns integer
> language java
> no sql
> deterministic
> external name 'class net.sf.farrago.test.FarragoTestUDR.gargle';
> 
> -- test a function that uses another function
> create function celsius_to_rankine(c double)
> returns double
> contains sql
> return celsius_to_fahrenheit(c) + 459.67;
> 
> -- should fail:  we don't allow recursion
> create function factorial(x integer)
> returns integer
> contains sql
> return case when x = 1 then x else x*factorial(x-1) end;
Error: Object definition contains recursive cycle (state=,code=0)
> 
> -- UDX
> create function ramp(n int)
> returns table(i int)
> language java
> parameter style system defined java
> no sql
> external name 'class net.sf.farrago.test.FarragoTestUDR.ramp';
> 
> -- UDX that allows a null argument
> create function nullableRamp(n int)
> returns table(i int)
> language java
> parameter style system defined java
> no sql
> external name
> 'class net.sf.farrago.test.FarragoTestUDR.nullableRamp(java.lang.Integer, java.sql.PreparedStatement)';
> 
> -- UDX with input
> create function stringify(c cursor, delimiter varchar(128))
> returns table(v varchar(65535))
> language java
> parameter style system defined java
> no sql
> external name 'class net.sf.farrago.test.FarragoTestUDR.stringify';
> 
> -- UDX with input from which output row type is derived
> create function digest(c cursor)
> returns table(c.*, row_digest int)
> language java
> parameter style system defined java
> no sql
> external name 'class net.sf.farrago.test.FarragoTestUDR.digest';
> 
> -- UDX which specifies a calendar argument
> create function foreign_time(
>   ts timestamp, tsZoneId varchar(256), foreignZoneId varchar(256))
> returns table(
>   the_timestamp timestamp, the_date date, the_time time)
> language java
> parameter style system defined java
> no sql
> external name 'class net.sf.farrago.test.FarragoTestUDR.foreignTime';
> 
> -- UDX that contains a column list parameter
> create function stringifyColumns(
>     c cursor,
>     cl select from c,
>     delimiter varchar(128))
> returns table(v varchar(65535))
> language java
> parameter style system defined java
> no sql
> external name 'class net.sf.farrago.test.FarragoTestUDR.stringifyColumns';
> 
> -- UDX that contains 2 column list parameters referencing the same cursor
> create function stringify2ColumnLists(
>     cl select from c,
>     c2 select from c,
>     c cursor,
>     delimiter varchar(128))
> returns table(v varchar(65535))
> language java
> parameter style system defined java
> no sql
> external name 'class net.sf.farrago.test.FarragoTestUDR.stringify2ColumnLists';
> 
> -- UDX that contains 2 column list parameters referencing different cursors
> create function combineStringifyColumns(
>     c1 cursor,
>     cl1 select from c1,
>     c2 cursor,
>     cl2 select from c2,
>     delimiter varchar(128))
> returns table(v varchar(65535))
> language java
> parameter style system defined java
> no sql
> external name
> 'class net.sf.farrago.test.FarragoTestUDR.combineStringifyColumns';
> 
> -- same as above but arguments are jumbled
> create function combineStringifyColumnsJumbledArgs(
>     cl2 select from c2,
>     c1 cursor,
>     delimiter varchar(128),
>     c2 cursor,
>     cl1 select from c1)
> returns table(v varchar(65535))
> language java
> parameter style system defined java
> no sql
> external name
> 'class net.sf.farrago.test.FarragoTestUDR.combineStringifyColumnsJumbledArgs';
> 
> -- UDX's that returns columns from parameters that select from cursors
> create function returnInput(
>     inputCursor cursor,
>     columnSubset select from inputCursor)
> returns table(columnSubset.*)
> language java
> parameter style system defined java
> no sql
> external name
> 'class net.sf.farrago.test.FarragoTestUDR.returnInput';
> 
> create function returnTwoInputs(
>     inputCursor1 cursor,
>     inputCursor2 cursor,
>     columnSubset1 select from inputCursor1,
>     columnSubset2 select from inputCursor2)
> returns table(columnSubset1.*, columnSubset2.*)
> language java
> parameter style system defined java
> no sql
> external name
> 'class net.sf.farrago.test.FarragoTestUDR.returnTwoInputs';
> 
> create view ramp_view as select * from table(ramp(3));
> 
> create view stringified_view as 
> select * 
> from table(stringify(
>     cursor(select * from sales.depts where deptno=20 order by 1),
>     '|'));
> 
> create view stringifiedColumns_view as
> select * 
> from table(stringifyColumns(
>     cursor(select * from sales.emps where deptno=20 order by 1),
>     row(name, empno, gender),
>     '|'));
> 
> create view combineStringifiedColumns_view as
> select * 
> from table(combineStringifyColumns(
>     cursor(select * from sales.emps where deptno=20 order by 1),
>     row(name, empno, gender),
>     cursor(select * from sales.depts where deptno= 20 order by 1),
>     row(name),
>     '|'));
> 
> -- should fail : empno doesn't exist
> select * 
> from table(stringifyColumns(
>     cursor(select * from sales.depts where deptno=20 order by 1),
>     row(name, empno),
>     '|'));
Error: From line 4, column 15 to line 4, column 19: Column 'EMPNO' not found in any table (state=,code=0)
> 
> -- should fail : should reference column by its alias
> select *
> from table(stringifyColumns(
>     cursor(select name as n from sales.depts where deptno=20 order by 1),
>     row(name),
>     '|'));
Error: From line 4, column 9 to line 4, column 12: Column 'NAME' not found in any table (state=,code=0)
> 
> -- should fail : wrong number of arguments
> select * 
> from table(stringifyColumns(
>     cursor(select * from sales.emps where deptno=20 order by 1),
>     row(name, empno, gender)));
Error: From line 2, column 12 to line 4, column 29: No match found for function signature STRINGIFYCOLUMNS(<CURSOR>, <COLUMN_LIST>) (state=,code=0)
> 
> -- should fail:  we don't allow mutual recursion either
> create schema crypto
> create function alice(x double)
> returns double
> contains sql
> return bob(x*13)
> create function bob(x double)
> returns double
> contains sql
> return alice(x/17);
Error: Object definition contains recursive cycle (state=,code=0)
> 
> -- test forward reference
> create schema crypto2
> create function alice(x double)
> returns double
> contains sql
> return bob(x*13)
> create function bob(x double)
> returns double
> contains sql
> return x/17;
> 
> values celsius_to_fahrenheit(0);
+---------+
| EXPR$0  |
+---------+
| 32.0    |
+---------+
> 
> values celsius_to_fahrenheit(100);
+---------+
| EXPR$0  |
+---------+
| 212.0   |
+---------+
> 
> -- should fail due to datatype mismatch
> values celsius_to_fahrenheit('freezing');
Error: From line 1, column 8 to line 1, column 40: No match found for function signature CELSIUS_TO_FAHRENHEIT(<CHARACTER>) (state=,code=0)
> 
> values celsius_to_rankine(0);
+---------+
| EXPR$0  |
+---------+
| 491.67  |
+---------+
> 
> values celsius_to_rankine(-273);
+---------------------+
|       EXPR$0        |
+---------------------+
| 0.2699999999999818  |
+---------------------+
> 
> values coalesce2('hello','goodbye');
+---------+
| EXPR$0  |
+---------+
| hello   |
+---------+
> 
> values coalesce2('hello',cast(null as varchar(128)));
+---------+
| EXPR$0  |
+---------+
| hello   |
+---------+
> 
> values coalesce2(cast(null as varchar(128)),'goodbye');
+----------+
|  EXPR$0  |
+----------+
| goodbye  |
+----------+
> 
> values good_atoi('451');
+---------+
| EXPR$0  |
+---------+
| 451     |
+---------+
> 
> -- this should fail
> values good_atoi('nineoneone');
Error: Cannot assign 'nineoneone' to a NUMERIC value: NumberFormatException (state=,code=0)
> 
> values null_preserving_atoi(cast(null as varchar(128)));
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
> 
> values null_preserving_atoi('451');
+---------+
| EXPR$0  |
+---------+
| 451     |
+---------+
> 
> values stirfry('Alley');
+-------------+
|   EXPR$0    |
+-------------+
| ALLEYgator  |
+-------------+
> 
> values stirfry('LaRa');
+---------+
| EXPR$0  |
+---------+
| lara    |
+---------+
> 
> values replace_null('not null');
+-----------+
|  EXPR$0   |
+-----------+
| not null  |
+-----------+
> 
> values replace_null(cast(null as varchar(128)));
+----------------+
|     EXPR$0     |
+----------------+
| null and void  |
+----------------+
> 
> values dont_replace_null('not null');
+-----------+
|  EXPR$0   |
+-----------+
| not null  |
+-----------+
> 
> values dont_replace_null(cast(null as varchar(128)));
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
> 
> values noargs();
+-----------------------------+
|           EXPR$0            |
+-----------------------------+
| get your kicks on route 66  |
+-----------------------------+
> 
> values substring24('superman');
+---------+
| EXPR$0  |
+---------+
| pe      |
+---------+
> 
> -- this should fail with a Java exception
> values substring24(cast(null as varchar(128)));
Error: java.lang.NullPointerException: null (state=,code=0)
> 
> values prim_int_to_hex_string(255);
+---------+
| EXPR$0  |
+---------+
| ff      |
+---------+
> 
> !set outputformat csv
> -- make sure the cast to a non-null type is preserved in the UDF argument
> explain plan for
> select * from sales.emps
>     where obj_int_to_hex_string(cast(empno as int)) = '64';
'column0'
'IterCalcRel(expr#0..9=[{inputs}], expr#10=[CAST($t0):INTEGER], expr#11=[OBJ_INT_TO_HEX_STRING($t10)], expr#12=['64'], expr#13=[=($t11, $t12)], proj#0..9=[{exprs}], $condition=[$t13])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])'
> -- whereas in this case, the cast can be removed because the argument is 
> -- nullable
> explain plan for
> select * from sales.emps
>     where obj_int_to_hex_string(cast(age as int)) = '64';
'column0'
'IterCalcRel(expr#0..9=[{inputs}], expr#10=[OBJ_INT_TO_HEX_STRING($t6)], expr#11=['64'], expr#12=[=($t10, $t11)], proj#0..9=[{exprs}], $condition=[$t12])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])'
> !set outputformat table
> select * from sales.emps
>     where obj_int_to_hex_string(cast(empno as int)) = '64';
+--------+-------+---------+---------+-------+--------+------+-------------+----------+----------+
| EMPNO  | NAME  | DEPTNO  | GENDER  | CITY  | EMPID  | AGE  | PUBLIC_KEY  | SLACKER  | MANAGER  |
+--------+-------+---------+---------+-------+--------+------+-------------+----------+----------+
| 100    | Fred  | 10      |         |       | 30     | 25   | 41626320    | true     | false    |
+--------+-------+---------+---------+-------+--------+------+-------------+----------+----------+
> select * from sales.emps
>     where obj_int_to_hex_string(cast(age as int)) = '50';
+--------+-------+---------+---------+----------------+--------+------+-------------+----------+----------+
| EMPNO  | NAME  | DEPTNO  | GENDER  |      CITY      | EMPID  | AGE  | PUBLIC_KEY  | SLACKER  | MANAGER  |
+--------+-------+---------+---------+----------------+--------+------+-------------+----------+----------+
| 110    | Eric  | 20      | M       | San Francisco  | 3      | 80   | 416263      |          | false    |
+--------+-------+---------+---------+----------------+--------+------+-------------+----------+----------+
> 
> -- this should fail with an SQL exception for NULL detected
> values prim_int_to_hex_string(cast(null as integer));
Error: Target "I" cannot be assigned null value (state=,code=0)
> 
> values obj_int_to_hex_string(255);
+---------+
| EXPR$0  |
+---------+
| ff      |
+---------+
> 
> -- this should return 'nada'
> values obj_int_to_hex_string(cast(null as integer));
+---------+
| EXPR$0  |
+---------+
| nada    |
+---------+
> 
> values null_preserving_int_to_hex_string(255);
+---------+
| EXPR$0  |
+---------+
| ff      |
+---------+
> 
> -- this should return null
> values null_preserving_int_to_hex_string(cast(null as integer));
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
> 
>     values decimal_abs(-54.1234);
+----------+
|  EXPR$0  |
+----------+
| 54.1234  |
+----------+
> 
> values atoi('451');
+---------+
| EXPR$0  |
+---------+
| 451     |
+---------+
> 
> -- this should fail with a Java exception
> values atoi(cast(null as varchar(128)));
Error: java.lang.NumberFormatException: null (state=,code=0)
> 
> -- this should fail with a Java exception
> values atoi('Posey');
Error: java.lang.NumberFormatException: For input string: "Posey" (state=,code=0)
> 
> values atoi_with_null_for_err('451');
+---------+
| EXPR$0  |
+---------+
| 451     |
+---------+
> 
> -- this should return null
> values atoi_with_null_for_err(cast(null as varchar(128)));
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
> 
> -- this should return null
> values atoi_with_null_for_err('Violet');
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
> 
> call set_java_property('net.sf.farrago.test.grue', 'lurker');
> 
> values get_java_property('net.sf.farrago.test.grue');
+---------+
| EXPR$0  |
+---------+
| lurker  |
+---------+
> 
> -- verify that we can pass null to procedures without cast
> -- FRG-128:  find out why we can't do the same for functions
> -- (maybe because of different overloading rules)
> -- should fail with NullPointerException
> call set_java_property('net.sf.farrago.test.grue', null);
Error: java.lang.NullPointerException: null (state=,code=0)
> 
> -- here's the inconsistent function behavior
> values get_java_property(null);
Error: From line 1, column 26 to line 1, column 29: Illegal use of 'NULL' (state=,code=0)
> 
> values access_sql_illegal();
+---------+
| EXPR$0  |
+---------+
| 0       |
+---------+
> 
> values access_sql_legal();
+---------+
| EXPR$0  |
+---------+
| 777     |
+---------+
> 
> -- should fail
> values throw_sql_exception();
Error: nothing but a failure (state=,code=0)
> 
> -- should fail
> values throw_npe();
Error: java.lang.NullPointerException: null (state=,code=0)
> 
> -- runtime context
> select generate_random_number(42) as rng from sales.depts order by 1;
+-----------------------+
|          RNG          |
+-----------------------+
| -5843495416241995736  |
| -5025562857975149833  |
| 5694868678511409995   |
+-----------------------+
> 
> -- runtime context:  verify that the two instances produce
> -- identical sequences independently (no interference)
> select generate_random_number(42) as rng1, generate_random_number2(42) as rng2
> from sales.depts order by 1;
+-----------------------+-----------------------+
|         RNG1          |         RNG2          |
+-----------------------+-----------------------+
| -5843495416241995736  | -5843495416241995736  |
| -5025562857975149833  | -5025562857975149833  |
| 5694868678511409995   | 5694868678511409995   |
+-----------------------+-----------------------+
> 
> -- runtime context:  verify that the two instances produce
> -- different sequences independently (no interference)
> select generate_random_number(42) as rng1, generate_random_number2(43) as rng2
> from sales.depts order by 1;
+-----------------------+-----------------------+
|         RNG1          |         RNG2          |
+-----------------------+-----------------------+
| -5843495416241995736  | -2715953330829768452  |
| -5025562857975149833  | -5027215341191833961  |
| 5694868678511409995   | -2231744817504418815  |
+-----------------------+-----------------------+
> 
> -- runtime context:  verify closeAllocation
> values get_java_property('feeble');
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
> values gargle();
+---------+
| EXPR$0  |
+---------+
| 0       |
+---------+
> values get_java_property('feeble');
+---------+
| EXPR$0  |
+---------+
| minded  |
+---------+
> 
> -- should fail:  numeric can't be implicitly cast to any integer type
> values generate_random_number(42.0);
Error: From line 1, column 8 to line 1, column 35: No match found for function signature GENERATE_RANDOM_NUMBER(<NUMERIC>) (state=,code=0)
> 
> -- should pass
> values generate_random_number(cast(42.0 as int));
+-----------------------+
|        EXPR$0         |
+-----------------------+
| -5025562857975149833  |
+-----------------------+
> 
> !set outputformat csv
> 
> -- verify that constant reduction is NOT used for non-deterministic functions
> explain plan for values generate_random_number(42);
'column0'
'IterCalcRel(expr#0=[{inputs}], expr#1=[42], expr#2=[CAST($t1):BIGINT], expr#3=[GENERATE_RANDOM_NUMBER($t2)], EXPR$0=[$t3])'
'  IterOneRowRel'
> 
> -- verify that constant reduction IS used for deterministic functions
> -- with constant input
> explain plan for select atoi('99') from sales.depts;
'column0'
'IterCalcRel(expr#0=[{inputs}], expr#1=[99], expr#2=[CAST($t1):INTEGER], EXPR$0=[$t2])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> -- verify that constant reduction is NOT used for deterministic functions
> -- with non-constant input
> explain plan for select atoi(name) from sales.depts;
'column0'
'IterCalcRel(expr#0=[{inputs}], expr#1=[CAST($t0):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#2=[ATOI($t1)], EXPR$0=[$t2])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> -- verify that UDX no-input rowcount is 1.0
> explain plan including all attributes for
> select * from table(ramp(5));
'column0'
'FarragoJavaUdxRel(invocation=[CAST(RAMP(CAST(5):INTEGER)):RecordType(INTEGER I) NOT NULL]): rowcount = 1.0, cumulative cost = 1.0'
> 
> -- verify that UDX one-input rowcount propagates through to output
> explain plan including all attributes for
> select v
> from table(stringify(
>     cursor(select * from sales.depts),
>     '|'));
'column0'
'FarragoJavaUdxRel(invocation=[CAST(STRINGIFY(CAST($0):CURSOR, CAST('|'):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary")):RecordType(VARCHAR(65535) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" V) NOT NULL]): rowcount = 100.0, cumulative cost = 1101.0'
'  FennelToIteratorConverter: rowcount = 100.0, cumulative cost = 1100.0'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false]): rowcount = 100.0, cumulative cost = 1000.0'
> 
> -- verify that UDX multi-input rowcount gets summed like UNION ALL
> explain plan including all attributes for
> select v
> from table(combineStringifyColumns(
>     cursor(select empno, name, deptno, gender from sales.emps),
>     row(empno, name, gender),
>     cursor(select empno, name, deptno, city from sales.emps),
>     row(empno, name, city),
>     '|'));
'column0'
'FarragoJavaUdxRel(invocation=[CAST(COMBINESTRINGIFYCOLUMNS(CAST($0):CURSOR, CAST(COLUMN_LIST('EMPNO', 'NAME', 'GENDER')):COLUMN_LIST, CAST($1):CURSOR, CAST(COLUMN_LIST('EMPNO', 'NAME', 'CITY')):COLUMN_LIST, CAST('|'):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary")):RecordType(VARCHAR(65535) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" V) NOT NULL]): rowcount = 200.0, cumulative cost = 2201.0'
'  FennelToIteratorConverter: rowcount = 100.0, cumulative cost = 1100.0'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2, 3]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false]): rowcount = 100.0, cumulative cost = 1000.0'
'  FennelToIteratorConverter: rowcount = 100.0, cumulative cost = 1100.0'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2, 4]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false]): rowcount = 100.0, cumulative cost = 1000.0'
> 
> !set outputformat table
> 
> -- udx invocation
> select * from table(ramp(5)) order by 1;
+----+
| I  |
+----+
| 0  |
| 1  |
| 2  |
| 3  |
| 4  |
+----+
> 
> -- udx invocation via view
> select * from ramp_view order by 1;
+----+
| I  |
+----+
| 0  |
| 1  |
| 2  |
+----+
> 
> -- udx invocation with restart on RHS of Cartesian product
> select count(*) from sales.depts, table(ramp(5));
+---------+
| EXPR$0  |
+---------+
| 15      |
+---------+
> 
> --  udx invocation with a null argument
> select * from table(nullableRamp(cast(null as integer)));
+----+
| I  |
+----+
+----+
> 
> -- udx invocation with input
> select upper(v)
> from table(stringify(
>     cursor(select * from sales.depts order by 1),
>     '|'))
> order by 1;
+---------------+
|    EXPR$0     |
+---------------+
| 10|SALES      |
| 20|MARKETING  |
| 30|ACCOUNTS   |
+---------------+
> select upper(v)
> from table(stringifyColumns(
>     cursor(select * from sales.depts order by 1),
>     row(name),
>     '|'))
> order by 1;
+------------+
|   EXPR$0   |
+------------+
| ACCOUNTS   |
| MARKETING  |
| SALES      |
+------------+
> select upper(v)
> from table(stringifyColumns(
>     cursor(select name as n from sales.depts order by 1),
>     row(n),
>     '|'))
> order by 1;
+------------+
|   EXPR$0   |
+------------+
| ACCOUNTS   |
| MARKETING  |
| SALES      |
+------------+
> select upper(v)
> from table(stringify2ColumnLists(
>     row(empno, name),
>     row(deptno, gender),
>     cursor(select * from sales.emps order by 1),
>     '|'))
> order by 1;
+-------------------+
|      EXPR$0       |
+-------------------+
| 100|FRED|10|NULL  |
| 110|ERIC|20|M     |
| 110|JOHN|40|M     |
| 120|WILMA|20|F    |
+-------------------+
> select upper(v)
> from table(combineStringifyColumns(
>     cursor(select empno, name, deptno, gender from sales.emps order by 1),
>     row(empno, name, gender),
>     cursor(select empno, name, deptno, city from sales.emps order by 1),
>     row(empno, name, city),
>     '|'))
> order by 1;
+-------------------------+
|         EXPR$0          |
+-------------------------+
| 100|FRED|NULL           |
| 100|FRED|NULL           |
| 110|ERIC|M              |
| 110|ERIC|SAN FRANCISCO  |
| 110|JOHN|M              |
| 110|JOHN|VANCOUVER      |
| 120|WILMA|F             |
| 120|WILMA|NULL          |
+-------------------------+
> select upper(v)
> from table(combineStringifyColumnsJumbledArgs(
>     row(empno, name, city),
>     cursor(select empno, name, deptno, gender from sales.emps order by 1),
>     '|',
>     cursor(select empno, name, deptno, city from sales.emps order by 1),
>     row(empno, name, gender)))
> order by 1;
+-------------------------+
|         EXPR$0          |
+-------------------------+
| 100|FRED|NULL           |
| 100|FRED|NULL           |
| 110|ERIC|M              |
| 110|ERIC|SAN FRANCISCO  |
| 110|JOHN|M              |
| 110|JOHN|VANCOUVER      |
| 120|WILMA|F             |
| 120|WILMA|NULL          |
+-------------------------+
> select *
> from table(stringifyColumns(
>     cursor(select * from sales.depts where deptno=20 order by 1),
>     row(name),
>     '|'))
> union all
> select *
> from table(stringifyColumns(
>     cursor(select * from sales.emps where deptno=20 order by 1),
>     row(name, empno, gender),
>     '|'));
+--------------+
|      V       |
+--------------+
| Marketing    |
| 110|Eric|M   |
| 120|Wilma|F  |
+--------------+
> 
> -- udx invocation with input via view
> select * from stringified_view;
+---------------+
|       V       |
+---------------+
| 20|Marketing  |
+---------------+
> select * from stringifiedColumns_view;
+--------------+
|      V       |
+--------------+
| 110|Eric|M   |
| 120|Wilma|F  |
+--------------+
> select * from combineStringifiedColumns_view;
+--------------+
|      V       |
+--------------+
| 110|Eric|M   |
| 120|Wilma|F  |
| Marketing    |
+--------------+
> 
> -- udx invocation with input auto-propagated to output
> select * 
> from table(digest(cursor(select * from sales.depts)))
> order by row_digest;
+---------+------------+--------------+
| DEPTNO  |    NAME    |  ROW_DIGEST  |
+---------+------------+--------------+
| 30      | Accounts   | -2072502236  |
| 10      | Sales      | 79649014     |
| 20      | Marketing  | 1070197274   |
+---------+------------+--------------+
> 
> -- udx invocation where the result is determined by parameters that select
> -- from cursor parameters
> select * from table(
>     returnInput(
>         cursor(select * from sales.emps),
>         row(name, empno, age)))
> order by empno;
+--------+--------+------+
|  NAME  | EMPNO  | AGE  |
+--------+--------+------+
| Fred   | 100    | 25   |
| Eric   | 110    | 80   |
| John   | 110    |      |
| Wilma  | 120    | 50   |
+--------+--------+------+
> select * from table(
>     returnInput(
>         cursor(select name as n, gender as g, city as c, age as a
>             from sales.emps),
>         row(c, n, a)))
> order by n;
+----------------+--------+-----+
|       C        |   N    |  A  |
+----------------+--------+-----+
| San Francisco  | Eric   | 80  |
|                | Fred   | 25  |
| Vancouver      | John   |     |
|                | Wilma  | 50  |
+----------------+--------+-----+
> select * from table(
>     returnInput(
>         cursor(select * from sales.emps),
>         row(name)))
> union
> select * from table(
>     returnInput(
>         cursor(select * from sales.depts),
>         row(name)))
> order by name;
+------------+
|    NAME    |
+------------+
| Accounts   |
| Eric       |
| Fred       |
| John       |
| Marketing  |
| Sales      |
| Wilma      |
+------------+
> select * from table(
>     returnTwoInputs(
>         cursor(select * from sales.emps where empno <= 110 order by empno),
>         cursor(select deptno as dno, name as dname from sales.depts
>             order by deptno),
>         row(empno, name),
>         row(dname)));
+--------+-------+------------+
| EMPNO  | NAME  |   DNAME    |
+--------+-------+------------+
| 100    | Fred  | Sales      |
| 110    | Eric  | Marketing  |
| 110    | John  | Accounts   |
+--------+-------+------------+
> -- this will fail because of duplicate column names
> select * from table(
>     returnTwoInputs(
>         cursor(select * from sales.emps where empno <= 110 order by empno),
>         cursor(select * from sales.depts
>             order by deptno),
>         row(empno, name),
>         row(name)));
Error: From line 2, column 5 to line 7, column 18: Duplicate column name 'NAME' in output (state=,code=0)
> 
> -- commented out until jrockit R27 bug fixed
> -- udx with specified calendar
> -- select *
> -- from table(foreign_time(timestamp'2006-10-09 18:32:26.992', 'PST', 'EST'));
> 
> 
> set path 'crypto2';
> 
> values alice(12);
+--------------------+
|       EXPR$0       |
+--------------------+
| 9.176470588235293  |
+--------------------+
> 
> values bob(19);
+---------------------+
|       EXPR$0        |
+---------------------+
| 1.1176470588235294  |
+---------------------+
> 
> -- verify path selection and overloading
> 
> create schema v1
> 
> create function important_constant()
> returns integer
> contains sql
> return 5
> 
> create function confusing(x integer)
> returns varchar(128)
> specific confusing_integer
> contains sql
> return 'INTEGER:  '||cast(x as varchar(128))
> 
> create function confusing(x smallint)
> returns varchar(128)
> specific confusing_smallint
> contains sql
> return 'SMALLINT:  '||cast(x as varchar(128))
> 
> create function confusing(x varchar(128))
> returns varchar(128)
> specific confusing_varchar
> contains sql
> return 'VARCHAR:  '||x
> 
> create function confusing(x char(20))
> returns varchar(128)
> specific confusing_char
> contains sql
> return 'CHAR:  '||x
> ;
> 
> create schema v2
> 
> create function important_constant()
> returns integer
> contains sql
> return 17
> 
> create function amusing(x smallint,y varchar(128))
> returns integer
> specific amusing1
> contains sql
> return 9
> 
> create function amusing(x bigint,y int)
> returns integer
> specific amusing2
> contains sql
> return 10
> 
> create function amusing(x int,y bigint)
> returns integer
> specific amusing3
> contains sql
> return 11
> 
> create function confusing(x integer)
> returns varchar(128)
> specific confusing_integer
> contains sql
> return 'V2INTEGER:  '||cast(x as varchar(128))
> 
> create function "UPPER"(x integer)
> returns integer
> specific upper1
> contains sql
> return x+1
> 
> create function "UPPER"(x varchar(128))
> returns varchar(128)
> specific upper2
> contains sql
> return x||'_plus_one'
> 
> create function "LOWER"(x integer)
> returns integer
> contains sql
> return x-1
> 
> ;
> 
> set path 'v1';
> values important_constant();
+---------+
| EXPR$0  |
+---------+
| 5       |
+---------+
> 
> values v2.important_constant();
+---------+
| EXPR$0  |
+---------+
| 17      |
+---------+
> 
> set path 'v2';
> values important_constant();
+---------+
| EXPR$0  |
+---------+
| 17      |
+---------+
> 
> values v1.important_constant();
+---------+
| EXPR$0  |
+---------+
| 5       |
+---------+
> 
> set path 'v1,v2';
> values important_constant();
+---------+
| EXPR$0  |
+---------+
| 5       |
+---------+
> 
> set path 'v2,v1';
> values important_constant();
+---------+
| EXPR$0  |
+---------+
| 17      |
+---------+
> 
> set path 'udftest';
> -- should fail
> values important_constant();
Error: From line 1, column 8 to line 1, column 27: No match found for function signature IMPORTANT_CONSTANT() (state=,code=0)
> 
> set path 'v1';
> 
> values confusing(5);
+--------------+
|    EXPR$0    |
+--------------+
| INTEGER:  5  |
+--------------+
> 
> values confusing(cast(5 as tinyint));
+---------------+
|    EXPR$0     |
+---------------+
| SMALLINT:  5  |
+---------------+
> 
> values confusing('hello');
+------------------------------+
|            EXPR$0            |
+------------------------------+
| CHAR:  hello                 |
+------------------------------+
> 
> values confusing(cast('hello' as varchar(5)));
+------------------+
|      EXPR$0      |
+------------------+
| VARCHAR:  hello  |
+------------------+
> 
> set path 'v2,v1';
> 
> values confusing(5);
+----------------+
|     EXPR$0     |
+----------------+
| V2INTEGER:  5  |
+----------------+
> 
> -- v2 shouldn't hide the better match from v1 here
> values confusing('hello');
+------------------------------+
|            EXPR$0            |
+------------------------------+
| CHAR:  hello                 |
+------------------------------+
> 
> -- verify that parameter filtering is left-to-right
> values amusing(cast(null as smallint),cast(null as integer));
+---------+
| EXPR$0  |
+---------+
| 11      |
+---------+
> 
> -- test resolution against builtins
> 
> values upper(7);
+---------+
| EXPR$0  |
+---------+
| 8       |
+---------+
> 
> values upper('cobol');
+-----------------+
|     EXPR$0      |
+-----------------+
| cobol_plus_one  |
+-----------------+
> 
> values information_schema."UPPER"('cobol');
+---------+
| EXPR$0  |
+---------+
| COBOL   |
+---------+
> 
> values lower(7);
+---------+
| EXPR$0  |
+---------+
| 6       |
+---------+
> 
> values lower('COBOL');
+---------+
| EXPR$0  |
+---------+
| cobol   |
+---------+
> 
> -- should fail
> values confusing(true);
Error: From line 1, column 8 to line 1, column 22: No match found for function signature CONFUSING(<BOOLEAN>) (state=,code=0)
> 
> 
> -- FRG-331
> 
> create schema FRG_331;
> 
> set schema 'FRG_331';
> set path 'udftest,FRG_331';
> 
> create function uniq(c cursor)
> returns table(c.*)
> language java
> parameter style system defined java
> no sql
> external name 
> 'class net.sf.farrago.test.FarragoTestUDR.removeDupsFromPresortedCursor';
> 
> -- use LucidDB optimizer to avoid buffering on the cartesian join RHS
> -- (since that would cover up the original bug)
> alter session implementation set jar sys_boot.sys_boot.luciddb_plugin;
> 
> -- before the bugfix, this returned 20 instead of 200
> --[disabled: dtbug 1847 logged
> --select count(*) from
> --(select * from table(uniq(cursor(select * from table(ramp(10)) order by 1)))),
> --(select * from table(uniq(cursor(select * from table(ramp(20)) order by 1))));
> --should return 200
> 
> -- before the bugfix, this resulted in a ConcurrentModificationException
> --select count(*) from
> --(select * from table(uniq(cursor(select * from table(ramp(10)))))),
> --(select * from table(uniq(cursor(select * from table(ramp(20))))));
> --should return 200
> --end disabled]
> 
> -- make sure there is no buffering
> !set outputformat csv
> explain plan excluding attributes for
> select count(*) from
> (select * from table(uniq(cursor(select * from table(ramp(10)) order by 1)))),
> (select * from table(uniq(cursor(select * from table(ramp(20)) order by 1))));
'column0'
'FennelToIteratorConverter'
'  FennelAggRel'
'    FennelCalcRel'
'      FennelCartesianProductRel'
'        IteratorToFennelConverter'
'          FarragoJavaUdxRel'
'            FennelToIteratorConverter'
'              FennelSortRel'
'                IteratorToFennelConverter'
'                  FarragoJavaUdxRel'
'        IteratorToFennelConverter'
'          FarragoJavaUdxRel'
'            FennelToIteratorConverter'
'              FennelSortRel'
'                IteratorToFennelConverter'
'                  FarragoJavaUdxRel'
> 
> alter session implementation set default;
> 
> -- End udfInvocation.sql
> 
> !quit
