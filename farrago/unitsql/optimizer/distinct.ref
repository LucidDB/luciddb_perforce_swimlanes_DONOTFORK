0: jdbc:farrago:> -- $Id$
0: jdbc:farrago:> -- Test queries with DISTINCT
0: jdbc:farrago:> 
0: jdbc:farrago:> set schema 'sales';
0: jdbc:farrago:> 
0: jdbc:farrago:> -- force usage of Fennel calculator
0: jdbc:farrago:> alter system set "calcVirtualMachine" = 'CALCVM_FENNEL';
0: jdbc:farrago:> 
0: jdbc:farrago:> -- simple key
0: jdbc:farrago:> select distinct gender from emps order by 1;
+---------+
| GENDER  |
+---------+
|         |
| F       |
| M       |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> -- TODO:  if the select list is reversed, the next query can't be
0: jdbc:farrago:> -- entirely pushed down to Fennel; need to deal with reordering
0: jdbc:farrago:> 
0: jdbc:farrago:> -- compound key
0: jdbc:farrago:> select distinct empno,gender from emps order by 1;
+--------+---------+
| EMPNO  | GENDER  |
+--------+---------+
| 100    |         |
| 110    | M       |
| 120    | F       |
+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- redundant distinct
0: jdbc:farrago:> select distinct * from (select distinct gender from emps) order by 1;
+---------+
| GENDER  |
+---------+
|         |
| F       |
| M       |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> -- verify plans
0: jdbc:farrago:> !set outputformat csv
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select distinct gender from emps;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[true])'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[3]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select distinct gender from emps order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelSortRel(key=[[0]], discardDuplicates=[true])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[3]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select distinct empno,gender from emps;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0, 1]], discardDuplicates=[true])'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 3]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select distinct empno,gender from emps order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelSortRel(key=[[0, 1]], discardDuplicates=[true])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 3]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select distinct * from (select distinct gender from emps) order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelSortRel(key=[[0]], discardDuplicates=[true])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[3]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> !quit
