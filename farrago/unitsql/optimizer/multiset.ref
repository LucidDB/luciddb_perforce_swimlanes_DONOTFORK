> -- $Id$
> -- Test multiset related queries
> 
> set schema 'sales';
> !set outputformat csv
> 
> -- force usage of Fennel calculator
> --alter system set "calcVirtualMachine" = 'CALCVM_FENNEL';
> 
> explain plan for select*from unnest(multiset[1,2]);
'column0'
'FennelToIteratorConverter'
'  FennelPullUncollectRel'
'    FennelCalcRel(expr#0=[{inputs}], expr#1=[$SLICE($t0)], EXPR$0=[$t1])'
'      FennelPullCollectRel'
'        FennelValuesRel(tuples=[[{ 1 }, { 2 }]])'
> explain plan for select*from unnest(multiset[1+2,3*4/5]);
'column0'
'FennelToIteratorConverter'
'  FennelPullUncollectRel'
'    FennelCalcRel(expr#0=[{inputs}], expr#1=[$SLICE($t0)], EXPR$0=[$t1])'
'      FennelPullCollectRel'
'        FennelMergeRel'
'          FennelCalcRel(expr#0=[{inputs}], expr#1=[3], EXPR$0=[$t1])'
'            FennelValuesRel(tuples=[[{ 0 }]])'
'          FennelCalcRel(expr#0=[{inputs}], expr#1=[2], EXPR$0=[$t1])'
'            FennelValuesRel(tuples=[[{ 0 }]])'
> 
> -- NOTE: at the time of adding this, aggregation was not fully supported
> -- so this test will break once we get that support.
> explain plan for select * from sales.emps where cardinality(multiset['abc'])=3;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER NOT NULL DEPTNO, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" GENDER, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CITY, INTEGER NOT NULL EMPID, INTEGER AGE, VARBINARY(50) PUBLIC_KEY, BOOLEAN SLACKER, BOOLEAN NOT NULL MANAGER) NOT NULL])'
'    FennelCartesianProductRel(leftouterjoin=[false])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])'
'      FennelBufferRel(inMemory=[false], multiPass=[true])'
'        FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[1]], filterTuple=[[3]], outputRowType=[RecordType(RecordType(CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL ROW_VALUE) NOT NULL MULTISET NOT NULL EXPR$0) NOT NULL])'
'          FennelPullCorrelatorRel'
'            FennelPullCollectRel'
'              FennelValuesRel(tuples=[[{ 'abc' }]])'
'            FennelCalcRel(expr#0..1=[{inputs}], expr#2=[CAST($t1):INTEGER NOT NULL], $f0=[$t2])'
'              FennelAggRel(group=[{0}], agg#0=[COUNT()])'
'                FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                  FennelPullUncollectRel'
'                    FennelCalcRel(expr#0=[{inputs}], expr#1=[$cor0], output$cor0=[$t1])'
'                      FennelValuesRel(tuples=[[{ 0 }]])'
> 
> explain plan for values element(multiset[5]);
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL EXPR$0) NOT NULL])'
'    FennelPullCorrelatorRel'
'      FennelPullCollectRel'
'        FennelValuesRel(tuples=[[{ 5 }]])'
'      FennelCalcRel(expr#0..1=[{inputs}], expr#2=[1], expr#3=[=($t1, $t2)], expr#4=[true], expr#5=['21000'], expr#6=[$throw($t5)], expr#7=[CASE($t3, $t4, $t6)], ROW_VALUE=[$t0], $condition=[$t7])'
'        FennelAggRel(group=[{0}], agg#0=[COUNT()])'
'          FennelSortRel(key=[[0]], discardDuplicates=[false])'
'            FennelPullUncollectRel'
'              FennelCalcRel(expr#0=[{inputs}], expr#1=[$cor0], output$cor0=[$t1])'
'                FennelValuesRel(tuples=[[{ 0 }]])'
> 
> explain plan for values multiset[1] multiset union multiset[2];
'column0'
'IterCalcRel(expr#0..2=[{inputs}], expr#3=[$SLICE($t2)], EXPR$0=[$t3])'
'  FennelToIteratorConverter'
'    FennelPullCorrelatorRel'
'      FennelCartesianProductRel(leftouterjoin=[false])'
'        FennelPullCollectRel'
'          FennelValuesRel(tuples=[[{ 1 }]])'
'        FennelPullCollectRel'
'          FennelValuesRel(tuples=[[{ 2 }]])'
'      FennelPullCollectRel'
'        FennelSortRel(key=[[0]], discardDuplicates=[true])'
'          FennelMergeRel'
'            FennelPullUncollectRel'
'              FennelCalcRel(expr#0=[{inputs}], expr#1=[$cor0], output$cor0=[$t1])'
'                FennelValuesRel(tuples=[[{ 0 }]])'
'            FennelPullUncollectRel'
'              FennelCalcRel(expr#0=[{inputs}], expr#1=[$cor1], output$cor1=[$t1])'
'                FennelValuesRel(tuples=[[{ 0 }]])'
> explain plan for values multiset[1] multiset union all multiset[2];
'column0'
'IterCalcRel(expr#0..2=[{inputs}], expr#3=[$SLICE($t2)], EXPR$0=[$t3])'
'  FennelToIteratorConverter'
'    FennelPullCorrelatorRel'
'      FennelCartesianProductRel(leftouterjoin=[false])'
'        FennelPullCollectRel'
'          FennelValuesRel(tuples=[[{ 1 }]])'
'        FennelPullCollectRel'
'          FennelValuesRel(tuples=[[{ 2 }]])'
'      FennelPullCollectRel'
'        FennelMergeRel'
'          FennelPullUncollectRel'
'            FennelCalcRel(expr#0=[{inputs}], expr#1=[$cor0], output$cor0=[$t1])'
'              FennelValuesRel(tuples=[[{ 0 }]])'
'          FennelPullUncollectRel'
'            FennelCalcRel(expr#0=[{inputs}], expr#1=[$cor1], output$cor1=[$t1])'
'              FennelValuesRel(tuples=[[{ 0 }]])'
> explain plan for values multiset[1] multiset union distinct multiset[2];
'column0'
'IterCalcRel(expr#0..2=[{inputs}], expr#3=[$SLICE($t2)], EXPR$0=[$t3])'
'  FennelToIteratorConverter'
'    FennelPullCorrelatorRel'
'      FennelCartesianProductRel(leftouterjoin=[false])'
'        FennelPullCollectRel'
'          FennelValuesRel(tuples=[[{ 1 }]])'
'        FennelPullCollectRel'
'          FennelValuesRel(tuples=[[{ 2 }]])'
'      FennelPullCollectRel'
'        FennelSortRel(key=[[0]], discardDuplicates=[true])'
'          FennelMergeRel'
'            FennelPullUncollectRel'
'              FennelCalcRel(expr#0=[{inputs}], expr#1=[$cor0], output$cor0=[$t1])'
'                FennelValuesRel(tuples=[[{ 0 }]])'
'            FennelPullUncollectRel'
'              FennelCalcRel(expr#0=[{inputs}], expr#1=[$cor1], output$cor1=[$t1])'
'                FennelValuesRel(tuples=[[{ 0 }]])'
> 
> -- shouldnt fail but does due to current non-intersect support
> -- explain plan for values multiset[1] multiset intersect multiset[2];
> -- explain plan for values multiset[1] multiset intersect all multiset[2];
> -- explain plan for values multiset[1] multiset intersect distinct multiset[2];
> 
> -- shouldnt fail but does due to current non-except support
> -- explain plan for values multiset[1] multiset except multiset[2];
> -- explain plan for values multiset[1] multiset except all multiset[2];
> -- explain plan for values multiset[1] multiset except distinct multiset[2];
> 
> -- test cast from multiset to multiset
> -- explain plan for select * from unnest(cast(multiset['1'] as double multiset));
> 
> -- test IS A SET
> -- explain plan for values multiset[1] is a set;
> 
> -- test MEMBER OF
> -- explain plan for values 632 MEMBER OF multiset[2];
> 
> 
> -- explain plan for select fusion(multiset[3]) from emps;
> -- explain plan for select collect(deptno) from emps;
> -- explain plan for select collect(deptno), fusion(multiset[3]) from emps;
> 
> 
> -- End multiset.sql
> 
> 
> !quit
