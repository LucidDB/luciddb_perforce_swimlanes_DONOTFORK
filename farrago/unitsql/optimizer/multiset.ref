0: jdbc:farrago:> -- $Id$
0: jdbc:farrago:> -- Test multiset related queries
0: jdbc:farrago:> 
0: jdbc:farrago:> set schema 'sales';
0: jdbc:farrago:> 
0: jdbc:farrago:> -- force usage of Fennel calculator
0: jdbc:farrago:> --alter system set "calcVirtualMachine" = 'CALCVM_FENNEL';
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for select*from unnest(multiset[1,2]);
+---------------------------------------------------------------------------+
|                                  column0                                  |
+---------------------------------------------------------------------------+
| FennelToIteratorConverter                                                 |
|   FennelPullUncollectRel                                                  |
|     FennelCalcRel(expr#0=[{inputs}], expr#1=[$SLICE($t0)], EXPR$0=[$t1])  |
|       FennelPullCollectRel                                                |
|         FennelValuesRel(tuples=[[{ 1 }, { 2 }]])                          |
+---------------------------------------------------------------------------+
0: jdbc:farrago:> explain plan for select*from unnest(multiset[1+2,3*4/5]);
+---------------------------------------------------------------------------+
|                                  column0                                  |
+---------------------------------------------------------------------------+
| FennelToIteratorConverter                                                 |
|   FennelPullUncollectRel                                                  |
|     FennelCalcRel(expr#0=[{inputs}], expr#1=[$SLICE($t0)], EXPR$0=[$t1])  |
|       FennelPullCollectRel                                                |
|         FennelMergeRel                                                    |
|           FennelCalcRel(expr#0=[{inputs}], expr#1=[3], EXPR$0=[$t1])      |
|             FennelValuesRel(tuples=[[{ 0 }]])                             |
|           FennelCalcRel(expr#0=[{inputs}], expr#1=[2], EXPR$0=[$t1])      |
|             FennelValuesRel(tuples=[[{ 0 }]])                             |
+---------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- NOTE: at the time of adding this, aggregation was not fully supported
0: jdbc:farrago:> -- so this test will break once we get that support.
0: jdbc:farrago:> explain plan for select * from sales.emps where cardinality(multiset['abc'])=3;
+---------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                      column0                                                                      |
+---------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..10=[{inputs}], proj#0..9=[{exprs}])                                                                                           |
|   FennelToIteratorConverter                                                                                                                       |
|     FennelCartesianProductRel(leftouterjoin=[false])                                                                                              |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])  |
|       FennelCalcRel(expr#0..1=[{inputs}], expr#2=[3], expr#3=[=($t1, $t2)], EXPR$0=[$t0], $condition=[$t3])                                       |
|         FennelPullCorrelatorRel                                                                                                                   |
|           FennelPullCollectRel                                                                                                                    |
|             FennelValuesRel(tuples=[[{ _ISO-8859-1'abc' }]])                                                                                      |
|           FennelCalcRel(expr#0..1=[{inputs}], expr#2=[CAST($t1):INTEGER NOT NULL], $f0=[$t2])                                                     |
|             FennelAggRel(groupCount=[1], agg#0=[COUNT()])                                                                                         |
|               FennelSortRel(key=[[0]], discardDuplicates=[false])                                                                                 |
|                 FennelPullUncollectRel                                                                                                            |
|                   FennelCalcRel(expr#0=[{inputs}], expr#1=[$cor0], output$cor0=[$t1])                                                             |
|                     FennelValuesRel(tuples=[[{ 0 }]])                                                                                             |
+---------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for values element(multiset[5]);
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                     column0                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..1=[{inputs}], EXPR$0=[$t1])                                                                                                                                                                 |
|   FennelToIteratorConverter                                                                                                                                                                                     |
|     FennelPullCorrelatorRel                                                                                                                                                                                     |
|       FennelPullCollectRel                                                                                                                                                                                      |
|         FennelValuesRel(tuples=[[{ 5 }]])                                                                                                                                                                       |
|       FennelCalcRel(expr#0..1=[{inputs}], expr#2=[1], expr#3=[=($t1, $t2)], expr#4=[true], expr#5=[_ISO-8859-1'21000'], expr#6=[$throw($t5)], expr#7=[CASE($t3, $t4, $t6)], ROW_VALUE=[$t0], $condition=[$t7])  |
|         FennelAggRel(groupCount=[1], agg#0=[COUNT()])                                                                                                                                                           |
|           FennelSortRel(key=[[0]], discardDuplicates=[false])                                                                                                                                                   |
|             FennelPullUncollectRel                                                                                                                                                                              |
|               FennelCalcRel(expr#0=[{inputs}], expr#1=[$cor0], output$cor0=[$t1])                                                                                                                               |
|                 FennelValuesRel(tuples=[[{ 0 }]])                                                                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for values multiset[1] multiset union multiset[2];
+------------------------------------------------------------------------------------+
|                                      column0                                       |
+------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..2=[{inputs}], expr#3=[$SLICE($t2)], EXPR$0=[$t3])              |
|   FennelToIteratorConverter                                                        |
|     FennelPullCorrelatorRel                                                        |
|       FennelCartesianProductRel(leftouterjoin=[false])                             |
|         FennelPullCollectRel                                                       |
|           FennelValuesRel(tuples=[[{ 1 }]])                                        |
|         FennelPullCollectRel                                                       |
|           FennelValuesRel(tuples=[[{ 2 }]])                                        |
|       FennelPullCollectRel                                                         |
|         FennelSortRel(key=[[0]], discardDuplicates=[true])                         |
|           FennelMergeRel                                                           |
|             FennelPullUncollectRel                                                 |
|               FennelCalcRel(expr#0=[{inputs}], expr#1=[$cor0], output$cor0=[$t1])  |
|                 FennelValuesRel(tuples=[[{ 0 }]])                                  |
|             FennelPullUncollectRel                                                 |
|               FennelCalcRel(expr#0=[{inputs}], expr#1=[$cor1], output$cor1=[$t1])  |
|                 FennelValuesRel(tuples=[[{ 0 }]])                                  |
+------------------------------------------------------------------------------------+
0: jdbc:farrago:> explain plan for values multiset[1] multiset union all multiset[2];
+----------------------------------------------------------------------------------+
|                                     column0                                      |
+----------------------------------------------------------------------------------+
| IterCalcRel(expr#0..2=[{inputs}], expr#3=[$SLICE($t2)], EXPR$0=[$t3])            |
|   FennelToIteratorConverter                                                      |
|     FennelPullCorrelatorRel                                                      |
|       FennelCartesianProductRel(leftouterjoin=[false])                           |
|         FennelPullCollectRel                                                     |
|           FennelValuesRel(tuples=[[{ 1 }]])                                      |
|         FennelPullCollectRel                                                     |
|           FennelValuesRel(tuples=[[{ 2 }]])                                      |
|       FennelPullCollectRel                                                       |
|         FennelMergeRel                                                           |
|           FennelPullUncollectRel                                                 |
|             FennelCalcRel(expr#0=[{inputs}], expr#1=[$cor0], output$cor0=[$t1])  |
|               FennelValuesRel(tuples=[[{ 0 }]])                                  |
|           FennelPullUncollectRel                                                 |
|             FennelCalcRel(expr#0=[{inputs}], expr#1=[$cor1], output$cor1=[$t1])  |
|               FennelValuesRel(tuples=[[{ 0 }]])                                  |
+----------------------------------------------------------------------------------+
0: jdbc:farrago:> explain plan for values multiset[1] multiset union distinct multiset[2];
+------------------------------------------------------------------------------------+
|                                      column0                                       |
+------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..2=[{inputs}], expr#3=[$SLICE($t2)], EXPR$0=[$t3])              |
|   FennelToIteratorConverter                                                        |
|     FennelPullCorrelatorRel                                                        |
|       FennelCartesianProductRel(leftouterjoin=[false])                             |
|         FennelPullCollectRel                                                       |
|           FennelValuesRel(tuples=[[{ 1 }]])                                        |
|         FennelPullCollectRel                                                       |
|           FennelValuesRel(tuples=[[{ 2 }]])                                        |
|       FennelPullCollectRel                                                         |
|         FennelSortRel(key=[[0]], discardDuplicates=[true])                         |
|           FennelMergeRel                                                           |
|             FennelPullUncollectRel                                                 |
|               FennelCalcRel(expr#0=[{inputs}], expr#1=[$cor0], output$cor0=[$t1])  |
|                 FennelValuesRel(tuples=[[{ 0 }]])                                  |
|             FennelPullUncollectRel                                                 |
|               FennelCalcRel(expr#0=[{inputs}], expr#1=[$cor1], output$cor1=[$t1])  |
|                 FennelValuesRel(tuples=[[{ 0 }]])                                  |
+------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- shouldnt fail but does due to current non-intersect support
0: jdbc:farrago:> -- explain plan for values multiset[1] multiset intersect multiset[2];
0: jdbc:farrago:> -- explain plan for values multiset[1] multiset intersect all multiset[2];
0: jdbc:farrago:> -- explain plan for values multiset[1] multiset intersect distinct multiset[2];
0: jdbc:farrago:> 
0: jdbc:farrago:> -- shouldnt fail but does due to current non-except support
0: jdbc:farrago:> -- explain plan for values multiset[1] multiset except multiset[2];
0: jdbc:farrago:> -- explain plan for values multiset[1] multiset except all multiset[2];
0: jdbc:farrago:> -- explain plan for values multiset[1] multiset except distinct multiset[2];
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test cast from multiset to multiset
0: jdbc:farrago:> -- explain plan for select * from unnest(cast(multiset['1'] as double multiset));
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test IS A SET
0: jdbc:farrago:> -- explain plan for values multiset[1] is a set;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test MEMBER OF
0: jdbc:farrago:> -- explain plan for values 632 MEMBER OF multiset[2];
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> -- explain plan for select fusion(multiset[3]) from emps;
0: jdbc:farrago:> -- explain plan for select collect(deptno) from emps;
0: jdbc:farrago:> -- explain plan for select collect(deptno), fusion(multiset[3]) from emps;
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> !quit
