0: jdbc:farrago:> -- $Id: //open/dev/farrago/unitsql/optimizer/aggDistinct.sql#1 $
0: jdbc:farrago:> -- Test distinct aggregate queries
0: jdbc:farrago:> 
0: jdbc:farrago:> set schema 'sales';
0: jdbc:farrago:> 
0: jdbc:farrago:> -- force usage of Fennel calculator
0: jdbc:farrago:> alter system set "calcVirtualMachine" = 'CALCVM_FENNEL';
0: jdbc:farrago:> 
0: jdbc:farrago:> select count(distinct city) from emps;
+---------+
| EXPR$0  |
+---------+
| 2       |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select count(distinct city) from emps where empno > 100000;
+---------+
| EXPR$0  |
+---------+
| 0       |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- mixed distinct and non-distinct aggs
0: jdbc:farrago:> select sum(distinct empno), sum(empno) from emps;
+---------+---------+
| EXPR$0  | EXPR$1  |
+---------+---------+
| 330     | 440     |
+---------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- mixed distinct and non-distinct aggs
0: jdbc:farrago:> select count(distinct manager), count(distinct gender),
. . . . . . . . >    sum(distinct empno), sum(distinct empno), sum(empno) from emps;
+---------+---------+---------+---------+---------+
| EXPR$0  | EXPR$1  | EXPR$2  | EXPR$3  | EXPR$4  |
+---------+---------+---------+---------+---------+
| 2       | 2       | 330     | 330     | 440     |
+---------+---------+---------+---------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- expressions of distinct-aggs of expressions
0: jdbc:farrago:> select count(distinct sal + empno) + deptno, sum(distinct sal) + deptno
. . . . . . . . >  from emps group by deptno;
Error: From line 1, column 23 to line 1, column 25: Unknown identifier 'SAL' (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> ------------
0: jdbc:farrago:> -- group bys
0: jdbc:farrago:> ------------
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan with type for
. . . . . . . . > select deptno, count(distinct empno) from emps group by deptno;
+---------------------------+
|          column0          |
+---------------------------+
| DEPTNO INTEGER NOT NULL,  |
| EXPR$1 BIGINT NOT NULL    |
+---------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select deptno, count(distinct empno) from emps group by deptno;
+---------+---------+
| DEPTNO  | EXPR$1  |
+---------+---------+
| 10      | 1       |
| 20      | 2       |
| 40      | 1       |
+---------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- group by boolean, nullable key
0: jdbc:farrago:> explain plan with type for
. . . . . . . . > select slacker, count(distinct deptno) from emps
. . . . . . . . >  group by slacker order by slacker;
+-------------------------+
|         column0         |
+-------------------------+
| SLACKER BOOLEAN,        |
| EXPR$1 BIGINT NOT NULL  |
+-------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select slacker, count(distinct deptno) from emps
. . . . . . . . >  group by slacker order by slacker;
+----------+---------+
| SLACKER  | EXPR$1  |
+----------+---------+
|          | 1       |
| false    | 1       |
| true     | 1       |
+----------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- Test where input stream is empty
0: jdbc:farrago:> select deptno, count(distinct empno), count(*) from emps
. . . . . . . . >  where deptno < 0 group by deptno;
+---------+---------+---------+
| DEPTNO  | EXPR$1  | EXPR$2  |
+---------+---------+---------+
+---------+---------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- group, but don't project group column
0: jdbc:farrago:> select count(distinct e.slacker and e.manager) from emps as e group by deptno;
+---------+
| EXPR$0  |
+---------+
| 1       |
| 1       |
| 1       |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- query without any non-distinct aggs
0: jdbc:farrago:> select deptno, sum(distinct age), count(distinct gender)
. . . . . . . . > from emps
. . . . . . . . > group by deptno;
+---------+---------+---------+
| DEPTNO  | EXPR$1  | EXPR$2  |
+---------+---------+---------+
| 10      | 25      | 0       |
| 20      | 130     | 2       |
| 40      |         | 1       |
+---------+---------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- this is what the previous query expands to (make sure it returns the same)
0: jdbc:farrago:> SELECT de.deptno, adage.sum_age, adgender.count_gender
. . . . . . . . > FROM (
. . . . . . . . >    SELECT deptno
. . . . . . . . >    FROM Emps AS e
. . . . . . . . >    GROUP BY deptno) AS de
. . . . . . . . > JOIN (
. . . . . . . . >    SELECT deptno, COUNT(gender) AS count_gender
. . . . . . . . >    FROM (
. . . . . . . . >      SELECT DISTINCT deptno, gender
. . . . . . . . >      FROM Emps) AS dgender
. . . . . . . . >    GROUP BY deptno) AS adgender
. . . . . . . . > ON de.deptno = adgender.deptno
. . . . . . . . > JOIN (
. . . . . . . . >    SELECT deptno, SUM(age) AS sum_age
. . . . . . . . >    FROM (
. . . . . . . . >       SELECT DISTINCT deptno, age
. . . . . . . . >       FROM Emps) AS dage
. . . . . . . . >       GROUP BY deptno) AS adage
. . . . . . . . > ON de.deptno = adage.deptno;
+---------+----------+---------------+
| DEPTNO  | SUM_AGE  | COUNT_GENDER  |
+---------+----------+---------------+
| 10      | 25       | 0             |
| 20      | 130      | 2             |
| 40      |          | 1             |
+---------+----------+---------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> --------
0: jdbc:farrago:> -- joins
0: jdbc:farrago:> --------
0: jdbc:farrago:> 
0: jdbc:farrago:> -- cartesian
0: jdbc:farrago:> select count(distinct emps.empno) from emps as e, emps;
+---------+
| EXPR$0  |
+---------+
| 3       |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select count(distinct emps.empno + e.empno) from emps as e, emps;
+---------+
| EXPR$0  |
+---------+
| 5       |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- count of a nullable column is not null
0: jdbc:farrago:> explain plan with type for
. . . . . . . . > select d.name, count(distinct e.empid), e.empid
. . . . . . . . > from depts as d join emps as e on e.deptno = d.deptno
. . . . . . . . > group by d.name, e.empid;
+--------------------------------------------------------------------------------------------+
|                                          column0                                           |
+--------------------------------------------------------------------------------------------+
| NAME VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL,  |
| EXPR$1 BIGINT NOT NULL,                                                                    |
| EMPID INTEGER NOT NULL                                                                     |
+--------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select d.name, count(distinct e.empid), count(distinct e.gender), e.empid
. . . . . . . . > from depts as d join emps as e on e.deptno = d.deptno
. . . . . . . . > group by d.name, e.empid;
+------------+---------+---------+--------+
|    NAME    | EXPR$1  | EXPR$2  | EMPID  |
+------------+---------+---------+--------+
| Marketing  | 1       | 1       | 1      |
| Marketing  | 1       | 1       | 3      |
| Sales      | 1       | 0       | 30     |
+------------+---------+---------+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select d.name, count(distinct e.empno), count(distinct e.slacker or e.manager)
. . . . . . . . > from emps as e join depts as d on e.deptno = d.deptno
. . . . . . . . > group by d.name;
+------------+---------+---------+
|    NAME    | EXPR$1  | EXPR$2  |
+------------+---------+---------+
| Marketing  | 2       | 1       |
| Sales      | 1       | 1       |
+------------+---------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> -- ------------
0: jdbc:farrago:> -- verify plans
0: jdbc:farrago:> -- ------------
0: jdbc:farrago:> 
0: jdbc:farrago:> !set outputformat csv
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select count(distinct city) from emps;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[EXPR$0]])'
'    FennelAggRel(groupCount=[0], agg#0=[COUNT(0)])'
'      FennelSortRel(key=[[0]], discardDuplicates=[true])'
'        FennelRenameRel(fieldNames=[[$f0]])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[4]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select count(distinct city) from emps where empno > 100000;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[EXPR$0]])'
'    FennelAggRel(groupCount=[0], agg#0=[COUNT(0)])'
'      FennelSortRel(key=[[0]], discardDuplicates=[true])'
'        FennelCalcRel(expr#0..1=[{inputs}], expr#2=[100000], expr#3=[>($t0, $t2)], $f0=[$t1], $condition=[$t3])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 4]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select count(distinct manager), count(distinct gender),
. . . . . . . . >    sum(distinct empno), sum(distinct empno), sum(empno) from emps;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[EXPR$0, EXPR$1, EXPR$2, EXPR$3, EXPR$4]])'
'    FennelCalcRel(expr#0..4=[{inputs}], $f0=[$t1], $f1=[$t2], $f2=[$t3], $f3=[$t4], $f4=[$t0])'
'      FennelCartesianProductRel(leftouterjoin=[false])'
'        FennelCartesianProductRel(leftouterjoin=[false])'
'          FennelCartesianProductRel(leftouterjoin=[false])'
'            FennelAggRel(groupCount=[0], agg#0=[SUM(2)])'
'              FennelRenameRel(fieldNames=[[$f0, $f1, $f2]])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[9, 3, 0]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
'            FennelAggRel(groupCount=[0], agg#0=[COUNT(0)])'
'              FennelSortRel(key=[[0]], discardDuplicates=[true])'
'                FennelCalcRel(expr#0..2=[{inputs}], $f0=[$t0])'
'                  FennelRenameRel(fieldNames=[[$f0, $f1, $f2]])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[9, 3, 0]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
'          FennelAggRel(groupCount=[0], agg#0=[COUNT(0)])'
'            FennelSortRel(key=[[0]], discardDuplicates=[true])'
'              FennelCalcRel(expr#0..2=[{inputs}], $f1=[$t1])'
'                FennelRenameRel(fieldNames=[[$f0, $f1, $f2]])'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[9, 3, 0]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
'        FennelAggRel(groupCount=[0], agg#0=[SUM(0)], agg#1=[SUM(0)])'
'          FennelSortRel(key=[[0]], discardDuplicates=[true])'
'            FennelCalcRel(expr#0..2=[{inputs}], $f2=[$t2])'
'              FennelRenameRel(fieldNames=[[$f0, $f1, $f2]])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[9, 3, 0]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select count(distinct sal + empno) + deptno, sum(distinct sal) + deptno
. . . . . . . . >  from emps group by deptno;
Error: From line 1, column 40 to line 1, column 42: Unknown identifier 'SAL' (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- verify plans for group bys
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select deptno, count(distinct empno) from emps group by deptno;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[DEPTNO, EXPR$1]])'
'    FennelAggRel(groupCount=[1], agg#0=[COUNT(1)])'
'      FennelSortRel(key=[[0]], discardDuplicates=[false])'
'        FennelSortRel(key=[[0, 1]], discardDuplicates=[true])'
'          FennelRenameRel(fieldNames=[[$f0, $f1]])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2, 0]], index=[EMPS_UX], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select slacker, count(distinct deptno) from emps
. . . . . . . . >  group by slacker order by slacker;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelRenameRel(fieldNames=[[SLACKER, EXPR$1]])'
'      FennelAggRel(groupCount=[1], agg#0=[COUNT(1)])'
'        FennelSortRel(key=[[0]], discardDuplicates=[false])'
'          FennelSortRel(key=[[0, 1]], discardDuplicates=[true])'
'            FennelRenameRel(fieldNames=[[$f0, $f1]])'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[8, 2]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select deptno, count(distinct empno), count(*) from emps
. . . . . . . . >  where deptno < 0 group by deptno;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[DEPTNO, EXPR$1, EXPR$2]])'
'    FennelCalcRel(expr#0..3=[{inputs}], expr#4=[=($t0, $t2)], $f0=[$t0], $f1=[$t3], $f2=[$t1], $condition=[$t4])'
'      FennelCartesianProductRel(leftouterjoin=[false])'
'        FennelAggRel(groupCount=[1], agg#0=[COUNT()])'
'          FennelSortRel(key=[[0]], discardDuplicates=[false])'
'            FennelCalcRel(expr#0..9=[{inputs}], $f0=[$t2], $f1=[$t0])'
'              FtrsIndexSearchRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], uniqueKey=[false], preserveOrder=[false], outer=[false], inputKeyProj=[[1, 3]], inputJoinProj=[[]], inputDirectiveProj=[[0, 2]])'
'                FennelValuesRel(tuples=[[{ '-', null, ')', 0 }]])'
'        FennelAggRel(groupCount=[1], agg#0=[COUNT(1)])'
'          FennelSortRel(key=[[0]], discardDuplicates=[false])'
'            FennelSortRel(key=[[0, 1]], discardDuplicates=[true])'
'              FennelCalcRel(expr#0..9=[{inputs}], $f0=[$t2], $f1=[$t0])'
'                FtrsIndexSearchRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], uniqueKey=[false], preserveOrder=[false], outer=[false], inputKeyProj=[[1, 3]], inputJoinProj=[[]], inputDirectiveProj=[[0, 2]])'
'                  FennelValuesRel(tuples=[[{ '-', null, ')', 0 }]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select count(distinct e.slacker and e.manager) from emps as e group by deptno;
'column0'
'FennelToIteratorConverter'
'  FennelCalcRel(expr#0..1=[{inputs}], EXPR$0=[$t1])'
'    FennelAggRel(groupCount=[1], agg#0=[COUNT(1)])'
'      FennelSortRel(key=[[0]], discardDuplicates=[false])'
'        FennelSortRel(key=[[0, 1]], discardDuplicates=[true])'
'          FennelCalcRel(expr#0..9=[{inputs}], expr#10=[AND($t8, $t9)], $f0=[$t2], $f1=[$t10])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select deptno, sum(distinct age), count(distinct gender)
. . . . . . . . > from emps
. . . . . . . . > group by deptno;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[DEPTNO, EXPR$1, EXPR$2]])'
'    FennelCalcRel(expr#0..3=[{inputs}], expr#4=[=($t0, $t2)], proj#0..1=[{exprs}], $f2=[$t3], $condition=[$t4])'
'      FennelCartesianProductRel(leftouterjoin=[false])'
'        FennelCalcRel(expr#0..2=[{inputs}], expr#3=[=($t0, $t1)], $f0=[$t0], $f1=[$t2], $condition=[$t3])'
'          FennelCartesianProductRel(leftouterjoin=[false])'
'            FennelAggRel(groupCount=[1])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                FennelRenameRel(fieldNames=[[$f0, $f1, $f2]])'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2, 6, 3]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
'            FennelAggRel(groupCount=[1], agg#0=[SUM(1)])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                FennelSortRel(key=[[0, 1]], discardDuplicates=[true])'
'                  FennelCalcRel(expr#0..2=[{inputs}], proj#0..1=[{exprs}])'
'                    FennelRenameRel(fieldNames=[[$f0, $f1, $f2]])'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2, 6, 3]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
'        FennelAggRel(groupCount=[1], agg#0=[COUNT(1)])'
'          FennelSortRel(key=[[0]], discardDuplicates=[false])'
'            FennelSortRel(key=[[0, 1]], discardDuplicates=[true])'
'              FennelCalcRel(expr#0..2=[{inputs}], $f0=[$t0], $f2=[$t2])'
'                FennelRenameRel(fieldNames=[[$f0, $f1, $f2]])'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2, 6, 3]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- verify plans for joins
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select count(distinct emps.empno) from emps as e, emps;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[EXPR$0]])'
'    FennelAggRel(groupCount=[0], agg#0=[COUNT(0)])'
'      FennelSortRel(key=[[0]], discardDuplicates=[true])'
'        FennelCalcRel(expr#0..19=[{inputs}], $f0=[$t10])'
'          FennelCartesianProductRel(leftouterjoin=[false])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select count(distinct emps.empno + e.empno) from emps as e, emps;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[EXPR$0]])'
'    FennelAggRel(groupCount=[0], agg#0=[COUNT(0)])'
'      FennelSortRel(key=[[0]], discardDuplicates=[true])'
'        FennelCalcRel(expr#0..1=[{inputs}], expr#2=[+($t1, $t0)], $f0=[$t2])'
'          FennelCartesianProductRel(leftouterjoin=[false])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select d.name, count(distinct e.empid), e.empid
. . . . . . . . > from depts as d join emps as e on e.deptno = d.deptno
. . . . . . . . > group by d.name, e.empid;
'column0'
'FennelToIteratorConverter'
'  FennelCalcRel(expr#0..2=[{inputs}], NAME=[$t0], EXPR$1=[$t2], EMPID=[$t1])'
'    FennelAggRel(groupCount=[2], agg#0=[COUNT(1)])'
'      FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'        FennelSortRel(key=[[0, 1]], discardDuplicates=[true])'
'          FennelCalcRel(expr#0..3=[{inputs}], expr#4=[=($t2, $t0)], $f0=[$t1], $f1=[$t3], $condition=[$t4])'
'            FennelCartesianProductRel(leftouterjoin=[false])'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2, 5]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$UNIQUE_KEY$EMPID], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select d.name, count(distinct e.empno), count(distinct e.slacker or e.manager)
. . . . . . . . > from emps as e join depts as d on e.deptno = d.deptno
. . . . . . . . > group by d.name;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[NAME, EXPR$1, EXPR$2]])'
'    FennelCalcRel(expr#0..3=[{inputs}], expr#4=[=($t0, $t2)], proj#0..1=[{exprs}], $f2=[$t3], $condition=[$t4])'
'      FennelCartesianProductRel(leftouterjoin=[false])'
'        FennelCalcRel(expr#0..2=[{inputs}], expr#3=[=($t0, $t1)], $f0=[$t0], $f1=[$t2], $condition=[$t3])'
'          FennelCartesianProductRel(leftouterjoin=[false])'
'            FennelAggRel(groupCount=[1])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                FennelCalcRel(expr#0..11=[{inputs}], expr#12=[OR($t8, $t9)], $f0=[$t11], $f1=[$t0], $f2=[$t12])'
'                  FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], uniqueKey=[true], preserveOrder=[false], outer=[false], inputKeyProj=[[2]], inputJoinProj=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], inputDirectiveProj=[[]])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
'            FennelAggRel(groupCount=[1], agg#0=[COUNT(1)])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                FennelSortRel(key=[[0, 1]], discardDuplicates=[true])'
'                  FennelCalcRel(expr#0..11=[{inputs}], expr#12=[OR($t8, $t9)], $f0=[$t11], $f1=[$t0])'
'                    FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], uniqueKey=[true], preserveOrder=[false], outer=[false], inputKeyProj=[[2]], inputJoinProj=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], inputDirectiveProj=[[]])'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
'        FennelAggRel(groupCount=[1], agg#0=[COUNT(1)])'
'          FennelSortRel(key=[[0]], discardDuplicates=[false])'
'            FennelSortRel(key=[[0, 1]], discardDuplicates=[true])'
'              FennelCalcRel(expr#0..11=[{inputs}], expr#12=[OR($t8, $t9)], $f0=[$t11], $f2=[$t12])'
'                FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], uniqueKey=[true], preserveOrder=[false], outer=[false], inputKeyProj=[[2]], inputJoinProj=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], inputDirectiveProj=[[]])'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- End aggDistinct.sql
0: jdbc:farrago:> 
0: jdbc:farrago:> !quit
