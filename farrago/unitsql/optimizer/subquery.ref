0: jdbc:farrago:> !set force on
0: jdbc:farrago:> 
0: jdbc:farrago:> set schema 'sales';
0: jdbc:farrago:> 
0: jdbc:farrago:> alter system set "calcVirtualMachine" = 'CALCVM_JAVA';
0: jdbc:farrago:> alter session implementation set jar sys_boot.sys_boot.luciddb_plugin;
0: jdbc:farrago:> 
0: jdbc:farrago:> create table depts2 (deptno integer, name varchar(20));
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 1.1 uncorrelated IN
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name from emps where deptno in (select deptno from depts) order by name;
+------------------------------------------------------------+
|                          column0                           |
+------------------------------------------------------------+
| SortRel(sort0=[$0], dir0=[Ascending])                      |
|   ProjectRel(NAME=[$1])                                    |
|     JoinRel(condition=[=($2, $10)], joinType=[inner])      |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])       |
|       AggregateRel(groupCount=[1])                         |
|         ProjectRel(DEPTNO=[$0])                            |
|           TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])  |
+------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name from emps where deptno in (select deptno from depts) order by name;
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                column0                                                                                 |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                              |
|   FennelSortRel(key=[[0]], discardDuplicates=[false])                                                                                                                  |
|     FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME) NOT NULL])  |
|       LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFTSEMI])                                                                                                 |
|         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])                                                  |
|         FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                 |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name from emps where deptno in (select deptno from depts) order by name;
+--------+
|  NAME  |
+--------+
| Eric   |
| Fred   |
| Wilma  |
+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name from emps
. . . . . . . . > where (empno, deptno) in (select emps.empno, depts.deptno from emps, depts)
. . . . . . . . > order by name;
+-------------------------------------------------------------------------+
|                                 column0                                 |
+-------------------------------------------------------------------------+
| SortRel(sort0=[$0], dir0=[Ascending])                                   |
|   ProjectRel(NAME=[$1])                                                 |
|     JoinRel(condition=[AND(=($0, $10), =($2, $11))], joinType=[inner])  |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                    |
|       AggregateRel(groupCount=[2])                                      |
|         ProjectRel(EMPNO=[$0], DEPTNO=[$10])                            |
|           JoinRel(condition=[true], joinType=[inner])                   |
|             TableAccessRel(table=[[LOCALDB, SALES, EMPS]])              |
|             TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])             |
+-------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name from emps
. . . . . . . . > where (empno, deptno) in (select emps.empno, depts.deptno from emps, depts)
. . . . . . . . > order by name;
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                column0                                                                                 |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                              |
|   FennelSortRel(key=[[0]], discardDuplicates=[false])                                                                                                                  |
|     FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME) NOT NULL])  |
|       LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[0, 2]], joinType=[RIGHTSEMI])                                                                                          |
|         FennelCartesianProductRel(leftouterjoin=[false])                                                                                                               |
|           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                                   |
|           FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])               |
|         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2]], index=[EMPS_UX], preserveOrder=[false])                                               |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name from emps
. . . . . . . . > where (empno, deptno) in (select emps.empno, depts.deptno from emps, depts)
. . . . . . . . > order by name;
+--------+
|  NAME  |
+--------+
| Eric   |
| Fred   |
| Wilma  |
+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 1.2 correlated IN:
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name from emps
. . . . . . . . > where deptno in (select deptno from depts where emps.empno < depts.deptno*10)
. . . . . . . . > order by name;
+---------------------------------------------------------------------------------------------+
|                                           column0                                           |
+---------------------------------------------------------------------------------------------+
| SortRel(sort0=[$0], dir0=[Ascending])                                                       |
|   ProjectRel(NAME=[$1])                                                                     |
|     CorrelatorRel(condition=[=($2, $10)], joinType=[inner], correlations=[[var0=offset0]])  |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                        |
|       AggregateRel(groupCount=[1])                                                          |
|         ProjectRel(DEPTNO=[$0])                                                             |
|           FilterRel(condition=[<($cor0.EMPNO, *($0, 10))])                                  |
|             TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                 |
+---------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name from emps
. . . . . . . . > where deptno in (select deptno from depts where emps.empno < depts.deptno*10)
. . . . . . . . > order by name;
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                column0                                                                                 |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                              |
|   FennelSortRel(key=[[0]], discardDuplicates=[false])                                                                                                                  |
|     FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME) NOT NULL])  |
|       LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[2, 0]], joinType=[RIGHTSEMI])                                                                                          |
|         IteratorToFennelConverter                                                                                                                                      |
|           IterCalcRel(expr#0..1=[{inputs}], expr#2=[10], expr#3=[*($t0, $t2)], expr#4=[<($t1, $t3)], proj#0..1=[{exprs}], $condition=[$t4])                            |
|             FennelToIteratorConverter                                                                                                                                  |
|               FennelCartesianProductRel(leftouterjoin=[false])                                                                                                         |
|                 FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])         |
|                 FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                    |
|                   LhxAggRel(groupCount=[1])                                                                                                                            |
|                     FennelRenameRel(fieldNames=[[$f0]])                                                                                                                |
|                       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                       |
|         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2]], index=[EMPS_UX], preserveOrder=[false])                                               |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name from emps
. . . . . . . . > where deptno in (select deptno from depts where emps.empno < depts.deptno*10)
. . . . . . . . > order by name;
+--------+
|  NAME  |
+--------+
| Eric   |
| Wilma  |
+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- no table qualifier is necessary if correlated reference is not ambiguous
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name from emps
. . . . . . . . > where deptno in (select deptno from depts where empno < depts.deptno*10)
. . . . . . . . > order by name;
+---------------------------------------------------------------------------------------------+
|                                           column0                                           |
+---------------------------------------------------------------------------------------------+
| SortRel(sort0=[$0], dir0=[Ascending])                                                       |
|   ProjectRel(NAME=[$1])                                                                     |
|     CorrelatorRel(condition=[=($2, $10)], joinType=[inner], correlations=[[var0=offset0]])  |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                        |
|       AggregateRel(groupCount=[1])                                                          |
|         ProjectRel(DEPTNO=[$0])                                                             |
|           FilterRel(condition=[<($cor0.EMPNO, *($0, 10))])                                  |
|             TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                 |
+---------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name from emps
. . . . . . . . > where deptno in (select deptno from depts where empno < deptno*10)
. . . . . . . . > order by name;
+---------------------------------------------------------------------------------------------+
|                                           column0                                           |
+---------------------------------------------------------------------------------------------+
| SortRel(sort0=[$0], dir0=[Ascending])                                                       |
|   ProjectRel(NAME=[$1])                                                                     |
|     CorrelatorRel(condition=[=($2, $10)], joinType=[inner], correlations=[[var0=offset0]])  |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                        |
|       AggregateRel(groupCount=[1])                                                          |
|         ProjectRel(DEPTNO=[$0])                                                             |
|           FilterRel(condition=[<($cor0.EMPNO, *($0, 10))])                                  |
|             TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                 |
+---------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 1.2 is a special case of correlated exists. Equivalent to:
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name from emps where
. . . . . . . . > exists (select deptno from depts 
. . . . . . . . >         where emps.empno < depts.deptno*10 and depts.deptno = emps.deptno)
. . . . . . . . > order by name;
+------------------------------------------------------------------------------------------------------+
|                                               column0                                                |
+------------------------------------------------------------------------------------------------------+
| SortRel(sort0=[$0], dir0=[Ascending])                                                                |
|   ProjectRel(NAME=[$1])                                                                              |
|     FilterRel(condition=[IS TRUE($10)])                                                              |
|       CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset0, var1=offset2]])  |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                               |
|         AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                                 |
|           ProjectRel($f0=[true])                                                                     |
|             ProjectRel(DEPTNO=[$0])                                                                  |
|               FilterRel(condition=[AND(<($cor0.EMPNO, *($0, 10)), =($0, $cor1.DEPTNO))])             |
|                 TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                      |
+------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name from emps where
. . . . . . . . > exists (select deptno from depts 
. . . . . . . . >         where emps.empno < depts.deptno*10 and depts.deptno = emps.deptno)
. . . . . . . . > order by name;
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                column0                                                                                                                 |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                                                              |
|   FennelSortRel(key=[[0]], discardDuplicates=[false])                                                                                                                                                                                  |
|     FennelReshapeRel(projection=[[1]], filterOp=[COMP_EQ], filterOrdinals=[[5]], filterTuple=[[true]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME) NOT NULL])  |
|       LhxJoinRel(leftKeys=[[0, 2]], rightKeys=[[0, 1]], joinType=[LEFT])                                                                                                                                                               |
|         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2]], index=[EMPS_UX], preserveOrder=[false])                                                                                                               |
|         LhxAggRel(groupCount=[2], agg#0=[MIN(2)])                                                                                                                                                                                      |
|           IteratorToFennelConverter                                                                                                                                                                                                    |
|             IterCalcRel(expr#0..2=[{inputs}], expr#3=[10], expr#4=[*($t2, $t3)], expr#5=[<($t0, $t4)], expr#6=[true], proj#0..1=[{exprs}], $f0=[$t6], $condition=[$t5])                                                                |
|               FennelToIteratorConverter                                                                                                                                                                                                |
|                 LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])                                                                                                                                                          |
|                   LhxAggRel(groupCount=[2])                                                                                                                                                                                            |
|                     FennelRenameRel(fieldNames=[[$f0, $f1]])                                                                                                                                                                           |
|                       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                                                                    |
|                   FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                                                                       |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name from emps where
. . . . . . . . > exists (select deptno from depts 
. . . . . . . . >         where emps.empno < depts.deptno*10 and depts.deptno = emps.deptno)
. . . . . . . . > order by name;
+--------+
|  NAME  |
+--------+
| Eric   |
| Wilma  |
+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 1.3 NOT IN
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name from emps where deptno not in (10, 20);
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                     column0                                                                                      |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..1=[{inputs}], expr#2=[10], expr#3=[=($t1, $t2)], expr#4=[20], expr#5=[=($t1, $t4)], expr#6=[OR($t3, $t5)], expr#7=[NOT($t6)], NAME=[$t0], $condition=[$t7])  |
|   FennelToIteratorConverter                                                                                                                                                      |
|     FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])                                                                |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name from emps where deptno not in (10, 20) order by name;
+-------+
| NAME  |
+-------+
| John  |
+-------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- uncorrelated NOT IN
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name from emps where deptno not in (select deptno from depts);
+----------------------------------------------------------------+
|                            column0                             |
+----------------------------------------------------------------+
| ProjectRel(NAME=[$1])                                          |
|   FilterRel(condition=[NOT(IS TRUE($11))])                     |
|     FilterRel(condition=[IS NOT NULL($2)])                     |
|       JoinRel(condition=[=($2, $10)], joinType=[left])         |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])         |
|         AggregateRel(groupCount=[1], agg#0=[MIN(1)])           |
|           ProjectRel($f0=[$0], $f1=[true])                     |
|             ProjectRel(DEPTNO=[$0])                            |
|               TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])  |
+----------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name from emps where deptno not in (select deptno from depts);
+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                            column0                                                                            |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..3=[{inputs}], expr#4=[IS TRUE($t3)], expr#5=[NOT($t4)], NAME=[$t0], $condition=[$t5])                                                     |
|   FennelToIteratorConverter                                                                                                                                   |
|     LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                              |
|       IteratorToFennelConverter                                                                                                                               |
|         IterCalcRel(expr#0..1=[{inputs}], expr#2=[IS NOT NULL($t1)], proj#0..1=[{exprs}], $condition=[$t2])                                                   |
|           FennelToIteratorConverter                                                                                                                           |
|             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])                                     |
|       LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                               |
|         IteratorToFennelConverter                                                                                                                             |
|           IterCalcRel(expr#0=[{inputs}], expr#1=[true], proj#0..1=[{exprs}])                                                                                  |
|             FennelToIteratorConverter                                                                                                                         |
|               FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])  |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name from emps where deptno not in (select deptno from depts) order by name;
+-------+
| NAME  |
+-------+
| John  |
+-------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 1.4 uncorrelated NOT(x IN (subq)):
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name from emps where not (deptno in (select deptno from depts));
+----------------------------------------------------------------+
|                            column0                             |
+----------------------------------------------------------------+
| ProjectRel(NAME=[$1])                                          |
|   FilterRel(condition=[NOT(IS TRUE($11))])                     |
|     FilterRel(condition=[IS NOT NULL($2)])                     |
|       JoinRel(condition=[=($2, $10)], joinType=[left])         |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])         |
|         AggregateRel(groupCount=[1], agg#0=[MIN(1)])           |
|           ProjectRel($f0=[$0], $f1=[true])                     |
|             ProjectRel(DEPTNO=[$0])                            |
|               TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])  |
+----------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name from emps where not (deptno in (select deptno from depts));
+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                            column0                                                                            |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..3=[{inputs}], expr#4=[IS TRUE($t3)], expr#5=[NOT($t4)], NAME=[$t0], $condition=[$t5])                                                     |
|   FennelToIteratorConverter                                                                                                                                   |
|     LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                              |
|       IteratorToFennelConverter                                                                                                                               |
|         IterCalcRel(expr#0..1=[{inputs}], expr#2=[IS NOT NULL($t1)], proj#0..1=[{exprs}], $condition=[$t2])                                                   |
|           FennelToIteratorConverter                                                                                                                           |
|             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])                                     |
|       LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                               |
|         IteratorToFennelConverter                                                                                                                             |
|           IterCalcRel(expr#0=[{inputs}], expr#1=[true], proj#0..1=[{exprs}])                                                                                  |
|             FennelToIteratorConverter                                                                                                                         |
|               FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])  |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name from emps where not (deptno in (select deptno from depts)) order by name;
+-------+
| NAME  |
+-------+
| John  |
+-------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 1.5 correlated NOT IN
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name from emps
. . . . . . . . > where deptno not in (select deptno from depts where emps.empno < depts.deptno*10)
. . . . . . . . > order by name;
+------------------------------------------------------------------------------------------------+
|                                            column0                                             |
+------------------------------------------------------------------------------------------------+
| SortRel(sort0=[$0], dir0=[Ascending])                                                          |
|   ProjectRel(NAME=[$1])                                                                        |
|     FilterRel(condition=[NOT(IS TRUE($11))])                                                   |
|       FilterRel(condition=[IS NOT NULL($2)])                                                   |
|         CorrelatorRel(condition=[=($2, $10)], joinType=[left], correlations=[[var0=offset0]])  |
|           TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                       |
|           AggregateRel(groupCount=[1], agg#0=[MIN(1)])                                         |
|             ProjectRel($f0=[$0], $f1=[true])                                                   |
|               ProjectRel(DEPTNO=[$0])                                                          |
|                 FilterRel(condition=[<($cor0.EMPNO, *($0, 10))])                               |
|                   TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                              |
+------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name from emps
. . . . . . . . > where deptno not in (select deptno from depts where emps.empno < depts.deptno*10)
. . . . . . . . > order by name;
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                   column0                                                                                    |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                    |
|   FennelSortRel(key=[[0]], discardDuplicates=[false])                                                                                                                        |
|     IteratorToFennelConverter                                                                                                                                                |
|       IterCalcRel(expr#0..5=[{inputs}], expr#6=[IS TRUE($t2)], expr#7=[NOT($t6)], NAME=[$t4], $condition=[$t7])                                                              |
|         FennelToIteratorConverter                                                                                                                                            |
|           LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[2, 0]], joinType=[RIGHT])                                                                                                |
|             LhxAggRel(groupCount=[2], agg#0=[MIN(2)])                                                                                                                        |
|               IteratorToFennelConverter                                                                                                                                      |
|                 IterCalcRel(expr#0..1=[{inputs}], expr#2=[10], expr#3=[*($t0, $t2)], expr#4=[<($t1, $t3)], expr#5=[true], proj#0..1=[{exprs}], $f1=[$t5], $condition=[$t4])  |
|                   FennelToIteratorConverter                                                                                                                                  |
|                     FennelCartesianProductRel(leftouterjoin=[false])                                                                                                         |
|                       FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])         |
|                       FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                    |
|                         LhxAggRel(groupCount=[1])                                                                                                                            |
|                           FennelRenameRel(fieldNames=[[$f0]])                                                                                                                |
|                             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                       |
|             IteratorToFennelConverter                                                                                                                                        |
|               IterCalcRel(expr#0..2=[{inputs}], expr#3=[IS NOT NULL($t2)], proj#0..2=[{exprs}], $condition=[$t3])                                                            |
|                 FennelToIteratorConverter                                                                                                                                    |
|                   FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2]], index=[EMPS_UX], preserveOrder=[false])                                           |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name from emps
. . . . . . . . > where deptno not in (select deptno from depts where emps.empno < depts.deptno*10)
. . . . . . . . > order by name;
+-------+
| NAME  |
+-------+
| Fred  |
| John  |
+-------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 1.6 correlated NOT (x IN subq)
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name from emps
. . . . . . . . > where not (deptno in (select deptno from depts where emps.empno < depts.deptno*10))
. . . . . . . . > order by name;
+------------------------------------------------------------------------------------------------+
|                                            column0                                             |
+------------------------------------------------------------------------------------------------+
| SortRel(sort0=[$0], dir0=[Ascending])                                                          |
|   ProjectRel(NAME=[$1])                                                                        |
|     FilterRel(condition=[NOT(IS TRUE($11))])                                                   |
|       FilterRel(condition=[IS NOT NULL($2)])                                                   |
|         CorrelatorRel(condition=[=($2, $10)], joinType=[left], correlations=[[var0=offset0]])  |
|           TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                       |
|           AggregateRel(groupCount=[1], agg#0=[MIN(1)])                                         |
|             ProjectRel($f0=[$0], $f1=[true])                                                   |
|               ProjectRel(DEPTNO=[$0])                                                          |
|                 FilterRel(condition=[<($cor0.EMPNO, *($0, 10))])                               |
|                   TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                              |
+------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name from emps
. . . . . . . . > where not (deptno in (select deptno from depts where emps.empno < depts.deptno*10))
. . . . . . . . > order by name;
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                   column0                                                                                    |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                    |
|   FennelSortRel(key=[[0]], discardDuplicates=[false])                                                                                                                        |
|     IteratorToFennelConverter                                                                                                                                                |
|       IterCalcRel(expr#0..5=[{inputs}], expr#6=[IS TRUE($t2)], expr#7=[NOT($t6)], NAME=[$t4], $condition=[$t7])                                                              |
|         FennelToIteratorConverter                                                                                                                                            |
|           LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[2, 0]], joinType=[RIGHT])                                                                                                |
|             LhxAggRel(groupCount=[2], agg#0=[MIN(2)])                                                                                                                        |
|               IteratorToFennelConverter                                                                                                                                      |
|                 IterCalcRel(expr#0..1=[{inputs}], expr#2=[10], expr#3=[*($t0, $t2)], expr#4=[<($t1, $t3)], expr#5=[true], proj#0..1=[{exprs}], $f1=[$t5], $condition=[$t4])  |
|                   FennelToIteratorConverter                                                                                                                                  |
|                     FennelCartesianProductRel(leftouterjoin=[false])                                                                                                         |
|                       FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])         |
|                       FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                    |
|                         LhxAggRel(groupCount=[1])                                                                                                                            |
|                           FennelRenameRel(fieldNames=[[$f0]])                                                                                                                |
|                             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                       |
|             IteratorToFennelConverter                                                                                                                                        |
|               IterCalcRel(expr#0..2=[{inputs}], expr#3=[IS NOT NULL($t2)], proj#0..2=[{exprs}], $condition=[$t3])                                                            |
|                 FennelToIteratorConverter                                                                                                                                    |
|                   FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2]], index=[EMPS_UX], preserveOrder=[false])                                           |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name from emps
. . . . . . . . > where not (deptno in (select deptno from depts where emps.empno < depts.deptno*10))
. . . . . . . . > order by name;
+-------+
| NAME  |
+-------+
| Fred  |
| John  |
+-------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 2.1 uncorrelated exists.
0: jdbc:farrago:> -- Need to limit to at most one row on join RHS; Broadbase inserts count(*).
0: jdbc:farrago:> -- LucidDB uses a aggregate function(MIN(TRUE)) that generates the value TRUE
0: jdbc:farrago:> -- for each group
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name from emps where exists(select * from depts);
+--------------------------------------------------------------+
|                           column0                            |
+--------------------------------------------------------------+
| ProjectRel(NAME=[$1])                                        |
|   FilterRel(condition=[IS TRUE($10)])                        |
|     JoinRel(condition=[true], joinType=[left])               |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])         |
|       AggregateRel(groupCount=[0], agg#0=[MIN(0)])           |
|         ProjectRel($f0=[true])                               |
|           ProjectRel(DEPTNO=[$0], NAME=[$1])                 |
|             TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])  |
+--------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name from emps where exists(select * from depts);
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                               column0                                                                                                                |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                                                            |
|   FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[1]], filterTuple=[[true]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME) NOT NULL])  |
|     FennelCartesianProductRel(leftouterjoin=[true])                                                                                                                                                                                  |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])                                                                                                                     |
|       FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                                                                                            |
|         FennelAggRel(groupCount=[0], agg#0=[MIN(0)])                                                                                                                                                                                 |
|           IteratorToFennelConverter                                                                                                                                                                                                  |
|             IterCalcRel(expr#0=[{inputs}], expr#1=[true], $f0=[$t1])                                                                                                                                                                 |
|               FennelToIteratorConverter                                                                                                                                                                                              |
|                 FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                                                                       |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name from emps where exists(select * from depts) order by name;
+--------+
|  NAME  |
+--------+
| Eric   |
| Fred   |
| John   |
| Wilma  |
+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- make sure empty subquery in exists will disqualify a row
0: jdbc:farrago:> select name from emps where exists(select * from depts2) order by name;
+-------+
| NAME  |
+-------+
+-------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 2.2 correlated exists.
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name from emps
. . . . . . . . > where exists(select * from depts where depts.deptno=emps.deptno)
. . . . . . . . > order by name;
+----------------------------------------------------------------------------------------+
|                                        column0                                         |
+----------------------------------------------------------------------------------------+
| SortRel(sort0=[$0], dir0=[Ascending])                                                  |
|   ProjectRel(NAME=[$1])                                                                |
|     FilterRel(condition=[IS TRUE($10)])                                                |
|       CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])  |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                 |
|         AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                   |
|           ProjectRel($f0=[true])                                                       |
|             ProjectRel(DEPTNO=[$0], NAME=[$1])                                         |
|               FilterRel(condition=[=($0, $cor0.DEPTNO)])                               |
|                 TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                        |
+----------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- no table qualifier is necessary if correlated reference is not ambiguous
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name from emps
. . . . . . . . > where exists(select * from depts where depts.deptno=empno)
. . . . . . . . > order by name;
+----------------------------------------------------------------------------------------+
|                                        column0                                         |
+----------------------------------------------------------------------------------------+
| SortRel(sort0=[$0], dir0=[Ascending])                                                  |
|   ProjectRel(NAME=[$1])                                                                |
|     FilterRel(condition=[IS TRUE($10)])                                                |
|       CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset0]])  |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                 |
|         AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                   |
|           ProjectRel($f0=[true])                                                       |
|             ProjectRel(DEPTNO=[$0], NAME=[$1])                                         |
|               FilterRel(condition=[=($0, $cor0.EMPNO)])                                |
|                 TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                        |
+----------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name from emps
. . . . . . . . > where exists(select * from depts where depts.deptno=emps.deptno)
. . . . . . . . > order by name;
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                column0                                                                                                                 |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                                                              |
|   FennelSortRel(key=[[0]], discardDuplicates=[false])                                                                                                                                                                                  |
|     FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME) NOT NULL])  |
|       LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                                                                                     |
|         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])                                                                                                                  |
|         LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                                                                                      |
|           IteratorToFennelConverter                                                                                                                                                                                                    |
|             IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])                                                                                                                                                     |
|               FennelToIteratorConverter                                                                                                                                                                                                |
|                 LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                                                                                          |
|                   FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                                                                       |
|                   LhxAggRel(groupCount=[1])                                                                                                                                                                                            |
|                     FennelRenameRel(fieldNames=[[$f0]])                                                                                                                                                                                |
|                       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                                                                                       |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- verify result is correct
0: jdbc:farrago:> select deptno, name from emps order by deptno, name;
+---------+--------+
| DEPTNO  |  NAME  |
+---------+--------+
| 10      | Fred   |
| 20      | Eric   |
| 20      | Wilma  |
| 40      | John   |
+---------+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select deptno from emps order by deptno;
+---------+
| DEPTNO  |
+---------+
| 10      |
| 20      |
| 20      |
| 40      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name from emps
. . . . . . . . > where exists(select * from depts where depts.deptno=emps.deptno)
. . . . . . . . > order by name;
+--------+
|  NAME  |
+--------+
| Eric   |
| Fred   |
| Wilma  |
+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 3.1 uncorrelated scalar subquery.
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name,
. . . . . . . . >        (select count(*) from depts)
. . . . . . . . > from emps;
+------------------------------------------------------------+
|                          column0                           |
+------------------------------------------------------------+
| ProjectRel(NAME=[$1], EXPR$1=[$10])                        |
|   JoinRel(condition=[true], joinType=[left])               |
|     TableAccessRel(table=[[LOCALDB, SALES, EMPS]])         |
|     ProjectRel(EXPR$0=[$0])                                |
|       AggregateRel(groupCount=[0], agg#0=[COUNT()])        |
|         ProjectRel($f0=[true])                             |
|           TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])  |
+------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name,
. . . . . . . . >        (select count(*) from depts)
. . . . . . . . > from emps;
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                              column0                                                                              |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                         |
|   FennelRenameRel(fieldNames=[[NAME, EXPR$1]])                                                                                                                    |
|     FennelCartesianProductRel(leftouterjoin=[true])                                                                                                               |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])                                                  |
|       FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                         |
|         FennelRenameRel(fieldNames=[[EXPR$0]])                                                                                                                    |
|           FennelAggRel(groupCount=[0], agg#0=[COUNT()])                                                                                                           |
|             IteratorToFennelConverter                                                                                                                             |
|               IterCalcRel(expr#0=[{inputs}], expr#1=[true], $f0=[$t1])                                                                                            |
|                 FennelToIteratorConverter                                                                                                                         |
|                   FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])  |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name, 
. . . . . . . . >        (select count(*) from depts)
. . . . . . . . > from emps
. . . . . . . . > order by name;
+--------+---------+
|  NAME  | EXPR$1  |
+--------+---------+
| Eric   | 3       |
| Fred   | 3       |
| John   | 3       |
| Wilma  | 3       |
+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should return null in deptno
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name, 
. . . . . . . . >        (select deptno from depts where deptno > 100)
. . . . . . . . > from emps 
. . . . . . . . > order by name;
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                                column0                                                                                                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                                                                                             |
|   FennelSortRel(key=[[0]], discardDuplicates=[false])                                                                                                                                                                                                                 |
|     FennelRenameRel(fieldNames=[[NAME, EXPR$1]])                                                                                                                                                                                                                      |
|       FennelCartesianProductRel(leftouterjoin=[true])                                                                                                                                                                                                                 |
|         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])                                                                                                                                                    |
|         FennelAggRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])                                                                                                                                                                                                         |
|           FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], uniqueKey=[false], preserveOrder=[false], outer=[false], inputKeyProj=[[1, 3]], inputJoinProj=[[]], inputDirectiveProj=[[0, 2]])  |
|             FennelValuesRel(tuples=[[{ '(', 100, '+', null }]])                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name, 
. . . . . . . . >        (select deptno from depts where deptno > 100)
. . . . . . . . > from emps 
. . . . . . . . > order by name;
+--------+---------+
|  NAME  | EXPR$1  |
+--------+---------+
| Eric   |         |
| Fred   |         |
| John   |         |
| Wilma  |         |
+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should report runtime error
0: jdbc:farrago:> select name, 
. . . . . . . . >        (select deptno from depts)
. . . . . . . . > from emps 
. . . . . . . . > order by name;
Error: Scalar query returned more than one row (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- this should report validation error
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name, (select * from depts) from emps;
Error: At line 2, column 22: Cannot apply '$SCALAR_QUERY' to arguments of type '$SCALAR_QUERY(<RECORDTYPE(INTEGER DEPTNO, VARCHAR(128) NAME)>)'. Supported form(s): '$SCALAR_QUERY(<RECORDTYPE(SINGLE FIELD)>)' (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- check that scalar subquery type inference is correct
0: jdbc:farrago:> create table s (a int);
0: jdbc:farrago:> select empno,
. . . . . . . . >        (select min(a) from s)
. . . . . . . . > from emps
. . . . . . . . > order by empno;
+--------+---------+
| EMPNO  | EXPR$1  |
+--------+---------+
| 100    |         |
| 110    |         |
| 110    |         |
| 120    |         |
+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select empno, 
. . . . . . . . >        (select count(a) from s)
. . . . . . . . > from emps
. . . . . . . . > order by empno;
+--------+---------+
| EMPNO  | EXPR$1  |
+--------+---------+
| 100    | 0       |
| 110    | 0       |
| 110    | 0       |
| 120    | 0       |
+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> drop table s;
0: jdbc:farrago:> 
0: jdbc:farrago:> create table s (a int not null);
0: jdbc:farrago:> 
0: jdbc:farrago:> select empno,
. . . . . . . . >        (select min(a) from s)
. . . . . . . . > from emps 
. . . . . . . . > order by empno;
+--------+---------+
| EMPNO  | EXPR$1  |
+--------+---------+
| 100    |         |
| 110    |         |
| 110    |         |
| 120    |         |
+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select empno,
. . . . . . . . >        (select count(a) from s)
. . . . . . . . > from emps
. . . . . . . . > order by empno;
+--------+---------+
| EMPNO  | EXPR$1  |
+--------+---------+
| 100    | 0       |
| 110    | 0       |
| 110    | 0       |
| 120    | 0       |
+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> drop table s;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 3.2 correlated scalar subquery in select list:  
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name,
. . . . . . . . >        (select name from depts where depts.deptno=emps.deptno)
. . . . . . . . > from emps
. . . . . . . . > order by name;
+--------------------------------------------------------------------------------------+
|                                       column0                                        |
+--------------------------------------------------------------------------------------+
| SortRel(sort0=[$0], dir0=[Ascending])                                                |
|   ProjectRel(NAME=[$1], EXPR$1=[$10])                                                |
|     CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])  |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                 |
|       AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])                          |
|         ProjectRel(NAME=[$1])                                                        |
|           FilterRel(condition=[=($0, $cor0.DEPTNO)])                                 |
|             TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                          |
+--------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name,
. . . . . . . . >        (select name from depts where depts.deptno=emps.deptno)
. . . . . . . . > from emps
. . . . . . . . > order by name;
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                           column0                                                                                                                            |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                                                                                    |
|   FennelSortRel(key=[[0]], discardDuplicates=[false])                                                                                                                                                                                                        |
|     FennelReshapeRel(projection=[[0, 3]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" EXPR$1) NOT NULL])  |
|       LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                                                                                                           |
|         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])                                                                                                                                        |
|         FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                                                                                                         |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name,
. . . . . . . . >        (select name from depts where depts.deptno=emps.deptno)
. . . . . . . . > from emps
. . . . . . . . > order by name;
+--------+------------+
|  NAME  |   EXPR$1   |
+--------+------------+
| Eric   | Marketing  |
| Fred   | Sales      |
| John   |            |
| Wilma  | Marketing  |
+--------+------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 3.3 non correlated in where clause
0: jdbc:farrago:> -- note can also use semi join
0: jdbc:farrago:> explain plan without implementation for 
. . . . . . . . > select * from emps
. . . . . . . . > where deptno = (select min(deptno) from depts);
+--------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                  column0                                                                   |
+--------------------------------------------------------------------------------------------------------------------------------------------+
| ProjectRel(EMPNO=[$0], NAME=[$1], DEPTNO=[$2], GENDER=[$3], CITY=[$4], EMPID=[$5], AGE=[$6], PUBLIC_KEY=[$7], SLACKER=[$8], MANAGER=[$9])  |
|   FilterRel(condition=[=($2, $10)])                                                                                                        |
|     JoinRel(condition=[true], joinType=[left])                                                                                             |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                                                                       |
|       ProjectRel(EXPR$0=[$0])                                                                                                              |
|         AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                                                                       |
|           ProjectRel($f0=[$0])                                                                                                             |
|             TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                                                                |
+--------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for 
. . . . . . . . > select * from emps
. . . . . . . . > where deptno = (select min(deptno) from depts);
+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                            column0                                                                            |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..10=[{inputs}], expr#11=[=($t2, $t10)], proj#0..9=[{exprs}], $condition=[$t11])                                                            |
|   FennelToIteratorConverter                                                                                                                                   |
|     FennelCartesianProductRel(leftouterjoin=[true])                                                                                                           |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])              |
|       FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                     |
|         FennelRenameRel(fieldNames=[[EXPR$0]])                                                                                                                |
|           FennelAggRel(groupCount=[0], agg#0=[MIN(0)])                                                                                                        |
|             FennelRenameRel(fieldNames=[[$f0]])                                                                                                               |
|               FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])  |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from emps
. . . . . . . . > where deptno = (select min(deptno) from depts)
. . . . . . . . > order by emps.empno;
+--------+-------+---------+---------+-------+--------+------+-------------+----------+----------+
| EMPNO  | NAME  | DEPTNO  | GENDER  | CITY  | EMPID  | AGE  | PUBLIC_KEY  | SLACKER  | MANAGER  |
+--------+-------+---------+---------+-------+--------+------+-------------+----------+----------+
| 100    | Fred  | 10      |         |       | 30     | 25   | 41626320    | true     | false    |
+--------+-------+---------+---------+-------+--------+------+-------------+----------+----------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- Note: this too can use semi join
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select * from emps
. . . . . . . . > where deptno = (select deptno from depts);
+--------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                  column0                                                                   |
+--------------------------------------------------------------------------------------------------------------------------------------------+
| ProjectRel(EMPNO=[$0], NAME=[$1], DEPTNO=[$2], GENDER=[$3], CITY=[$4], EMPID=[$5], AGE=[$6], PUBLIC_KEY=[$7], SLACKER=[$8], MANAGER=[$9])  |
|   FilterRel(condition=[=($2, $10)])                                                                                                        |
|     JoinRel(condition=[true], joinType=[left])                                                                                             |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                                                                       |
|       AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])                                                                                |
|         ProjectRel(DEPTNO=[$0])                                                                                                            |
|           TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                                                                  |
+--------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select * from emps
. . . . . . . . > where deptno = (select deptno from depts);
+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                          column0                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..10=[{inputs}], expr#11=[=($t2, $t10)], proj#0..9=[{exprs}], $condition=[$t11])                                                        |
|   FennelToIteratorConverter                                                                                                                               |
|     FennelCartesianProductRel(leftouterjoin=[true])                                                                                                       |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])          |
|       FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                 |
|         FennelAggRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])                                                                                             |
|           FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])  |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should report runtime error
0: jdbc:farrago:> select * from emps
. . . . . . . . > where deptno = (select deptno from depts);
Error: Scalar query returned more than one row (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- this should report validation error
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select * from emps
. . . . . . . . > where deptno = (select * from depts);
Error: At line 3, column 24: Cannot apply '$SCALAR_QUERY' to arguments of type '$SCALAR_QUERY(<RECORDTYPE(INTEGER DEPTNO, VARCHAR(128) NAME)>)'. Supported form(s): '$SCALAR_QUERY(<RECORDTYPE(SINGLE FIELD)>)' (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 3.4 correlated scalar subquery in where clause:
0: jdbc:farrago:> -- 
0: jdbc:farrago:> create table emps2 (deptno integer, name varchar(20));
0: jdbc:farrago:> 
0: jdbc:farrago:> insert into emps2 select deptno, name from emps;
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name
. . . . . . . . > from emps
. . . . . . . . > where name=(select name from emps2 where emps.deptno=emps2.deptno);
+--------------------------------------------------------------------------------------+
|                                       column0                                        |
+--------------------------------------------------------------------------------------+
| ProjectRel(NAME=[$1])                                                                |
|   FilterRel(condition=[=($1, $10)])                                                  |
|     CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])  |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                 |
|       AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])                          |
|         ProjectRel(NAME=[$1])                                                        |
|           FilterRel(condition=[=($cor0.DEPTNO, $0)])                                 |
|             TableAccessRel(table=[[LOCALDB, SALES, EMPS2]])                          |
+--------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name
. . . . . . . . > from emps
. . . . . . . . > where name=(select name from emps2 where emps.deptno=emps2.deptno);
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                          column0                                                                                          |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..3=[{inputs}], expr#4=[=($t0, $t3)], NAME=[$t0], $condition=[$t4])                                                                                                     |
|   FennelToIteratorConverter                                                                                                                                                               |
|     LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                                          |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])                                                                       |
|       LhxAggRel(groupCount=[1], agg#0=[SINGLE_VALUE(1)])                                                                                                                                  |
|         FennelReshapeRel(projection=[[0, 3]], outputRowType=[RecordType(INTEGER NOT NULL $f0, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME) NOT NULL])  |
|           LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])                                                                                                                   |
|             FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])                                                    |
|               LhxAggRel(groupCount=[1])                                                                                                                                                   |
|                 FennelRenameRel(fieldNames=[[$f0]])                                                                                                                                       |
|                   FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                                              |
|             LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$NAME]])                        |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should report runtime error: more than one row
0: jdbc:farrago:> select name
. . . . . . . . > from emps
. . . . . . . . > where name=(select name from emps2 where emps.deptno=emps2.deptno);
Error: Scalar query returned more than one row (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name
. . . . . . . . > from emps
. . . . . . . . > where name=(select max(name) from emps2 where emps.deptno=emps2.deptno);
+--------------------------------------------------------------------------------------+
|                                       column0                                        |
+--------------------------------------------------------------------------------------+
| ProjectRel(NAME=[$1])                                                                |
|   FilterRel(condition=[=($1, $10)])                                                  |
|     CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])  |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                 |
|       ProjectRel(EXPR$0=[$0])                                                        |
|         AggregateRel(groupCount=[0], agg#0=[MAX(0)])                                 |
|           ProjectRel($f0=[$1])                                                       |
|             FilterRel(condition=[=($cor0.DEPTNO, $0)])                               |
|               TableAccessRel(table=[[LOCALDB, SALES, EMPS2]])                        |
+--------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name
. . . . . . . . > from emps
. . . . . . . . > where name=(select max(name) from emps2 where emps.deptno=emps2.deptno);
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                          column0                                                                                           |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..3=[{inputs}], expr#4=[=($t0, $t2)], NAME=[$t0], $condition=[$t4])                                                                                                      |
|   FennelToIteratorConverter                                                                                                                                                                |
|     LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[LEFT])                                                                                                                           |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])                                                                        |
|       FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" EXPR$0, INTEGER NOT NULL $f0) NOT NULL])   |
|         LhxAggRel(groupCount=[1], agg#0=[MAX(1)])                                                                                                                                          |
|           FennelReshapeRel(projection=[[0, 3]], outputRowType=[RecordType(INTEGER NOT NULL $f0, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" $f0) NOT NULL])  |
|             LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])                                                                                                                  |
|               FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])                                                   |
|                 LhxAggRel(groupCount=[1])                                                                                                                                                  |
|                   FennelRenameRel(fieldNames=[[$f0]])                                                                                                                                      |
|                     FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                                             |
|               LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$NAME]])                       |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name
. . . . . . . . > from emps
. . . . . . . . > where name=(select max(name) from emps2 where emps.deptno=emps2.deptno);
+--------+
|  NAME  |
+--------+
| Fred   |
| John   |
| Wilma  |
+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 3.5 scalar subquery as operand for an aggregation
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name, min((select name from emps2))
. . . . . . . . > from emps
. . . . . . . . > group by name;
+----------------------------------------------------------------+
|                            column0                             |
+----------------------------------------------------------------+
| ProjectRel(NAME=[$0], EXPR$1=[$1])                             |
|   AggregateRel(groupCount=[1], agg#0=[MIN(1)])                 |
|     ProjectRel($f0=[$1], $f1=[$10])                            |
|       JoinRel(condition=[true], joinType=[left])               |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])         |
|         AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])  |
|           ProjectRel(NAME=[$1])                                |
|             TableAccessRel(table=[[LOCALDB, SALES, EMPS2]])    |
+----------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name, min((select name from emps2))
. . . . . . . . > from emps
. . . . . . . . > group by name;
+---------------------------------------------------------------------------------------------------------------------------------------+
|                                                                column0                                                                |
+---------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                             |
|   FennelRenameRel(fieldNames=[[NAME, EXPR$1]])                                                                                        |
|     LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                         |
|       FennelRenameRel(fieldNames=[[$f0, $f1]])                                                                                        |
|         FennelCartesianProductRel(leftouterjoin=[true])                                                                               |
|           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])                  |
|           FennelBufferRel(inMemory=[false], multiPass=[true])                                                                         |
|             FennelAggRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])                                                                     |
|               LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$NAME]])  |
+---------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should report runtime error
0: jdbc:farrago:> select name, min((select name from emps2))
. . . . . . . . > from emps
. . . . . . . . > group by name;
Error: Scalar query returned more than one row (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- this query runs fine
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name, min((select max(name) from emps2))
. . . . . . . . > from emps
. . . . . . . . > group by name;
+----------------------------------------------------------------+
|                            column0                             |
+----------------------------------------------------------------+
| ProjectRel(NAME=[$0], EXPR$1=[$1])                             |
|   AggregateRel(groupCount=[1], agg#0=[MIN(1)])                 |
|     ProjectRel($f0=[$1], $f1=[$10])                            |
|       JoinRel(condition=[true], joinType=[left])               |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])         |
|         ProjectRel(EXPR$0=[$0])                                |
|           AggregateRel(groupCount=[0], agg#0=[MAX(0)])         |
|             ProjectRel($f0=[$1])                               |
|               TableAccessRel(table=[[LOCALDB, SALES, EMPS2]])  |
+----------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name, min((select max(name) from emps2))
. . . . . . . . > from emps
. . . . . . . . > group by name;
+-------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                  column0                                                                  |
+-------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                 |
|   FennelRenameRel(fieldNames=[[NAME, EXPR$1]])                                                                                            |
|     LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                             |
|       FennelRenameRel(fieldNames=[[$f0, $f1]])                                                                                            |
|         FennelCartesianProductRel(leftouterjoin=[true])                                                                                   |
|           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])                      |
|           FennelBufferRel(inMemory=[false], multiPass=[true])                                                                             |
|             FennelRenameRel(fieldNames=[[EXPR$0]])                                                                                        |
|               FennelAggRel(groupCount=[0], agg#0=[MAX(0)])                                                                                |
|                 FennelRenameRel(fieldNames=[[$f0]])                                                                                       |
|                   LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$NAME]])  |
+-------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name, min((select max(name) from emps2))
. . . . . . . . > from emps
. . . . . . . . > group by name
. . . . . . . . > order by name;
+--------+---------+
|  NAME  | EXPR$1  |
+--------+---------+
| Eric   | Wilma   |
| Fred   | Wilma   |
| John   | Wilma   |
| Wilma  | Wilma   |
+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- correlated
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select deptno, min((select name from emps2 where emps2.name=emps.name))
. . . . . . . . > from emps
. . . . . . . . > group by deptno
. . . . . . . . > order by deptno;
+------------------------------------------------------------------------------------------+
|                                         column0                                          |
+------------------------------------------------------------------------------------------+
| SortRel(sort0=[$0], dir0=[Ascending])                                                    |
|   ProjectRel(DEPTNO=[$0], EXPR$1=[$1])                                                   |
|     AggregateRel(groupCount=[1], agg#0=[MIN(1)])                                         |
|       ProjectRel($f0=[$2], $f1=[$10])                                                    |
|         CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset1]])  |
|           TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                 |
|           AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])                          |
|             ProjectRel(NAME=[$1])                                                        |
|               FilterRel(condition=[=($1, $cor0.NAME)])                                   |
|                 TableAccessRel(table=[[LOCALDB, SALES, EMPS2]])                          |
+------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select deptno, min((select name from emps2 where emps2.name=emps.name))
. . . . . . . . > from emps
. . . . . . . . > group by deptno
. . . . . . . . > order by deptno;
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                                                                        column0                                                                                                                                                                         |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                                                                                                                                                                              |
|   FennelSortRel(key=[[0]], discardDuplicates=[false])                                                                                                                                                                                                                                                                                                  |
|     FennelRenameRel(fieldNames=[[DEPTNO, EXPR$1]])                                                                                                                                                                                                                                                                                                     |
|       LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                                                                                                                                                                                                        |
|         FennelReshapeRel(projection=[[1, 3]], outputRowType=[RecordType(INTEGER NOT NULL $f0, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" $f1) NOT NULL])                                                                                                                                                                |
|           LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                                                                                                                                                                                                                 |
|             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])                                                                                                                                                                                                                              |
|             LhxAggRel(groupCount=[1], agg#0=[SINGLE_VALUE(1)])                                                                                                                                                                                                                                                                                         |
|               FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME) NOT NULL])                                                                                      |
|                 LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])                                                                                                                                                                                                                                                                          |
|                   FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($0):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])  |
|                     LhxAggRel(groupCount=[1])                                                                                                                                                                                                                                                                                                          |
|                       FennelRenameRel(fieldNames=[[$f0]])                                                                                                                                                                                                                                                                                              |
|                         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])                                                                                                                                                                                                                     |
|                   FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($0):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])           |
|                     LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$NAME]])                                                                                                                                                                                                             |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select deptno, min((select name from emps2 where emps2.name=emps.name))
. . . . . . . . > from emps
. . . . . . . . > group by deptno
. . . . . . . . > order by deptno;
+---------+---------+
| DEPTNO  | EXPR$1  |
+---------+---------+
| 10      | Fred    |
| 20      | Eric    |
| 40      | John    |
+---------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- this should report run time error
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select deptno, min((select name from emps2 where emps2.deptno=emps.deptno))
. . . . . . . . > from emps
. . . . . . . . > group by deptno;
+----------------------------------------------------------------------------------------+
|                                        column0                                         |
+----------------------------------------------------------------------------------------+
| ProjectRel(DEPTNO=[$0], EXPR$1=[$1])                                                   |
|   AggregateRel(groupCount=[1], agg#0=[MIN(1)])                                         |
|     ProjectRel($f0=[$2], $f1=[$10])                                                    |
|       CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])  |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                 |
|         AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])                          |
|           ProjectRel(NAME=[$1])                                                        |
|             FilterRel(condition=[=($0, $cor0.DEPTNO)])                                 |
|               TableAccessRel(table=[[LOCALDB, SALES, EMPS2]])                          |
+----------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select deptno, min((select name from emps2 where emps2.deptno=emps.deptno))
. . . . . . . . > from emps
. . . . . . . . > group by deptno;
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                            column0                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                     |
|   FennelRenameRel(fieldNames=[[DEPTNO, EXPR$1]])                                                                                                                                              |
|     LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                                                 |
|       FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL $f0, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" $f1) NOT NULL])         |
|         LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                                                          |
|           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                                                          |
|           LhxAggRel(groupCount=[1], agg#0=[SINGLE_VALUE(1)])                                                                                                                                  |
|             FennelReshapeRel(projection=[[0, 3]], outputRowType=[RecordType(INTEGER NOT NULL $f0, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME) NOT NULL])  |
|               LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])                                                                                                                   |
|                 FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])                                                    |
|                   LhxAggRel(groupCount=[1])                                                                                                                                                   |
|                     FennelRenameRel(fieldNames=[[$f0]])                                                                                                                                       |
|                       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                                              |
|                 LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$NAME]])                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select deptno, min((select name from emps2 where emps2.deptno=emps.deptno))
. . . . . . . . > from emps
. . . . . . . . > group by deptno;
Error: Scalar query returned more than one row (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- this should report validation error
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select deptno, sum((select * from emps2))
. . . . . . . . > from emps
. . . . . . . . > group by deptno;
Error: At line 2, column 28: Cannot apply '$SCALAR_QUERY' to arguments of type '$SCALAR_QUERY(<RECORDTYPE(INTEGER DEPTNO, VARCHAR(20) NAME)>)'. Supported form(s): '$SCALAR_QUERY(<RECORDTYPE(SINGLE FIELD)>)' (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- Aggregate over window functions
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select last_value((select deptno from depts)) over (order by empno)
. . . . . . . . > from emps;
+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                           column0                                                                            |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ProjectRel(EXPR$0=[CAST($HISTOGRAM_LAST_VALUE($HISTOGRAM(CAST($10):BIGINT NOT NULL) OVER (ORDER BY $0 ROWS BETWEEN CURRENT ROW AND CURRENT ROW))):INTEGER])  |
|   JoinRel(condition=[true], joinType=[left])                                                                                                                 |
|     TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                                                                                           |
|     AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])                                                                                                    |
|       ProjectRel(DEPTNO=[$0])                                                                                                                                |
|         TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                                                                                      |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select last_value((select min(deptno) from depts)) over w
. . . . . . . . > from emps window w as (order by empno);
+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                           column0                                                                            |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ProjectRel(EXPR$0=[CAST($HISTOGRAM_LAST_VALUE($HISTOGRAM(CAST($10):BIGINT NOT NULL) OVER (ORDER BY $0 ROWS BETWEEN CURRENT ROW AND CURRENT ROW))):INTEGER])  |
|   JoinRel(condition=[true], joinType=[left])                                                                                                                 |
|     TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                                                                                           |
|     ProjectRel(EXPR$0=[$0])                                                                                                                                  |
|       AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                                                                                           |
|         ProjectRel($f0=[$0])                                                                                                                                 |
|           TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                                                                                    |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- select list contains correlated references
0: jdbc:farrago:> explain plan without implementation for 
. . . . . . . . > select sum((select emps.empno from depts where depts.deptno = emps.deptno))
. . . . . . . . > from emps;
+------------------------------------------------------------------------------------------------------+
|                                               column0                                                |
+------------------------------------------------------------------------------------------------------+
| ProjectRel(EXPR$0=[$0])                                                                              |
|   AggregateRel(groupCount=[0], agg#0=[SUM(0)])                                                       |
|     ProjectRel($f0=[$10])                                                                            |
|       CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2, var1=offset0]])  |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                               |
|         AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])                                        |
|           ProjectRel(EMPNO=[$cor1.EMPNO])                                                            |
|             FilterRel(condition=[=($0, $cor0.DEPTNO)])                                               |
|               TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                        |
+------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for 
. . . . . . . . > select sum((select emps.empno from depts where depts.deptno = emps.deptno))
. . . . . . . . > from emps;
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                      column0                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                         |
|   FennelRenameRel(fieldNames=[[EXPR$0]])                                                                                                                                          |
|     FennelAggRel(groupCount=[0], agg#0=[SUM(0)])                                                                                                                                  |
|       IteratorToFennelConverter                                                                                                                                                   |
|         IterCalcRel(expr#0..2=[{inputs}], expr#3=[IS NULL($t2)], expr#4=[null], expr#5=[CAST($t4):INTEGER], expr#6=[CAST($t0):INTEGER], expr#7=[CASE($t3, $t5, $t6)], $f0=[$t7])  |
|           FennelToIteratorConverter                                                                                                                                               |
|             LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                          |
|               FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                       |
|               FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for 
. . . . . . . . > select empno
. . . . . . . . > from emps
. . . . . . . . > where empno = (select min(emps.empno) from depts 
. . . . . . . . >                where depts.deptno = emps.deptno);
+----------------------------------------------------------------------------------------------------+
|                                              column0                                               |
+----------------------------------------------------------------------------------------------------+
| ProjectRel(EMPNO=[$0])                                                                             |
|   FilterRel(condition=[=($0, $10)])                                                                |
|     CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2, var1=offset0]])  |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                               |
|       ProjectRel(EXPR$0=[$0])                                                                      |
|         AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                               |
|           ProjectRel($f0=[$cor1.EMPNO])                                                            |
|             FilterRel(condition=[=($0, $cor0.DEPTNO)])                                             |
|               TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                      |
+----------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for 
. . . . . . . . > select empno
. . . . . . . . > from emps
. . . . . . . . > where empno = (select min(emps.empno) from depts
. . . . . . . . >                where depts.deptno = emps.deptno);
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                              column0                                                                              |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..4=[{inputs}], expr#5=[=($t0, $t2)], EMPNO=[$t0], $condition=[$t5])                                                                            |
|   FennelToIteratorConverter                                                                                                                                       |
|     LhxJoinRel(leftKeys=[[1, 0]], rightKeys=[[1, 2]], joinType=[LEFT])                                                                                            |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                               |
|       FennelReshapeRel(projection=[[2, 0, 1]], outputRowType=[RecordType(INTEGER EXPR$0, INTEGER NOT NULL $f0, INTEGER NOT NULL $f00) NOT NULL])                  |
|         LhxAggRel(groupCount=[2], agg#0=[MIN(2)])                                                                                                                 |
|           FennelReshapeRel(projection=[[0, 1, 1]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL $f00, INTEGER NOT NULL $f0) NOT NULL])        |
|             FennelCartesianProductRel(leftouterjoin=[false])                                                                                                      |
|               FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])                                                       |
|                 LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                     |
|                   FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])  |
|                   LhxAggRel(groupCount=[1])                                                                                                                       |
|                     FennelRenameRel(fieldNames=[[$f0]])                                                                                                           |
|                       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                  |
|               FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                 |
|                 LhxAggRel(groupCount=[1])                                                                                                                         |
|                   FennelRenameRel(fieldNames=[[$f0]])                                                                                                             |
|                     FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                    |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 3.6 HAVING clause scalar subquery.
0: jdbc:farrago:> --
0: jdbc:farrago:> --     Note: SQL2003 seems to contradict itself wrt to aggregates in HAVING clause.
0: jdbc:farrago:> --     In the rules for <set function specification>(which include aggregates),
0: jdbc:farrago:> --     this is allowed; However, in the rules for HAVING clause, only GBY columns can
0: jdbc:farrago:> --     be referenced "directly" in HAVING clause. The query below, probably not very
0: jdbc:farrago:> --     useful, satisfies both rules since the aggregate references the GBY columns
0: jdbc:farrago:> --
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name
. . . . . . . . > from emps
. . . . . . . . > group by name
. . . . . . . . > having min(emps.name)=(select max(name) from depts);
+--------------------------------------------------------------+
|                           column0                            |
+--------------------------------------------------------------+
| ProjectRel(NAME=[$0])                                        |
|   FilterRel(condition=[=($1, $2)])                           |
|     JoinRel(condition=[true], joinType=[left])               |
|       AggregateRel(groupCount=[1], agg#0=[MIN(0)])           |
|         ProjectRel($f0=[$1])                                 |
|           TableAccessRel(table=[[LOCALDB, SALES, EMPS]])     |
|       ProjectRel(EXPR$0=[$0])                                |
|         AggregateRel(groupCount=[0], agg#0=[MAX(0)])         |
|           ProjectRel($f0=[$1])                               |
|             TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])  |
+--------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- the above query can also be rewritten into this
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name
. . . . . . . . > from
. . . . . . . . > (select name, min(emps.name) min_name
. . . . . . . . >  from emps
. . . . . . . . >  group by name) v
. . . . . . . . > where v.min_name=(select max(name) from depts);
+--------------------------------------------------------------+
|                           column0                            |
+--------------------------------------------------------------+
| ProjectRel(NAME=[$0])                                        |
|   FilterRel(condition=[=($1, $2)])                           |
|     JoinRel(condition=[true], joinType=[left])               |
|       ProjectRel(NAME=[$0], MIN_NAME=[$1])                   |
|         AggregateRel(groupCount=[1], agg#0=[MIN(0)])         |
|           ProjectRel($f0=[$1])                               |
|             TableAccessRel(table=[[LOCALDB, SALES, EMPS]])   |
|       ProjectRel(EXPR$0=[$0])                                |
|         AggregateRel(groupCount=[0], agg#0=[MAX(0)])         |
|           ProjectRel($f0=[$1])                               |
|             TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])  |
+--------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 3.6.1 HAVING clause with row types
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name from emps group by empno, name 
. . . . . . . . > having (emps.name, emps.empno) in (('ab', 10), ('cd', 20));
+----------------------------------------------------------------------------------------+
|                                        column0                                         |
+----------------------------------------------------------------------------------------+
| ProjectRel(NAME=[$1])                                                                  |
|   FilterRel(condition=[OR(AND(=($1, 'ab'), =($0, 10)), AND(=($1, 'cd'), =($0, 20)))])  |
|     AggregateRel(groupCount=[2])                                                       |
|       ProjectRel($f0=[$0], $f1=[$1])                                                   |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                 |
+----------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 3.6.2 having clause column reference should not need to name the table
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name from emps group by name
. . . . . . . . > having name in ('ab', 'cd');
+---------------------------------------------------------+
|                         column0                         |
+---------------------------------------------------------+
| ProjectRel(NAME=[$0])                                   |
|   FilterRel(condition=[OR(=($0, 'ab'), =($0, 'cd'))])   |
|     AggregateRel(groupCount=[1])                        |
|       ProjectRel($f0=[$1])                              |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])  |
+---------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 3.6.3 will fail when looking up emps.empno in group by clause
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select count(*) from emps
. . . . . . . . > where exists (select count(*) from depts group by emps.empno)
. . . . . . . . > group by emps.empno;
Error: From line 3, column 51 to line 3, column 54: Table 'EMPS' not found (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- will not decorrelate
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select count(*) from emps
. . . . . . . . > group by emps.empno
. . . . . . . . > having exists (select count(*) from depts group by emps.empno);
+--------------------------------------------------------------------------------------+
|                                       column0                                        |
+--------------------------------------------------------------------------------------+
| ProjectRel(EXPR$0=[$1])                                                              |
|   FilterRel(condition=[IS TRUE($2)])                                                 |
|     CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset0]])  |
|       AggregateRel(groupCount=[1], agg#0=[COUNT()])                                  |
|         ProjectRel($f0=[$0])                                                         |
|           TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                             |
|       AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                   |
|         ProjectRel($f0=[true])                                                       |
|           ProjectRel(EXPR$0=[$1])                                                    |
|             AggregateRel(groupCount=[1], agg#0=[COUNT()])                            |
|               ProjectRel($f0=[$cor0.EMPNO])                                          |
|                 TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                      |
+--------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 4.1 nested correlations
0: jdbc:farrago:> insert into depts2 select * from depts;
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for 
. . . . . . . . > select name 
. . . . . . . . > from emps 
. . . . . . . . > where exists(select * 
. . . . . . . . >              from depts 
. . . . . . . . >              where depts.deptno > emps.deptno or 
. . . . . . . . >                    exists (select *
. . . . . . . . >                            from depts2
. . . . . . . . >                            where depts.name = depts2.name
. . . . . . . . >                                  and depts2.deptno <> emps.empno));
+----------------------------------------------------------------------------------------------------+
|                                              column0                                               |
+----------------------------------------------------------------------------------------------------+
| ProjectRel(NAME=[$1])                                                                              |
|   FilterRel(condition=[IS TRUE($10)])                                                              |
|     CorrelatorRel(condition=[true], joinType=[left], correlations=[[var2=offset2, var1=offset0]])  |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                               |
|       AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                                 |
|         ProjectRel($f0=[true])                                                                     |
|           ProjectRel(DEPTNO=[$0], NAME=[$1])                                                       |
|             FilterRel(condition=[OR(>($0, $cor2.DEPTNO), IS TRUE($2))])                            |
|               CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset1]])      |
|                 TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                    |
|                 AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                       |
|                   ProjectRel($f0=[true])                                                           |
|                     ProjectRel(DEPTNO=[$0], NAME=[$1])                                             |
|                       FilterRel(condition=[AND(=($cor0.NAME, $1), <>($0, $cor1.EMPNO))])           |
|                         TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])                           |
+----------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for 
. . . . . . . . > select name 
. . . . . . . . > from emps 
. . . . . . . . > where exists(select * 
. . . . . . . . >              from depts 
. . . . . . . . >              where depts.deptno > emps.deptno or 
. . . . . . . . >                    exists (select *
. . . . . . . . >                            from depts2
. . . . . . . . >                            where depts.name = depts2.name
. . . . . . . . >                                  and depts2.deptno <> emps.empno));
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                                                                                        column0                                                                                                                                                                                         |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                                                                                                                                                                                                              |
|   FennelReshapeRel(projection=[[1]], filterOp=[COMP_EQ], filterOrdinals=[[6]], filterTuple=[[true]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME) NOT NULL])                                                                                                                                                    |
|     LhxJoinRel(leftKeys=[[2, 3]], rightKeys=[[1, 0]], joinType=[LEFT])                                                                                                                                                                                                                                                                                                                 |
|       FennelReshapeRel(projection=[[0, 1, 2, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER NOT NULL DEPTNO, INTEGER CAST($0):INTEGER) NOT NULL])                                                                                                                            |
|         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2]], index=[EMPS_UX], preserveOrder=[false])                                                                                                                                                                                                                                                               |
|       LhxAggRel(groupCount=[2], agg#0=[MIN(2)])                                                                                                                                                                                                                                                                                                                                        |
|         IteratorToFennelConverter                                                                                                                                                                                                                                                                                                                                                      |
|           IterCalcRel(expr#0..3=[{inputs}], expr#4=[>($t0, $t3)], expr#5=[IS TRUE($t2)], expr#6=[OR($t4, $t5)], expr#7=[true], $f00=[$t1], $f01=[$t3], $f0=[$t7], $condition=[$t6])                                                                                                                                                                                                    |
|             IterCalcRel(expr#0..3=[{inputs}], DEPTNO=[$t1], $f00=[$t2], $f2=[$t3], $f0=[$t0])                                                                                                                                                                                                                                                                                          |
|               FennelToIteratorConverter                                                                                                                                                                                                                                                                                                                                                |
|                 FennelCartesianProductRel(leftouterjoin=[false])                                                                                                                                                                                                                                                                                                                       |
|                   LhxAggRel(groupCount=[1])                                                                                                                                                                                                                                                                                                                                            |
|                     FennelRenameRel(fieldNames=[[$f0]])                                                                                                                                                                                                                                                                                                                                |
|                       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                                                                                                                                                                                                                                       |
|                   FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                                                                                                                                                                                                                                  |
|                     FennelReshapeRel(projection=[[0, 3, 4]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER $f00, BOOLEAN $f2) NOT NULL])                                                                                                                                                                                                                                  |
|                       LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                                                                                                                                                                                                                     |
|                         FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                                                                                                                                                                                                                   |
|                         LhxAggRel(groupCount=[2], agg#0=[MIN(2)])                                                                                                                                                                                                                                                                                                                      |
|                           IteratorToFennelConverter                                                                                                                                                                                                                                                                                                                                    |
|                             IterCalcRel(expr#0..2=[{inputs}], expr#3=[<>($t2, $t0)], expr#4=[true], $f0=[$t1], $f00=[$t0], $f0=[$t4], $condition=[$t3])                                                                                                                                                                                                                                |
|                               FennelToIteratorConverter                                                                                                                                                                                                                                                                                                                                |
|                                 FennelCartesianProductRel(leftouterjoin=[false])                                                                                                                                                                                                                                                                                                       |
|                                   LhxAggRel(groupCount=[1])                                                                                                                                                                                                                                                                                                                            |
|                                     FennelRenameRel(fieldNames=[[$f0]])                                                                                                                                                                                                                                                                                                                |
|                                       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                                                                                                                                                                                                                       |
|                                   FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                                                                                                                                                                                                                  |
|                                     FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0, INTEGER DEPTNO) NOT NULL])                                                                                                                                                                |
|                                       LhxJoinRel(leftKeys=[[1]], rightKeys=[[2]], joinType=[INNER])                                                                                                                                                                                                                                                                                    |
|                                         FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($0):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])            |
|                                           LhxAggRel(groupCount=[1])                                                                                                                                                                                                                                                                                                                    |
|                                             FennelRenameRel(fieldNames=[[$f0]])                                                                                                                                                                                                                                                                                                        |
|                                               FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                                                                                                                                                                                           |
|                                         FennelReshapeRel(projection=[[0, 1, 1]], outputRowType=[RecordType(INTEGER DEPTNO, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])  |
|                                           LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO, SYS$CLUSTERED_INDEX$DEPTS2$NAME]])                                                                                                                                                                                    |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name 
. . . . . . . . > from emps 
. . . . . . . . > where exists(select * 
. . . . . . . . >              from depts 
. . . . . . . . >              where depts.deptno > emps.deptno or 
. . . . . . . . >                    exists (select *
. . . . . . . . >                            from depts2
. . . . . . . . >                            where depts.name = depts2.name
. . . . . . . . >                                  and depts2.deptno <> emps.empno))
. . . . . . . . > order by name;
+--------+
|  NAME  |
+--------+
| Eric   |
| Fred   |
| John   |
| Wilma  |
+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 4.2 correlation in more than one child
0: jdbc:farrago:> explain plan without implementation for 
. . . . . . . . > select empno from emps
. . . . . . . . > where exists (select * from (select * from depts where depts.deptno = emps.deptno) t,
. . . . . . . . >                             (select * from depts2 where depts2.deptno <> emps.empno) v);
+----------------------------------------------------------------------------------------------------+
|                                              column0                                               |
+----------------------------------------------------------------------------------------------------+
| ProjectRel(EMPNO=[$0])                                                                             |
|   FilterRel(condition=[IS TRUE($10)])                                                              |
|     CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2, var1=offset0]])  |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                               |
|       AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                                 |
|         ProjectRel($f0=[true])                                                                     |
|           ProjectRel(DEPTNO=[$0], NAME=[$1], DEPTNO0=[$2], NAME0=[$3])                             |
|             JoinRel(condition=[true], joinType=[inner])                                            |
|               ProjectRel(DEPTNO=[$0], NAME=[$1])                                                   |
|                 FilterRel(condition=[=($0, $cor0.DEPTNO)])                                         |
|                   TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                  |
|               ProjectRel(DEPTNO=[$0], NAME=[$1])                                                   |
|                 FilterRel(condition=[<>($0, $cor1.EMPNO)])                                         |
|                   TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])                                 |
+----------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for 
. . . . . . . . > select empno from emps
. . . . . . . . > where exists (select * from (select * from depts where depts.deptno = emps.deptno) t,
. . . . . . . . >                             (select * from depts2 where depts2.deptno <> emps.empno) v);
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                     column0                                                                                     |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                       |
|   FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[4]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])               |
|     LhxJoinRel(leftKeys=[[1, 0]], rightKeys=[[0, 1]], joinType=[LEFT])                                                                                                          |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                             |
|       LhxAggRel(groupCount=[2], agg#0=[MIN(2)])                                                                                                                                 |
|         IteratorToFennelConverter                                                                                                                                               |
|           IterCalcRel(expr#0..2=[{inputs}], expr#3=[<>($t1, $t2)], expr#4=[true], $f0=[$t0], $f00=[$t2], $f0=[$t4], $condition=[$t3])                                           |
|             FennelToIteratorConverter                                                                                                                                           |
|               FennelCartesianProductRel(leftouterjoin=[false])                                                                                                                  |
|                 FennelRenameRel(fieldNames=[[$f0, DEPTNO0]])                                                                                                                    |
|                   IteratorToFennelConverter                                                                                                                                     |
|                     IterCalcRel(expr#0..1=[{inputs}], $f0=[$t1], DEPTNO=[$t0])                                                                                                  |
|                       FennelToIteratorConverter                                                                                                                                 |
|                         FennelCartesianProductRel(leftouterjoin=[false])                                                                                                        |
|                           LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])                            |
|                           FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                   |
|                             FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])                                                       |
|                               LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                     |
|                                 FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])  |
|                                 LhxAggRel(groupCount=[1])                                                                                                                       |
|                                   FennelRenameRel(fieldNames=[[$f0]])                                                                                                           |
|                                     FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                  |
|                 FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                             |
|                   LhxAggRel(groupCount=[1])                                                                                                                                     |
|                     FennelRenameRel(fieldNames=[[$f0]])                                                                                                                         |
|                       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                                |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select empno from emps
. . . . . . . . > where exists (select * from (select * from depts where depts.deptno = emps.deptno) t,
. . . . . . . . >                             (select * from depts2 where depts2.deptno <> emps.empno) v)
. . . . . . . . > order by empno;
+--------+
| EMPNO  |
+--------+
| 100    |
| 110    |
| 120    |
+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 4.3 correlation from two outer relations, which are at the same level
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select depts.name, emps.deptno from emps, depts
. . . . . . . . > where exists (
. . . . . . . . >     select * from depts2
. . . . . . . . >     where depts2.name = depts.name and depts2.deptno = emps.deptno);
+-----------------------------------------------------------------------------------------------------+
|                                               column0                                               |
+-----------------------------------------------------------------------------------------------------+
| ProjectRel(NAME=[$11], DEPTNO=[$2])                                                                 |
|   FilterRel(condition=[IS TRUE($12)])                                                               |
|     CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset11, var1=offset2]])  |
|       JoinRel(condition=[true], joinType=[inner])                                                   |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                              |
|         TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                             |
|       AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                                  |
|         ProjectRel($f0=[true])                                                                      |
|           ProjectRel(DEPTNO=[$0], NAME=[$1])                                                        |
|             FilterRel(condition=[AND(=($1, $cor0.NAME), =($0, $cor1.DEPTNO))])                      |
|               TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])                                      |
+-----------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select depts.name, emps.deptno from emps, depts
. . . . . . . . > where exists (
. . . . . . . . >     select * from depts2
. . . . . . . . >     where depts2.name = depts.name and depts2.deptno = emps.deptno);
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                                                                                                  column0                                                                                                                                                                                                   |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                                                                                                                                                                                                                                  |
|   FennelReshapeRel(projection=[[1, 0]], filterOp=[COMP_EQ], filterOrdinals=[[4]], filterTuple=[[true]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER NOT NULL DEPTNO) NOT NULL])                                                                                                                                            |
|     LhxJoinRel(leftKeys=[[1, 0]], rightKeys=[[0, 1]], joinType=[LEFT])                                                                                                                                                                                                                                                                                                                                     |
|       FennelCartesianProductRel(leftouterjoin=[false])                                                                                                                                                                                                                                                                                                                                                     |
|         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                                                                                                                                                                                                                                                                         |
|         FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                                                                                                                                                                                                                                                     |
|       LhxAggRel(groupCount=[2], agg#0=[MIN(2)])                                                                                                                                                                                                                                                                                                                                                            |
|         IteratorToFennelConverter                                                                                                                                                                                                                                                                                                                                                                          |
|           IterCalcRel(expr#0..6=[{inputs}], expr#7=[true], proj#0..1=[{exprs}], $f0=[$t7])                                                                                                                                                                                                                                                                                                                 |
|             FennelToIteratorConverter                                                                                                                                                                                                                                                                                                                                                                      |
|               LhxJoinRel(leftKeys=[[2, 3]], rightKeys=[[2, 0]], joinType=[INNER])                                                                                                                                                                                                                                                                                                                          |
|                 FennelReshapeRel(projection=[[0, 1, 0, 1]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0, INTEGER NOT NULL $f1, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($0):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary", INTEGER CAST($1):INTEGER) NOT NULL])  |
|                   LhxAggRel(groupCount=[2])                                                                                                                                                                                                                                                                                                                                                                |
|                     FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0, INTEGER NOT NULL $f1) NOT NULL])                                                                                                                                                                                              |
|                       FennelCartesianProductRel(leftouterjoin=[false])                                                                                                                                                                                                                                                                                                                                     |
|                         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                                                                                                                                                                                                                                                         |
|                         FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                                                                                                                                                                                                                                     |
|                 FennelReshapeRel(projection=[[0, 1, 1]], outputRowType=[RecordType(INTEGER DEPTNO, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])                                              |
|                   LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO, SYS$CLUSTERED_INDEX$DEPTS2$NAME]])                                                                                                                                                                                                                                |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select depts.name, emps.deptno from emps, depts
. . . . . . . . > where exists (
. . . . . . . . >     select * from depts2
. . . . . . . . >     where depts2.name = depts.name and depts2.deptno = emps.deptno);
+------------+---------+
|    NAME    | DEPTNO  |
+------------+---------+
| Marketing  | 20      |
| Sales      | 10      |
| Marketing  | 20      |
+------------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 4.4 correlations from one relation to two outer relations at different level
0: jdbc:farrago:> explain plan without implementation for 
. . . . . . . . > select name 
. . . . . . . . > from emps 
. . . . . . . . > where exists(select * 
. . . . . . . . >              from depts 
. . . . . . . . >              where depts.deptno > 10 and
. . . . . . . . >                    exists (select *
. . . . . . . . >                            from depts2
. . . . . . . . >                            where depts.name = depts2.name
. . . . . . . . >                                  and depts2.deptno = emps.deptno));
+------------------------------------------------------------------------------------------------+
|                                            column0                                             |
+------------------------------------------------------------------------------------------------+
| ProjectRel(NAME=[$1])                                                                          |
|   FilterRel(condition=[IS TRUE($10)])                                                          |
|     CorrelatorRel(condition=[true], joinType=[left], correlations=[[var1=offset2]])            |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                           |
|       AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                             |
|         ProjectRel($f0=[true])                                                                 |
|           ProjectRel(DEPTNO=[$0], NAME=[$1])                                                   |
|             FilterRel(condition=[AND(>($0, 10), IS TRUE($2))])                                 |
|               CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset1]])  |
|                 TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                |
|                 AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                   |
|                   ProjectRel($f0=[true])                                                       |
|                     ProjectRel(DEPTNO=[$0], NAME=[$1])                                         |
|                       FilterRel(condition=[AND(=($cor0.NAME, $1), =($0, $cor1.DEPTNO))])       |
|                         TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])                       |
+------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for 
. . . . . . . . > select name 
. . . . . . . . > from emps 
. . . . . . . . > where exists(select * 
. . . . . . . . >              from depts 
. . . . . . . . >              where depts.deptno > 10 and
. . . . . . . . >                    exists (select *
. . . . . . . . >                            from depts2
. . . . . . . . >                            where depts.name = depts2.name
. . . . . . . . >                                  and depts2.deptno = emps.deptno));
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                                                                                   column0                                                                                                                                                                                    |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                                                                                                                                                                                                    |
|   FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[4]], filterTuple=[[true]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME) NOT NULL])                                                                                                                                          |
|     LhxJoinRel(leftKeys=[[2]], rightKeys=[[0]], joinType=[LEFT])                                                                                                                                                                                                                                                                                                             |
|       FennelReshapeRel(projection=[[0, 1, 1]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER NOT NULL DEPTNO, INTEGER CAST($1):INTEGER) NOT NULL])                                                                                                                                             |
|         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])                                                                                                                                                                                                                                                        |
|       LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                                                                                                                                                                                                                              |
|         IteratorToFennelConverter                                                                                                                                                                                                                                                                                                                                            |
|           IterCalcRel(expr#0..3=[{inputs}], expr#4=[true], expr#5=[IS TRUE($t3)], $f00=[$t2], $f0=[$t4], $condition=[$t5])                                                                                                                                                                                                                                                   |
|             FennelToIteratorConverter                                                                                                                                                                                                                                                                                                                                        |
|               LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                                                                                                                                                                                                                                   |
|                 FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME) NOT NULL])                                                                                                                                                                                            |
|                   FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], uniqueKey=[false], preserveOrder=[false], outer=[false], inputKeyProj=[[1, 3]], inputJoinProj=[[]], inputDirectiveProj=[[0, 2]])                                                                                                   |
|                     FennelValuesRel(tuples=[[{ '(', 10, '+', null }]])                                                                                                                                                                                                                                                                                                       |
|                 LhxAggRel(groupCount=[2], agg#0=[MIN(2)])                                                                                                                                                                                                                                                                                                                    |
|                   IteratorToFennelConverter                                                                                                                                                                                                                                                                                                                                  |
|                     IterCalcRel(expr#0..3=[{inputs}], expr#4=[true], $f0=[$t2], $f00=[$t0], $f0=[$t4])                                                                                                                                                                                                                                                                       |
|                       FennelToIteratorConverter                                                                                                                                                                                                                                                                                                                              |
|                         LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])                                                                                                                                                                                                                                                                                        |
|                           FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])                                                                                                                                                                                                                         |
|                             LhxAggRel(groupCount=[1])                                                                                                                                                                                                                                                                                                                        |
|                               FennelRenameRel(fieldNames=[[$f0]])                                                                                                                                                                                                                                                                                                            |
|                                 FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                                                                                                                                                                                                                   |
|                           FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0, INTEGER DEPTNO) NOT NULL])                                                                                                                                                                |
|                             LhxJoinRel(leftKeys=[[1]], rightKeys=[[2]], joinType=[INNER])                                                                                                                                                                                                                                                                                    |
|                               FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($0):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])            |
|                                 LhxAggRel(groupCount=[1])                                                                                                                                                                                                                                                                                                                    |
|                                   FennelRenameRel(fieldNames=[[$f0]])                                                                                                                                                                                                                                                                                                        |
|                                     FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                                                                                                                                                                                           |
|                               FennelReshapeRel(projection=[[0, 1, 1]], outputRowType=[RecordType(INTEGER DEPTNO, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])  |
|                                 LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO, SYS$CLUSTERED_INDEX$DEPTS2$NAME]])                                                                                                                                                                                    |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name 
. . . . . . . . > from emps 
. . . . . . . . > where exists(select * 
. . . . . . . . >              from depts 
. . . . . . . . >              where depts.deptno > 10 and
. . . . . . . . >                    exists (select *
. . . . . . . . >                            from depts2
. . . . . . . . >                            where depts.name = depts2.name
. . . . . . . . >                                  and depts2.deptno = emps.deptno))
. . . . . . . . > order by name;
+--------+
|  NAME  |
+--------+
| Eric   |
| Wilma  |
+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- subquery in "lateral derived table"
0: jdbc:farrago:> -- 5.1 no correlation
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select emps.empno, d.deptno
. . . . . . . . > from emps,
. . . . . . . . > lateral (select * from depts) as d
. . . . . . . . > order by emps.empno, d.deptno;
+----------------------------------------------------------------------+
|                               column0                                |
+----------------------------------------------------------------------+
| SortRel(sort0=[$0], sort1=[$1], dir0=[Ascending], dir1=[Ascending])  |
|   ProjectRel(EMPNO=[$0], DEPTNO=[$10])                               |
|     JoinRel(condition=[true], joinType=[inner])                      |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                 |
|       ProjectRel(DEPTNO=[$0], NAME=[$1])                             |
|         TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])              |
+----------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select emps.empno, d.deptno
. . . . . . . . > from emps,
. . . . . . . . > lateral (select * from depts) as d
. . . . . . . . > order by emps.empno, d.deptno;
+-------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                        column0                                                                        |
+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                             |
|   FennelSortRel(key=[[0, 1]], discardDuplicates=[false])                                                                                              |
|     FennelCartesianProductRel(leftouterjoin=[false])                                                                                                  |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                      |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])  |
+-------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select emps.empno, d.deptno
. . . . . . . . > from emps,
. . . . . . . . > lateral (select * from depts) as d
. . . . . . . . > order by emps.empno, d.deptno;
+--------+---------+
| EMPNO  | DEPTNO  |
+--------+---------+
| 100    | 10      |
| 100    | 20      |
| 100    | 30      |
| 110    | 10      |
| 110    | 10      |
| 110    | 20      |
| 110    | 20      |
| 110    | 30      |
| 110    | 30      |
| 120    | 10      |
| 120    | 20      |
| 120    | 30      |
+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 5.2 correlated: one correlation
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select emps.empno, d.deptno
. . . . . . . . > from emps,
. . . . . . . . > lateral (select * from depts where depts.deptno = emps.deptno) as d
. . . . . . . . > order by emps.empno;
+---------------------------------------------------------------------------------------+
|                                        column0                                        |
+---------------------------------------------------------------------------------------+
| SortRel(sort0=[$0], dir0=[Ascending])                                                 |
|   ProjectRel(EMPNO=[$0], DEPTNO=[$10])                                                |
|     CorrelatorRel(condition=[true], joinType=[inner], correlations=[[var0=offset2]])  |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                  |
|       ProjectRel(DEPTNO=[$0], NAME=[$1])                                              |
|         FilterRel(condition=[=($0, $cor0.DEPTNO)])                                    |
|           TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                             |
+---------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select emps.empno, d.deptno
. . . . . . . . > from emps,
. . . . . . . . > lateral (select * from depts where depts.deptno = emps.deptno) as d
. . . . . . . . > order by emps.empno;
+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                          column0                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                 |
|   FennelSortRel(key=[[0]], discardDuplicates=[false])                                                                                                     |
|     FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO) NOT NULL])                           |
|       LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])                                                                                       |
|         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                     |
|         LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                     |
|           FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])  |
|           LhxAggRel(groupCount=[1])                                                                                                                       |
|             FennelRenameRel(fieldNames=[[$f0]])                                                                                                           |
|               FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                  |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select emps.empno, d.deptno
. . . . . . . . > from emps,
. . . . . . . . > lateral (select * from depts where depts.deptno = emps.deptno) as d
. . . . . . . . > order by emps.empno;
+--------+---------+
| EMPNO  | DEPTNO  |
+--------+---------+
| 100    | 10      |
| 110    | 20      |
| 120    | 20      |
+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 5.3 two lateral views: two correlations
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select emps.empno, d.deptno, d2.deptno
. . . . . . . . > from emps,
. . . . . . . . > lateral (select * from depts where depts.deptno = emps.deptno) as d,
. . . . . . . . > lateral (select * from depts2 where depts2.deptno <> emps.deptno) as d2
. . . . . . . . > order by emps.empno;
+-----------------------------------------------------------------------------------------+
|                                         column0                                         |
+-----------------------------------------------------------------------------------------+
| SortRel(sort0=[$0], dir0=[Ascending])                                                   |
|   ProjectRel(EMPNO=[$0], DEPTNO=[$10], DEPTNO0=[$12])                                   |
|     CorrelatorRel(condition=[true], joinType=[inner], correlations=[[var1=offset2]])    |
|       CorrelatorRel(condition=[true], joinType=[inner], correlations=[[var0=offset2]])  |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                  |
|         ProjectRel(DEPTNO=[$0], NAME=[$1])                                              |
|           FilterRel(condition=[=($0, $cor0.DEPTNO)])                                    |
|             TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                             |
|       ProjectRel(DEPTNO=[$0], NAME=[$1])                                                |
|         FilterRel(condition=[<>($0, $cor1.DEPTNO)])                                     |
|           TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])                              |
+-----------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select emps.empno, d.deptno, d2.deptno
. . . . . . . . > from emps,
. . . . . . . . > lateral (select * from depts where depts.deptno = emps.deptno) as d,
. . . . . . . . > lateral (select * from depts2 where depts2.deptno <> emps.deptno) as d2
. . . . . . . . > order by emps.empno;
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                    column0                                                                                    |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                     |
|   FennelSortRel(key=[[0]], discardDuplicates=[false])                                                                                                                         |
|     FennelReshapeRel(projection=[[0, 2, 4]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO, INTEGER DEPTNO0) NOT NULL])                           |
|       LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])                                                                                                           |
|         FennelReshapeRel(projection=[[0, 1, 2]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO, INTEGER NOT NULL DEPTNO0) NOT NULL])              |
|           LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])                                                                                                       |
|             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                     |
|             LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                                     |
|               FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                  |
|               LhxAggRel(groupCount=[1])                                                                                                                                       |
|                 FennelRenameRel(fieldNames=[[$f0]])                                                                                                                           |
|                   FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                                  |
|         IteratorToFennelConverter                                                                                                                                             |
|           IterCalcRel(expr#0..1=[{inputs}], expr#2=[<>($t1, $t0)], proj#0..1=[{exprs}], $condition=[$t2])                                                                     |
|             IterCalcRel(expr#0..1=[{inputs}], $f0=[$t1], DEPTNO=[$t0])                                                                                                        |
|               FennelToIteratorConverter                                                                                                                                       |
|                 FennelCartesianProductRel(leftouterjoin=[false])                                                                                                              |
|                   LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])                                  |
|                   FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                         |
|                     LhxAggRel(groupCount=[1])                                                                                                                                 |
|                       FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])                                                           |
|                         LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                         |
|                           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                          |
|                           FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])                                                       |
|                             LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                     |
|                               FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])  |
|                               LhxAggRel(groupCount=[1])                                                                                                                       |
|                                 FennelRenameRel(fieldNames=[[$f0]])                                                                                                           |
|                                   FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                  |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select emps.empno, d.deptno, d2.deptno
. . . . . . . . > from emps,
. . . . . . . . > lateral (select * from depts where depts.deptno = emps.deptno) as d,
. . . . . . . . > lateral (select * from depts2 where depts2.deptno <> emps.deptno) as d2
. . . . . . . . > order by emps.empno, d.deptno, d2.deptno;
+--------+---------+---------+
| EMPNO  | DEPTNO  | DEPTNO  |
+--------+---------+---------+
| 100    | 10      | 20      |
| 100    | 10      | 30      |
| 110    | 20      | 10      |
| 110    | 20      | 30      |
| 120    | 20      | 10      |
| 120    | 20      | 30      |
+--------+---------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 5.4 two lateral views: three correlations
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select emps.empno, d.deptno, d2.deptno
. . . . . . . . > from emps,
. . . . . . . . > lateral (select *
. . . . . . . . >          from depts 
. . . . . . . . >          where depts.deptno = emps.deptno) as d,
. . . . . . . . > lateral (select *
. . . . . . . . >          from depts2
. . . . . . . . >          where depts2.deptno = d.deptno and depts2.deptno <> emps.deptno) as d2
. . . . . . . . > order by emps.empno;
+------------------------------------------------------------------------------------------------------+
|                                               column0                                                |
+------------------------------------------------------------------------------------------------------+
| SortRel(sort0=[$0], dir0=[Ascending])                                                                |
|   ProjectRel(EMPNO=[$0], DEPTNO=[$10], DEPTNO0=[$12])                                                |
|     CorrelatorRel(condition=[true], joinType=[inner], correlations=[[var2=offset2, var1=offset10]])  |
|       CorrelatorRel(condition=[true], joinType=[inner], correlations=[[var0=offset2]])               |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                               |
|         ProjectRel(DEPTNO=[$0], NAME=[$1])                                                           |
|           FilterRel(condition=[=($0, $cor0.DEPTNO)])                                                 |
|             TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                          |
|       ProjectRel(DEPTNO=[$0], NAME=[$1])                                                             |
|         FilterRel(condition=[AND(=($0, $cor1.DEPTNO), <>($0, $cor2.DEPTNO))])                        |
|           TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])                                           |
+------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select emps.empno, d.deptno, d2.deptno
. . . . . . . . > from emps,
. . . . . . . . > lateral (select *
. . . . . . . . >          from depts 
. . . . . . . . >          where depts.deptno = emps.deptno) as d,
. . . . . . . . > lateral (select *
. . . . . . . . >          from depts2
. . . . . . . . >          where depts2.deptno = d.deptno and depts2.deptno <> emps.deptno) as d2
. . . . . . . . > order by emps.empno;
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                     column0                                                                                     |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                       |
|   FennelSortRel(key=[[0]], discardDuplicates=[false])                                                                                                                           |
|     FennelReshapeRel(projection=[[4, 0, 3]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO, INTEGER DEPTNO0) NOT NULL])                             |
|       LhxJoinRel(leftKeys=[[2, 1]], rightKeys=[[1, 1]], joinType=[INNER])                                                                                                       |
|         FennelReshapeRel(projection=[[0, 1, 3, 4]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER NOT NULL $f0, INTEGER NOT NULL $f1, INTEGER DEPTNO0) NOT NULL])  |
|           LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                                         |
|             LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                                       |
|               FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                    |
|               LhxAggRel(groupCount=[1])                                                                                                                                         |
|                 FennelRenameRel(fieldNames=[[$f0]])                                                                                                                             |
|                   FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                                    |
|             IteratorToFennelConverter                                                                                                                                           |
|               IterCalcRel(expr#0..3=[{inputs}], expr#4=[<>($t3, $t1)], proj#0..1=[{exprs}], DEPTNO=[$t3], $condition=[$t4])                                                     |
|                 FennelToIteratorConverter                                                                                                                                       |
|                   LhxJoinRel(leftKeys=[[2]], rightKeys=[[0]], joinType=[INNER])                                                                                                 |
|                     FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL $f1, INTEGER CAST($0):INTEGER) NOT NULL])         |
|                       LhxAggRel(groupCount=[2])                                                                                                                                 |
|                         FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL $f1) NOT NULL])                                  |
|                           LhxJoinRel(leftKeys=[[0]], rightKeys=[[1]], joinType=[INNER])                                                                                         |
|                             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                          |
|                             LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                       |
|                               FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])    |
|                               LhxAggRel(groupCount=[1])                                                                                                                         |
|                                 FennelRenameRel(fieldNames=[[$f0]])                                                                                                             |
|                                   FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                    |
|                     LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])                                  |
|         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                           |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- result set should be empty for this query
0: jdbc:farrago:> select emps.empno, d.deptno, d2.deptno
. . . . . . . . > from emps,
. . . . . . . . > lateral (select *
. . . . . . . . >          from depts 
. . . . . . . . >          where depts.deptno = emps.deptno) as d,
. . . . . . . . > lateral (select *
. . . . . . . . >          from depts2
. . . . . . . . >          where depts2.deptno = d.deptno and depts2.deptno <> emps.deptno) as d2
. . . . . . . . > order by emps.empno;
+--------+---------+---------+
| EMPNO  | DEPTNO  | DEPTNO  |
+--------+---------+---------+
+--------+---------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- Correlations through set ops are not decorrelated.
0: jdbc:farrago:> -- 6.1 union/union all
0: jdbc:farrago:> -- Decorrelation is not performed.
0: jdbc:farrago:> explain plan without implementation for 
. . . . . . . . > select empno from emps
. . . . . . . . > where exists (select * from (select * from depts where depts.deptno = emps.deptno union all
. . . . . . . . >                              select * from depts2 where depts2.deptno <> emps.empno));
+----------------------------------------------------------------------------------------------------+
|                                              column0                                               |
+----------------------------------------------------------------------------------------------------+
| ProjectRel(EMPNO=[$0])                                                                             |
|   FilterRel(condition=[IS TRUE($10)])                                                              |
|     CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2, var1=offset0]])  |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                               |
|       AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                                 |
|         ProjectRel($f0=[true])                                                                     |
|           ProjectRel(DEPTNO=[$0], NAME=[$1])                                                       |
|             UnionRel(all=[true])                                                                   |
|               ProjectRel(DEPTNO=[$0], NAME=[$1])                                                   |
|                 FilterRel(condition=[=($0, $cor0.DEPTNO)])                                         |
|                   TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                  |
|               ProjectRel(DEPTNO=[$0], NAME=[$1])                                                   |
|                 FilterRel(condition=[<>($0, $cor1.EMPNO)])                                         |
|                   TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])                                 |
+----------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for 
. . . . . . . . > select empno from emps
. . . . . . . . > where exists (select * from (select * from depts where depts.deptno = emps.deptno union
. . . . . . . . >                              select * from depts2 where depts2.deptno <> emps.empno));
+----------------------------------------------------------------------------------------------------+
|                                              column0                                               |
+----------------------------------------------------------------------------------------------------+
| ProjectRel(EMPNO=[$0])                                                                             |
|   FilterRel(condition=[IS TRUE($10)])                                                              |
|     CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2, var1=offset0]])  |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                               |
|       AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                                 |
|         ProjectRel($f0=[true])                                                                     |
|           ProjectRel(DEPTNO=[$0], NAME=[$1])                                                       |
|             UnionRel(all=[false])                                                                  |
|               ProjectRel(DEPTNO=[$0], NAME=[$1])                                                   |
|                 FilterRel(condition=[=($0, $cor0.DEPTNO)])                                         |
|                   TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                  |
|               ProjectRel(DEPTNO=[$0], NAME=[$1])                                                   |
|                 FilterRel(condition=[<>($0, $cor1.EMPNO)])                                         |
|                   TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])                                 |
+----------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 6.1.1 A solution to 6.1 could be to expand the union and rewrite the exists
0: jdbc:farrago:> -- condition into exists(union branch 1) or exists(union branch 2).
0: jdbc:farrago:> explain plan without implementation for 
. . . . . . . . > select empno from emps
. . . . . . . . > where exists (select * from depts where depts.deptno = emps.deptno) 
. . . . . . . . >       or exists (select * from depts2 where depts2.deptno <> emps.empno);
+----------------------------------------------------------------------------------------+
|                                        column0                                         |
+----------------------------------------------------------------------------------------+
| ProjectRel(EMPNO=[$0])                                                                 |
|   FilterRel(condition=[OR(IS TRUE($10), IS TRUE($11))])                                |
|     CorrelatorRel(condition=[true], joinType=[left], correlations=[[var1=offset0]])    |
|       CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])  |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                 |
|         AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                   |
|           ProjectRel($f0=[true])                                                       |
|             ProjectRel(DEPTNO=[$0], NAME=[$1])                                         |
|               FilterRel(condition=[=($0, $cor0.DEPTNO)])                               |
|                 TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                        |
|       AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                     |
|         ProjectRel($f0=[true])                                                         |
|           ProjectRel(DEPTNO=[$0], NAME=[$1])                                           |
|             FilterRel(condition=[<>($0, $cor1.EMPNO)])                                 |
|               TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])                         |
+----------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for 
. . . . . . . . > select empno from emps
. . . . . . . . > where exists (select * from depts where depts.deptno = emps.deptno) 
. . . . . . . . >       or exists (select * from depts2 where depts2.deptno <> emps.empno);
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                        column0                                                                                        |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..3=[{inputs}], expr#4=[IS TRUE($t1)], expr#5=[IS TRUE($t3)], expr#6=[OR($t4, $t5)], EMPNO=[$t0], $condition=[$t6])                                                 |
|   FennelToIteratorConverter                                                                                                                                                           |
|     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                                                      |
|       FennelReshapeRel(projection=[[0, 3]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, BOOLEAN $f1) NOT NULL])                                                                 |
|         LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                                  |
|           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                               |
|           LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                                   |
|             IteratorToFennelConverter                                                                                                                                                 |
|               IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])                                                                                                  |
|                 FennelToIteratorConverter                                                                                                                                             |
|                   LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                                       |
|                     FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                    |
|                     LhxAggRel(groupCount=[1])                                                                                                                                         |
|                       FennelRenameRel(fieldNames=[[$f0]])                                                                                                                             |
|                         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                                    |
|       LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                                       |
|         IteratorToFennelConverter                                                                                                                                                     |
|           IterCalcRel(expr#0..1=[{inputs}], expr#2=[<>($t1, $t0)], expr#3=[true], $f0=[$t0], $f0=[$t3], $condition=[$t2])                                                             |
|             IterCalcRel(expr#0..1=[{inputs}], $f0=[$t1], DEPTNO=[$t0])                                                                                                                |
|               FennelToIteratorConverter                                                                                                                                               |
|                 FennelCartesianProductRel(leftouterjoin=[false])                                                                                                                      |
|                   LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])                                          |
|                   FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                                 |
|                     LhxAggRel(groupCount=[1])                                                                                                                                         |
|                       FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])                                                                   |
|                         LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                  |
|                           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                               |
|                           FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])                                                               |
|                             LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                 |
|                               IteratorToFennelConverter                                                                                                                               |
|                                 IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])                                                                                |
|                                   FennelToIteratorConverter                                                                                                                           |
|                                     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                     |
|                                       FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])  |
|                                       LhxAggRel(groupCount=[1])                                                                                                                       |
|                                         FennelRenameRel(fieldNames=[[$f0]])                                                                                                           |
|                                           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                  |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 6.1.2 The following, less complex, equivalent plan is possible with OR-expansion.
0: jdbc:farrago:> -- Note the IN lookup is required because union all does not remove duplicates.
0: jdbc:farrago:> -- Similarly, if using union the lookup is also required because union removes duplicates.
0: jdbc:farrago:> -- This could be a better plan than 6.1.1 because there're one fewer joins.
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select empno from emps where empno in (
. . . . . . . . >     select empno from emps
. . . . . . . . >     where exists (select * from depts where depts.deptno = emps.deptno)
. . . . . . . . >     union all
. . . . . . . . >     select empno from emps
. . . . . . . . >     where exists (select * from depts2 where depts2.deptno <> emps.empno));
+----------------------------------------------------------------------------------------------+
|                                           column0                                            |
+----------------------------------------------------------------------------------------------+
| ProjectRel(EMPNO=[$0])                                                                       |
|   JoinRel(condition=[=($0, $10)], joinType=[inner])                                          |
|     TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                           |
|     AggregateRel(groupCount=[1])                                                             |
|       UnionRel(all=[true])                                                                   |
|         ProjectRel(EMPNO=[$0])                                                               |
|           FilterRel(condition=[IS TRUE($10)])                                                |
|             CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])  |
|               TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                 |
|               AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                   |
|                 ProjectRel($f0=[true])                                                       |
|                   ProjectRel(DEPTNO=[$0], NAME=[$1])                                         |
|                     FilterRel(condition=[=($0, $cor0.DEPTNO)])                               |
|                       TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                        |
|         ProjectRel(EMPNO=[$0])                                                               |
|           FilterRel(condition=[IS TRUE($10)])                                                |
|             CorrelatorRel(condition=[true], joinType=[left], correlations=[[var1=offset0]])  |
|               TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                 |
|               AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                   |
|                 ProjectRel($f0=[true])                                                       |
|                   ProjectRel(DEPTNO=[$0], NAME=[$1])                                         |
|                     FilterRel(condition=[<>($0, $cor1.EMPNO)])                               |
|                       TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])                       |
+----------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select empno from emps where empno in (
. . . . . . . . >     select empno from emps
. . . . . . . . >     where exists (select * from depts where depts.deptno = emps.deptno)
. . . . . . . . >     union all
. . . . . . . . >     select empno from emps
. . . . . . . . >     where exists (select * from depts2 where depts2.deptno <> emps.empno));
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                 column0                                                                                  |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                |
|   FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])                                                                        |
|     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFTSEMI])                                                                                                     |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                                         |
|       FennelMergeRel                                                                                                                                                     |
|         FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])  |
|           LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                   |
|             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                |
|             LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                    |
|               IteratorToFennelConverter                                                                                                                                  |
|                 IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])                                                                                   |
|                   FennelToIteratorConverter                                                                                                                              |
|                     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                        |
|                       FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])     |
|                       LhxAggRel(groupCount=[1])                                                                                                                          |
|                         FennelRenameRel(fieldNames=[[$f0]])                                                                                                              |
|                           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                     |
|         FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[2]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])  |
|           LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                                   |
|             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                                   |
|             LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                    |
|               IteratorToFennelConverter                                                                                                                                  |
|                 IterCalcRel(expr#0..1=[{inputs}], expr#2=[<>($t1, $t0)], expr#3=[true], $f0=[$t0], $f0=[$t3], $condition=[$t2])                                          |
|                   IterCalcRel(expr#0..1=[{inputs}], $f0=[$t1], DEPTNO=[$t0])                                                                                             |
|                     FennelToIteratorConverter                                                                                                                            |
|                       FennelCartesianProductRel(leftouterjoin=[false])                                                                                                   |
|                         LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])                       |
|                         FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                              |
|                           LhxAggRel(groupCount=[1])                                                                                                                      |
|                             FennelRenameRel(fieldNames=[[$f0]])                                                                                                          |
|                               FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                 |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 6.2 intersect
0: jdbc:farrago:> explain plan without implementation for 
. . . . . . . . > select empno from emps
. . . . . . . . > where exists (select * from (select * from depts where depts.deptno = emps.deptno intersect
. . . . . . . . >                              select * from depts2 where depts2.deptno <> emps.empno));
+----------------------------------------------------------------------------------------------------+
|                                              column0                                               |
+----------------------------------------------------------------------------------------------------+
| ProjectRel(EMPNO=[$0])                                                                             |
|   FilterRel(condition=[IS TRUE($10)])                                                              |
|     CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2, var1=offset0]])  |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                               |
|       AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                                 |
|         ProjectRel($f0=[true])                                                                     |
|           ProjectRel(DEPTNO=[$0], NAME=[$1])                                                       |
|             IntersectRel(all=[false])                                                              |
|               ProjectRel(DEPTNO=[$0], NAME=[$1])                                                   |
|                 FilterRel(condition=[=($0, $cor0.DEPTNO)])                                         |
|                   TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                  |
|               ProjectRel(DEPTNO=[$0], NAME=[$1])                                                   |
|                 FilterRel(condition=[<>($0, $cor1.EMPNO)])                                         |
|                   TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])                                 |
+----------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 6.2.1 however, this is not equivalent to 6.2.
0: jdbc:farrago:> explain plan without implementation for 
. . . . . . . . > select empno from emps
. . . . . . . . > where exists (select * from depts where depts.deptno = emps.deptno) 
. . . . . . . . >       and exists (select * from depts2 where depts2.deptno <> emps.empno);
+----------------------------------------------------------------------------------------+
|                                        column0                                         |
+----------------------------------------------------------------------------------------+
| ProjectRel(EMPNO=[$0])                                                                 |
|   FilterRel(condition=[AND(IS TRUE($10), IS TRUE($11))])                               |
|     CorrelatorRel(condition=[true], joinType=[left], correlations=[[var1=offset0]])    |
|       CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])  |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                 |
|         AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                   |
|           ProjectRel($f0=[true])                                                       |
|             ProjectRel(DEPTNO=[$0], NAME=[$1])                                         |
|               FilterRel(condition=[=($0, $cor0.DEPTNO)])                               |
|                 TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                        |
|       AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                     |
|         ProjectRel($f0=[true])                                                         |
|           ProjectRel(DEPTNO=[$0], NAME=[$1])                                           |
|             FilterRel(condition=[<>($0, $cor1.EMPNO)])                                 |
|               TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])                         |
+----------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for 
. . . . . . . . > select empno from emps
. . . . . . . . > where exists (select * from depts where depts.deptno = emps.deptno) 
. . . . . . . . >       and exists (select * from depts2 where depts2.deptno <> emps.empno);
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                        column0                                                                                        |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                             |
|   FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[2]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])                     |
|     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                                                      |
|       FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])                 |
|         LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                                  |
|           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                               |
|           LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                                   |
|             IteratorToFennelConverter                                                                                                                                                 |
|               IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])                                                                                                  |
|                 FennelToIteratorConverter                                                                                                                                             |
|                   LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                                       |
|                     FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                    |
|                     LhxAggRel(groupCount=[1])                                                                                                                                         |
|                       FennelRenameRel(fieldNames=[[$f0]])                                                                                                                             |
|                         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                                    |
|       LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                                       |
|         IteratorToFennelConverter                                                                                                                                                     |
|           IterCalcRel(expr#0..1=[{inputs}], expr#2=[<>($t1, $t0)], expr#3=[true], $f0=[$t0], $f0=[$t3], $condition=[$t2])                                                             |
|             IterCalcRel(expr#0..1=[{inputs}], $f0=[$t1], DEPTNO=[$t0])                                                                                                                |
|               FennelToIteratorConverter                                                                                                                                               |
|                 FennelCartesianProductRel(leftouterjoin=[false])                                                                                                                      |
|                   LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])                                          |
|                   FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                                 |
|                     LhxAggRel(groupCount=[1])                                                                                                                                         |
|                       FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])                                                                   |
|                         LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                  |
|                           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                               |
|                           FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])                                                               |
|                             LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                 |
|                               IteratorToFennelConverter                                                                                                                               |
|                                 IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])                                                                                |
|                                   FennelToIteratorConverter                                                                                                                           |
|                                     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                     |
|                                       FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])  |
|                                       LhxAggRel(groupCount=[1])                                                                                                                       |
|                                         FennelRenameRel(fieldNames=[[$f0]])                                                                                                           |
|                                           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                  |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 6.2.2 The following plan is equivalent to 6.2.1 and has one fewer joins.
0: jdbc:farrago:> -- Note the IN lookup is required because intersect removes duplicates.
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select empno from emps
. . . . . . . . > where empno in (
. . . . . . . . >     select empno from emps
. . . . . . . . >     where exists (select * from depts where depts.deptno = emps.deptno)
. . . . . . . . >     intersect
. . . . . . . . >     select empno from emps
. . . . . . . . >     where exists (select * from depts2 where depts2.deptno <> emps.empno));
+----------------------------------------------------------------------------------------------+
|                                           column0                                            |
+----------------------------------------------------------------------------------------------+
| ProjectRel(EMPNO=[$0])                                                                       |
|   JoinRel(condition=[=($0, $10)], joinType=[inner])                                          |
|     TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                           |
|     AggregateRel(groupCount=[1])                                                             |
|       IntersectRel(all=[false])                                                              |
|         ProjectRel(EMPNO=[$0])                                                               |
|           FilterRel(condition=[IS TRUE($10)])                                                |
|             CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])  |
|               TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                 |
|               AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                   |
|                 ProjectRel($f0=[true])                                                       |
|                   ProjectRel(DEPTNO=[$0], NAME=[$1])                                         |
|                     FilterRel(condition=[=($0, $cor0.DEPTNO)])                               |
|                       TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                        |
|         ProjectRel(EMPNO=[$0])                                                               |
|           FilterRel(condition=[IS TRUE($10)])                                                |
|             CorrelatorRel(condition=[true], joinType=[left], correlations=[[var1=offset0]])  |
|               TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                 |
|               AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                   |
|                 ProjectRel($f0=[true])                                                       |
|                   ProjectRel(DEPTNO=[$0], NAME=[$1])                                         |
|                     FilterRel(condition=[<>($0, $cor1.EMPNO)])                               |
|                       TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])                       |
+----------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select empno from emps
. . . . . . . . > where empno in (
. . . . . . . . >     select empno from emps
. . . . . . . . >     where exists (select * from depts where depts.deptno = emps.deptno)
. . . . . . . . >     intersect
. . . . . . . . >     select empno from emps
. . . . . . . . >     where exists (select * from depts2 where depts2.deptno <> emps.empno));
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                 column0                                                                                  |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                |
|   FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])                                                                        |
|     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                                        |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                                         |
|       LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFTSEMI], setop=[true])                                                                                     |
|         FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])  |
|           LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                   |
|             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                |
|             LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                    |
|               IteratorToFennelConverter                                                                                                                                  |
|                 IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])                                                                                   |
|                   FennelToIteratorConverter                                                                                                                              |
|                     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                        |
|                       FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])     |
|                       LhxAggRel(groupCount=[1])                                                                                                                          |
|                         FennelRenameRel(fieldNames=[[$f0]])                                                                                                              |
|                           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                     |
|         FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[2]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])  |
|           LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                                   |
|             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                                   |
|             LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                    |
|               IteratorToFennelConverter                                                                                                                                  |
|                 IterCalcRel(expr#0..1=[{inputs}], expr#2=[<>($t1, $t0)], expr#3=[true], $f0=[$t0], $f0=[$t3], $condition=[$t2])                                          |
|                   IterCalcRel(expr#0..1=[{inputs}], $f0=[$t1], DEPTNO=[$t0])                                                                                             |
|                     FennelToIteratorConverter                                                                                                                            |
|                       FennelCartesianProductRel(leftouterjoin=[false])                                                                                                   |
|                         LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])                       |
|                         FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                              |
|                           LhxAggRel(groupCount=[1])                                                                                                                      |
|                             FennelRenameRel(fieldNames=[[$f0]])                                                                                                          |
|                               FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                 |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 6.3 except
0: jdbc:farrago:> explain plan without implementation for 
. . . . . . . . > select empno from emps
. . . . . . . . > where exists (select * from (select * from depts where depts.deptno = emps.deptno except
. . . . . . . . >                              select * from depts2 where depts2.deptno <> emps.empno));
+----------------------------------------------------------------------------------------------------+
|                                              column0                                               |
+----------------------------------------------------------------------------------------------------+
| ProjectRel(EMPNO=[$0])                                                                             |
|   FilterRel(condition=[IS TRUE($10)])                                                              |
|     CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2, var1=offset0]])  |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                               |
|       AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                                 |
|         ProjectRel($f0=[true])                                                                     |
|           ProjectRel(DEPTNO=[$0], NAME=[$1])                                                       |
|             MinusRel(all=[false])                                                                  |
|               ProjectRel(DEPTNO=[$0], NAME=[$1])                                                   |
|                 FilterRel(condition=[=($0, $cor0.DEPTNO)])                                         |
|                   TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                  |
|               ProjectRel(DEPTNO=[$0], NAME=[$1])                                                   |
|                 FilterRel(condition=[<>($0, $cor1.EMPNO)])                                         |
|                   TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])                                 |
+----------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 6.3.1 however, this is not equivalent to 6.3.
0: jdbc:farrago:> explain plan without implementation for 
. . . . . . . . > select empno from emps
. . . . . . . . > where exists (select * from depts where depts.deptno = emps.deptno) 
. . . . . . . . >       and not exists (select * from depts2 where depts2.deptno <> emps.empno);
+----------------------------------------------------------------------------------------+
|                                        column0                                         |
+----------------------------------------------------------------------------------------+
| ProjectRel(EMPNO=[$0])                                                                 |
|   FilterRel(condition=[AND(IS TRUE($10), NOT(IS TRUE($11)))])                          |
|     CorrelatorRel(condition=[true], joinType=[left], correlations=[[var1=offset0]])    |
|       CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])  |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                 |
|         AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                   |
|           ProjectRel($f0=[true])                                                       |
|             ProjectRel(DEPTNO=[$0], NAME=[$1])                                         |
|               FilterRel(condition=[=($0, $cor0.DEPTNO)])                               |
|                 TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                        |
|       AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                     |
|         ProjectRel($f0=[true])                                                         |
|           ProjectRel(DEPTNO=[$0], NAME=[$1])                                           |
|             FilterRel(condition=[<>($0, $cor1.EMPNO)])                                 |
|               TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])                         |
+----------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for 
. . . . . . . . > select empno from emps
. . . . . . . . > where exists (select * from depts where depts.deptno = emps.deptno) 
. . . . . . . . >       and not exists (select * from depts2 where depts2.deptno <> emps.empno);
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                        column0                                                                                        |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..2=[{inputs}], expr#3=[IS TRUE($t2)], expr#4=[NOT($t3)], EMPNO=[$t0], $condition=[$t4])                                                                            |
|   FennelToIteratorConverter                                                                                                                                                           |
|     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                                                      |
|       FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])                 |
|         LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                                  |
|           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                               |
|           LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                                   |
|             IteratorToFennelConverter                                                                                                                                                 |
|               IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])                                                                                                  |
|                 FennelToIteratorConverter                                                                                                                                             |
|                   LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                                       |
|                     FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                    |
|                     LhxAggRel(groupCount=[1])                                                                                                                                         |
|                       FennelRenameRel(fieldNames=[[$f0]])                                                                                                                             |
|                         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                                    |
|       LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                                       |
|         IteratorToFennelConverter                                                                                                                                                     |
|           IterCalcRel(expr#0..1=[{inputs}], expr#2=[<>($t1, $t0)], expr#3=[true], $f0=[$t0], $f0=[$t3], $condition=[$t2])                                                             |
|             IterCalcRel(expr#0..1=[{inputs}], $f0=[$t1], DEPTNO=[$t0])                                                                                                                |
|               FennelToIteratorConverter                                                                                                                                               |
|                 FennelCartesianProductRel(leftouterjoin=[false])                                                                                                                      |
|                   LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])                                          |
|                   FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                                 |
|                     LhxAggRel(groupCount=[1])                                                                                                                                         |
|                       FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])                                                                   |
|                         LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                  |
|                           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                               |
|                           FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])                                                               |
|                             LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                 |
|                               IteratorToFennelConverter                                                                                                                               |
|                                 IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])                                                                                |
|                                   FennelToIteratorConverter                                                                                                                           |
|                                     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                     |
|                                       FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])  |
|                                       LhxAggRel(groupCount=[1])                                                                                                                       |
|                                         FennelRenameRel(fieldNames=[[$f0]])                                                                                                           |
|                                           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                  |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 6.3.2 The following plan is equivalent to 6.3.1 and has one fewer joins.
0: jdbc:farrago:> -- Note the IN lookup is required because intersect removes duplicates.
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select empno from emps
. . . . . . . . > where empno in (
. . . . . . . . >     select empno from emps
. . . . . . . . >     where exists (select * from depts where depts.deptno = emps.deptno)
. . . . . . . . >     except
. . . . . . . . >     select empno from emps
. . . . . . . . >     where exists (select * from depts2 where depts2.deptno <> emps.empno));
+----------------------------------------------------------------------------------------------+
|                                           column0                                            |
+----------------------------------------------------------------------------------------------+
| ProjectRel(EMPNO=[$0])                                                                       |
|   JoinRel(condition=[=($0, $10)], joinType=[inner])                                          |
|     TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                           |
|     AggregateRel(groupCount=[1])                                                             |
|       MinusRel(all=[false])                                                                  |
|         ProjectRel(EMPNO=[$0])                                                               |
|           FilterRel(condition=[IS TRUE($10)])                                                |
|             CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])  |
|               TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                 |
|               AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                   |
|                 ProjectRel($f0=[true])                                                       |
|                   ProjectRel(DEPTNO=[$0], NAME=[$1])                                         |
|                     FilterRel(condition=[=($0, $cor0.DEPTNO)])                               |
|                       TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                        |
|         ProjectRel(EMPNO=[$0])                                                               |
|           FilterRel(condition=[IS TRUE($10)])                                                |
|             CorrelatorRel(condition=[true], joinType=[left], correlations=[[var1=offset0]])  |
|               TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                 |
|               AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                   |
|                 ProjectRel($f0=[true])                                                       |
|                   ProjectRel(DEPTNO=[$0], NAME=[$1])                                         |
|                     FilterRel(condition=[<>($0, $cor1.EMPNO)])                               |
|                       TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])                       |
+----------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select empno from emps
. . . . . . . . > where empno in (
. . . . . . . . >     select empno from emps
. . . . . . . . >     where exists (select * from depts where depts.deptno = emps.deptno)
. . . . . . . . >     except
. . . . . . . . >     select empno from emps
. . . . . . . . >     where exists (select * from depts2 where depts2.deptno <> emps.empno));
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                 column0                                                                                  |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                |
|   FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])                                                                        |
|     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                                        |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                                         |
|       LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[RIGHTANTI], setop=[true])                                                                                    |
|         FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[2]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])  |
|           LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                                   |
|             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                                   |
|             LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                    |
|               IteratorToFennelConverter                                                                                                                                  |
|                 IterCalcRel(expr#0..1=[{inputs}], expr#2=[<>($t1, $t0)], expr#3=[true], $f0=[$t0], $f0=[$t3], $condition=[$t2])                                          |
|                   IterCalcRel(expr#0..1=[{inputs}], $f0=[$t1], DEPTNO=[$t0])                                                                                             |
|                     FennelToIteratorConverter                                                                                                                            |
|                       FennelCartesianProductRel(leftouterjoin=[false])                                                                                                   |
|                         LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])                       |
|                         FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                              |
|                           LhxAggRel(groupCount=[1])                                                                                                                      |
|                             FennelRenameRel(fieldNames=[[$f0]])                                                                                                          |
|                               FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                 |
|         FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])  |
|           LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                   |
|             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                |
|             LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                    |
|               IteratorToFennelConverter                                                                                                                                  |
|                 IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])                                                                                   |
|                   FennelToIteratorConverter                                                                                                                              |
|                     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                        |
|                       FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])     |
|                       LhxAggRel(groupCount=[1])                                                                                                                          |
|                         FennelRenameRel(fieldNames=[[$f0]])                                                                                                              |
|                           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                     |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 7.1 some multiset queries are not decorrelated because they contain set ops.
0: jdbc:farrago:> explain plan without implementation for 
. . . . . . . . > select 'abc', multiset[deptno,empno] from emps;
+---------------------------------------------------------------------------------------------------+
|                                              column0                                              |
+---------------------------------------------------------------------------------------------------+
| ProjectRel(EXPR$0=['abc'], EXPR$1=[$SLICE($10)])                                                  |
|   CorrelatorRel(condition=[true], joinType=[inner], correlations=[[var0=offset2, var1=offset0]])  |
|     TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                                |
|     CollectRel                                                                                    |
|       UnionRel(all=[true])                                                                        |
|         ProjectRel(EXPR$0=[$cor0.DEPTNO])                                                         |
|           OneRowRel                                                                               |
|         ProjectRel(EXPR$0=[$cor1.EMPNO])                                                          |
|           OneRowRel                                                                               |
+---------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for 
. . . . . . . . > select * from unnest(select multiset[deptno] from depts);
+-------------------------------------------------------------------------------------------+
|                                          column0                                          |
+-------------------------------------------------------------------------------------------+
| ProjectRel(EXPR$0=[$0])                                                                   |
|   UncollectRel                                                                            |
|     ProjectRel(EXPR$0=[$0])                                                               |
|       ProjectRel(EXPR$0=[$SLICE($2)])                                                     |
|         CorrelatorRel(condition=[true], joinType=[inner], correlations=[[var0=offset0]])  |
|           TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                 |
|           CollectRel                                                                      |
|             UnionRel(all=[true])                                                          |
|               ProjectRel(EXPR$0=[$cor0.DEPTNO])                                           |
|                 OneRowRel                                                                 |
+-------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 8.1 on clause
0: jdbc:farrago:> -- correlation from outer qb is not decorrelated
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name from emps
. . . . . . . . > where exists (select * from depts d1 left outer join depts2 d2 
. . . . . . . . >               on d1.deptno = emps.deptno and d1.deptno = d2.deptno);
+----------------------------------------------------------------------------------------+
|                                        column0                                         |
+----------------------------------------------------------------------------------------+
| ProjectRel(NAME=[$1])                                                                  |
|   FilterRel(condition=[IS TRUE($10)])                                                  |
|     CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])    |
|       TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                   |
|       AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                     |
|         ProjectRel($f0=[true])                                                         |
|           ProjectRel(DEPTNO=[$0], NAME=[$1], DEPTNO0=[$2], NAME0=[$3])                 |
|             JoinRel(condition=[AND(=($0, $cor0.DEPTNO), =($0, $2))], joinType=[left])  |
|               TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                          |
|               TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])                         |
+----------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- non correlated scalar subq in ON clause gives parsing error
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select * from emps left outer join depts
. . . . . . . . > on emps.deptno = depts.deptno and emps.deptno = (select min(deptno) from depts2);
Error: java.lang.AssertionError: Internal error: Not a query: SELECT MIN(`DEPTNO`)
FROM `DEPTS2` (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- but this works
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select * from emps left outer join depts
. . . . . . . . > on emps.deptno = depts.deptno
. . . . . . . . > where emps.deptno = (select min(deptno) from depts2);
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                column0                                                                                 |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ProjectRel(EMPNO=[$0], NAME=[$1], DEPTNO=[$2], GENDER=[$3], CITY=[$4], EMPID=[$5], AGE=[$6], PUBLIC_KEY=[$7], SLACKER=[$8], MANAGER=[$9], DEPTNO0=[$10], NAME0=[$11])  |
|   FilterRel(condition=[=($2, $12)])                                                                                                                                    |
|     JoinRel(condition=[true], joinType=[left])                                                                                                                         |
|       JoinRel(condition=[=($2, $10)], joinType=[left])                                                                                                                 |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                                                                                                 |
|         TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                                                                                                |
|       ProjectRel(EXPR$0=[$0])                                                                                                                                          |
|         AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                                                                                                   |
|           ProjectRel($f0=[$0])                                                                                                                                         |
|             TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])                                                                                                           |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- so does this
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select * from emps left outer join depts
. . . . . . . . > on emps.deptno = depts.deptno
. . . . . . . . > where emps.deptno = (select min(deptno) from depts2 where depts2.deptno = depts.deptno);
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                column0                                                                                 |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ProjectRel(EMPNO=[$0], NAME=[$1], DEPTNO=[$2], GENDER=[$3], CITY=[$4], EMPID=[$5], AGE=[$6], PUBLIC_KEY=[$7], SLACKER=[$8], MANAGER=[$9], DEPTNO0=[$10], NAME0=[$11])  |
|   FilterRel(condition=[=($2, $12)])                                                                                                                                    |
|     CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset10]])                                                                                   |
|       JoinRel(condition=[=($2, $10)], joinType=[left])                                                                                                                 |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                                                                                                 |
|         TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                                                                                                |
|       ProjectRel(EXPR$0=[$0])                                                                                                                                          |
|         AggregateRel(groupCount=[0], agg#0=[MIN(0)])                                                                                                                   |
|           ProjectRel($f0=[$0])                                                                                                                                         |
|             FilterRel(condition=[=($0, $cor0.DEPTNO)])                                                                                                                 |
|               TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])                                                                                                         |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select * from emps left outer join depts
. . . . . . . . > on emps.deptno = depts.deptno
. . . . . . . . > where emps.deptno = (select min(deptno) from depts2 where depts2.deptno = depts.deptno);
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                                      column0                                                                                                                                       |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..13=[{inputs}], expr#14=[=($t2, $t12)], proj#0..11=[{exprs}], $condition=[$t14])                                                                                                                                                                                |
|   FennelToIteratorConverter                                                                                                                                                                                                                                                        |
|     LhxJoinRel(leftKeys=[[10]], rightKeys=[[1]], joinType=[LEFT])                                                                                                                                                                                                                  |
|       FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], uniqueKey=[true], preserveOrder=[false], outer=[true], inputKeyProj=[[2]], inputJoinProj=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], inputDirectiveProj=[[]])  |
|         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])                                                                                                                                 |
|       FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER EXPR$0, INTEGER $f0) NOT NULL])                                                                                                                                                                      |
|         LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                                                                                                                                  |
|           FennelRenameRel(fieldNames=[[$f0, $f0]])                                                                                                                                                                                                                                 |
|             LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                                                                                                                                          |
|               LhxAggRel(groupCount=[1])                                                                                                                                                                                                                                            |
|                 FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER $f0) NOT NULL])                                                                                                                                                                               |
|                   FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], uniqueKey=[true], preserveOrder=[false], outer=[true], inputKeyProj=[[0]], inputJoinProj=[[0]], inputDirectiveProj=[[]])               |
|                     FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                                                                                                                                     |
|               LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])                                                                                                                                           |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 9 views built on top of correlated queries
0: jdbc:farrago:> drop table emps2;
0: jdbc:farrago:> drop table depts2;
0: jdbc:farrago:> 
0: jdbc:farrago:> create table emps2 (name varchar(40), empno int, deptno int);
0: jdbc:farrago:> create table depts2 (name varchar(40), deptno int);
0: jdbc:farrago:> 
0: jdbc:farrago:> insert into emps2 select name, empno, deptno from emps;
0: jdbc:farrago:> insert into depts2 select name, deptno from depts;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 9.1 view over query with correlated IN subquery
0: jdbc:farrago:> create view v1 (ename, empno, deptno) as
. . . . . . . . > select name, empno, deptno from emps
. . . . . . . . > where deptno in (select deptno from depts where emps.empno < depts.deptno*10);
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name, empno, deptno from emps
. . . . . . . . > where deptno in (select deptno from depts where emps.empno < depts.deptno*10);
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                           column0                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                                                   |
|   FennelReshapeRel(projection=[[1, 0, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO) NOT NULL])  |
|     LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[2, 0]], joinType=[RIGHTSEMI])                                                                                                                                                 |
|       IteratorToFennelConverter                                                                                                                                                                                             |
|         IterCalcRel(expr#0..1=[{inputs}], expr#2=[10], expr#3=[*($t0, $t2)], expr#4=[<($t1, $t3)], proj#0..1=[{exprs}], $condition=[$t4])                                                                                   |
|           FennelToIteratorConverter                                                                                                                                                                                         |
|             FennelCartesianProductRel(leftouterjoin=[false])                                                                                                                                                                |
|               FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                                                                |
|               FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                                                                           |
|                 LhxAggRel(groupCount=[1])                                                                                                                                                                                   |
|                   FennelRenameRel(fieldNames=[[$f0]])                                                                                                                                                                       |
|                     FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                                                                              |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2]], index=[EMPS_UX], preserveOrder=[false])                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select * from v1;
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                           column0                                                                                                            |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                                                    |
|   FennelReshapeRel(projection=[[1, 0, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL ENAME, INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO) NOT NULL])  |
|     LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[2, 0]], joinType=[RIGHTSEMI])                                                                                                                                                  |
|       IteratorToFennelConverter                                                                                                                                                                                              |
|         IterCalcRel(expr#0..1=[{inputs}], expr#2=[10], expr#3=[*($t0, $t2)], expr#4=[<($t1, $t3)], proj#0..1=[{exprs}], $condition=[$t4])                                                                                    |
|           FennelToIteratorConverter                                                                                                                                                                                          |
|             FennelCartesianProductRel(leftouterjoin=[false])                                                                                                                                                                 |
|               FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                                                                 |
|               FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                                                                            |
|                 LhxAggRel(groupCount=[1])                                                                                                                                                                                    |
|                   FennelRenameRel(fieldNames=[[$f0]])                                                                                                                                                                        |
|                     FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                                                                               |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2]], index=[EMPS_UX], preserveOrder=[false])                                                                                                       |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name, empno, deptno from emps
. . . . . . . . > where deptno in (select deptno from depts where emps.empno < depts.deptno*10)
. . . . . . . . > order by name;
+--------+--------+---------+
|  NAME  | EMPNO  | DEPTNO  |
+--------+--------+---------+
| Eric   | 110    | 20      |
| Wilma  | 120    | 20      |
+--------+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from v1 order by ename;
+--------+--------+---------+
| ENAME  | EMPNO  | DEPTNO  |
+--------+--------+---------+
| Eric   | 110    | 20      |
| Wilma  | 120    | 20      |
+--------+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 9.2 view over query with correlated EXISTS subquery
0: jdbc:farrago:> create view v2 (ename, empno, deptno) as
. . . . . . . . > select name, empno, deptno from emps2
. . . . . . . . > where exists(select * from depts2 where depts2.deptno=emps2.deptno);
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name, empno, deptno from emps2
. . . . . . . . > where exists(select * from depts2 where depts2.deptno=emps2.deptno);
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                             column0                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                                                                                       |
|   FennelReshapeRel(projection=[[0, 1, 2]], filterOp=[COMP_EQ], filterOrdinals=[[4]], filterTuple=[[true]], outputRowType=[RecordType(VARCHAR(40) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, INTEGER EMPNO, INTEGER DEPTNO) NOT NULL])  |
|     LhxJoinRel(leftKeys=[[2]], rightKeys=[[0]], joinType=[LEFT])                                                                                                                                                                                                |
|       LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$EMPNO, SYS$CLUSTERED_INDEX$EMPS2$NAME]])                                                                   |
|       LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                                                                                                                 |
|         IteratorToFennelConverter                                                                                                                                                                                                                               |
|           IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])                                                                                                                                                                                |
|             FennelToIteratorConverter                                                                                                                                                                                                                           |
|               LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                                                                                                                     |
|                 LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])                                                                                                                      |
|                 LhxAggRel(groupCount=[1])                                                                                                                                                                                                                       |
|                   FennelRenameRel(fieldNames=[[$f0]])                                                                                                                                                                                                           |
|                     LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO]])                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select * from v2;
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                             column0                                                                                                                              |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                                                                                        |
|   FennelReshapeRel(projection=[[0, 1, 2]], filterOp=[COMP_EQ], filterOrdinals=[[4]], filterTuple=[[true]], outputRowType=[RecordType(VARCHAR(40) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" ENAME, INTEGER EMPNO, INTEGER DEPTNO) NOT NULL])  |
|     LhxJoinRel(leftKeys=[[2]], rightKeys=[[0]], joinType=[LEFT])                                                                                                                                                                                                 |
|       LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$EMPNO, SYS$CLUSTERED_INDEX$EMPS2$NAME]])                                                                    |
|       LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                                                                                                                  |
|         IteratorToFennelConverter                                                                                                                                                                                                                                |
|           IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])                                                                                                                                                                                 |
|             FennelToIteratorConverter                                                                                                                                                                                                                            |
|               LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                                                                                                                      |
|                 LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])                                                                                                                       |
|                 LhxAggRel(groupCount=[1])                                                                                                                                                                                                                        |
|                   FennelRenameRel(fieldNames=[[$f0]])                                                                                                                                                                                                            |
|                     LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO]])                                                                                                                     |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select name, empno, deptno from emps2
. . . . . . . . > where exists(select * from depts2 where depts2.deptno=emps2.deptno)
. . . . . . . . > order by name;
+--------+--------+---------+
|  NAME  | EMPNO  | DEPTNO  |
+--------+--------+---------+
| Eric   | 110    | 20      |
| Fred   | 100    | 10      |
| Wilma  | 120    | 20      |
+--------+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from v2 order by ename;
+--------+--------+---------+
| ENAME  | EMPNO  | DEPTNO  |
+--------+--------+---------+
| Eric   | 110    | 20      |
| Fred   | 100    | 10      |
| Wilma  | 120    | 20      |
+--------+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 9.3 view on top of joined views, each over queries with correlations
0: jdbc:farrago:> create view v3 (empnov1, empnov2) as
. . . . . . . . > select v1.empno, v2.empno from v1, v2 where v1.empno = v2.empno;
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select v1.empno, v2.empno from v1, v2 where v1.empno = v2.empno;
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                  column0                                                                                  |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                 |
|   FennelRenameRel(fieldNames=[[EMPNO, EMPNO]])                                                                                                                            |
|     FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER EMPNO0) NOT NULL])                                                    |
|       LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])                                                                                                       |
|         FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER CAST($0):INTEGER) NOT NULL])                                      |
|           LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])                                                                                         |
|             IteratorToFennelConverter                                                                                                                                     |
|               IterCalcRel(expr#0..1=[{inputs}], expr#2=[10], expr#3=[*($t0, $t2)], expr#4=[<($t1, $t3)], proj#0..1=[{exprs}], $condition=[$t4])                           |
|                 FennelToIteratorConverter                                                                                                                                 |
|                   FennelCartesianProductRel(leftouterjoin=[false])                                                                                                        |
|                     FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])        |
|                     FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                   |
|                       LhxAggRel(groupCount=[1])                                                                                                                           |
|                         FennelRenameRel(fieldNames=[[$f0]])                                                                                                               |
|                           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                      |
|             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                 |
|         FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER EMPNO) NOT NULL])            |
|           LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                    |
|             LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[1, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$EMPNO]])  |
|             LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                     |
|               IteratorToFennelConverter                                                                                                                                   |
|                 IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])                                                                                    |
|                   FennelToIteratorConverter                                                                                                                               |
|                     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                         |
|                       LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])                          |
|                       LhxAggRel(groupCount=[1])                                                                                                                           |
|                         FennelRenameRel(fieldNames=[[$f0]])                                                                                                               |
|                           LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO]])                        |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select * from v3;
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                  column0                                                                                  |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                 |
|   FennelRenameRel(fieldNames=[[EMPNOV1, EMPNOV2]])                                                                                                                        |
|     FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER EMPNO0) NOT NULL])                                                    |
|       LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])                                                                                                       |
|         FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER CAST($0):INTEGER) NOT NULL])                                      |
|           LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])                                                                                         |
|             IteratorToFennelConverter                                                                                                                                     |
|               IterCalcRel(expr#0..1=[{inputs}], expr#2=[10], expr#3=[*($t0, $t2)], expr#4=[<($t1, $t3)], proj#0..1=[{exprs}], $condition=[$t4])                           |
|                 FennelToIteratorConverter                                                                                                                                 |
|                   FennelCartesianProductRel(leftouterjoin=[false])                                                                                                        |
|                     FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])        |
|                     FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                   |
|                       LhxAggRel(groupCount=[1])                                                                                                                           |
|                         FennelRenameRel(fieldNames=[[$f0]])                                                                                                               |
|                           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                      |
|             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                 |
|         FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER EMPNO) NOT NULL])            |
|           LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                    |
|             LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[1, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$EMPNO]])  |
|             LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                     |
|               IteratorToFennelConverter                                                                                                                                   |
|                 IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])                                                                                    |
|                   FennelToIteratorConverter                                                                                                                               |
|                     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                         |
|                       LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])                          |
|                       LhxAggRel(groupCount=[1])                                                                                                                           |
|                         FennelRenameRel(fieldNames=[[$f0]])                                                                                                               |
|                           LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO]])                        |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select v1.empno, v2.empno from v1, v2
. . . . . . . . > where v1.empno = v2.empno order by v1.empno;
+--------+--------+
| EMPNO  | EMPNO  |
+--------+--------+
| 110    | 110    |
| 120    | 120    |
+--------+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from v3 order by v3.empnov1;
+----------+----------+
| EMPNOV1  | EMPNOV2  |
+----------+----------+
| 110      | 110      |
| 120      | 120      |
+----------+----------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 9.4 view over views that are correlated to each other.
0: jdbc:farrago:> -- Each of the views is itself over queries with correlations.
0: jdbc:farrago:> create view v4 (empno, deptno) as
. . . . . . . . > select empno, deptno from v1
. . . . . . . . > where v1.empno in (select v2.empno from v2 where v2.deptno = v1.deptno);
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select empno, deptno from v1
. . . . . . . . > where v1.empno in (select v2.empno from v2 where v2.deptno = v1.deptno);
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                         column0                                                                                          |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                |
|   FennelReshapeRel(projection=[[0, 1]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO) NOT NULL])                                                            |
|     LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])                                                                                                              |
|       IteratorToFennelConverter                                                                                                                                                          |
|         IterCalcRel(expr#0..1=[{inputs}], expr#2=[10], expr#3=[*($t0, $t2)], expr#4=[<($t1, $t3)], proj#0..1=[{exprs}], $condition=[$t4])                                                |
|           FennelToIteratorConverter                                                                                                                                                      |
|             FennelCartesianProductRel(leftouterjoin=[false])                                                                                                                             |
|               FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                             |
|               FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                                        |
|                 LhxAggRel(groupCount=[1])                                                                                                                                                |
|                   FennelRenameRel(fieldNames=[[$f0]])                                                                                                                                    |
|                     FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                                           |
|       FennelReshapeRel(projection=[[0, 1]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO) NOT NULL])                                                        |
|         LhxJoinRel(leftKeys=[[2, 1]], rightKeys=[[0, 1]], joinType=[LEFTSEMI])                                                                                                           |
|           FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO, INTEGER CAST($0):INTEGER) NOT NULL])                       |
|             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                                |
|           FennelReshapeRel(projection=[[2, 0]], outputRowType=[RecordType(INTEGER EMPNO, INTEGER NOT NULL $f0) NOT NULL])                                                                |
|             LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])                                                                                                                |
|               FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])                                                 |
|                 LhxAggRel(groupCount=[1])                                                                                                                                                |
|                   FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])                                                                          |
|                     LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])                                                                                              |
|                       IteratorToFennelConverter                                                                                                                                          |
|                         IterCalcRel(expr#0..1=[{inputs}], expr#2=[10], expr#3=[*($t0, $t2)], expr#4=[<($t1, $t3)], proj#0..1=[{exprs}], $condition=[$t4])                                |
|                           FennelToIteratorConverter                                                                                                                                      |
|                             FennelCartesianProductRel(leftouterjoin=[false])                                                                                                             |
|                               FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])             |
|                               FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                        |
|                                 LhxAggRel(groupCount=[1])                                                                                                                                |
|                                   FennelRenameRel(fieldNames=[[$f0]])                                                                                                                    |
|                                     FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                           |
|                       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                      |
|               FennelReshapeRel(projection=[[0, 1]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER EMPNO, INTEGER DEPTNO) NOT NULL])  |
|                 LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                             |
|                   LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[1, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$EMPNO]])           |
|                   LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                              |
|                     IteratorToFennelConverter                                                                                                                                            |
|                       IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])                                                                                             |
|                         FennelToIteratorConverter                                                                                                                                        |
|                           LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                                  |
|                             LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])                                   |
|                             LhxAggRel(groupCount=[1])                                                                                                                                    |
|                               FennelRenameRel(fieldNames=[[$f0]])                                                                                                                        |
|                                 LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO]])                                 |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select * from v4;
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                         column0                                                                                          |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                |
|   FennelReshapeRel(projection=[[0, 1]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO) NOT NULL])                                                            |
|     LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])                                                                                                              |
|       IteratorToFennelConverter                                                                                                                                                          |
|         IterCalcRel(expr#0..1=[{inputs}], expr#2=[10], expr#3=[*($t0, $t2)], expr#4=[<($t1, $t3)], proj#0..1=[{exprs}], $condition=[$t4])                                                |
|           FennelToIteratorConverter                                                                                                                                                      |
|             FennelCartesianProductRel(leftouterjoin=[false])                                                                                                                             |
|               FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                             |
|               FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                                        |
|                 LhxAggRel(groupCount=[1])                                                                                                                                                |
|                   FennelRenameRel(fieldNames=[[$f0]])                                                                                                                                    |
|                     FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                                           |
|       FennelReshapeRel(projection=[[0, 1]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO) NOT NULL])                                                        |
|         LhxJoinRel(leftKeys=[[2, 1]], rightKeys=[[0, 1]], joinType=[LEFTSEMI])                                                                                                           |
|           FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO, INTEGER CAST($0):INTEGER) NOT NULL])                       |
|             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                                |
|           FennelReshapeRel(projection=[[2, 0]], outputRowType=[RecordType(INTEGER EMPNO, INTEGER NOT NULL $f0) NOT NULL])                                                                |
|             LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])                                                                                                                |
|               FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])                                                 |
|                 LhxAggRel(groupCount=[1])                                                                                                                                                |
|                   FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])                                                                          |
|                     LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])                                                                                              |
|                       IteratorToFennelConverter                                                                                                                                          |
|                         IterCalcRel(expr#0..1=[{inputs}], expr#2=[10], expr#3=[*($t0, $t2)], expr#4=[<($t1, $t3)], proj#0..1=[{exprs}], $condition=[$t4])                                |
|                           FennelToIteratorConverter                                                                                                                                      |
|                             FennelCartesianProductRel(leftouterjoin=[false])                                                                                                             |
|                               FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])             |
|                               FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                        |
|                                 LhxAggRel(groupCount=[1])                                                                                                                                |
|                                   FennelRenameRel(fieldNames=[[$f0]])                                                                                                                    |
|                                     FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                           |
|                       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                      |
|               FennelReshapeRel(projection=[[0, 1]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER EMPNO, INTEGER DEPTNO) NOT NULL])  |
|                 LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                             |
|                   LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[1, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$EMPNO]])           |
|                   LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                              |
|                     IteratorToFennelConverter                                                                                                                                            |
|                       IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])                                                                                             |
|                         FennelToIteratorConverter                                                                                                                                        |
|                           LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                                  |
|                             LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])                                   |
|                             LhxAggRel(groupCount=[1])                                                                                                                                    |
|                               FennelRenameRel(fieldNames=[[$f0]])                                                                                                                        |
|                                 LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO]])                                 |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select empno, deptno from v1
. . . . . . . . > where v1.empno in (select empno from v2 where v2.deptno = v1.deptno)
. . . . . . . . > order by empno;
+--------+---------+
| EMPNO  | DEPTNO  |
+--------+---------+
| 110    | 20      |
| 120    | 20      |
+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from v4 order by empno;
+--------+---------+
| EMPNO  | DEPTNO  |
+--------+---------+
| 110    | 20      |
| 120    | 20      |
+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 9.5 view on top of two views that are correlated to each other, within a
0: jdbc:farrago:> -- scalar subquery.
0: jdbc:farrago:> create view v5 (empno, deptno) as
. . . . . . . . > select empno, deptno from v1
. . . . . . . . > where v1.empno = (select max(v2.empno) from v2 where v2.deptno = v1.deptno);
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select empno, deptno from v1
. . . . . . . . > where v1.empno = (select max(v2.empno) from v2 where v2.deptno = v1.deptno);
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                           column0                                                                                            |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..2=[{inputs}], expr#3=[=($t0, $t2)], proj#0..1=[{exprs}], $condition=[$t3])                                                                                               |
|   FennelToIteratorConverter                                                                                                                                                                  |
|     LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])                                                                                                                  |
|       IteratorToFennelConverter                                                                                                                                                              |
|         IterCalcRel(expr#0..1=[{inputs}], expr#2=[10], expr#3=[*($t0, $t2)], expr#4=[<($t1, $t3)], proj#0..1=[{exprs}], $condition=[$t4])                                                    |
|           FennelToIteratorConverter                                                                                                                                                          |
|             FennelCartesianProductRel(leftouterjoin=[false])                                                                                                                                 |
|               FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                                 |
|               FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                                            |
|                 LhxAggRel(groupCount=[1])                                                                                                                                                    |
|                   FennelRenameRel(fieldNames=[[$f0]])                                                                                                                                        |
|                     FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                                               |
|       FennelReshapeRel(projection=[[0, 1, 2]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO, INTEGER EXPR$0) NOT NULL])                                         |
|         LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[LEFT])                                                                                                                         |
|           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                                      |
|           FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER EXPR$0, INTEGER NOT NULL $f0) NOT NULL])                                                                   |
|             LhxAggRel(groupCount=[1], agg#0=[MAX(1)])                                                                                                                                        |
|               FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER $f0) NOT NULL])                                                                  |
|                 LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])                                                                                                                |
|                   FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])                                                 |
|                     LhxAggRel(groupCount=[1])                                                                                                                                                |
|                       FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])                                                                          |
|                         LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])                                                                                              |
|                           IteratorToFennelConverter                                                                                                                                          |
|                             IterCalcRel(expr#0..1=[{inputs}], expr#2=[10], expr#3=[*($t0, $t2)], expr#4=[<($t1, $t3)], proj#0..1=[{exprs}], $condition=[$t4])                                |
|                               FennelToIteratorConverter                                                                                                                                      |
|                                 FennelCartesianProductRel(leftouterjoin=[false])                                                                                                             |
|                                   FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])             |
|                                   FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                        |
|                                     LhxAggRel(groupCount=[1])                                                                                                                                |
|                                       FennelRenameRel(fieldNames=[[$f0]])                                                                                                                    |
|                                         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                           |
|                           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                      |
|                   FennelReshapeRel(projection=[[0, 1]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER EMPNO, INTEGER DEPTNO) NOT NULL])  |
|                     LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                             |
|                       LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[1, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$EMPNO]])           |
|                       LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                              |
|                         IteratorToFennelConverter                                                                                                                                            |
|                           IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])                                                                                             |
|                             FennelToIteratorConverter                                                                                                                                        |
|                               LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                                  |
|                                 LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])                                   |
|                                 LhxAggRel(groupCount=[1])                                                                                                                                    |
|                                   FennelRenameRel(fieldNames=[[$f0]])                                                                                                                        |
|                                     LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO]])                                 |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select * from v5;
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                           column0                                                                                            |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..2=[{inputs}], expr#3=[=($t0, $t2)], proj#0..1=[{exprs}], $condition=[$t3])                                                                                               |
|   FennelToIteratorConverter                                                                                                                                                                  |
|     LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])                                                                                                                  |
|       IteratorToFennelConverter                                                                                                                                                              |
|         IterCalcRel(expr#0..1=[{inputs}], expr#2=[10], expr#3=[*($t0, $t2)], expr#4=[<($t1, $t3)], proj#0..1=[{exprs}], $condition=[$t4])                                                    |
|           FennelToIteratorConverter                                                                                                                                                          |
|             FennelCartesianProductRel(leftouterjoin=[false])                                                                                                                                 |
|               FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                                 |
|               FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                                            |
|                 LhxAggRel(groupCount=[1])                                                                                                                                                    |
|                   FennelRenameRel(fieldNames=[[$f0]])                                                                                                                                        |
|                     FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                                               |
|       FennelReshapeRel(projection=[[0, 1, 2]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO, INTEGER EXPR$0) NOT NULL])                                         |
|         LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[LEFT])                                                                                                                         |
|           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                                      |
|           FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER EXPR$0, INTEGER NOT NULL $f0) NOT NULL])                                                                   |
|             LhxAggRel(groupCount=[1], agg#0=[MAX(1)])                                                                                                                                        |
|               FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER $f0) NOT NULL])                                                                  |
|                 LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])                                                                                                                |
|                   FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])                                                 |
|                     LhxAggRel(groupCount=[1])                                                                                                                                                |
|                       FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])                                                                          |
|                         LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])                                                                                              |
|                           IteratorToFennelConverter                                                                                                                                          |
|                             IterCalcRel(expr#0..1=[{inputs}], expr#2=[10], expr#3=[*($t0, $t2)], expr#4=[<($t1, $t3)], proj#0..1=[{exprs}], $condition=[$t4])                                |
|                               FennelToIteratorConverter                                                                                                                                      |
|                                 FennelCartesianProductRel(leftouterjoin=[false])                                                                                                             |
|                                   FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])             |
|                                   FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                        |
|                                     LhxAggRel(groupCount=[1])                                                                                                                                |
|                                       FennelRenameRel(fieldNames=[[$f0]])                                                                                                                    |
|                                         FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])                                           |
|                           FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                                      |
|                   FennelReshapeRel(projection=[[0, 1]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER EMPNO, INTEGER DEPTNO) NOT NULL])  |
|                     LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])                                                                                                             |
|                       LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[1, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$EMPNO]])           |
|                       LhxAggRel(groupCount=[1], agg#0=[MIN(1)])                                                                                                                              |
|                         IteratorToFennelConverter                                                                                                                                            |
|                           IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])                                                                                             |
|                             FennelToIteratorConverter                                                                                                                                        |
|                               LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                                  |
|                                 LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])                                   |
|                                 LhxAggRel(groupCount=[1])                                                                                                                                    |
|                                   FennelRenameRel(fieldNames=[[$f0]])                                                                                                                        |
|                                     LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO]])                                 |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select empno, deptno from v1
. . . . . . . . > where v1.empno = (select max(v2.empno) from v2 where v2.deptno = v1.deptno);
+--------+---------+
| EMPNO  | DEPTNO  |
+--------+---------+
| 120    | 20      |
+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from v5;
+--------+---------+
| EMPNO  | DEPTNO  |
+--------+---------+
| 120    | 20      |
+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> drop view v3;
0: jdbc:farrago:> drop view v4;
0: jdbc:farrago:> drop view v5;
0: jdbc:farrago:> 
0: jdbc:farrago:> drop view v1;
0: jdbc:farrago:> drop view v2;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 10 --
0: jdbc:farrago:> -- Optimization to decorrelate without usign value generator.
0: jdbc:farrago:> -- This can be done when the inner relation itself can be the lookup table
0: jdbc:farrago:> -- without having to join with the outer relation first
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 10.1 outer relations are not referenced in the select list of the subquery.
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select avg((select deptno from depts where deptno = emps.deptno))
. . . . . . . . > from emps;
+----------------------------------------------------------------------------------------+
|                                        column0                                         |
+----------------------------------------------------------------------------------------+
| ProjectRel(EXPR$0=[$0])                                                                |
|   AggregateRel(groupCount=[0], agg#0=[AVG(0)])                                         |
|     ProjectRel($f0=[$10])                                                              |
|       CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])  |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                 |
|         AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])                          |
|           ProjectRel(DEPTNO=[$0])                                                      |
|             FilterRel(condition=[=($0, $cor0.DEPTNO)])                                 |
|               TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                          |
+----------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select avg((select deptno from depts where deptno = emps.deptno))
. . . . . . . . > from emps;
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                             column0                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                       |
|   FennelRenameRel(fieldNames=[[EXPR$0]])                                                                                                                        |
|     IteratorToFennelConverter                                                                                                                                   |
|       IterCalcRel(expr#0..1=[{inputs}], expr#2=[/($t0, $t1)], expr#3=[CAST($t2):INTEGER], $f0=[$t3])                                                            |
|         FennelToIteratorConverter                                                                                                                               |
|           FennelAggRel(groupCount=[0], agg#0=[SUM(0)], agg#1=[COUNT(0)])                                                                                        |
|             FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER $f0) NOT NULL])                                                                |
|               LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                      |
|                 FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                      |
|                 FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])  |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select avg((select deptno from depts where deptno = emps.deptno))
. . . . . . . . > from emps;
+---------+
| EXPR$0  |
+---------+
| 16      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- check results against this query
0: jdbc:farrago:> explain plan for
. . . . . . . . > select (select deptno from depts where deptno = emps.deptno)
. . . . . . . . > from emps;
+-------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                        column0                                                                        |
+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                             |
|   FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER EXPR$0) NOT NULL])                                                             |
|     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                      |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                      |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])  |
+-------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select (select deptno from depts where deptno = emps.deptno) 
. . . . . . . . > from emps
. . . . . . . . > order by 1;
+---------+
| EXPR$0  |
+---------+
|         |
| 10      |
| 20      |
| 20      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 10.2 outer relations are referenced in the select list of the subquery.
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select avg((select emps.deptno from depts where deptno = emps.deptno))
. . . . . . . . > from emps;
+------------------------------------------------------------------------------------------------------+
|                                               column0                                                |
+------------------------------------------------------------------------------------------------------+
| ProjectRel(EXPR$0=[$0])                                                                              |
|   AggregateRel(groupCount=[0], agg#0=[AVG(0)])                                                       |
|     ProjectRel($f0=[$10])                                                                            |
|       CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2, var1=offset2]])  |
|         TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                               |
|         AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])                                        |
|           ProjectRel(DEPTNO=[$cor1.DEPTNO])                                                          |
|             FilterRel(condition=[=($0, $cor0.DEPTNO)])                                               |
|               TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                        |
+------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select avg((select emps.deptno from depts where deptno = emps.deptno))
. . . . . . . . > from emps;
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                         column0                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                               |
|   FennelRenameRel(fieldNames=[[EXPR$0]])                                                                                                                                                |
|     IteratorToFennelConverter                                                                                                                                                           |
|       IterCalcRel(expr#0..1=[{inputs}], expr#2=[/($t0, $t1)], expr#3=[CAST($t2):INTEGER], $f0=[$t3])                                                                                    |
|         FennelToIteratorConverter                                                                                                                                                       |
|           FennelAggRel(groupCount=[0], agg#0=[SUM(0)], agg#1=[COUNT(0)])                                                                                                                |
|             IteratorToFennelConverter                                                                                                                                                   |
|               IterCalcRel(expr#0..1=[{inputs}], expr#2=[IS NULL($t1)], expr#3=[null], expr#4=[CAST($t3):INTEGER], expr#5=[CAST($t0):INTEGER], expr#6=[CASE($t2, $t4, $t5)], $f0=[$t6])  |
|                 FennelToIteratorConverter                                                                                                                                               |
|                   LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                                          |
|                     FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                                          |
|                     FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select avg((select emps.deptno from depts where deptno = emps.deptno))
. . . . . . . . > from emps;
+---------+
| EXPR$0  |
+---------+
| 16      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- check result against this query
0: jdbc:farrago:> explain plan for
. . . . . . . . > select (select emps.deptno from depts where deptno = emps.deptno) 
. . . . . . . . > from emps;
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                   column0                                                                                    |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..1=[{inputs}], expr#2=[IS NULL($t1)], expr#3=[null], expr#4=[CAST($t3):INTEGER], expr#5=[CAST($t0):INTEGER], expr#6=[CASE($t2, $t4, $t5)], EXPR$0=[$t6])  |
|   FennelToIteratorConverter                                                                                                                                                  |
|     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                                             |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                                             |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                         |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select (select emps.deptno from depts where deptno = emps.deptno) 
. . . . . . . . > from emps
. . . . . . . . > order by 1;
+---------+
| EXPR$0  |
+---------+
|         |
| 10      |
| 20      |
| 20      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- negative cases
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select (select deptno from emps where deptno = depts.deptno) 
. . . . . . . . > from depts;
+------------------------------------------------------------------------------------+
|                                      column0                                       |
+------------------------------------------------------------------------------------+
| ProjectRel(EXPR$0=[$2])                                                            |
|   CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset0]])  |
|     TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                |
|     AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])                          |
|       ProjectRel(DEPTNO=[$2])                                                      |
|         FilterRel(condition=[=($2, $cor0.DEPTNO)])                                 |
|           TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                           |
+------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select (select deptno from emps where deptno = depts.deptno) 
. . . . . . . . > from depts;
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                             column0                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                       |
|   FennelReshapeRel(projection=[[2]], outputRowType=[RecordType(INTEGER EXPR$0) NOT NULL])                                                                       |
|     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                                |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])            |
|       LhxAggRel(groupCount=[1], agg#0=[SINGLE_VALUE(1)])                                                                                                        |
|         FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL DEPTNO) NOT NULL])                               |
|           LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                         |
|             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                          |
|             LhxAggRel(groupCount=[1])                                                                                                                           |
|               FennelRenameRel(fieldNames=[[$f0]])                                                                                                               |
|                 FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])  |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select (select depts.deptno from emps where deptno = depts.deptno) 
. . . . . . . . > from depts;
+--------------------------------------------------------------------------------------------------+
|                                             column0                                              |
+--------------------------------------------------------------------------------------------------+
| ProjectRel(EXPR$0=[$2])                                                                          |
|   CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset0, var1=offset0]])  |
|     TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])                                              |
|     AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])                                        |
|       ProjectRel(DEPTNO=[$cor1.DEPTNO])                                                          |
|         FilterRel(condition=[=($2, $cor0.DEPTNO)])                                               |
|           TableAccessRel(table=[[LOCALDB, SALES, EMPS]])                                         |
+--------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select (select depts.deptno from emps where deptno = depts.deptno) 
. . . . . . . . > from depts;
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                               column0                                                                               |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                           |
|   FennelReshapeRel(projection=[[2]], outputRowType=[RecordType(INTEGER EXPR$0) NOT NULL])                                                                           |
|     LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[0, 0]], joinType=[RIGHT])                                                                                             |
|       LhxAggRel(groupCount=[2], agg#0=[SINGLE_VALUE(2)])                                                                                                            |
|         FennelReshapeRel(projection=[[0, 1, 1]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL $f00, INTEGER NOT NULL DEPTNO) NOT NULL])         |
|           FennelCartesianProductRel(leftouterjoin=[false])                                                                                                          |
|             FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])                                                           |
|               LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                         |
|                 FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                          |
|                 LhxAggRel(groupCount=[1])                                                                                                                           |
|                   FennelRenameRel(fieldNames=[[$f0]])                                                                                                               |
|                     FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])  |
|             FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                     |
|               LhxAggRel(groupCount=[1])                                                                                                                             |
|                 FennelRenameRel(fieldNames=[[$f0]])                                                                                                                 |
|                   FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])    |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 10.3 Unique columns need to be not null to be considered unique keys.
0: jdbc:farrago:> create table test1(a int primary key, b int);
0: jdbc:farrago:> create table test2(a int primary key, b int);
0: jdbc:farrago:> create table test3(a int primary key, b int unique);
0: jdbc:farrago:> create table test4(a int primary key, b int not null unique);
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for 
. . . . . . . . > select (select test1.b from test1 where test1.a = test2.a) from test2;
+-------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                        column0                                                                        |
+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                             |
|   FennelReshapeRel(projection=[[2]], outputRowType=[RecordType(INTEGER EXPR$0) NOT NULL])                                                             |
|     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                      |
|       LcsRowScanRel(table=[[LOCALDB, SALES, TEST2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST2$A]])                             |
|       LcsRowScanRel(table=[[LOCALDB, SALES, TEST1]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST1$A, SYS$CLUSTERED_INDEX$TEST1$B]])  |
+-------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for 
. . . . . . . . > select (select test1.b from test1 where test1.b = test2.a) from test2;
+--------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                        column0                                                                         |
+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                              |
|   FennelReshapeRel(projection=[[2]], outputRowType=[RecordType(INTEGER EXPR$0) NOT NULL])                                                              |
|     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                       |
|       LcsRowScanRel(table=[[LOCALDB, SALES, TEST2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST2$A]])                              |
|       LhxAggRel(groupCount=[1], agg#0=[SINGLE_VALUE(1)])                                                                                               |
|         FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER B) NOT NULL])                                    |
|           LhxJoinRel(leftKeys=[[0]], rightKeys=[[1]], joinType=[INNER])                                                                                |
|             LcsRowScanRel(table=[[LOCALDB, SALES, TEST1]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST1$B]])                        |
|             FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])                 |
|               LcsIndexAggRel(groupCount=[1])                                                                                                           |
|                 FennelRenameRel(fieldNames=[[$f0, SRID, SegmentDesc, Segment]])                                                                        |
|                   LcsIndexOnlyScanRel(table=[[LOCALDB, SALES, TEST2]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$TEST2], projection=[[0, 1, 2, 3]])  |
+--------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for 
. . . . . . . . > select (select test2.b from test1 where test1.a = test2.a) from test2;
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                   column0                                                                                    |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..2=[{inputs}], expr#3=[IS NULL($t2)], expr#4=[null], expr#5=[CAST($t4):INTEGER], expr#6=[CAST($t1):INTEGER], expr#7=[CASE($t3, $t5, $t6)], EXPR$0=[$t7])  |
|   FennelToIteratorConverter                                                                                                                                                  |
|     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                                             |
|       LcsRowScanRel(table=[[LOCALDB, SALES, TEST2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST2$A, SYS$CLUSTERED_INDEX$TEST2$B]])                         |
|       LcsRowScanRel(table=[[LOCALDB, SALES, TEST1]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST1$A]])                                                    |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for 
. . . . . . . . > select (select test3.b from test3 where test3.b = test2.a) from test2;
+--------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                        column0                                                                         |
+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                              |
|   FennelReshapeRel(projection=[[2]], outputRowType=[RecordType(INTEGER EXPR$0) NOT NULL])                                                              |
|     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                       |
|       LcsRowScanRel(table=[[LOCALDB, SALES, TEST2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST2$A]])                              |
|       LhxAggRel(groupCount=[1], agg#0=[SINGLE_VALUE(1)])                                                                                               |
|         FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER B) NOT NULL])                                    |
|           LhxJoinRel(leftKeys=[[0]], rightKeys=[[1]], joinType=[INNER])                                                                                |
|             LcsRowScanRel(table=[[LOCALDB, SALES, TEST3]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST3$B]])                        |
|             FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])                 |
|               LcsIndexAggRel(groupCount=[1])                                                                                                           |
|                 FennelRenameRel(fieldNames=[[$f0, SRID, SegmentDesc, Segment]])                                                                        |
|                   LcsIndexOnlyScanRel(table=[[LOCALDB, SALES, TEST2]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$TEST2], projection=[[0, 1, 2, 3]])  |
+--------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for 
. . . . . . . . > select (select test4.b from test4 where test4.b = test2.a) from test2;
+----------------------------------------------------------------------------------------------------------------------------+
|                                                          column0                                                           |
+----------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                  |
|   FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER EXPR$0) NOT NULL])                                  |
|     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                           |
|       LcsRowScanRel(table=[[LOCALDB, SALES, TEST2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST2$A]])  |
|       LcsRowScanRel(table=[[LOCALDB, SALES, TEST4]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST4$B]])  |
+----------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- lookup table is a join
0: jdbc:farrago:> explain plan for
. . . . . . . . > select 
. . . . . . . . >     (select (test1.b + test3.b) 
. . . . . . . . >      from test1, test3 
. . . . . . . . >      where test3.a = test2.b and test1.a = test2.a) 
. . . . . . . . > from test2;
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                 column0                                                                                                  |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..6=[{inputs}], expr#7=[IS NULL($t4)], expr#8=[null], expr#9=[CAST($t8):INTEGER], expr#10=[+($t3, $t5)], expr#11=[CAST($t10):INTEGER], expr#12=[CASE($t7, $t9, $t11)], EXPR$0=[$t12])  |
|   FennelToIteratorConverter                                                                                                                                                                              |
|     LhxJoinRel(leftKeys=[[1, 0]], rightKeys=[[4, 0]], joinType=[LEFT])                                                                                                                                   |
|       LcsRowScanRel(table=[[LOCALDB, SALES, TEST2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST2$A, SYS$CLUSTERED_INDEX$TEST2$B]])                                                     |
|       FennelReshapeRel(projection=[[0, 1, 2, 3, 2]], outputRowType=[RecordType(INTEGER NOT NULL A, INTEGER B, INTEGER NOT NULL A0, INTEGER B0, INTEGER CAST($2):INTEGER) NOT NULL])                      |
|         FennelCartesianProductRel(leftouterjoin=[false])                                                                                                                                                 |
|           LcsRowScanRel(table=[[LOCALDB, SALES, TEST1]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST1$A, SYS$CLUSTERED_INDEX$TEST1$B]])                                                 |
|           LcsRowScanRel(table=[[LOCALDB, SALES, TEST3]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST3$A, SYS$CLUSTERED_INDEX$TEST3$B]])                                                 |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select 
. . . . . . . . >     (select (test1.b + test4.b) 
. . . . . . . . >      from test1, test4 
. . . . . . . . >      where test4.b = test2.b and test1.a = test2.a) 
. . . . . . . . > from test2;
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                column0                                                                                                 |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..5=[{inputs}], expr#6=[IS NULL($t4)], expr#7=[null], expr#8=[CAST($t7):INTEGER], expr#9=[+($t3, $t4)], expr#10=[CAST($t9):INTEGER], expr#11=[CASE($t6, $t8, $t10)], EXPR$0=[$t11])  |
|   FennelToIteratorConverter                                                                                                                                                                            |
|     LhxJoinRel(leftKeys=[[1, 0]], rightKeys=[[3, 0]], joinType=[LEFT])                                                                                                                                 |
|       LcsRowScanRel(table=[[LOCALDB, SALES, TEST2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST2$A, SYS$CLUSTERED_INDEX$TEST2$B]])                                                   |
|       FennelReshapeRel(projection=[[0, 1, 2, 2]], outputRowType=[RecordType(INTEGER NOT NULL A, INTEGER B, INTEGER NOT NULL B0, INTEGER CAST($2):INTEGER) NOT NULL])                                   |
|         FennelCartesianProductRel(leftouterjoin=[false])                                                                                                                                               |
|           LcsRowScanRel(table=[[LOCALDB, SALES, TEST1]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST1$A, SYS$CLUSTERED_INDEX$TEST1$B]])                                               |
|           LcsRowScanRel(table=[[LOCALDB, SALES, TEST4]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST4$B]])                                                                          |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> drop table test1;
0: jdbc:farrago:> drop table test2;
0: jdbc:farrago:> drop table test3;
0: jdbc:farrago:> drop table test4;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- 10.4 subquery selects constants
0: jdbc:farrago:> explain plan for
. . . . . . . . > SELECT 
. . . . . . . . >     (select 1 FROM depts where deptno = emps.deptno)
. . . . . . . . > FROM 
. . . . . . . . >     emps;
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                         column0                                                                                          |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..1=[{inputs}], expr#2=[IS NULL($t1)], expr#3=[null], expr#4=[CAST($t3):INTEGER], expr#5=[1], expr#6=[CAST($t5):INTEGER], expr#7=[CASE($t2, $t4, $t6)], EXPR$0=[$t7])  |
|   FennelToIteratorConverter                                                                                                                                                              |
|     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                                                         |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                                                         |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                                     |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> SELECT 
. . . . . . . . >     (select 1 FROM depts where deptno = emps.deptno) a
. . . . . . . . > FROM 
. . . . . . . . >     emps
. . . . . . . . > order by a;
+----+
| A  |
+----+
|    |
| 1  |
| 1  |
| 1  |
+----+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > SELECT 
. . . . . . . . >     (select cast(1 as decimal(10,2)) FROM depts where deptno = emps.deptno)
. . . . . . . . > FROM 
. . . . . . . . >     emps;
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                                                      column0                                                                                                                                                      |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| IterCalcRel(expr#0..1=[{inputs}], expr#2=[IS NULL($t1)], expr#3=[null], expr#4=[CAST($t3):DECIMAL(10, 2)], expr#5=[1.00], expr#6=[Reinterpret($t5)], expr#7=[Reinterpret($t6)], expr#8=[Reinterpret($t4)], expr#9=[Reinterpret($t7)], expr#10=[CASE($t2, $t8, $t9)], expr#11=[Reinterpret($t10)], EXPR$0=[$t11])  |
|   FennelToIteratorConverter                                                                                                                                                                                                                                                                                       |
|     LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])                                                                                                                                                                                                                                                  |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                                                                                                                                                                                  |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])                                                                                                                                                              |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> SELECT 
. . . . . . . . >     (select cast(1 as decimal(10,2)) FROM depts where deptno = emps.deptno) a
. . . . . . . . > FROM 
. . . . . . . . >     emps
. . . . . . . . > order by a;
+-------+
|   A   |
+-------+
|       |
| 1.00  |
| 1.00  |
| 1.00  |
+-------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- TODO: inner correlations can be improved too
0: jdbc:farrago:> explain plan for
. . . . . . . . > SELECT empno
. . . . . . . . > FROM 
. . . . . . . . >     emps
. . . . . . . . > where 
. . . . . . . . >     deptno in (select deptno FROM depts where deptno = emps.deptno);
+---------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                         column0                                                                         |
+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                               |
|   FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])                                                       |
|     LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 1]], joinType=[RIGHTSEMI])                                                                             |
|       LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                     |
|         FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])  |
|         LhxAggRel(groupCount=[1])                                                                                                                       |
|           FennelRenameRel(fieldNames=[[$f0]])                                                                                                           |
|             FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                  |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                     |
+---------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > SELECT empno
. . . . . . . . > FROM 
. . . . . . . . >     emps
. . . . . . . . > where 
. . . . . . . . >     deptno in (select emps.deptno FROM depts where deptno = emps.deptno);
+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                            column0                                                                            |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                     |
|   FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])                                                             |
|     LhxJoinRel(leftKeys=[[0, 1, 2]], rightKeys=[[1, 1, 1]], joinType=[RIGHTSEMI])                                                                             |
|       FennelReshapeRel(projection=[[1, 0, 1]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER NOT NULL $f0, INTEGER NOT NULL $f00) NOT NULL])     |
|         FennelCartesianProductRel(leftouterjoin=[false])                                                                                                      |
|           FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])                                                       |
|             LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])                                                                                     |
|               FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])  |
|               LhxAggRel(groupCount=[1])                                                                                                                       |
|                 FennelRenameRel(fieldNames=[[$f0]])                                                                                                           |
|                   FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                  |
|           FennelBufferRel(inMemory=[false], multiPass=[true])                                                                                                 |
|             LhxAggRel(groupCount=[1])                                                                                                                         |
|               FennelRenameRel(fieldNames=[[$f0]])                                                                                                             |
|                 FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])                                    |
|       FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])                                           |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> --------------
0: jdbc:farrago:> -- clean up --
0: jdbc:farrago:> --------------
0: jdbc:farrago:> drop table emps2;
0: jdbc:farrago:> drop table depts2;
0: jdbc:farrago:> 
0: jdbc:farrago:> !quit
