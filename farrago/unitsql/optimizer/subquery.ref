> -- $Id$
> -- Test plans for subqueries
> 
> !set force on
> !set outputformat csv
> 
> set schema 'sales';
> 
> alter system set "calcVirtualMachine" = 'CALCVM_JAVA';
> alter session implementation set jar sys_boot.sys_boot.luciddb_plugin;
> 
> create table depts2 (deptno integer, name varchar(20));
> 
> -- 1.1 uncorrelated IN
> explain plan without implementation for
> select name from emps where deptno in (select deptno from depts) order by name;
'column0'
'SortRel(sort0=[$0], dir0=[Ascending])'
'  ProjectRel(NAME=[$1])'
'    JoinRel(condition=[=($10, $11)], joinType=[inner])'
'      ProjectRel($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$9], $f10=[$2])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[1])'
'        ProjectRel(DEPTNO=[$0])'
'          TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for
> select name from emps where deptno in (select deptno from depts) order by name;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFTSEMI])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> select name from emps where deptno in (select deptno from depts) order by name;
'NAME'
'Eric'
'Fred'
'Wilma'
> 
> explain plan without implementation for
> select name from emps
> where (empno, deptno) in (select emps.empno, depts.deptno from emps, depts)
> order by name;
'column0'
'SortRel(sort0=[$0], dir0=[Ascending])'
'  ProjectRel(NAME=[$1])'
'    JoinRel(condition=[AND(=($10, $12), =($11, $13))], joinType=[inner])'
'      ProjectRel($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$9], $f10=[$0], $f11=[$2])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[2])'
'        ProjectRel(EMPNO=[$0], DEPTNO=[$10])'
'          JoinRel(condition=[true], joinType=[inner])'
'            TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for
> select name from emps
> where (empno, deptno) in (select emps.empno, depts.deptno from emps, depts)
> order by name;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME) NOT NULL])'
'      LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[0, 2]], joinType=[RIGHTSEMI])'
'        FennelCartesianProductRel(leftouterjoin=[false])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select name from emps
> where (empno, deptno) in (select emps.empno, depts.deptno from emps, depts)
> order by name;
'NAME'
'Eric'
'Fred'
'Wilma'
> 
> -- 1.2 correlated IN:
> explain plan without implementation for
> select name from emps
> where deptno in (select deptno from depts where emps.empno < depts.deptno*10)
> order by name;
'column0'
'SortRel(sort0=[$0], dir0=[Ascending])'
'  ProjectRel(NAME=[$1])'
'    CorrelatorRel(condition=[=($10, $11)], joinType=[inner], correlations=[[var0=offset0]])'
'      ProjectRel($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$9], $f10=[$2])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[1])'
'        ProjectRel(DEPTNO=[$0])'
'          FilterRel(condition=[<($cor0.EMPNO, *($0, 10))])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for
> select name from emps
> where deptno in (select deptno from depts where emps.empno < depts.deptno*10)
> order by name;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME) NOT NULL])'
'      LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[2, 0]], joinType=[RIGHTSEMI])'
'        FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'          FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1]], joinKeyParamIds=[[1]])'
'            IteratorToFennelConverter'
'              IterCalcRel(expr#0=[{inputs}], expr#1=[10], expr#2=[*($t0, $t1)], DEPTNO=[$t0], *($0, 10)=[$t2])'
'                FennelToIteratorConverter'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'            FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[2])'
'              FennelValuesRel(tuples=[[{ '(', null, ')', null }]])'
'            FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[2], indexCols=[[0]])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelRenameRel(fieldNames=[[$f0]])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select name from emps
> where deptno in (select deptno from depts where emps.empno < depts.deptno*10)
> order by name;
'NAME'
'Eric'
'Wilma'
> 
> -- no table qualifier is necessary if correlated reference is not ambiguous
> explain plan without implementation for
> select name from emps
> where deptno in (select deptno from depts where empno < depts.deptno*10)
> order by name;
'column0'
'SortRel(sort0=[$0], dir0=[Ascending])'
'  ProjectRel(NAME=[$1])'
'    CorrelatorRel(condition=[=($10, $11)], joinType=[inner], correlations=[[var0=offset0]])'
'      ProjectRel($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$9], $f10=[$2])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[1])'
'        ProjectRel(DEPTNO=[$0])'
'          FilterRel(condition=[<($cor0.EMPNO, *($0, 10))])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan without implementation for
> select name from emps
> where deptno in (select deptno from depts where empno < deptno*10)
> order by name;
'column0'
'SortRel(sort0=[$0], dir0=[Ascending])'
'  ProjectRel(NAME=[$1])'
'    CorrelatorRel(condition=[=($10, $11)], joinType=[inner], correlations=[[var0=offset0]])'
'      ProjectRel($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$9], $f10=[$2])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[1])'
'        ProjectRel(DEPTNO=[$0])'
'          FilterRel(condition=[<($cor0.EMPNO, *($0, 10))])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> -- 1.2 is a special case of correlated exists. Equivalent to:
> explain plan without implementation for
> select name from emps where
> exists (select deptno from depts 
>         where emps.empno < depts.deptno*10 and depts.deptno = emps.deptno)
> order by name;
'column0'
'SortRel(sort0=[$0], dir0=[Ascending])'
'  ProjectRel(NAME=[$1])'
'    FilterRel(condition=[IS TRUE($10)])'
'      CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset0, var1=offset2]])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'        AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'          ProjectRel($f0=[true])'
'            ProjectRel(DEPTNO=[$0])'
'              FilterRel(condition=[AND(<($cor0.EMPNO, *($0, 10)), =($0, $cor1.DEPTNO))])'
'                TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for
> select name from emps where
> exists (select deptno from depts 
>         where emps.empno < depts.deptno*10 and depts.deptno = emps.deptno)
> order by name;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[1]], filterOp=[COMP_EQ], filterOrdinals=[[5]], filterTuple=[[true]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME) NOT NULL])'
'      LhxJoinRel(leftKeys=[[0, 2]], rightKeys=[[0, 1]], joinType=[LEFT])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2]], index=[EMPS_UX], preserveOrder=[false])'
'        LhxAggRel(groupCount=[2], agg#0=[MIN(2)])'
'          IteratorToFennelConverter'
'            IterCalcRel(expr#0..2=[{inputs}], expr#3=[10], expr#4=[*($t0, $t3)], expr#5=[<($t1, $t4)], expr#6=[true], $f0=[$t1], $f1=[$t2], $f0=[$t6], $condition=[$t5])'
'              FennelToIteratorConverter'
'                LhxJoinRel(leftKeys=[[0]], rightKeys=[[1]], joinType=[INNER])'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                  LhxAggRel(groupCount=[2])'
'                    FennelRenameRel(fieldNames=[[$f0, $f1]])'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select name from emps where
> exists (select deptno from depts 
>         where emps.empno < depts.deptno*10 and depts.deptno = emps.deptno)
> order by name;
'NAME'
'Eric'
'Wilma'
> 
> -- 1.3 NOT IN
> explain plan for
> select name from emps where deptno not in (10, 20);
'column0'
'IterCalcRel(expr#0..1=[{inputs}], expr#2=[10], expr#3=[=($t1, $t2)], expr#4=[20], expr#5=[=($t1, $t4)], expr#6=[OR($t3, $t5)], expr#7=[NOT($t6)], NAME=[$t0], $condition=[$t7])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select name from emps where deptno not in (10, 20) order by name;
'NAME'
'John'
> 
> -- uncorrelated NOT IN
> explain plan without implementation for
> select name from emps where deptno not in (select deptno from depts);
'column0'
'ProjectRel(NAME=[$1])'
'  FilterRel(condition=[AND(NOT(IS TRUE($12)), IS NOT NULL($10))])'
'    JoinRel(condition=[=($10, $11)], joinType=[left])'
'      ProjectRel($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$9], $f10=[$2])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[1], agg#0=[MIN(1)])'
'        ProjectRel($f0=[$0], $f1=[true])'
'          ProjectRel(DEPTNO=[$0])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for
> select name from emps where deptno not in (select deptno from depts);
'column0'
'IterCalcRel(expr#0..3=[{inputs}], expr#4=[IS TRUE($t1)], expr#5=[NOT($t4)], NAME=[$t2], $condition=[$t5])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[1]], joinType=[RIGHT])'
'      LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0=[{inputs}], expr#1=[true], proj#0..1=[{exprs}])'
'            FennelToIteratorConverter'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..1=[{inputs}], expr#2=[IS NOT NULL($t1)], proj#0..1=[{exprs}], $condition=[$t2])'
'          FennelToIteratorConverter'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select name from emps where deptno not in (select deptno from depts) order by name;
'NAME'
'John'
> 
> -- 1.4 uncorrelated NOT(x IN (subq)):
> explain plan without implementation for
> select name from emps where not (deptno in (select deptno from depts));
'column0'
'ProjectRel(NAME=[$1])'
'  FilterRel(condition=[AND(NOT(IS TRUE($12)), IS NOT NULL($10))])'
'    JoinRel(condition=[=($10, $11)], joinType=[left])'
'      ProjectRel($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$9], $f10=[$2])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[1], agg#0=[MIN(1)])'
'        ProjectRel($f0=[$0], $f1=[true])'
'          ProjectRel(DEPTNO=[$0])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for
> select name from emps where not (deptno in (select deptno from depts));
'column0'
'IterCalcRel(expr#0..3=[{inputs}], expr#4=[IS TRUE($t1)], expr#5=[NOT($t4)], NAME=[$t2], $condition=[$t5])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[1]], joinType=[RIGHT])'
'      LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0=[{inputs}], expr#1=[true], proj#0..1=[{exprs}])'
'            FennelToIteratorConverter'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..1=[{inputs}], expr#2=[IS NOT NULL($t1)], proj#0..1=[{exprs}], $condition=[$t2])'
'          FennelToIteratorConverter'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select name from emps where not (deptno in (select deptno from depts)) order by name;
'NAME'
'John'
> 
> -- 1.5 correlated NOT IN
> explain plan without implementation for
> select name from emps
> where deptno not in (select deptno from depts where emps.empno < depts.deptno*10)
> order by name;
'column0'
'SortRel(sort0=[$0], dir0=[Ascending])'
'  ProjectRel(NAME=[$1])'
'    FilterRel(condition=[AND(NOT(IS TRUE($12)), IS NOT NULL($10))])'
'      CorrelatorRel(condition=[=($10, $11)], joinType=[left], correlations=[[var0=offset0]])'
'        ProjectRel($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$9], $f10=[$2])'
'          TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'        AggregateRel(groupCount=[1], agg#0=[MIN(1)])'
'          ProjectRel($f0=[$0], $f1=[true])'
'            ProjectRel(DEPTNO=[$0])'
'              FilterRel(condition=[<($cor0.EMPNO, *($0, 10))])'
'                TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for
> select name from emps
> where deptno not in (select deptno from depts where emps.empno < depts.deptno*10)
> order by name;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0..5=[{inputs}], expr#6=[IS TRUE($t2)], expr#7=[NOT($t6)], NAME=[$t4], $condition=[$t7])'
'        FennelToIteratorConverter'
'          LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[2, 0]], joinType=[RIGHT])'
'            LhxAggRel(groupCount=[2], agg#0=[MIN(2)])'
'              IteratorToFennelConverter'
'                IterCalcRel(expr#0..2=[{inputs}], expr#3=[true], $f0=[$t0], $f0=[$t2], $f1=[$t3])'
'                  FennelToIteratorConverter'
'                    FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1]], joinKeyParamIds=[[1]])'
'                      IteratorToFennelConverter'
'                        IterCalcRel(expr#0=[{inputs}], expr#1=[10], expr#2=[*($t0, $t1)], DEPTNO=[$t0], *($0, 10)=[$t2])'
'                          FennelToIteratorConverter'
'                            FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                      FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[2])'
'                        FennelValuesRel(tuples=[[{ '(', null, ')', null }]])'
'                      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[2], indexCols=[[0]])'
'                        FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                          LhxAggRel(groupCount=[1])'
'                            FennelRenameRel(fieldNames=[[$f0]])'
'                              FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'            IteratorToFennelConverter'
'              IterCalcRel(expr#0..2=[{inputs}], expr#3=[IS NOT NULL($t2)], proj#0..2=[{exprs}], $condition=[$t3])'
'                FennelToIteratorConverter'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select name from emps
> where deptno not in (select deptno from depts where emps.empno < depts.deptno*10)
> order by name;
'NAME'
'Fred'
'John'
> 
> -- 1.6 correlated NOT (x IN subq)
> explain plan without implementation for
> select name from emps
> where not (deptno in (select deptno from depts where emps.empno < depts.deptno*10))
> order by name;
'column0'
'SortRel(sort0=[$0], dir0=[Ascending])'
'  ProjectRel(NAME=[$1])'
'    FilterRel(condition=[AND(NOT(IS TRUE($12)), IS NOT NULL($10))])'
'      CorrelatorRel(condition=[=($10, $11)], joinType=[left], correlations=[[var0=offset0]])'
'        ProjectRel($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$9], $f10=[$2])'
'          TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'        AggregateRel(groupCount=[1], agg#0=[MIN(1)])'
'          ProjectRel($f0=[$0], $f1=[true])'
'            ProjectRel(DEPTNO=[$0])'
'              FilterRel(condition=[<($cor0.EMPNO, *($0, 10))])'
'                TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for
> select name from emps
> where not (deptno in (select deptno from depts where emps.empno < depts.deptno*10))
> order by name;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0..5=[{inputs}], expr#6=[IS TRUE($t2)], expr#7=[NOT($t6)], NAME=[$t4], $condition=[$t7])'
'        FennelToIteratorConverter'
'          LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[2, 0]], joinType=[RIGHT])'
'            LhxAggRel(groupCount=[2], agg#0=[MIN(2)])'
'              IteratorToFennelConverter'
'                IterCalcRel(expr#0..2=[{inputs}], expr#3=[true], $f0=[$t0], $f0=[$t2], $f1=[$t3])'
'                  FennelToIteratorConverter'
'                    FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1]], joinKeyParamIds=[[1]])'
'                      IteratorToFennelConverter'
'                        IterCalcRel(expr#0=[{inputs}], expr#1=[10], expr#2=[*($t0, $t1)], DEPTNO=[$t0], *($0, 10)=[$t2])'
'                          FennelToIteratorConverter'
'                            FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                      FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[2])'
'                        FennelValuesRel(tuples=[[{ '(', null, ')', null }]])'
'                      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[2], indexCols=[[0]])'
'                        FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                          LhxAggRel(groupCount=[1])'
'                            FennelRenameRel(fieldNames=[[$f0]])'
'                              FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'            IteratorToFennelConverter'
'              IterCalcRel(expr#0..2=[{inputs}], expr#3=[IS NOT NULL($t2)], proj#0..2=[{exprs}], $condition=[$t3])'
'                FennelToIteratorConverter'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select name from emps
> where not (deptno in (select deptno from depts where emps.empno < depts.deptno*10))
> order by name;
'NAME'
'Fred'
'John'
> 
> -- 1.7 test NOT push down works
> explain plan without implementation for
> select empno from emps 
> where not ((deptno, name) in (select deptno, name from depts) and deptno is not null 
>            or deptno in (select deptno + 10 from depts));
'column0'
'ProjectRel(EMPNO=[$0])'
'  FilterRel(condition=[AND(OR(AND(AND(NOT(IS TRUE($14)), IS NOT NULL($10)), IS NOT NULL($11)), NOT(IS NOT NULL($2))), AND(NOT(IS TRUE($17)), IS NOT NULL($15)))])'
'    JoinRel(condition=[=($15, $16)], joinType=[left])'
'      ProjectRel($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$9], $f10=[$10], $f11=[$11], $f12=[$12], $f13=[$13], $f14=[$14], $f15=[$2])'
'        JoinRel(condition=[AND(=($10, $12), =($11, $13))], joinType=[left])'
'          ProjectRel($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$9], $f10=[$2], $f11=[$1])'
'            TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'          AggregateRel(groupCount=[2], agg#0=[MIN(2)])'
'            ProjectRel($f0=[$0], $f1=[$1], $f2=[true])'
'              ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'      AggregateRel(groupCount=[1], agg#0=[MIN(1)])'
'        ProjectRel($f0=[$0], $f1=[true])'
'          ProjectRel(EXPR$0=[+($0, 10)])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for
> select empno from emps 
> where not ((deptno, name) in (select deptno, name from depts) and deptno is not null 
>            or deptno in (select deptno + 10 from depts));
'column0'
'IterCalcRel(expr#0..3=[{inputs}], expr#4=[IS TRUE($t3)], expr#5=[NOT($t4)], EMPNO=[$t0], $condition=[$t5])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..5=[{inputs}], expr#6=[IS TRUE($t2)], expr#7=[NOT($t6)], expr#8=[IS NOT NULL($t5)], expr#9=[AND($t7, $t8)], expr#10=[IS NOT NULL($t4)], expr#11=[AND($t9, $t10)], expr#12=[NOT($t8)], expr#13=[OR($t11, $t12)], EMPNO=[$t3], DEPTNO=[$t5], $condition=[$t13])'
'          FennelToIteratorConverter'
'            LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[2, 1]], joinType=[RIGHT])'
'              LhxAggRel(groupCount=[2], agg#0=[MIN(2)])'
'                IteratorToFennelConverter'
'                  IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], proj#0..2=[{exprs}])'
'                    FennelToIteratorConverter'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'              IteratorToFennelConverter'
'                IterCalcRel(expr#0..2=[{inputs}], expr#3=[IS NOT NULL($t2)], proj#0..2=[{exprs}], $condition=[$t3])'
'                  FennelToIteratorConverter'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0=[{inputs}], expr#1=[10], expr#2=[+($t0, $t1)], expr#3=[true], $f0=[$t2], $f1=[$t3])'
'            FennelToIteratorConverter'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> select empno from emps 
> where not ((deptno, name) in (select deptno, name from depts) and deptno is not null 
>            or deptno in (select deptno + 10 from depts))
> order by name;
'EMPNO'
'100'
> 
> explain plan without implementation for
> select min(empno) from emps group by deptno, name
> having not ((deptno, name) in (select deptno, name from depts) and name is not null 
>            or deptno in (select deptno + 10 from depts));
'column0'
'ProjectRel(EXPR$0=[$2])'
'  FilterRel(condition=[AND(OR(AND(AND(NOT(IS TRUE($7)), IS NOT NULL($3)), IS NOT NULL($4)), NOT(IS NOT NULL($1))), AND(NOT(IS TRUE($10)), IS NOT NULL($8)))])'
'    JoinRel(condition=[=($8, $9)], joinType=[left])'
'      ProjectRel($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$0])'
'        JoinRel(condition=[AND(=($3, $5), =($4, $6))], joinType=[left])'
'          ProjectRel($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$0], $f4=[$1])'
'            AggregateRel(groupCount=[2], EXPR$0=[MIN(2)])'
'              ProjectRel(DEPTNO=[$2], NAME=[$1], EMPNO=[$0])'
'                TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'          AggregateRel(groupCount=[2], agg#0=[MIN(2)])'
'            ProjectRel($f0=[$0], $f1=[$1], $f2=[true])'
'              ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'      AggregateRel(groupCount=[1], agg#0=[MIN(1)])'
'        ProjectRel($f0=[$0], $f1=[true])'
'          ProjectRel(EXPR$0=[+($0, 10)])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for
> select min(empno) from emps group by deptno, name
> having not ((deptno, name) in (select deptno, name from depts) and name is not null 
>            or deptno in (select deptno + 10 from depts));
'column0'
'IterCalcRel(expr#0..3=[{inputs}], expr#4=[IS TRUE($t1)], expr#5=[NOT($t4)], EXPR$0=[$t3], $condition=[$t5])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[RIGHT])'
'      LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0=[{inputs}], expr#1=[10], expr#2=[+($t0, $t1)], expr#3=[true], $f0=[$t2], $f1=[$t3])'
'            FennelToIteratorConverter'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..5=[{inputs}], expr#6=[IS TRUE($t2)], expr#7=[NOT($t6)], expr#8=[IS NOT NULL($t3)], expr#9=[AND($t7, $t8)], expr#10=[IS NOT NULL($t4)], expr#11=[AND($t9, $t10)], expr#12=[NOT($t10)], expr#13=[OR($t11, $t12)], DEPTNO=[$t3], EXPR$0=[$t5], $condition=[$t13])'
'          FennelToIteratorConverter'
'            LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[0, 1]], joinType=[RIGHT])'
'              LhxAggRel(groupCount=[2], agg#0=[MIN(2)])'
'                IteratorToFennelConverter'
'                  IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], proj#0..2=[{exprs}])'
'                    FennelToIteratorConverter'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'              IteratorToFennelConverter'
'                IterCalcRel(expr#0..2=[{inputs}], expr#3=[IS NOT NULL($t0)], proj#0..2=[{exprs}], $condition=[$t3])'
'                  FennelToIteratorConverter'
'                    LhxAggRel(groupCount=[2], EXPR$0=[MIN(2)])'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2, 1, 0]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select min(empno) from emps group by deptno, name
> having not ((deptno, name) in (select deptno, name from depts) and name is not null 
>            or deptno in (select deptno + 10 from depts));
'EXPR$0'
'100'
> 
> -- a bug discovered when doing the NOT pushdown
> explain plan without implementation for 
> select empno from emps 
> where not (name in (select name from depts))
>       and exists(select * from depts where deptno = emps.deptno);
'column0'
'ProjectRel(EMPNO=[$0])'
'  FilterRel(condition=[AND(AND(NOT(IS TRUE($12)), IS NOT NULL($10)), IS TRUE($13))])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])'
'      JoinRel(condition=[=($10, $11)], joinType=[left])'
'        ProjectRel($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$9], $f10=[$1])'
'          TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'        AggregateRel(groupCount=[1], agg#0=[MIN(1)])'
'          ProjectRel($f0=[$0], $f1=[true])'
'            ProjectRel(NAME=[$1])'
'              TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'      AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'        ProjectRel($f0=[true])'
'          ProjectRel(DEPTNO=[$0], NAME=[$1])'
'            FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'              TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for 
> select empno from emps 
> where not (name in (select name from depts))
>       and exists(select * from depts where deptno = emps.deptno);
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..4=[{inputs}], expr#5=[IS TRUE($t1)], expr#6=[NOT($t5)], EMPNO=[$t2], DEPTNO=[$t4], $condition=[$t6])'
'          FennelToIteratorConverter'
'            LhxJoinRel(leftKeys=[[0]], rightKeys=[[1]], joinType=[RIGHT])'
'              LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'                IteratorToFennelConverter'
'                  IterCalcRel(expr#0=[{inputs}], expr#1=[true], proj#0..1=[{exprs}])'
'                    FennelToIteratorConverter'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'              IteratorToFennelConverter'
'                IterCalcRel(expr#0..2=[{inputs}], expr#3=[IS NOT NULL($t1)], proj#0..2=[{exprs}], $condition=[$t3])'
'                  FennelToIteratorConverter'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'            FennelToIteratorConverter'
'              LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelRenameRel(fieldNames=[[$f0]])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select empno from emps 
> where not (name in (select name from depts))
>       and exists(select * from depts where deptno = emps.deptno)
> order by empno;
'EMPNO'
'100'
'110'
'120'
> 
> -- 2.1 uncorrelated exists.
> -- The EXISTS is converted to a boolean.
> explain plan without implementation for
> select name from emps where exists(select * from depts);
'column0'
'ProjectRel(NAME=[$1])'
'  FilterRel(condition=[?0])'
'    TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
> 
> explain plan for
> select name from emps where exists(select * from depts);
'column0'
'IterCalcRel(expr#0=[{inputs}], expr#1=[?0], NAME=[$t0], $condition=[$t1])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select name from emps where exists(select * from depts) order by name;
'NAME'
'Eric'
'Fred'
'John'
'Wilma'
> 
> -- make sure empty subquery in exists will disqualify a row
> select name from emps where exists(select * from depts2) order by name;
'NAME'
> 
> -- 2.2 correlated exists.
> explain plan without implementation for
> select name from emps
> where exists(select * from depts where depts.deptno=emps.deptno)
> order by name;
'column0'
'SortRel(sort0=[$0], dir0=[Ascending])'
'  ProjectRel(NAME=[$1])'
'    FilterRel(condition=[IS TRUE($10)])'
'      CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'        AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'          ProjectRel($f0=[true])'
'            ProjectRel(DEPTNO=[$0], NAME=[$1])'
'              FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'                TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> -- no table qualifier is necessary if correlated reference is not ambiguous
> explain plan without implementation for
> select name from emps
> where exists(select * from depts where depts.deptno=empno)
> order by name;
'column0'
'SortRel(sort0=[$0], dir0=[Ascending])'
'  ProjectRel(NAME=[$1])'
'    FilterRel(condition=[IS TRUE($10)])'
'      CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset0]])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'        AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'          ProjectRel($f0=[true])'
'            ProjectRel(DEPTNO=[$0], NAME=[$1])'
'              FilterRel(condition=[=($0, $cor0.EMPNO)])'
'                TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for
> select name from emps
> where exists(select * from depts where depts.deptno=emps.deptno)
> order by name;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])'
'        LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'          IteratorToFennelConverter'
'            IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'              FennelToIteratorConverter'
'                LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                  LhxAggRel(groupCount=[1])'
'                    FennelRenameRel(fieldNames=[[$f0]])'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> -- verify result is correct
> select deptno, name from emps order by deptno, name;
'DEPTNO','NAME'
'10','Fred'
'20','Eric'
'20','Wilma'
'40','John'
> 
> select deptno from emps order by deptno;
'DEPTNO'
'10'
'20'
'20'
'40'
> 
> select name from emps
> where exists(select * from depts where depts.deptno=emps.deptno)
> order by name;
'NAME'
'Eric'
'Fred'
'Wilma'
> 
> -- 3.1 uncorrelated scalar subquery.
> explain plan without implementation for
> select name,
>        (select count(*) from depts)
> from emps;
'column0'
'ProjectRel(NAME=[$1], EXPR$1=[?0])'
'  TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
> 
> explain plan for
> select name,
>        (select count(*) from depts)
> from emps;
'column0'
'IterCalcRel(expr#0=[{inputs}], expr#1=[?0], proj#0..1=[{exprs}])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select name, 
>        (select count(*) from depts)
> from emps
> order by name;
'NAME','EXPR$1'
'Eric','3'
'Fred','3'
'John','3'
'Wilma','3'
> 
> -- subqueries nested inside uncorrelated subqueries
> 
> explain plan for
> select name,
>     (select name from depts where deptno =
>         (select min(deptno) from emps))
>     from emps;
'column0'
'IterCalcRel(expr#0=[{inputs}], expr#1=[?1], proj#0..1=[{exprs}])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select name,
>     (select name from depts where deptno =
>         (select min(deptno) from emps))
>     from emps
> order by name;
'NAME','EXPR$1'
'Eric','Sales'
'Fred','Sales'
'John','Sales'
'Wilma','Sales'
> 
> explain plan for 
> select empno,
>     (select count(*) from emps where emps.deptno =
>         (select deptno from depts where depts.deptno = emps.deptno))
> from emps;
'column0'
'IterCalcRel(expr#0=[{inputs}], expr#1=[?0], proj#0..1=[{exprs}])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select empno,
>     (select count(*) from emps where emps.deptno =
>         (select deptno from depts where depts.deptno = emps.deptno))
> from emps
> order by empno;
'EMPNO','EXPR$1'
'100','3'
'110','3'
'110','3'
'120','3'
> 
> explain plan for
> select * from emps where empno =
>     (select min(empno) from emps where deptno =
>         (select min(deptno) from temps where deptno =
>             (select min(deptno) from emps e2 where e2.deptno = emps.deptno)));
'column0'
'IterCalcRel(expr#0..9=[{inputs}], expr#10=[?0], expr#11=[=($t0, $t10)], proj#0..9=[{exprs}], $condition=[$t11])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])'
> 
> select * from emps where empno =
>     (select min(empno) from emps where deptno =
>         (select min(deptno) from temps where deptno =
>             (select min(deptno) from emps e2 where e2.deptno = emps.deptno)));
'EMPNO','NAME','DEPTNO','GENDER','CITY','EMPID','AGE','PUBLIC_KEY','SLACKER','MANAGER'
> 
> -- should return null in deptno
> explain plan for
> select name, 
>        (select deptno from depts where deptno > 100)
> from emps 
> order by name;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0=[{inputs}], expr#1=[?0], proj#0..1=[{exprs}])'
'        FennelToIteratorConverter'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select name, 
>        (select deptno from depts where deptno > 100)
> from emps 
> order by name;
'NAME','EXPR$1'
'Eric',''
'Fred',''
'John',''
'Wilma',''
> 
> -- should report runtime error
> select name, 
>        (select deptno from depts)
> from emps 
> order by name;
Error: Scalar query returned more than one row (state=,code=0)
> 
> -- this should report validation error
> explain plan without implementation for
> select name, (select * from depts) from emps;
Error: From line 2, column 15 to line 2, column 33: Cannot apply '$SCALAR_QUERY' to arguments of type '$SCALAR_QUERY(<RECORDTYPE(INTEGER DEPTNO, VARCHAR(128) NAME)>)'. Supported form(s): '$SCALAR_QUERY(<RECORDTYPE(SINGLE FIELD)>)' (state=,code=0)
> 
> -- check that scalar subquery type inference is correct
> create table s (a int);
> select empno,
>        (select min(a) from s)
> from emps
> order by empno;
'EMPNO','EXPR$1'
'100',''
'110',''
'110',''
'120',''
> 
> select empno, 
>        (select count(a) from s)
> from emps
> order by empno;
'EMPNO','EXPR$1'
'100','0'
'110','0'
'110','0'
'120','0'
> 
> drop table s;
> 
> create table s (a int not null);
> 
> select empno,
>        (select min(a) from s)
> from emps 
> order by empno;
'EMPNO','EXPR$1'
'100',''
'110',''
'110',''
'120',''
> 
> select empno,
>        (select count(a) from s)
> from emps
> order by empno;
'EMPNO','EXPR$1'
'100','0'
'110','0'
'110','0'
'120','0'
> 
> drop table s;
> 
> -- 3.2 correlated scalar subquery in select list:  
> explain plan without implementation for
> select name,
>        (select name from depts where depts.deptno=emps.deptno)
> from emps
> order by name;
'column0'
'SortRel(sort0=[$0], dir0=[Ascending])'
'  ProjectRel(NAME=[$1], EXPR$1=[$10])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])'
'        ProjectRel(NAME=[$1])'
'          FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for
> select name,
>        (select name from depts where depts.deptno=emps.deptno)
> from emps
> order by name;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 3]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" EXPR$1) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> select name,
>        (select name from depts where depts.deptno=emps.deptno)
> from emps
> order by name;
'NAME','EXPR$1'
'Eric','Marketing'
'Fred','Sales'
'John',''
'Wilma','Marketing'
> 
> -- 3.3 non correlated in where clause
> -- note can also use semi join
> explain plan without implementation for 
> select * from emps
> where deptno = (select min(deptno) from depts);
'column0'
'ProjectRel(EMPNO=[$0], NAME=[$1], DEPTNO=[$2], GENDER=[$3], CITY=[$4], EMPID=[$5], AGE=[$6], PUBLIC_KEY=[$7], SLACKER=[$8], MANAGER=[$9])'
'  FilterRel(condition=[=($2, ?0)])'
'    TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
> 
> explain plan for 
> select * from emps
> where deptno = (select min(deptno) from depts);
'column0'
'FennelToIteratorConverter'
'  FtrsIndexSearchRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], uniqueKey=[false], preserveOrder=[false], outer=[false], inputKeyProj=[[1, 3]], inputJoinProj=[[]], inputDirectiveProj=[[0, 2]])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0=[{inputs}], expr#1=['['], expr#2=[?0], expr#3=[']'], expr#4=[IS NOT NULL($t2)], expr#5=[AND($t4, $t4)], $f0=[$t1], $f1=[$t2], $f2=[$t3], $f3=[$t2], $condition=[$t5])'
'        IterOneRowRel'
> 
> select * from emps
> where deptno = (select min(deptno) from depts)
> order by emps.empno;
'EMPNO','NAME','DEPTNO','GENDER','CITY','EMPID','AGE','PUBLIC_KEY','SLACKER','MANAGER'
'100','Fred','10','','','30','25','41626320','true','false'
> 
> -- Note: this too can use semi join
> explain plan without implementation for
> select * from emps
> where deptno = (select deptno from depts);
'column0'
'ProjectRel(EMPNO=[$0], NAME=[$1], DEPTNO=[$2], GENDER=[$3], CITY=[$4], EMPID=[$5], AGE=[$6], PUBLIC_KEY=[$7], SLACKER=[$8], MANAGER=[$9])'
'  FilterRel(condition=[=($2, ?0)])'
'    TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
> 
> explain plan for
> select * from emps
> where deptno = (select deptno from depts);
'column0'
'FennelToIteratorConverter'
'  FtrsIndexSearchRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], uniqueKey=[false], preserveOrder=[false], outer=[false], inputKeyProj=[[1, 3]], inputJoinProj=[[]], inputDirectiveProj=[[0, 2]])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0=[{inputs}], expr#1=['['], expr#2=[?0], expr#3=[']'], expr#4=[IS NOT NULL($t2)], expr#5=[AND($t4, $t4)], $f0=[$t1], $f1=[$t2], $f2=[$t3], $f3=[$t2], $condition=[$t5])'
'        IterOneRowRel'
> 
> -- more than 1 subquery
> explain plan for
> select * from emps where
>     empno = (select min(empno) from emps) and
>     deptno = (select min(deptno) from depts);
'column0'
'IterCalcRel(expr#0..9=[{inputs}], expr#10=[?0], expr#11=[=($t0, $t10)], expr#12=[?1], expr#13=[=($t2, $t12)], expr#14=[AND($t11, $t13)], proj#0..9=[{exprs}], $condition=[$t14])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])'
> 
> select * from emps where
>     empno = (select min(empno) from emps) and
>     deptno = (select min(deptno) from depts);
'EMPNO','NAME','DEPTNO','GENDER','CITY','EMPID','AGE','PUBLIC_KEY','SLACKER','MANAGER'
'100','Fred','10','','','30','25','41626320','true','false'
> 
> -- should report runtime error
> select * from emps
> where deptno = (select deptno from depts);
Error: Scalar query returned more than one row (state=,code=0)
> 
> -- this should report validation error
> explain plan without implementation for
> select * from emps
> where deptno = (select * from depts);
Error: From line 3, column 17 to line 3, column 35: Cannot apply '$SCALAR_QUERY' to arguments of type '$SCALAR_QUERY(<RECORDTYPE(INTEGER DEPTNO, VARCHAR(128) NAME)>)'. Supported form(s): '$SCALAR_QUERY(<RECORDTYPE(SINGLE FIELD)>)' (state=,code=0)
> 
> -- 3.4 correlated scalar subquery in where clause:
> -- 
> create table emps2 (deptno integer, name varchar(20));
> 
> insert into emps2 select deptno, name from emps;
> 
> explain plan without implementation for
> select name
> from emps
> where name=(select name from emps2 where emps.deptno=emps2.deptno);
'column0'
'ProjectRel(NAME=[$1])'
'  FilterRel(condition=[=($1, $10)])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])'
'        ProjectRel(NAME=[$1])'
'          FilterRel(condition=[=($cor0.DEPTNO, $0)])'
'            TableAccessRel(table=[[LOCALDB, SALES, EMPS2]])'
> 
> explain plan for
> select name
> from emps
> where name=(select name from emps2 where emps.deptno=emps2.deptno);
'column0'
'IterCalcRel(expr#0..3=[{inputs}], expr#4=[=($t0, $t3)], NAME=[$t0], $condition=[$t4])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], agg#0=[SINGLE_VALUE(1)])'
'        FennelReshapeRel(projection=[[0, 3]], outputRowType=[RecordType(INTEGER NOT NULL $f0, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME) NOT NULL])'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'            FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])'
'              LhxAggRel(groupCount=[1])'
'                FennelRenameRel(fieldNames=[[$f0]])'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'            LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$NAME]])'
> 
> -- the outermost subquery below cannot be converted to a constant because the
> -- innermost subquery correlates with the outermost query
> explain plan for
> select * from emps where empno =
>     (select min(deptno) from depts where deptno =
>         (select min(deptno) from emps2 where emps2.deptno = emps.deptno));
'column0'
'IterCalcRel(expr#0..12=[{inputs}], expr#13=[=($t0, $t12)], proj#0..9=[{exprs}], $condition=[$t13])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[10]], rightKeys=[[0]], joinType=[LEFT])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 2]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER NOT NULL DEPTNO, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" GENDER, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CITY, INTEGER NOT NULL EMPID, INTEGER AGE, VARBINARY(50) PUBLIC_KEY, BOOLEAN SLACKER, BOOLEAN NOT NULL MANAGER, INTEGER CAST($2):INTEGER) NOT NULL])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], EXPR$0=[MIN(1)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0..2=[{inputs}], expr#3=[=($t0, $t2)], $f0=[$t1], DEPTNO=[$t0], $condition=[$t3])'
'            FennelToIteratorConverter'
'              FennelCartesianProductRel(leftouterjoin=[true])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                FennelBufferRel(inMemory=[false], multiPass=[true])'
'                  LhxAggRel(groupCount=[1], EXPR$0=[MIN(1)])'
'                    FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER DEPTNO) NOT NULL])'
'                      LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'                        FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])'
'                          LhxAggRel(groupCount=[1])'
'                            FennelRenameRel(fieldNames=[[$f0]])'
'                              FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'                        LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO]])'
> 
> -- should report runtime error: more than one row
> select name
> from emps
> where name=(select name from emps2 where emps.deptno=emps2.deptno);
Error: Scalar query returned more than one row (state=,code=0)
> 
> explain plan without implementation for
> select name
> from emps
> where name=(select max(name) from emps2 where emps.deptno=emps2.deptno);
'column0'
'ProjectRel(NAME=[$1])'
'  FilterRel(condition=[=($1, $10)])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], EXPR$0=[MAX(0)])'
'        ProjectRel(NAME=[$1])'
'          FilterRel(condition=[=($cor0.DEPTNO, $0)])'
'            TableAccessRel(table=[[LOCALDB, SALES, EMPS2]])'
> 
> explain plan for
> select name
> from emps
> where name=(select max(name) from emps2 where emps.deptno=emps2.deptno);
'column0'
'IterCalcRel(expr#0..3=[{inputs}], expr#4=[=($t0, $t3)], NAME=[$t0], $condition=[$t4])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], EXPR$0=[MAX(1)])'
'        FennelReshapeRel(projection=[[0, 3]], outputRowType=[RecordType(INTEGER NOT NULL $f0, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME) NOT NULL])'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'            FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])'
'              LhxAggRel(groupCount=[1])'
'                FennelRenameRel(fieldNames=[[$f0]])'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'            LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$NAME]])'
> 
> select name
> from emps
> where name=(select max(name) from emps2 where emps.deptno=emps2.deptno);
'NAME'
'Fred'
'John'
'Wilma'
> 
> -- 3.5 scalar subquery as operand for an aggregation
> explain plan without implementation for
> select name, min((select name from emps2))
> from emps
> group by name;
'column0'
'AggregateRel(groupCount=[1], EXPR$1=[MIN(1)])'
'  ProjectRel(NAME=[$1], $f1=[?0])'
'    TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
> 
> explain plan for
> select name, min((select name from emps2))
> from emps
> group by name;
'column0'
'FennelToIteratorConverter'
'  LhxAggRel(groupCount=[1], EXPR$1=[MIN(1)])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0=[{inputs}], expr#1=[?0], proj#0..1=[{exprs}])'
'        FennelToIteratorConverter'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
> 
> -- should report runtime error
> select name, min((select name from emps2))
> from emps
> group by name;
Error: Scalar query returned more than one row (state=,code=0)
> 
> -- this query runs fine
> explain plan without implementation for
> select name, min((select max(name) from emps2))
> from emps
> group by name;
'column0'
'AggregateRel(groupCount=[1], EXPR$1=[MIN(1)])'
'  ProjectRel(NAME=[$1], $f1=[?0])'
'    TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
> 
> explain plan for
> select name, min((select max(name) from emps2))
> from emps
> group by name;
'column0'
'FennelToIteratorConverter'
'  LhxAggRel(groupCount=[1], EXPR$1=[MIN(1)])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0=[{inputs}], expr#1=[?0], proj#0..1=[{exprs}])'
'        FennelToIteratorConverter'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select name, min((select max(name) from emps2))
> from emps
> group by name
> order by name;
'NAME','EXPR$1'
'Eric','Wilma'
'Fred','Wilma'
'John','Wilma'
'Wilma','Wilma'
> 
> -- correlated
> explain plan without implementation for
> select deptno, min((select name from emps2 where emps2.name=emps.name))
> from emps
> group by deptno
> order by deptno;
'column0'
'SortRel(sort0=[$0], dir0=[Ascending])'
'  AggregateRel(groupCount=[1], EXPR$1=[MIN(1)])'
'    ProjectRel(DEPTNO=[$2], $f0=[$10])'
'      CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset1]])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'        AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])'
'          ProjectRel(NAME=[$1])'
'            FilterRel(condition=[=($1, $cor0.NAME)])'
'              TableAccessRel(table=[[LOCALDB, SALES, EMPS2]])'
> 
> explain plan for
> select deptno, min((select name from emps2 where emps2.name=emps.name))
> from emps
> group by deptno
> order by deptno;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    LhxAggRel(groupCount=[1], EXPR$1=[MIN(1)])'
'      FennelReshapeRel(projection=[[1, 3]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" $f0) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])'
'          LhxAggRel(groupCount=[1], agg#0=[SINGLE_VALUE(1)])'
'            FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME) NOT NULL])'
'              LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'                FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($0):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'                  LhxAggRel(groupCount=[1])'
'                    FennelRenameRel(fieldNames=[[$f0]])'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
'                FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($0):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'                  LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$NAME]])'
> 
> select deptno, min((select name from emps2 where emps2.name=emps.name))
> from emps
> group by deptno
> order by deptno;
'DEPTNO','EXPR$1'
'10','Fred'
'20','Eric'
'40','John'
> 
> -- this should report run time error
> explain plan without implementation for
> select deptno, min((select name from emps2 where emps2.deptno=emps.deptno))
> from emps
> group by deptno;
'column0'
'AggregateRel(groupCount=[1], EXPR$1=[MIN(1)])'
'  ProjectRel(DEPTNO=[$2], $f0=[$10])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])'
'        ProjectRel(NAME=[$1])'
'          FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'            TableAccessRel(table=[[LOCALDB, SALES, EMPS2]])'
> 
> explain plan for
> select deptno, min((select name from emps2 where emps2.deptno=emps.deptno))
> from emps
> group by deptno;
'column0'
'FennelToIteratorConverter'
'  LhxAggRel(groupCount=[1], EXPR$1=[MIN(1)])'
'    FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" $f0) NOT NULL])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'        LhxAggRel(groupCount=[1], agg#0=[SINGLE_VALUE(1)])'
'          FennelReshapeRel(projection=[[0, 3]], outputRowType=[RecordType(INTEGER NOT NULL $f0, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME) NOT NULL])'
'            LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'              FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])'
'                LhxAggRel(groupCount=[1])'
'                  FennelRenameRel(fieldNames=[[$f0]])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'              LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$NAME]])'
> 
> select deptno, min((select name from emps2 where emps2.deptno=emps.deptno))
> from emps
> group by deptno;
Error: Scalar query returned more than one row (state=,code=0)
> 
> -- this should report validation error
> explain plan without implementation for
> select deptno, sum((select * from emps2))
> from emps
> group by deptno;
Error: From line 2, column 21 to line 2, column 39: Cannot apply '$SCALAR_QUERY' to arguments of type '$SCALAR_QUERY(<RECORDTYPE(INTEGER DEPTNO, VARCHAR(20) NAME)>)'. Supported form(s): '$SCALAR_QUERY(<RECORDTYPE(SINGLE FIELD)>)' (state=,code=0)
> 
> -- Aggregate over window functions
> explain plan without implementation for
> select last_value((select deptno from depts)) over (order by empno)
> from emps;
'column0'
'ProjectRel(EXPR$0=[CAST($HISTOGRAM_LAST_VALUE($HISTOGRAM(CAST(?0):BIGINT NOT NULL) OVER (ORDER BY $0 ROWS BETWEEN CURRENT ROW AND CURRENT ROW))):INTEGER])'
'  TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
> 
> explain plan without implementation for
> select last_value((select min(deptno) from depts)) over w
> from emps window w as (order by empno);
'column0'
'ProjectRel(EXPR$0=[CAST($HISTOGRAM_LAST_VALUE($HISTOGRAM(CAST(?0):BIGINT NOT NULL) OVER (ORDER BY $0 ROWS BETWEEN CURRENT ROW AND CURRENT ROW))):INTEGER])'
'  TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
> 
> -- select list contains correlated references
> explain plan without implementation for 
> select sum((select emps.empno from depts where depts.deptno = emps.deptno))
> from emps;
'column0'
'AggregateRel(groupCount=[0], EXPR$0=[SUM(0)])'
'  ProjectRel($f0=[$10])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2, var1=offset0]])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])'
'        ProjectRel(EMPNO=[$cor1.EMPNO])'
'          FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for 
> select sum((select emps.empno from depts where depts.deptno = emps.deptno))
> from emps;
'column0'
'FennelToIteratorConverter'
'  FennelAggRel(groupCount=[0], EXPR$0=[SUM(0)])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0..2=[{inputs}], expr#3=[IS NULL($t2)], expr#4=[null], expr#5=[CAST($t4):INTEGER], expr#6=[CAST($t0):INTEGER], expr#7=[CASE($t3, $t5, $t6)], $f0=[$t7])'
'        FennelToIteratorConverter'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> explain plan without implementation for 
> select empno
> from emps
> where empno = (select min(emps.empno) from depts 
>                where depts.deptno = emps.deptno);
'column0'
'ProjectRel(EMPNO=[$0])'
'  FilterRel(condition=[=($0, $10)])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2, var1=offset0]])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], EXPR$0=[MIN(0)])'
'        ProjectRel($f0=[$cor1.EMPNO])'
'          FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for 
> select empno
> from emps
> where empno = (select min(emps.empno) from depts
>                where depts.deptno = emps.deptno);
'column0'
'IterCalcRel(expr#0..4=[{inputs}], expr#5=[=($t0, $t4)], EMPNO=[$t0], $condition=[$t5])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[1, 0]], rightKeys=[[0, 1]], joinType=[LEFT])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxAggRel(groupCount=[2], EXPR$0=[MIN(2)])'
'        FennelReshapeRel(projection=[[0, 1, 1]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL $f00, INTEGER NOT NULL $f0) NOT NULL])'
'          FennelCartesianProductRel(leftouterjoin=[false])'
'            FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])'
'              LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelRenameRel(fieldNames=[[$f0]])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'            FennelBufferRel(inMemory=[false], multiPass=[true])'
'              LhxAggRel(groupCount=[1])'
'                FennelRenameRel(fieldNames=[[$f0]])'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
> 
> -- bug with RexShuttle.visitCall() during efficient decorrelation
> -- ABS function input type is changed to integer nullable after decorrelation, so
> -- should the return type of this function.
> explain plan without implementation for
> select sum((select abs(depts.deptno) from depts where depts.deptno = emps.deptno)) from emps;
'column0'
'AggregateRel(groupCount=[0], EXPR$0=[SUM(0)])'
'  ProjectRel($f0=[$10])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])'
'        ProjectRel(EXPR$0=[ABS($0)])'
'          FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for
> select sum((select abs(depts.deptno) from depts where depts.deptno = emps.deptno)) from emps;
'column0'
'FennelToIteratorConverter'
'  FennelAggRel(groupCount=[0], EXPR$0=[SUM(0)])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0..1=[{inputs}], expr#2=[IS NULL($t1)], expr#3=[null], expr#4=[CAST($t3):INTEGER], expr#5=[ABS($t1)], expr#6=[CAST($t5):INTEGER], expr#7=[CASE($t2, $t4, $t6)], $f0=[$t7])'
'        FennelToIteratorConverter'
'          LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> -- Without bug fix, this will result in assertion failure for setNull() method in generated
> -- java code for the cast expression.
> select sum((select abs(depts.deptno) from depts where depts.deptno = emps.deptno)) from emps;
'EXPR$0'
'50'
> 
> -- bug with RexShuttle.visitLiteral() during efficient decorrelation
> -- During efficient decorrelation, skip rewirting(with nullIndicator) for null literal
> -- because the end result is the same: a null literal. In fact, rewrite attempts will 
> -- result in incorrect types.
> explain plan without implementation for 
> select sum((select cast(null as integer) from depts where depts.deptno = emps.deptno)) from emps;
'column0'
'AggregateRel(groupCount=[0], EXPR$0=[SUM(0)])'
'  ProjectRel($f0=[$10])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])'
'        ProjectRel(EXPR$0=[CAST(null):INTEGER])'
'          FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for 
> select sum((select cast(null as integer) from depts where depts.deptno = emps.deptno)) from emps;
'column0'
'FennelToIteratorConverter'
'  FennelAggRel(groupCount=[0], EXPR$0=[SUM(0)])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0..1=[{inputs}], expr#2=[IS NULL($t1)], expr#3=[null], expr#4=[CAST($t3):INTEGER], expr#5=[CASE($t2, $t4, $t4)], $f0=[$t5])'
'        FennelToIteratorConverter'
'          LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> -- Without bug fix, this will result in assertion failure for setNull() method in generated
> -- java code for the incorrect cast expression(cast(null):null).
> select sum((select cast(null as integer) from depts where depts.deptno = emps.deptno)) from emps;
'EXPR$0'
''
> select sum((select cast(cast(null as varchar(1)) as integer) from depts where depts.deptno = emps.deptno)) from emps;
'EXPR$0'
''
> 
> -- 3.6 HAVING clause scalar subquery.
> --
> --     Note: SQL2003 seems to contradict itself wrt to aggregates in HAVING clause.
> --     In the rules for <set function specification>(which include aggregates),
> --     this is allowed; However, in the rules for HAVING clause, only GBY columns can
> --     be referenced "directly" in HAVING clause. The query below, probably not very
> --     useful, satisfies both rules since the aggregate references the GBY columns
> --
> explain plan without implementation for
> select name
> from emps
> group by name
> having min(emps.name)=(select max(name) from depts);
'column0'
'ProjectRel(NAME=[$0])'
'  FilterRel(condition=[=($1, ?0)])'
'    AggregateRel(groupCount=[1], agg#0=[MIN(0)])'
'      ProjectRel(NAME=[$1])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
> 
> -- the above query can also be rewritten into this
> explain plan without implementation for
> select name
> from
> (select name, min(emps.name) min_name
>  from emps
>  group by name) v
> where v.min_name=(select max(name) from depts);
'column0'
'ProjectRel(NAME=[$0])'
'  FilterRel(condition=[=($1, ?0)])'
'    AggregateRel(groupCount=[1], MIN_NAME=[MIN(0)])'
'      ProjectRel(NAME=[$1])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
> 
> -- 3.6.1 HAVING clause with row types
> explain plan without implementation for
> select name from emps group by empno, name 
> having (emps.name, emps.empno) in (('ab', 10), ('cd', 20));
'column0'
'ProjectRel(NAME=[$1])'
'  FilterRel(condition=[OR(AND(=($1, 'ab'), =($0, 10)), AND(=($1, 'cd'), =($0, 20)))])'
'    AggregateRel(groupCount=[2])'
'      ProjectRel(EMPNO=[$0], NAME=[$1])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
> 
> -- 3.6.2 having clause column reference should not need to name the table
> explain plan without implementation for
> select name from emps group by name
> having name in ('ab', 'cd');
'column0'
'FilterRel(condition=[OR(=($0, 'ab'), =($0, 'cd'))])'
'  AggregateRel(groupCount=[1])'
'    ProjectRel(NAME=[$1])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
> 
> -- 3.6.3 will fail when looking up emps.empno in group by clause
> explain plan without implementation for
> select count(*) from emps
> where exists (select count(*) from depts group by emps.empno)
> group by emps.empno;
Error: From line 3, column 51 to line 3, column 54: Table 'EMPS' not found (state=,code=0)
> 
> -- will not decorrelate
> explain plan without implementation for
> select count(*) from emps
> group by emps.empno
> having exists (select count(*) from depts group by emps.empno);
'column0'
'ProjectRel(EXPR$0=[$1])'
'  FilterRel(condition=[IS TRUE($2)])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset0]])'
'      AggregateRel(groupCount=[1], EXPR$0=[COUNT()])'
'        ProjectRel(EMPNO=[$0])'
'          TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'        ProjectRel($f0=[true])'
'          ProjectRel(EXPR$0=[$1])'
'            AggregateRel(groupCount=[1], EXPR$0=[COUNT()])'
'              ProjectRel($f0=[$cor0.EMPNO])'
'                TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> -- 4.1 nested correlations
> insert into depts2 select * from depts;
> 
> explain plan without implementation for 
> select name 
> from emps 
> where exists(select * 
>              from depts 
>              where depts.deptno > emps.deptno or 
>                    exists (select *
>                            from depts2
>                            where depts.name = depts2.name
>                                  and depts2.deptno <> emps.empno));
'column0'
'ProjectRel(NAME=[$1])'
'  FilterRel(condition=[IS TRUE($10)])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var2=offset2, var1=offset0]])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'        ProjectRel($f0=[true])'
'          ProjectRel(DEPTNO=[$0], NAME=[$1])'
'            FilterRel(condition=[OR(>($0, $cor2.DEPTNO), IS TRUE($2))])'
'              CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset1]])'
'                TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'                AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'                  ProjectRel($f0=[true])'
'                    ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                      FilterRel(condition=[AND(=($cor0.NAME, $1), <>($0, $cor1.EMPNO))])'
'                        TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])'
> 
> explain plan for 
> select name 
> from emps 
> where exists(select * 
>              from depts 
>              where depts.deptno > emps.deptno or 
>                    exists (select *
>                            from depts2
>                            where depts.name = depts2.name
>                                  and depts2.deptno <> emps.empno));
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1]], filterOp=[COMP_EQ], filterOrdinals=[[6]], filterTuple=[[true]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME) NOT NULL])'
'    LhxJoinRel(leftKeys=[[2, 3]], rightKeys=[[1, 0]], joinType=[LEFT])'
'      FennelReshapeRel(projection=[[0, 1, 2, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER NOT NULL DEPTNO, INTEGER CAST($0):INTEGER) NOT NULL])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxAggRel(groupCount=[2], agg#0=[MIN(2)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0..3=[{inputs}], expr#4=[true], $f00=[$t1], $f01=[$t3], $f0=[$t4])'
'            FennelToIteratorConverter'
'              FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[2, 0]], joinKeyParamIds=[[2, 1]])'
'                FennelReshapeRel(projection=[[0, 3, 4]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER $f00, BOOLEAN $f2) NOT NULL])'
'                  LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                    LhxAggRel(groupCount=[2], agg#0=[MIN(2)])'
'                      IteratorToFennelConverter'
'                        IterCalcRel(expr#0..2=[{inputs}], expr#3=[true], $f0=[$t1], $f00=[$t0], $f0=[$t3])'
'                          FennelToIteratorConverter'
'                            FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[0]], joinKeyParamIds=[[3]])'
'                              LhxAggRel(groupCount=[1])'
'                                FennelRenameRel(fieldNames=[[$f0]])'
'                                  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'                              IteratorToFennelConverter'
'                                IterCalcRel(expr#0..2=[{inputs}], expr#3=[<>($t1, $t2)], proj#0..1=[{exprs}], $condition=[$t3])'
'                                  FennelToIteratorConverter'
'                                    FennelReshapeRel(projection=[[0, 1]], dynamicParameters=[[3]], paramCompareOffsets=[[-1]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0, INTEGER DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'                                      FennelBufferRel(inMemory=[false], multiPass=[true])'
'                                        FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0, INTEGER DEPTNO) NOT NULL])'
'                                          LhxJoinRel(leftKeys=[[1]], rightKeys=[[2]], joinType=[INNER])'
'                                            FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($0):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'                                              LhxAggRel(groupCount=[1])'
'                                                FennelRenameRel(fieldNames=[[$f0]])'
'                                                  FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                                            FennelReshapeRel(projection=[[0, 1, 1]], outputRowType=[RecordType(INTEGER DEPTNO, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'                                              LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO, SYS$CLUSTERED_INDEX$DEPTS2$NAME]])'
'                IteratorToFennelConverter'
'                  IterCalcRel(expr#0..2=[{inputs}], expr#3=[>($t1, $t0)], expr#4=[IS TRUE($t2)], expr#5=[OR($t3, $t4)], $f0=[$t0], $condition=[$t5])'
'                    FennelToIteratorConverter'
'                      FennelReshapeRel(projection=[[0]], dynamicParameters=[[1, 2]], paramCompareOffsets=[[-1, -1]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL DEPTNO, BOOLEAN $f2) NOT NULL])'
'                        FennelBufferRel(inMemory=[false], multiPass=[true])'
'                          LhxAggRel(groupCount=[1])'
'                            FennelRenameRel(fieldNames=[[$f0]])'
'                              FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select name 
> from emps 
> where exists(select * 
>              from depts 
>              where depts.deptno > emps.deptno or 
>                    exists (select *
>                            from depts2
>                            where depts.name = depts2.name
>                                  and depts2.deptno <> emps.empno))
> order by name;
'NAME'
'Eric'
'Fred'
'John'
'Wilma'
> 
> -- 4.2 correlation in more than one child
> explain plan without implementation for 
> select empno from emps
> where exists (select * from (select * from depts where depts.deptno = emps.deptno) t,
>                             (select * from depts2 where depts2.deptno <> emps.empno) v);
'column0'
'ProjectRel(EMPNO=[$0])'
'  FilterRel(condition=[IS TRUE($10)])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2, var1=offset0]])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'        ProjectRel($f0=[true])'
'          ProjectRel(DEPTNO=[$0], NAME=[$1], DEPTNO0=[$2], NAME0=[$3])'
'            JoinRel(condition=[true], joinType=[inner])'
'              ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'                  TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'              ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                FilterRel(condition=[<>($0, $cor1.EMPNO)])'
'                  TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])'
> 
> explain plan for 
> select empno from emps
> where exists (select * from (select * from depts where depts.deptno = emps.deptno) t,
>                             (select * from depts2 where depts2.deptno <> emps.empno) v);
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[4]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1, 0]], rightKeys=[[0, 1]], joinType=[LEFT])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxAggRel(groupCount=[2], agg#0=[MIN(2)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0..2=[{inputs}], expr#3=[true], $f0=[$t0], $f00=[$t2], $f0=[$t3])'
'            FennelToIteratorConverter'
'              FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1]], joinKeyParamIds=[[1]])'
'                FennelRenameRel(fieldNames=[[$f0, DEPTNO0]])'
'                  IteratorToFennelConverter'
'                    IterCalcRel(expr#0..1=[{inputs}], $f0=[$t1], DEPTNO=[$t0])'
'                      FennelToIteratorConverter'
'                        FennelCartesianProductRel(leftouterjoin=[false])'
'                          LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
'                          FennelBufferRel(inMemory=[false], multiPass=[true])'
'                            FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])'
'                              LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                                LhxAggRel(groupCount=[1])'
'                                  FennelRenameRel(fieldNames=[[$f0]])'
'                                    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'                IteratorToFennelConverter'
'                  IterCalcRel(expr#0..1=[{inputs}], expr#2=[<>($t1, $t0)], $f0=[$t0], $condition=[$t2])'
'                    FennelToIteratorConverter'
'                      FennelReshapeRel(projection=[[0]], dynamicParameters=[[1]], paramCompareOffsets=[[-1]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER DEPTNO0) NOT NULL])'
'                        FennelBufferRel(inMemory=[false], multiPass=[true])'
'                          LhxAggRel(groupCount=[1])'
'                            FennelRenameRel(fieldNames=[[$f0]])'
'                              FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select empno from emps
> where exists (select * from (select * from depts where depts.deptno = emps.deptno) t,
>                             (select * from depts2 where depts2.deptno <> emps.empno) v)
> order by empno;
'EMPNO'
'100'
'110'
'120'
> 
> -- 4.3 correlation from two outer relations, which are at the same level
> explain plan without implementation for
> select depts.name, emps.deptno from emps, depts
> where exists (
>     select * from depts2
>     where depts2.name = depts.name and depts2.deptno = emps.deptno);
'column0'
'ProjectRel(NAME=[$11], DEPTNO=[$2])'
'  FilterRel(condition=[IS TRUE($12)])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset11, var1=offset2]])'
'      JoinRel(condition=[true], joinType=[inner])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'        TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'      AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'        ProjectRel($f0=[true])'
'          ProjectRel(DEPTNO=[$0], NAME=[$1])'
'            FilterRel(condition=[AND(=($1, $cor0.NAME), =($0, $cor1.DEPTNO))])'
'              TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])'
> 
> explain plan for
> select depts.name, emps.deptno from emps, depts
> where exists (
>     select * from depts2
>     where depts2.name = depts.name and depts2.deptno = emps.deptno);
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1, 0]], filterOp=[COMP_EQ], filterOrdinals=[[4]], filterTuple=[[true]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER NOT NULL DEPTNO) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1, 0]], rightKeys=[[0, 1]], joinType=[LEFT])'
'      FennelCartesianProductRel(leftouterjoin=[false])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'      LhxAggRel(groupCount=[2], agg#0=[MIN(2)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0..6=[{inputs}], expr#7=[true], proj#0..1=[{exprs}], $f0=[$t7])'
'            FennelToIteratorConverter'
'              LhxJoinRel(leftKeys=[[2, 3]], rightKeys=[[2, 0]], joinType=[INNER])'
'                FennelReshapeRel(projection=[[0, 1, 0, 1]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0, INTEGER NOT NULL $f1, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($0):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary", INTEGER CAST($1):INTEGER) NOT NULL])'
'                  LhxAggRel(groupCount=[2])'
'                    FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0, INTEGER NOT NULL $f1) NOT NULL])'
'                      FennelCartesianProductRel(leftouterjoin=[false])'
'                        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'                        FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                FennelReshapeRel(projection=[[0, 1, 1]], outputRowType=[RecordType(INTEGER DEPTNO, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'                  LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO, SYS$CLUSTERED_INDEX$DEPTS2$NAME]])'
> 
> select depts.name, emps.deptno from emps, depts
> where exists (
>     select * from depts2
>     where depts2.name = depts.name and depts2.deptno = emps.deptno);
'NAME','DEPTNO'
'Marketing','20'
'Sales','10'
'Marketing','20'
> 
> -- 4.4 correlations from one relation to two outer relations at different level
> explain plan without implementation for 
> select name 
> from emps 
> where exists(select * 
>              from depts 
>              where depts.deptno > 10 and
>                    exists (select *
>                            from depts2
>                            where depts.name = depts2.name
>                                  and depts2.deptno = emps.deptno));
'column0'
'ProjectRel(NAME=[$1])'
'  FilterRel(condition=[IS TRUE($10)])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var1=offset2]])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'        ProjectRel($f0=[true])'
'          ProjectRel(DEPTNO=[$0], NAME=[$1])'
'            FilterRel(condition=[AND(>($0, 10), IS TRUE($2))])'
'              CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset1]])'
'                TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'                AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'                  ProjectRel($f0=[true])'
'                    ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                      FilterRel(condition=[AND(=($cor0.NAME, $1), =($0, $cor1.DEPTNO))])'
'                        TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])'
> 
> explain plan for 
> select name 
> from emps 
> where exists(select * 
>              from depts 
>              where depts.deptno > 10 and
>                    exists (select *
>                            from depts2
>                            where depts.name = depts2.name
>                                  and depts2.deptno = emps.deptno));
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[4]], filterTuple=[[true]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME) NOT NULL])'
'    LhxJoinRel(leftKeys=[[2]], rightKeys=[[0]], joinType=[LEFT])'
'      FennelReshapeRel(projection=[[0, 1, 1]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER NOT NULL DEPTNO, INTEGER CAST($1):INTEGER) NOT NULL])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0..3=[{inputs}], expr#4=[true], expr#5=[IS TRUE($t3)], $f00=[$t2], $f0=[$t4], $condition=[$t5])'
'            FennelToIteratorConverter'
'              LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'                FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME) NOT NULL])'
'                  FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], uniqueKey=[false], preserveOrder=[false], outer=[false], inputKeyProj=[[1, 3]], inputJoinProj=[[]], inputDirectiveProj=[[0, 2]])'
'                    FennelValuesRel(tuples=[[{ '(', 10, '+', null }]])'
'                LhxAggRel(groupCount=[2], agg#0=[MIN(2)])'
'                  IteratorToFennelConverter'
'                    IterCalcRel(expr#0..3=[{inputs}], expr#4=[true], $f0=[$t2], $f00=[$t0], $f0=[$t4])'
'                      FennelToIteratorConverter'
'                        LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'                          FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])'
'                            LhxAggRel(groupCount=[1])'
'                              FennelRenameRel(fieldNames=[[$f0]])'
'                                FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'                          FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0, INTEGER DEPTNO) NOT NULL])'
'                            LhxJoinRel(leftKeys=[[1]], rightKeys=[[2]], joinType=[INNER])'
'                              FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($0):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'                                LhxAggRel(groupCount=[1])'
'                                  FennelRenameRel(fieldNames=[[$f0]])'
'                                    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                              FennelReshapeRel(projection=[[0, 1, 1]], outputRowType=[RecordType(INTEGER DEPTNO, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'                                LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO, SYS$CLUSTERED_INDEX$DEPTS2$NAME]])'
> 
> select name 
> from emps 
> where exists(select * 
>              from depts 
>              where depts.deptno > 10 and
>                    exists (select *
>                            from depts2
>                            where depts.name = depts2.name
>                                  and depts2.deptno = emps.deptno))
> order by name;
'NAME'
'Eric'
'Wilma'
> 
> -- subquery in "lateral derived table"
> -- 5.1 no correlation
> explain plan without implementation for
> select emps.empno, d.deptno
> from emps,
> lateral (select * from depts) as d
> order by emps.empno, d.deptno;
'column0'
'SortRel(sort0=[$0], sort1=[$1], dir0=[Ascending], dir1=[Ascending])'
'  ProjectRel(EMPNO=[$0], DEPTNO=[$10])'
'    JoinRel(condition=[true], joinType=[inner])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      ProjectRel(DEPTNO=[$0], NAME=[$1])'
'        TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for
> select emps.empno, d.deptno
> from emps,
> lateral (select * from depts) as d
> order by emps.empno, d.deptno;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'    FennelCartesianProductRel(leftouterjoin=[false])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> select emps.empno, d.deptno
> from emps,
> lateral (select * from depts) as d
> order by emps.empno, d.deptno;
'EMPNO','DEPTNO'
'100','10'
'100','20'
'100','30'
'110','10'
'110','10'
'110','20'
'110','20'
'110','30'
'110','30'
'120','10'
'120','20'
'120','30'
> 
> -- 5.2 correlated: one correlation
> explain plan without implementation for
> select emps.empno, d.deptno
> from emps,
> lateral (select * from depts where depts.deptno = emps.deptno) as d
> order by emps.empno;
'column0'
'SortRel(sort0=[$0], dir0=[Ascending])'
'  ProjectRel(EMPNO=[$0], DEPTNO=[$10])'
'    CorrelatorRel(condition=[true], joinType=[inner], correlations=[[var0=offset2]])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      ProjectRel(DEPTNO=[$0], NAME=[$1])'
'        FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'          TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for
> select emps.empno, d.deptno
> from emps,
> lateral (select * from depts where depts.deptno = emps.deptno) as d
> order by emps.empno;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'          LhxAggRel(groupCount=[1])'
'            FennelRenameRel(fieldNames=[[$f0]])'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select emps.empno, d.deptno
> from emps,
> lateral (select * from depts where depts.deptno = emps.deptno) as d
> order by emps.empno;
'EMPNO','DEPTNO'
'100','10'
'110','20'
'120','20'
> 
> -- 5.3 two lateral views: two correlations
> explain plan without implementation for
> select emps.empno, d.deptno, d2.deptno
> from emps,
> lateral (select * from depts where depts.deptno = emps.deptno) as d,
> lateral (select * from depts2 where depts2.deptno <> emps.deptno) as d2
> order by emps.empno;
'column0'
'SortRel(sort0=[$0], dir0=[Ascending])'
'  ProjectRel(EMPNO=[$0], DEPTNO=[$10], DEPTNO0=[$12])'
'    CorrelatorRel(condition=[true], joinType=[inner], correlations=[[var1=offset2]])'
'      CorrelatorRel(condition=[true], joinType=[inner], correlations=[[var0=offset2]])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'        ProjectRel(DEPTNO=[$0], NAME=[$1])'
'          FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'      ProjectRel(DEPTNO=[$0], NAME=[$1])'
'        FilterRel(condition=[<>($0, $cor1.DEPTNO)])'
'          TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])'
> 
> explain plan for
> select emps.empno, d.deptno, d2.deptno
> from emps,
> lateral (select * from depts where depts.deptno = emps.deptno) as d,
> lateral (select * from depts2 where depts2.deptno <> emps.deptno) as d2
> order by emps.empno;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 3, 2]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO, INTEGER DEPTNO0) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'        FennelReshapeRel(projection=[[0, 1, 3]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO, INTEGER DEPTNO0) NOT NULL])'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'            FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[0]], joinKeyParamIds=[[1]])'
'              LhxAggRel(groupCount=[1])'
'                FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])'
'                  LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'                    FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])'
'                      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                        FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                        LhxAggRel(groupCount=[1])'
'                          FennelRenameRel(fieldNames=[[$f0]])'
'                            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'              IteratorToFennelConverter'
'                IterCalcRel(expr#0..1=[{inputs}], expr#2=[<>($t0, $t1)], DEPTNO=[$t0], $condition=[$t2])'
'                  FennelToIteratorConverter'
'                    FennelReshapeRel(projection=[[0]], dynamicParameters=[[1]], paramCompareOffsets=[[-1]], outputRowType=[RecordType(INTEGER DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'                      LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'          LhxAggRel(groupCount=[1])'
'            FennelRenameRel(fieldNames=[[$f0]])'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select emps.empno, d.deptno, d2.deptno
> from emps,
> lateral (select * from depts where depts.deptno = emps.deptno) as d,
> lateral (select * from depts2 where depts2.deptno <> emps.deptno) as d2
> order by emps.empno, d.deptno, d2.deptno;
'EMPNO','DEPTNO','DEPTNO'
'100','10','20'
'100','10','30'
'110','20','10'
'110','20','30'
'120','20','10'
'120','20','30'
> 
> -- 5.4 two lateral views: three correlations
> explain plan without implementation for
> select emps.empno, d.deptno, d2.deptno
> from emps,
> lateral (select *
>          from depts 
>          where depts.deptno = emps.deptno) as d,
> lateral (select *
>          from depts2
>          where depts2.deptno = d.deptno and depts2.deptno <> emps.deptno) as d2
> order by emps.empno;
'column0'
'SortRel(sort0=[$0], dir0=[Ascending])'
'  ProjectRel(EMPNO=[$0], DEPTNO=[$10], DEPTNO0=[$12])'
'    CorrelatorRel(condition=[true], joinType=[inner], correlations=[[var2=offset2, var1=offset10]])'
'      CorrelatorRel(condition=[true], joinType=[inner], correlations=[[var0=offset2]])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'        ProjectRel(DEPTNO=[$0], NAME=[$1])'
'          FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'      ProjectRel(DEPTNO=[$0], NAME=[$1])'
'        FilterRel(condition=[AND(=($0, $cor1.DEPTNO), <>($0, $cor2.DEPTNO))])'
'          TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])'
> 
> explain plan for
> select emps.empno, d.deptno, d2.deptno
> from emps,
> lateral (select *
>          from depts 
>          where depts.deptno = emps.deptno) as d,
> lateral (select *
>          from depts2
>          where depts2.deptno = d.deptno and depts2.deptno <> emps.deptno) as d2
> order by emps.empno;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 3, 5]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO, INTEGER DEPTNO0) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1, 1]], rightKeys=[[2, 0]], joinType=[INNER])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'          LhxAggRel(groupCount=[1])'
'            FennelRenameRel(fieldNames=[[$f0]])'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'          FennelReshapeRel(projection=[[0, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER NOT NULL $f1, INTEGER DEPTNO0) NOT NULL])'
'            LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'              IteratorToFennelConverter'
'                IterCalcRel(expr#0..3=[{inputs}], expr#4=[<>($t3, $t1)], proj#0..1=[{exprs}], DEPTNO=[$t3], $condition=[$t4])'
'                  FennelToIteratorConverter'
'                    LhxJoinRel(leftKeys=[[2]], rightKeys=[[0]], joinType=[INNER])'
'                      FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL $f1, INTEGER CAST($0):INTEGER) NOT NULL])'
'                        LhxAggRel(groupCount=[2])'
'                          FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL $f1) NOT NULL])'
'                            LhxJoinRel(leftKeys=[[0]], rightKeys=[[1]], joinType=[INNER])'
'                              FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'                              LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                                LhxAggRel(groupCount=[1])'
'                                  FennelRenameRel(fieldNames=[[$f0]])'
'                                    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'                      LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
> 
> -- result set should be empty for this query
> select emps.empno, d.deptno, d2.deptno
> from emps,
> lateral (select *
>          from depts 
>          where depts.deptno = emps.deptno) as d,
> lateral (select *
>          from depts2
>          where depts2.deptno = d.deptno and depts2.deptno <> emps.deptno) as d2
> order by emps.empno;
'EMPNO','DEPTNO','DEPTNO'
> 
> -- Correlations through set ops are not decorrelated.
> -- 6.1 union/union all
> -- Decorrelation is not performed.
> explain plan without implementation for 
> select empno from emps
> where exists (select * from (select * from depts where depts.deptno = emps.deptno union all
>                              select * from depts2 where depts2.deptno <> emps.empno));
'column0'
'ProjectRel(EMPNO=[$0])'
'  FilterRel(condition=[IS TRUE($10)])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2, var1=offset0]])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'        ProjectRel($f0=[true])'
'          ProjectRel(DEPTNO=[$0], NAME=[$1])'
'            UnionRel(all=[true])'
'              ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'                  TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'              ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                FilterRel(condition=[<>($0, $cor1.EMPNO)])'
'                  TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])'
> 
> explain plan without implementation for 
> select empno from emps
> where exists (select * from (select * from depts where depts.deptno = emps.deptno union
>                              select * from depts2 where depts2.deptno <> emps.empno));
'column0'
'ProjectRel(EMPNO=[$0])'
'  FilterRel(condition=[IS TRUE($10)])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2, var1=offset0]])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'        ProjectRel($f0=[true])'
'          ProjectRel(DEPTNO=[$0], NAME=[$1])'
'            UnionRel(all=[false])'
'              ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'                  TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'              ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                FilterRel(condition=[<>($0, $cor1.EMPNO)])'
'                  TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])'
> 
> -- 6.1.1 A solution to 6.1 could be to expand the union and rewrite the exists
> -- condition into exists(union branch 1) or exists(union branch 2).
> explain plan without implementation for 
> select empno from emps
> where exists (select * from depts where depts.deptno = emps.deptno) 
>       or exists (select * from depts2 where depts2.deptno <> emps.empno);
'column0'
'ProjectRel(EMPNO=[$0])'
'  FilterRel(condition=[OR(IS TRUE($10), IS TRUE($11))])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var1=offset0]])'
'      CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'        AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'          ProjectRel($f0=[true])'
'            ProjectRel(DEPTNO=[$0], NAME=[$1])'
'              FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'                TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'      AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'        ProjectRel($f0=[true])'
'          ProjectRel(DEPTNO=[$0], NAME=[$1])'
'            FilterRel(condition=[<>($0, $cor1.EMPNO)])'
'              TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])'
> 
> explain plan for 
> select empno from emps
> where exists (select * from depts where depts.deptno = emps.deptno) 
>       or exists (select * from depts2 where depts2.deptno <> emps.empno);
'column0'
'IterCalcRel(expr#0..3=[{inputs}], expr#4=[IS TRUE($t1)], expr#5=[IS TRUE($t3)], expr#6=[OR($t4, $t5)], EMPNO=[$t0], $condition=[$t6])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      FennelReshapeRel(projection=[[0, 3]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, BOOLEAN $f1) NOT NULL])'
'        LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'          LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'            IteratorToFennelConverter'
'              IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'                FennelToIteratorConverter'
'                  LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                    LhxAggRel(groupCount=[1])'
'                      FennelRenameRel(fieldNames=[[$f0]])'
'                        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t0], $f0=[$t2])'
'            FennelToIteratorConverter'
'              FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[0]], joinKeyParamIds=[[1]])'
'                LhxAggRel(groupCount=[1])'
'                  FennelRenameRel(fieldNames=[[$f0]])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'                IteratorToFennelConverter'
'                  IterCalcRel(expr#0..1=[{inputs}], expr#2=[<>($t0, $t1)], DEPTNO=[$t0], $condition=[$t2])'
'                    FennelToIteratorConverter'
'                      FennelReshapeRel(projection=[[0]], dynamicParameters=[[1]], paramCompareOffsets=[[-1]], outputRowType=[RecordType(INTEGER DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'                        LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
> 
> -- 6.1.2 The following, less complex, equivalent plan is possible with OR-expansion.
> -- Note the IN lookup is required because union all does not remove duplicates.
> -- Similarly, if using union the lookup is also required because union removes duplicates.
> -- This could be a better plan than 6.1.1 because there're one fewer joins.
> explain plan without implementation for
> select empno from emps where empno in (
>     select empno from emps
>     where exists (select * from depts where depts.deptno = emps.deptno)
>     union all
>     select empno from emps
>     where exists (select * from depts2 where depts2.deptno <> emps.empno));
'column0'
'ProjectRel(EMPNO=[$0])'
'  JoinRel(condition=[=($10, $11)], joinType=[inner])'
'    ProjectRel($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$9], $f10=[$0])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'    AggregateRel(groupCount=[1])'
'      UnionRel(all=[true])'
'        ProjectRel(EMPNO=[$0])'
'          FilterRel(condition=[IS TRUE($10)])'
'            CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])'
'              TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'              AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'                ProjectRel($f0=[true])'
'                  ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                    FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'                      TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'        ProjectRel(EMPNO=[$0])'
'          FilterRel(condition=[IS TRUE($10)])'
'            CorrelatorRel(condition=[true], joinType=[left], correlations=[[var1=offset0]])'
'              TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'              AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'                ProjectRel($f0=[true])'
'                  ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                    FilterRel(condition=[<>($0, $cor1.EMPNO)])'
'                      TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])'
> 
> explain plan for
> select empno from emps where empno in (
>     select empno from emps
>     where exists (select * from depts where depts.deptno = emps.deptno)
>     union all
>     select empno from emps
>     where exists (select * from depts2 where depts2.deptno <> emps.empno));
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFTSEMI])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'      FennelMergeRel'
'        FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'            LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'              IteratorToFennelConverter'
'                IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'                  FennelToIteratorConverter'
'                    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                      LhxAggRel(groupCount=[1])'
'                        FennelRenameRel(fieldNames=[[$f0]])'
'                          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'        FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[2]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])'
'          LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'            LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'              IteratorToFennelConverter'
'                IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t0], $f0=[$t2])'
'                  FennelToIteratorConverter'
'                    FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[0]], joinKeyParamIds=[[1]])'
'                      LhxAggRel(groupCount=[1])'
'                        FennelRenameRel(fieldNames=[[$f0]])'
'                          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'                      IteratorToFennelConverter'
'                        IterCalcRel(expr#0..1=[{inputs}], expr#2=[<>($t0, $t1)], DEPTNO=[$t0], $condition=[$t2])'
'                          FennelToIteratorConverter'
'                            FennelReshapeRel(projection=[[0]], dynamicParameters=[[1]], paramCompareOffsets=[[-1]], outputRowType=[RecordType(INTEGER DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'                              LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
> 
> -- 6.2 intersect
> explain plan without implementation for 
> select empno from emps
> where exists (select * from (select * from depts where depts.deptno = emps.deptno intersect
>                              select * from depts2 where depts2.deptno <> emps.empno));
'column0'
'ProjectRel(EMPNO=[$0])'
'  FilterRel(condition=[IS TRUE($10)])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2, var1=offset0]])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'        ProjectRel($f0=[true])'
'          ProjectRel(DEPTNO=[$0], NAME=[$1])'
'            IntersectRel(all=[false])'
'              ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'                  TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'              ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                FilterRel(condition=[<>($0, $cor1.EMPNO)])'
'                  TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])'
> 
> -- 6.2.1 however, this is not equivalent to 6.2.
> explain plan without implementation for 
> select empno from emps
> where exists (select * from depts where depts.deptno = emps.deptno) 
>       and exists (select * from depts2 where depts2.deptno <> emps.empno);
'column0'
'ProjectRel(EMPNO=[$0])'
'  FilterRel(condition=[AND(IS TRUE($10), IS TRUE($11))])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var1=offset0]])'
'      CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'        AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'          ProjectRel($f0=[true])'
'            ProjectRel(DEPTNO=[$0], NAME=[$1])'
'              FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'                TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'      AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'        ProjectRel($f0=[true])'
'          ProjectRel(DEPTNO=[$0], NAME=[$1])'
'            FilterRel(condition=[<>($0, $cor1.EMPNO)])'
'              TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])'
> 
> explain plan for 
> select empno from emps
> where exists (select * from depts where depts.deptno = emps.deptno) 
>       and exists (select * from depts2 where depts2.deptno <> emps.empno);
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[2]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])'
'        LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'          LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'            IteratorToFennelConverter'
'              IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'                FennelToIteratorConverter'
'                  LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                    LhxAggRel(groupCount=[1])'
'                      FennelRenameRel(fieldNames=[[$f0]])'
'                        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t0], $f0=[$t2])'
'            FennelToIteratorConverter'
'              FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[0]], joinKeyParamIds=[[1]])'
'                LhxAggRel(groupCount=[1])'
'                  FennelRenameRel(fieldNames=[[$f0]])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'                IteratorToFennelConverter'
'                  IterCalcRel(expr#0..1=[{inputs}], expr#2=[<>($t0, $t1)], DEPTNO=[$t0], $condition=[$t2])'
'                    FennelToIteratorConverter'
'                      FennelReshapeRel(projection=[[0]], dynamicParameters=[[1]], paramCompareOffsets=[[-1]], outputRowType=[RecordType(INTEGER DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'                        LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
> 
> -- 6.2.2 The following plan is equivalent to 6.2.1 and has one fewer joins.
> -- Note the IN lookup is required because intersect removes duplicates.
> explain plan without implementation for
> select empno from emps
> where empno in (
>     select empno from emps
>     where exists (select * from depts where depts.deptno = emps.deptno)
>     intersect
>     select empno from emps
>     where exists (select * from depts2 where depts2.deptno <> emps.empno));
'column0'
'ProjectRel(EMPNO=[$0])'
'  JoinRel(condition=[=($10, $11)], joinType=[inner])'
'    ProjectRel($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$9], $f10=[$0])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'    AggregateRel(groupCount=[1])'
'      IntersectRel(all=[false])'
'        ProjectRel(EMPNO=[$0])'
'          FilterRel(condition=[IS TRUE($10)])'
'            CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])'
'              TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'              AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'                ProjectRel($f0=[true])'
'                  ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                    FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'                      TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'        ProjectRel(EMPNO=[$0])'
'          FilterRel(condition=[IS TRUE($10)])'
'            CorrelatorRel(condition=[true], joinType=[left], correlations=[[var1=offset0]])'
'              TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'              AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'                ProjectRel($f0=[true])'
'                  ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                    FilterRel(condition=[<>($0, $cor1.EMPNO)])'
'                      TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])'
> 
> explain plan for
> select empno from emps
> where empno in (
>     select empno from emps
>     where exists (select * from depts where depts.deptno = emps.deptno)
>     intersect
>     select empno from emps
>     where exists (select * from depts2 where depts2.deptno <> emps.empno));
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFTSEMI], setop=[true])'
'        FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'            LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'              IteratorToFennelConverter'
'                IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'                  FennelToIteratorConverter'
'                    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                      LhxAggRel(groupCount=[1])'
'                        FennelRenameRel(fieldNames=[[$f0]])'
'                          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'        FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[2]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])'
'          LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'            LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'              IteratorToFennelConverter'
'                IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t0], $f0=[$t2])'
'                  FennelToIteratorConverter'
'                    FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[0]], joinKeyParamIds=[[1]])'
'                      LhxAggRel(groupCount=[1])'
'                        FennelRenameRel(fieldNames=[[$f0]])'
'                          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'                      IteratorToFennelConverter'
'                        IterCalcRel(expr#0..1=[{inputs}], expr#2=[<>($t0, $t1)], DEPTNO=[$t0], $condition=[$t2])'
'                          FennelToIteratorConverter'
'                            FennelReshapeRel(projection=[[0]], dynamicParameters=[[1]], paramCompareOffsets=[[-1]], outputRowType=[RecordType(INTEGER DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'                              LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
> 
> -- 6.3 except
> explain plan without implementation for 
> select empno from emps
> where exists (select * from (select * from depts where depts.deptno = emps.deptno except
>                              select * from depts2 where depts2.deptno <> emps.empno));
'column0'
'ProjectRel(EMPNO=[$0])'
'  FilterRel(condition=[IS TRUE($10)])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2, var1=offset0]])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'        ProjectRel($f0=[true])'
'          ProjectRel(DEPTNO=[$0], NAME=[$1])'
'            MinusRel(all=[false])'
'              ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'                  TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'              ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                FilterRel(condition=[<>($0, $cor1.EMPNO)])'
'                  TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])'
> 
> -- 6.3.1 however, this is not equivalent to 6.3.
> explain plan without implementation for 
> select empno from emps
> where exists (select * from depts where depts.deptno = emps.deptno) 
>       and not exists (select * from depts2 where depts2.deptno <> emps.empno);
'column0'
'ProjectRel(EMPNO=[$0])'
'  FilterRel(condition=[AND(IS TRUE($10), NOT(IS TRUE($11)))])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var1=offset0]])'
'      CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'        AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'          ProjectRel($f0=[true])'
'            ProjectRel(DEPTNO=[$0], NAME=[$1])'
'              FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'                TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'      AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'        ProjectRel($f0=[true])'
'          ProjectRel(DEPTNO=[$0], NAME=[$1])'
'            FilterRel(condition=[<>($0, $cor1.EMPNO)])'
'              TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])'
> 
> explain plan for 
> select empno from emps
> where exists (select * from depts where depts.deptno = emps.deptno) 
>       and not exists (select * from depts2 where depts2.deptno <> emps.empno);
'column0'
'IterCalcRel(expr#0..2=[{inputs}], expr#3=[IS TRUE($t2)], expr#4=[NOT($t3)], EMPNO=[$t0], $condition=[$t4])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])'
'        LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'          LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'            IteratorToFennelConverter'
'              IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'                FennelToIteratorConverter'
'                  LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                    LhxAggRel(groupCount=[1])'
'                      FennelRenameRel(fieldNames=[[$f0]])'
'                        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t0], $f0=[$t2])'
'            FennelToIteratorConverter'
'              FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[0]], joinKeyParamIds=[[1]])'
'                LhxAggRel(groupCount=[1])'
'                  FennelRenameRel(fieldNames=[[$f0]])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'                IteratorToFennelConverter'
'                  IterCalcRel(expr#0..1=[{inputs}], expr#2=[<>($t0, $t1)], DEPTNO=[$t0], $condition=[$t2])'
'                    FennelToIteratorConverter'
'                      FennelReshapeRel(projection=[[0]], dynamicParameters=[[1]], paramCompareOffsets=[[-1]], outputRowType=[RecordType(INTEGER DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'                        LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
> 
> -- 6.3.2 The following plan is equivalent to 6.3.1 and has one fewer joins.
> -- Note the IN lookup is required because intersect removes duplicates.
> explain plan without implementation for
> select empno from emps
> where empno in (
>     select empno from emps
>     where exists (select * from depts where depts.deptno = emps.deptno)
>     except
>     select empno from emps
>     where exists (select * from depts2 where depts2.deptno <> emps.empno));
'column0'
'ProjectRel(EMPNO=[$0])'
'  JoinRel(condition=[=($10, $11)], joinType=[inner])'
'    ProjectRel($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$9], $f10=[$0])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'    AggregateRel(groupCount=[1])'
'      MinusRel(all=[false])'
'        ProjectRel(EMPNO=[$0])'
'          FilterRel(condition=[IS TRUE($10)])'
'            CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])'
'              TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'              AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'                ProjectRel($f0=[true])'
'                  ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                    FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'                      TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'        ProjectRel(EMPNO=[$0])'
'          FilterRel(condition=[IS TRUE($10)])'
'            CorrelatorRel(condition=[true], joinType=[left], correlations=[[var1=offset0]])'
'              TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'              AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'                ProjectRel($f0=[true])'
'                  ProjectRel(DEPTNO=[$0], NAME=[$1])'
'                    FilterRel(condition=[<>($0, $cor1.EMPNO)])'
'                      TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])'
> 
> explain plan for
> select empno from emps
> where empno in (
>     select empno from emps
>     where exists (select * from depts where depts.deptno = emps.deptno)
>     except
>     select empno from emps
>     where exists (select * from depts2 where depts2.deptno <> emps.empno));
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[RIGHTANTI], setop=[true])'
'        FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[2]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])'
'          LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'            LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'              IteratorToFennelConverter'
'                IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t0], $f0=[$t2])'
'                  FennelToIteratorConverter'
'                    FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[0]], joinKeyParamIds=[[1]])'
'                      LhxAggRel(groupCount=[1])'
'                        FennelRenameRel(fieldNames=[[$f0]])'
'                          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'                      IteratorToFennelConverter'
'                        IterCalcRel(expr#0..1=[{inputs}], expr#2=[<>($t0, $t1)], DEPTNO=[$t0], $condition=[$t2])'
'                          FennelToIteratorConverter'
'                            FennelReshapeRel(projection=[[0]], dynamicParameters=[[1]], paramCompareOffsets=[[-1]], outputRowType=[RecordType(INTEGER DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'                              LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
'        FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'            LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'              IteratorToFennelConverter'
'                IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'                  FennelToIteratorConverter'
'                    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                      LhxAggRel(groupCount=[1])'
'                        FennelRenameRel(fieldNames=[[$f0]])'
'                          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> -- 7.1 some multiset queries are not decorrelated because they contain set ops.
> explain plan without implementation for 
> select 'abc', multiset[deptno,empno] from emps;
'column0'
'ProjectRel(EXPR$0=['abc'], EXPR$1=[$SLICE($10)])'
'  CorrelatorRel(condition=[true], joinType=[inner], correlations=[[var0=offset2, var1=offset0]])'
'    TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'    CollectRel'
'      UnionRel(all=[true])'
'        ProjectRel(EXPR$0=[$cor0.DEPTNO])'
'          OneRowRel'
'        ProjectRel(EXPR$0=[$cor1.EMPNO])'
'          OneRowRel'
> 
> explain plan without implementation for 
> select * from unnest(select multiset[deptno] from depts);
'column0'
'ProjectRel(EXPR$0=[$0])'
'  UncollectRel'
'    ProjectRel(EXPR$0=[$SLICE($2)])'
'      CorrelatorRel(condition=[true], joinType=[inner], correlations=[[var0=offset0]])'
'        TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'        CollectRel'
'          UnionRel(all=[true])'
'            ProjectRel(EXPR$0=[$cor0.DEPTNO])'
'              OneRowRel'
> 
> -- 8.1 on clause
> -- correlation from outer qb is not decorrelated
> explain plan without implementation for
> select name from emps
> where exists (select * from depts d1 left outer join depts2 d2 
>               on d1.deptno = emps.deptno and d1.deptno = d2.deptno);
'column0'
'ProjectRel(NAME=[$1])'
'  FilterRel(condition=[IS TRUE($10)])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'        ProjectRel($f0=[true])'
'          ProjectRel(DEPTNO=[$0], NAME=[$1], DEPTNO0=[$2], NAME0=[$3])'
'            JoinRel(condition=[AND(=($0, $cor0.DEPTNO), =($0, $2))], joinType=[left])'
'              TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'              TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])'
> 
> -- non correlated scalar subq in ON clause gives parsing error
> explain plan without implementation for
> select * from emps left outer join depts
> on emps.deptno = depts.deptno and emps.deptno = (select min(deptno) from depts2);
Error: java.lang.AssertionError: Internal error: Not a query: SELECT MIN(`DEPTNO`)
FROM `DEPTS2` (state=,code=0)
> 
> -- but this works
> explain plan without implementation for
> select * from emps left outer join depts
> on emps.deptno = depts.deptno
> where emps.deptno = (select min(deptno) from depts2);
'column0'
'ProjectRel(EMPNO=[$0], NAME=[$1], DEPTNO=[$2], GENDER=[$3], CITY=[$4], EMPID=[$5], AGE=[$6], PUBLIC_KEY=[$7], SLACKER=[$8], MANAGER=[$9], DEPTNO0=[$10], NAME0=[$11])'
'  FilterRel(condition=[=($2, ?0)])'
'    JoinRel(condition=[=($2, $10)], joinType=[left])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> -- so does this
> explain plan without implementation for
> select * from emps left outer join depts
> on emps.deptno = depts.deptno
> where emps.deptno = (select min(deptno) from depts2 where depts2.deptno = depts.deptno);
'column0'
'ProjectRel(EMPNO=[$0], NAME=[$1], DEPTNO=[$2], GENDER=[$3], CITY=[$4], EMPID=[$5], AGE=[$6], PUBLIC_KEY=[$7], SLACKER=[$8], MANAGER=[$9], DEPTNO0=[$10], NAME0=[$11])'
'  FilterRel(condition=[=($2, $12)])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset10]])'
'      JoinRel(condition=[=($2, $10)], joinType=[left])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'        TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'      AggregateRel(groupCount=[0], EXPR$0=[MIN(0)])'
'        ProjectRel(DEPTNO=[$0])'
'          FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS2]])'
> 
> explain plan for
> select * from emps left outer join depts
> on emps.deptno = depts.deptno
> where emps.deptno = (select min(deptno) from depts2 where depts2.deptno = depts.deptno);
'column0'
'IterCalcRel(expr#0..13=[{inputs}], expr#14=[=($t2, $t13)], proj#0..11=[{exprs}], $condition=[$t14])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[10]], rightKeys=[[0]], joinType=[LEFT])'
'      FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], uniqueKey=[true], preserveOrder=[false], outer=[true], inputKeyProj=[[2]], inputJoinProj=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], inputDirectiveProj=[[]])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], EXPR$0=[MIN(1)])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'          LhxAggRel(groupCount=[1])'
'            FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER $f0) NOT NULL])'
'              FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], uniqueKey=[true], preserveOrder=[false], outer=[true], inputKeyProj=[[0]], inputJoinProj=[[0]], inputDirectiveProj=[[]])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'          LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
> 
> -- 9 views built on top of correlated queries
> drop table emps2;
> drop table depts2;
> 
> create table emps2 (name varchar(40), empno int, deptno int);
> create table depts2 (name varchar(40), deptno int);
> 
> insert into emps2 select name, empno, deptno from emps;
> insert into depts2 select name, deptno from depts;
> 
> -- 9.1 view over query with correlated IN subquery
> create view v1 (ename, empno, deptno) as
> select name, empno, deptno from emps
> where deptno in (select deptno from depts where emps.empno < depts.deptno*10);
> 
> explain plan for
> select name, empno, deptno from emps
> where deptno in (select deptno from depts where emps.empno < depts.deptno*10);
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1, 0, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[2, 0]], joinType=[RIGHTSEMI])'
'      FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'        FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1]], joinKeyParamIds=[[1]])'
'          IteratorToFennelConverter'
'            IterCalcRel(expr#0=[{inputs}], expr#1=[10], expr#2=[*($t0, $t1)], DEPTNO=[$t0], *($0, 10)=[$t2])'
'              FennelToIteratorConverter'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'          FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[2])'
'            FennelValuesRel(tuples=[[{ '(', null, ')', null }]])'
'          FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[2], indexCols=[[0]])'
'            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'              LhxAggRel(groupCount=[1])'
'                FennelRenameRel(fieldNames=[[$f0]])'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> explain plan for
> select * from v1;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1, 0, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL ENAME, INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[2, 0]], joinType=[RIGHTSEMI])'
'      FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'        FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1]], joinKeyParamIds=[[1]])'
'          IteratorToFennelConverter'
'            IterCalcRel(expr#0=[{inputs}], expr#1=[10], expr#2=[*($t0, $t1)], DEPTNO=[$t0], *($0, 10)=[$t2])'
'              FennelToIteratorConverter'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'          FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[2])'
'            FennelValuesRel(tuples=[[{ '(', null, ')', null }]])'
'          FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[2], indexCols=[[0]])'
'            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'              LhxAggRel(groupCount=[1])'
'                FennelRenameRel(fieldNames=[[$f0]])'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> select name, empno, deptno from emps
> where deptno in (select deptno from depts where emps.empno < depts.deptno*10)
> order by name;
'NAME','EMPNO','DEPTNO'
'Eric','110','20'
'Wilma','120','20'
> 
> select * from v1 order by ename;
'ENAME','EMPNO','DEPTNO'
'Eric','110','20'
'Wilma','120','20'
> 
> -- 9.2 view over query with correlated EXISTS subquery
> create view v2 (ename, empno, deptno) as
> select name, empno, deptno from emps2
> where exists(select * from depts2 where depts2.deptno=emps2.deptno);
> 
> explain plan for
> select name, empno, deptno from emps2
> where exists(select * from depts2 where depts2.deptno=emps2.deptno);
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1, 2]], filterOp=[COMP_EQ], filterOrdinals=[[4]], filterTuple=[[true]], outputRowType=[RecordType(VARCHAR(40) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, INTEGER EMPNO, INTEGER DEPTNO) NOT NULL])'
'    LhxJoinRel(leftKeys=[[2]], rightKeys=[[0]], joinType=[LEFT])'
'      LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$EMPNO, SYS$CLUSTERED_INDEX$EMPS2$NAME]])'
'      LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'            FennelToIteratorConverter'
'              LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
'                LhxAggRel(groupCount=[1])'
'                  FennelRenameRel(fieldNames=[[$f0]])'
'                    LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO]])'
> 
> explain plan for
> select * from v2;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1, 2]], filterOp=[COMP_EQ], filterOrdinals=[[4]], filterTuple=[[true]], outputRowType=[RecordType(VARCHAR(40) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" ENAME, INTEGER EMPNO, INTEGER DEPTNO) NOT NULL])'
'    LhxJoinRel(leftKeys=[[2]], rightKeys=[[0]], joinType=[LEFT])'
'      LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$EMPNO, SYS$CLUSTERED_INDEX$EMPS2$NAME]])'
'      LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'            FennelToIteratorConverter'
'              LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
'                LhxAggRel(groupCount=[1])'
'                  FennelRenameRel(fieldNames=[[$f0]])'
'                    LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO]])'
> 
> select name, empno, deptno from emps2
> where exists(select * from depts2 where depts2.deptno=emps2.deptno)
> order by name;
'NAME','EMPNO','DEPTNO'
'Eric','110','20'
'Fred','100','10'
'Wilma','120','20'
> 
> select * from v2 order by ename;
'ENAME','EMPNO','DEPTNO'
'Eric','110','20'
'Fred','100','10'
'Wilma','120','20'
> 
> -- 9.3 view on top of joined views, each over queries with correlations
> create view v3 (empnov1, empnov2) as
> select v1.empno, v2.empno from v1, v2 where v1.empno = v2.empno;
> 
> explain plan for
> select v1.empno, v2.empno from v1, v2 where v1.empno = v2.empno;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[EMPNO, EMPNO]])'
'    FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER EMPNO0) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'        FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])'
'            FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'              FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1]], joinKeyParamIds=[[1]])'
'                IteratorToFennelConverter'
'                  IterCalcRel(expr#0=[{inputs}], expr#1=[10], expr#2=[*($t0, $t1)], DEPTNO=[$t0], *($0, 10)=[$t2])'
'                    FennelToIteratorConverter'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[2])'
'                  FennelValuesRel(tuples=[[{ '(', null, ')', null }]])'
'                FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[2], indexCols=[[0]])'
'                  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                    LhxAggRel(groupCount=[1])'
'                      FennelRenameRel(fieldNames=[[$f0]])'
'                        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'        FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER EMPNO) NOT NULL])'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'            LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[1, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$EMPNO]])'
'            LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'              IteratorToFennelConverter'
'                IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'                  FennelToIteratorConverter'
'                    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                      LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
'                      LhxAggRel(groupCount=[1])'
'                        FennelRenameRel(fieldNames=[[$f0]])'
'                          LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO]])'
> 
> explain plan for
> select * from v3;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[EMPNOV1, EMPNOV2]])'
'    FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER EMPNO0) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'        FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])'
'            FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'              FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1]], joinKeyParamIds=[[1]])'
'                IteratorToFennelConverter'
'                  IterCalcRel(expr#0=[{inputs}], expr#1=[10], expr#2=[*($t0, $t1)], DEPTNO=[$t0], *($0, 10)=[$t2])'
'                    FennelToIteratorConverter'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[2])'
'                  FennelValuesRel(tuples=[[{ '(', null, ')', null }]])'
'                FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[2], indexCols=[[0]])'
'                  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                    LhxAggRel(groupCount=[1])'
'                      FennelRenameRel(fieldNames=[[$f0]])'
'                        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'        FennelReshapeRel(projection=[[0]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER EMPNO) NOT NULL])'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'            LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[1, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$EMPNO]])'
'            LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'              IteratorToFennelConverter'
'                IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'                  FennelToIteratorConverter'
'                    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                      LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
'                      LhxAggRel(groupCount=[1])'
'                        FennelRenameRel(fieldNames=[[$f0]])'
'                          LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO]])'
> 
> select v1.empno, v2.empno from v1, v2
> where v1.empno = v2.empno order by v1.empno;
'EMPNO','EMPNO'
'110','110'
'120','120'
> 
> select * from v3 order by v3.empnov1;
'EMPNOV1','EMPNOV2'
'110','110'
'120','120'
> 
> -- 9.4 view over views that are correlated to each other.
> -- Each of the views is itself over queries with correlations.
> create view v4 (empno, deptno) as
> select empno, deptno from v1
> where v1.empno in (select v2.empno from v2 where v2.deptno = v1.deptno);
> 
> explain plan for
> select empno, deptno from v1
> where v1.empno in (select v2.empno from v2 where v2.deptno = v1.deptno);
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])'
'      FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'        FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1]], joinKeyParamIds=[[1]])'
'          IteratorToFennelConverter'
'            IterCalcRel(expr#0=[{inputs}], expr#1=[10], expr#2=[*($t0, $t1)], DEPTNO=[$t0], *($0, 10)=[$t2])'
'              FennelToIteratorConverter'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'          FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[2])'
'            FennelValuesRel(tuples=[[{ '(', null, ')', null }]])'
'          FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[2], indexCols=[[0]])'
'            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'              LhxAggRel(groupCount=[1])'
'                FennelRenameRel(fieldNames=[[$f0]])'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'      FennelReshapeRel(projection=[[0, 1]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO) NOT NULL])'
'        LhxJoinRel(leftKeys=[[2, 1]], rightKeys=[[0, 1]], joinType=[LEFTSEMI])'
'          FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO, INTEGER CAST($0):INTEGER) NOT NULL])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'          FennelReshapeRel(projection=[[2, 0]], outputRowType=[RecordType(INTEGER EMPNO, INTEGER NOT NULL $f0) NOT NULL])'
'            LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'              FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])'
'                LhxAggRel(groupCount=[1])'
'                  FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])'
'                    LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])'
'                      FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'                        FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1]], joinKeyParamIds=[[1]])'
'                          IteratorToFennelConverter'
'                            IterCalcRel(expr#0=[{inputs}], expr#1=[10], expr#2=[*($t0, $t1)], DEPTNO=[$t0], *($0, 10)=[$t2])'
'                              FennelToIteratorConverter'
'                                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                          FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[2])'
'                            FennelValuesRel(tuples=[[{ '(', null, ')', null }]])'
'                          FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[2], indexCols=[[0]])'
'                            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                              LhxAggRel(groupCount=[1])'
'                                FennelRenameRel(fieldNames=[[$f0]])'
'                                  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'              FennelReshapeRel(projection=[[0, 1]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER EMPNO, INTEGER DEPTNO) NOT NULL])'
'                LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'                  LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[1, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$EMPNO]])'
'                  LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'                    IteratorToFennelConverter'
'                      IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'                        FennelToIteratorConverter'
'                          LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                            LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
'                            LhxAggRel(groupCount=[1])'
'                              FennelRenameRel(fieldNames=[[$f0]])'
'                                LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO]])'
> 
> explain plan for
> select * from v4;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])'
'      FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'        FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1]], joinKeyParamIds=[[1]])'
'          IteratorToFennelConverter'
'            IterCalcRel(expr#0=[{inputs}], expr#1=[10], expr#2=[*($t0, $t1)], DEPTNO=[$t0], *($0, 10)=[$t2])'
'              FennelToIteratorConverter'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'          FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[2])'
'            FennelValuesRel(tuples=[[{ '(', null, ')', null }]])'
'          FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[2], indexCols=[[0]])'
'            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'              LhxAggRel(groupCount=[1])'
'                FennelRenameRel(fieldNames=[[$f0]])'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'      FennelReshapeRel(projection=[[0, 1]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO) NOT NULL])'
'        LhxJoinRel(leftKeys=[[2, 1]], rightKeys=[[0, 1]], joinType=[LEFTSEMI])'
'          FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, INTEGER NOT NULL DEPTNO, INTEGER CAST($0):INTEGER) NOT NULL])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'          FennelReshapeRel(projection=[[2, 0]], outputRowType=[RecordType(INTEGER EMPNO, INTEGER NOT NULL $f0) NOT NULL])'
'            LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'              FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])'
'                LhxAggRel(groupCount=[1])'
'                  FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])'
'                    LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])'
'                      FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'                        FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1]], joinKeyParamIds=[[1]])'
'                          IteratorToFennelConverter'
'                            IterCalcRel(expr#0=[{inputs}], expr#1=[10], expr#2=[*($t0, $t1)], DEPTNO=[$t0], *($0, 10)=[$t2])'
'                              FennelToIteratorConverter'
'                                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                          FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[2])'
'                            FennelValuesRel(tuples=[[{ '(', null, ')', null }]])'
'                          FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[2], indexCols=[[0]])'
'                            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                              LhxAggRel(groupCount=[1])'
'                                FennelRenameRel(fieldNames=[[$f0]])'
'                                  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'              FennelReshapeRel(projection=[[0, 1]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER EMPNO, INTEGER DEPTNO) NOT NULL])'
'                LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'                  LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[1, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$EMPNO]])'
'                  LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'                    IteratorToFennelConverter'
'                      IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'                        FennelToIteratorConverter'
'                          LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                            LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
'                            LhxAggRel(groupCount=[1])'
'                              FennelRenameRel(fieldNames=[[$f0]])'
'                                LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO]])'
> 
> select empno, deptno from v1
> where v1.empno in (select empno from v2 where v2.deptno = v1.deptno)
> order by empno;
'EMPNO','DEPTNO'
'110','20'
'120','20'
> 
> select * from v4 order by empno;
'EMPNO','DEPTNO'
'110','20'
'120','20'
> 
> -- 9.5 view on top of two views that are correlated to each other, within a
> -- scalar subquery.
> create view v5 (empno, deptno) as
> select empno, deptno from v1
> where v1.empno = (select max(v2.empno) from v2 where v2.deptno = v1.deptno);
> 
> explain plan for
> select empno, deptno from v1
> where v1.empno = (select max(v2.empno) from v2 where v2.deptno = v1.deptno);
'column0'
'IterCalcRel(expr#0..3=[{inputs}], expr#4=[=($t0, $t3)], proj#0..1=[{exprs}], $condition=[$t4])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'      FennelRenameRel(fieldNames=[[EMPNO, DEPTNO0]])'
'        LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])'
'          FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'            FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1]], joinKeyParamIds=[[1]])'
'              IteratorToFennelConverter'
'                IterCalcRel(expr#0=[{inputs}], expr#1=[10], expr#2=[*($t0, $t1)], DEPTNO=[$t0], *($0, 10)=[$t2])'
'                  FennelToIteratorConverter'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'              FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[2])'
'                FennelValuesRel(tuples=[[{ '(', null, ')', null }]])'
'              FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[2], indexCols=[[0]])'
'                FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                  LhxAggRel(groupCount=[1])'
'                    FennelRenameRel(fieldNames=[[$f0]])'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], EXPR$0=[MAX(1)])'
'        FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER EMPNO) NOT NULL])'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'            FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])'
'              LhxAggRel(groupCount=[1])'
'                FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])'
'                  LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])'
'                    FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'                      FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1]], joinKeyParamIds=[[1]])'
'                        IteratorToFennelConverter'
'                          IterCalcRel(expr#0=[{inputs}], expr#1=[10], expr#2=[*($t0, $t1)], DEPTNO=[$t0], *($0, 10)=[$t2])'
'                            FennelToIteratorConverter'
'                              FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                        FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[2])'
'                          FennelValuesRel(tuples=[[{ '(', null, ')', null }]])'
'                        FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[2], indexCols=[[0]])'
'                          FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                            LhxAggRel(groupCount=[1])'
'                              FennelRenameRel(fieldNames=[[$f0]])'
'                                FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'            FennelReshapeRel(projection=[[0, 1]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER EMPNO, INTEGER DEPTNO) NOT NULL])'
'              LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'                LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[1, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$EMPNO]])'
'                LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'                  IteratorToFennelConverter'
'                    IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'                      FennelToIteratorConverter'
'                        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                          LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
'                          LhxAggRel(groupCount=[1])'
'                            FennelRenameRel(fieldNames=[[$f0]])'
'                              LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO]])'
> 
> explain plan for
> select * from v5;
'column0'
'IterCalcRel(expr#0..3=[{inputs}], expr#4=[=($t0, $t3)], proj#0..1=[{exprs}], $condition=[$t4])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'      FennelRenameRel(fieldNames=[[EMPNO, DEPTNO0]])'
'        LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])'
'          FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'            FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1]], joinKeyParamIds=[[1]])'
'              IteratorToFennelConverter'
'                IterCalcRel(expr#0=[{inputs}], expr#1=[10], expr#2=[*($t0, $t1)], DEPTNO=[$t0], *($0, 10)=[$t2])'
'                  FennelToIteratorConverter'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'              FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[2])'
'                FennelValuesRel(tuples=[[{ '(', null, ')', null }]])'
'              FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[2], indexCols=[[0]])'
'                FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                  LhxAggRel(groupCount=[1])'
'                    FennelRenameRel(fieldNames=[[$f0]])'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], EXPR$0=[MAX(1)])'
'        FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER EMPNO) NOT NULL])'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'            FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])'
'              LhxAggRel(groupCount=[1])'
'                FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])'
'                  LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[1, 0]], joinType=[RIGHTSEMI])'
'                    FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER NOT NULL $f0) NOT NULL])'
'                      FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1]], joinKeyParamIds=[[1]])'
'                        IteratorToFennelConverter'
'                          IterCalcRel(expr#0=[{inputs}], expr#1=[10], expr#2=[*($t0, $t1)], DEPTNO=[$t0], *($0, 10)=[$t2])'
'                            FennelToIteratorConverter'
'                              FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                        FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[2])'
'                          FennelValuesRel(tuples=[[{ '(', null, ')', null }]])'
'                        FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[2], indexCols=[[0]])'
'                          FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                            LhxAggRel(groupCount=[1])'
'                              FennelRenameRel(fieldNames=[[$f0]])'
'                                FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'            FennelReshapeRel(projection=[[0, 1]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(INTEGER EMPNO, INTEGER DEPTNO) NOT NULL])'
'              LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'                LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[1, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$EMPNO]])'
'                LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'                  IteratorToFennelConverter'
'                    IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'                      FennelToIteratorConverter'
'                        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                          LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
'                          LhxAggRel(groupCount=[1])'
'                            FennelRenameRel(fieldNames=[[$f0]])'
'                              LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO]])'
> 
> select empno, deptno from v1
> where v1.empno = (select max(v2.empno) from v2 where v2.deptno = v1.deptno);
'EMPNO','DEPTNO'
'120','20'
> 
> select * from v5;
'EMPNO','DEPTNO'
'120','20'
> 
> drop view v3;
> drop view v4;
> drop view v5;
> 
> drop view v1;
> drop view v2;
> 
> -- 10 Optimization to decorrelate a scalar subquery without using value generator.
> -- This can be done when the inner relation itself can be the lookup table
> -- without having to join with the outer relation first
> 
> -- 10.1 outer relations are not referenced in the select list of the subquery.
> explain plan without implementation for
> select
>     avg((select deptno from depts where deptno = emps.deptno))
> from emps;
'column0'
'AggregateRel(groupCount=[0], EXPR$0=[AVG(0)])'
'  ProjectRel($f0=[$10])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2]])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])'
'        ProjectRel(DEPTNO=[$0])'
'          FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for
> select
>     avg((select deptno from depts where deptno = emps.deptno))
> from emps;
'column0'
'IterCalcRel(expr#0..1=[{inputs}], expr#2=[CAST($t0):DOUBLE], expr#3=[CAST($t1):DOUBLE NOT NULL], expr#4=[/($t2, $t3)], expr#5=[1E6], expr#6=[*($t4, $t5)], expr#7=[CAST($t6):BIGINT], expr#8=[Reinterpret($t7)], expr#9=[Reinterpret($t8)], expr#10=[0], expr#11=[>($t9, $t10)], expr#12=[500000], expr#13=[+($t9, $t12)], expr#14=[-($t9, $t12)], expr#15=[CASE($t11, $t13, $t14)], expr#16=[1000000], expr#17=[/INT($t15, $t16)], expr#18=[CAST($t17):INTEGER], $f0=[$t18])'
'  FennelToIteratorConverter'
'    FennelAggRel(groupCount=[0], agg#0=[SUM(0)], agg#1=[COUNT(0)])'
'      FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER $f0) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> select
>     avg((select deptno from depts where deptno = emps.deptno))
> from emps;
'EXPR$0'
'17'
> 
> -- check results against this query
> explain plan for
> select
>     deptno,
>     (select deptno from depts where deptno = emps.deptno)
> from emps;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[DEPTNO, EXPR$1]])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> select
>     deptno,
>     (select deptno from depts where deptno = emps.deptno) 
> from emps
> order by deptno;
'DEPTNO','EXPR$1'
'10','10'
'20','20'
'20','20'
'40',''
> 
> 
> -- 10.2 outer relations are referenced in the select list of the subquery.
> explain plan without implementation for
> select
>     avg((select emps.deptno from depts where deptno = emps.deptno))
> from emps;
'column0'
'AggregateRel(groupCount=[0], EXPR$0=[AVG(0)])'
'  ProjectRel($f0=[$10])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset2, var1=offset2]])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])'
'        ProjectRel(DEPTNO=[$cor1.DEPTNO])'
'          FilterRel(condition=[=($0, $cor0.DEPTNO)])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
> 
> explain plan for
> select
>     avg((select emps.deptno from depts where deptno = emps.deptno))
> from emps;
'column0'
'IterCalcRel(expr#0..1=[{inputs}], expr#2=[CAST($t0):DOUBLE], expr#3=[CAST($t1):DOUBLE NOT NULL], expr#4=[/($t2, $t3)], expr#5=[1E6], expr#6=[*($t4, $t5)], expr#7=[CAST($t6):BIGINT], expr#8=[Reinterpret($t7)], expr#9=[Reinterpret($t8)], expr#10=[0], expr#11=[>($t9, $t10)], expr#12=[500000], expr#13=[+($t9, $t12)], expr#14=[-($t9, $t12)], expr#15=[CASE($t11, $t13, $t14)], expr#16=[1000000], expr#17=[/INT($t15, $t16)], expr#18=[CAST($t17):INTEGER], $f0=[$t18])'
'  FennelToIteratorConverter'
'    FennelAggRel(groupCount=[0], agg#0=[SUM(0)], agg#1=[COUNT(0)])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..1=[{inputs}], expr#2=[IS NULL($t1)], expr#3=[null], expr#4=[CAST($t3):INTEGER], expr#5=[CAST($t0):INTEGER], expr#6=[CASE($t2, $t4, $t5)], $f0=[$t6])'
'          FennelToIteratorConverter'
'            LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> select
>      avg((select emps.deptno from depts where deptno = emps.deptno))
> from emps;
'EXPR$0'
'17'
> 
> -- check result against this query
> explain plan for
> select 
>     deptno,
>     (select emps.deptno from depts where deptno = emps.deptno) 
> from emps;
'column0'
'IterCalcRel(expr#0..1=[{inputs}], expr#2=[IS NULL($t1)], expr#3=[null], expr#4=[CAST($t3):INTEGER], expr#5=[CAST($t0):INTEGER], expr#6=[CASE($t2, $t4, $t5)], DEPTNO=[$t0], EXPR$1=[$t6])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> select
>     deptno,
>      (select emps.deptno from depts where deptno = emps.deptno) 
> from emps
> order by deptno;
'DEPTNO','EXPR$1'
'10','10'
'20','20'
'20','20'
'40',''
> 
> -- negative cases
> explain plan without implementation for
> select 
>     deptno,
>     (select deptno from emps where deptno = depts.deptno) 
> from depts;
'column0'
'ProjectRel(DEPTNO=[$0], EXPR$1=[$2])'
'  CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset0]])'
'    TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'    AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])'
'      ProjectRel(DEPTNO=[$2])'
'        FilterRel(condition=[=($2, $cor0.DEPTNO)])'
'          TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
> 
> explain plan for
> select
>     deptno,
>      (select deptno from emps where deptno = depts.deptno) 
> from depts;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER EXPR$1) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], agg#0=[SINGLE_VALUE(1)])'
'        FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL DEPTNO) NOT NULL])'
'          LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'            LhxAggRel(groupCount=[1])'
'              FennelRenameRel(fieldNames=[[$f0]])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> explain plan without implementation for
> select
>     deptno,
>      (select depts.deptno from emps where deptno = depts.deptno) 
> from depts;
'column0'
'ProjectRel(DEPTNO=[$0], EXPR$1=[$2])'
'  CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset0, var1=offset0]])'
'    TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
'    AggregateRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)])'
'      ProjectRel(DEPTNO=[$cor1.DEPTNO])'
'        FilterRel(condition=[=($2, $cor0.DEPTNO)])'
'          TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
> 
> explain plan for
> select
>     deptno,
>      (select depts.deptno from emps where deptno = depts.deptno) 
> from depts;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[3, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER EXPR$1) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[0, 0]], joinType=[RIGHT])'
'      LhxAggRel(groupCount=[2], agg#0=[SINGLE_VALUE(2)])'
'        FennelReshapeRel(projection=[[0, 1, 1]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL $f00, INTEGER NOT NULL DEPTNO) NOT NULL])'
'          FennelCartesianProductRel(leftouterjoin=[false])'
'            FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])'
'              LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelRenameRel(fieldNames=[[$f0]])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'            FennelBufferRel(inMemory=[false], multiPass=[true])'
'              LhxAggRel(groupCount=[1])'
'                FennelRenameRel(fieldNames=[[$f0]])'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> -- 10.3 Unique columns need to be not null to be considered unique keys.
> create table test1(a int primary key, b int);
> create table test2(a int primary key, b int);
> create table test3(a int primary key, b int unique);
> create table test4(a int primary key, b int not null unique);
> 
> explain plan for 
> select (select test1.b from test1 where test1.a = test2.a) from test2;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[2]], outputRowType=[RecordType(INTEGER EXPR$0) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      LcsRowScanRel(table=[[LOCALDB, SALES, TEST2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST2$A]])'
'      LcsRowScanRel(table=[[LOCALDB, SALES, TEST1]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST1$A, SYS$CLUSTERED_INDEX$TEST1$B]])'
> 
> explain plan for 
> select (select test1.b from test1 where test1.b = test2.a) from test2;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[2]], outputRowType=[RecordType(INTEGER EXPR$0) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      LcsRowScanRel(table=[[LOCALDB, SALES, TEST2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST2$A]])'
'      LhxAggRel(groupCount=[1], agg#0=[SINGLE_VALUE(1)])'
'        FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER B) NOT NULL])'
'          LhxJoinRel(leftKeys=[[0]], rightKeys=[[1]], joinType=[INNER])'
'            LcsRowScanRel(table=[[LOCALDB, SALES, TEST1]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST1$B]])'
'            FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])'
'              LhxAggRel(groupCount=[1])'
'                FennelRenameRel(fieldNames=[[$f0]])'
'                  LcsRowScanRel(table=[[LOCALDB, SALES, TEST2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST2$A]])'
> 
> explain plan for 
> select (select test2.b from test1 where test1.a = test2.a) from test2;
'column0'
'IterCalcRel(expr#0..2=[{inputs}], expr#3=[IS NULL($t2)], expr#4=[null], expr#5=[CAST($t4):INTEGER], expr#6=[CAST($t1):INTEGER], expr#7=[CASE($t3, $t5, $t6)], EXPR$0=[$t7])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      LcsRowScanRel(table=[[LOCALDB, SALES, TEST2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST2$A, SYS$CLUSTERED_INDEX$TEST2$B]])'
'      LcsRowScanRel(table=[[LOCALDB, SALES, TEST1]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST1$A]])'
> 
> explain plan for 
> select (select test3.b from test3 where test3.b = test2.a) from test2;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[2]], outputRowType=[RecordType(INTEGER EXPR$0) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      LcsRowScanRel(table=[[LOCALDB, SALES, TEST2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST2$A]])'
'      LhxAggRel(groupCount=[1], agg#0=[SINGLE_VALUE(1)])'
'        FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER B) NOT NULL])'
'          LhxJoinRel(leftKeys=[[0]], rightKeys=[[1]], joinType=[INNER])'
'            LcsRowScanRel(table=[[LOCALDB, SALES, TEST3]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST3$B]])'
'            FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])'
'              LhxAggRel(groupCount=[1])'
'                FennelRenameRel(fieldNames=[[$f0]])'
'                  LcsRowScanRel(table=[[LOCALDB, SALES, TEST2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST2$A]])'
> 
> explain plan for 
> select (select test4.b from test4 where test4.b = test2.a) from test2;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER EXPR$0) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      LcsRowScanRel(table=[[LOCALDB, SALES, TEST2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST2$A]])'
'      LcsRowScanRel(table=[[LOCALDB, SALES, TEST4]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST4$B]])'
> 
> -- lookup table is a join
> explain plan for
> select 
>     (select (test1.b + test3.b) 
>      from test1, test3 
>      where test3.a = test2.b and test1.a = test2.a) 
> from test2;
'column0'
'IterCalcRel(expr#0..6=[{inputs}], expr#7=[IS NULL($t4)], expr#8=[null], expr#9=[CAST($t8):INTEGER], expr#10=[+($t3, $t5)], expr#11=[CAST($t10):INTEGER], expr#12=[CASE($t7, $t9, $t11)], EXPR$0=[$t12])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[1, 0]], rightKeys=[[4, 0]], joinType=[LEFT])'
'      LcsRowScanRel(table=[[LOCALDB, SALES, TEST2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST2$A, SYS$CLUSTERED_INDEX$TEST2$B]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3, 2]], outputRowType=[RecordType(INTEGER NOT NULL A, INTEGER B, INTEGER NOT NULL A0, INTEGER B0, INTEGER CAST($2):INTEGER) NOT NULL])'
'        FennelCartesianProductRel(leftouterjoin=[false])'
'          LcsRowScanRel(table=[[LOCALDB, SALES, TEST1]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST1$A, SYS$CLUSTERED_INDEX$TEST1$B]])'
'          LcsRowScanRel(table=[[LOCALDB, SALES, TEST3]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST3$A, SYS$CLUSTERED_INDEX$TEST3$B]])'
> 
> explain plan for
> select 
>     (select (test1.b + test4.b) 
>      from test1, test4 
>      where test4.b = test2.b and test1.a = test2.a) 
> from test2;
'column0'
'IterCalcRel(expr#0..5=[{inputs}], expr#6=[IS NULL($t4)], expr#7=[null], expr#8=[CAST($t7):INTEGER], expr#9=[+($t3, $t4)], expr#10=[CAST($t9):INTEGER], expr#11=[CASE($t6, $t8, $t10)], EXPR$0=[$t11])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[1, 0]], rightKeys=[[3, 0]], joinType=[LEFT])'
'      LcsRowScanRel(table=[[LOCALDB, SALES, TEST2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST2$A, SYS$CLUSTERED_INDEX$TEST2$B]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 2]], outputRowType=[RecordType(INTEGER NOT NULL A, INTEGER B, INTEGER NOT NULL B0, INTEGER CAST($2):INTEGER) NOT NULL])'
'        FennelCartesianProductRel(leftouterjoin=[false])'
'          LcsRowScanRel(table=[[LOCALDB, SALES, TEST1]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST1$A, SYS$CLUSTERED_INDEX$TEST1$B]])'
'          LcsRowScanRel(table=[[LOCALDB, SALES, TEST4]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$TEST4$B]])'
> 
> drop table test1;
> drop table test2;
> drop table test3;
> drop table test4;
> 
> -- 10.4 subquery selects constants
> explain plan for
> SELECT 
>     deptno,
>     (select 1 FROM depts where deptno = emps.deptno)
> FROM 
>     emps;
'column0'
'IterCalcRel(expr#0..1=[{inputs}], expr#2=[IS NULL($t1)], expr#3=[null], expr#4=[CAST($t3):INTEGER], expr#5=[1], expr#6=[CAST($t5):INTEGER], expr#7=[CASE($t2, $t4, $t6)], DEPTNO=[$t0], EXPR$1=[$t7])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> SELECT 
>     deptno,
>     (select 1 FROM depts where deptno = emps.deptno)
> FROM 
>     emps
> order by deptno;
'DEPTNO','EXPR$1'
'10','1'
'20','1'
'20','1'
'40',''
> 
> explain plan for
> SELECT 
>     deptno,
>     (select cast(1 as decimal(10,2)) FROM depts where deptno = emps.deptno)
> FROM 
>     emps;
'column0'
'IterCalcRel(expr#0..1=[{inputs}], expr#2=[IS NULL($t1)], expr#3=[null], expr#4=[CAST($t3):DECIMAL(10, 2)], expr#5=[CAST($t3):INTEGER], expr#6=[1], expr#7=[CAST($t6):INTEGER], expr#8=[CASE($t2, $t5, $t7)], expr#9=[100], expr#10=[*($t8, $t9)], expr#11=[true], expr#12=[Reinterpret($t10, $t11)], expr#13=[Reinterpret($t12)], expr#14=[Reinterpret($t13)], expr#15=[Reinterpret($t4)], expr#16=[Reinterpret($t14)], expr#17=[CASE($t2, $t15, $t16)], expr#18=[Reinterpret($t17)], DEPTNO=[$t0], EXPR$1=[$t18])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> SELECT
>     deptno,
>     (select cast(1 as decimal(10,2)) FROM depts where deptno = emps.deptno)
> FROM 
>     emps
> order by deptno;
'DEPTNO','EXPR$1'
'10','1.00'
'20','1.00'
'20','1.00'
'40',''
> 
> -- 10.5 correlation in filter references expressions from the RHS
> explain plan for
> select deptno,
>     (select deptno from depts where deptno = emps.deptno+10)
> from emps;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[DEPTNO, EXPR$1]])'
'    FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER DEPTNO0) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0=[{inputs}], expr#1=[10], expr#2=[+($t0, $t1)], DEPTNO=[$t0], +($0, 10)=[$t2])'
'            FennelToIteratorConverter'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> select deptno,
>     (select deptno from depts where deptno = emps.deptno+10)
> from emps
> order by deptno;
'DEPTNO','EXPR$1'
'10','20'
'20','30'
'20','30'
'40',''
> 
> -- 10.6 the only correlation is in the select list of the subquery
> explain plan for
> select deptno,
>     (select emps.deptno from depts where deptno = 20)
> from emps;
'column0'
'IterCalcRel(expr#0..1=[{inputs}], expr#2=[IS NULL($t1)], expr#3=[null], expr#4=[CAST($t3):INTEGER], expr#5=[CAST($t0):INTEGER], expr#6=[CASE($t2, $t4, $t5)], DEPTNO=[$t0], EXPR$1=[$t6])'
'  FennelToIteratorConverter'
'    FennelCartesianProductRel(leftouterjoin=[true])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'      FennelBufferRel(inMemory=[false], multiPass=[true])'
'        FennelReshapeRel(projection=[[2]], outputRowType=[RecordType(BOOLEAN $f2) NOT NULL])'
'          FennelAggRel(groupCount=[0], agg#0=[SINGLE_VALUE(0)], agg#1=[SINGLE_VALUE(1)], agg#2=[SINGLE_VALUE(2)])'
'            IteratorToFennelConverter'
'              IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], proj#0..2=[{exprs}])'
'                FennelToIteratorConverter'
'                  FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], uniqueKey=[false], preserveOrder=[false], outer=[false], inputKeyProj=[[1, 3]], inputJoinProj=[[]], inputDirectiveProj=[[0, 2]])'
'                    FennelValuesRel(tuples=[[{ '[', 20, ']', 20 }]])'
> 
> select deptno, 
>     (select emps.deptno from depts where deptno = 20)
> from emps
> order by deptno;
'DEPTNO','EXPR$1'
'10','10'
'20','20'
'20','20'
'40','40'
> 
> -- 10.7 subquery select list is an aggregate
> -- 10.7.1 the subquery is correlated
> explain plan for
> select deptno,
>     (select sum(deptno) from emps where deptno = depts.deptno)
> from depts;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER EXPR$1) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], EXPR$0=[SUM(1)])'
'        FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL DEPTNO) NOT NULL])'
'          LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'            LhxAggRel(groupCount=[1])'
'              FennelRenameRel(fieldNames=[[$f0]])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> select deptno,
>     (select sum(deptno) from emps where deptno = depts.deptno)
> from depts
> order by deptno;
'DEPTNO','EXPR$1'
'10','10'
'20','40'
'30',''
> 
> explain plan for
> select deptno, 
>     (select sum(depts.deptno) from emps where deptno = depts.deptno) 
> from depts;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[3, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER EXPR$1) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[0, 0]], joinType=[RIGHT])'
'      LhxAggRel(groupCount=[2], EXPR$0=[SUM(2)])'
'        FennelReshapeRel(projection=[[0, 1, 1]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL $f00, INTEGER NOT NULL $f0) NOT NULL])'
'          FennelCartesianProductRel(leftouterjoin=[false])'
'            FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])'
'              LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelRenameRel(fieldNames=[[$f0]])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'            FennelBufferRel(inMemory=[false], multiPass=[true])'
'              LhxAggRel(groupCount=[1])'
'                FennelRenameRel(fieldNames=[[$f0]])'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> select deptno, 
>     (select sum(depts.deptno) from emps where deptno = depts.deptno)
> from depts
> order by deptno;
'DEPTNO','EXPR$1'
'10','10'
'20','40'
'30',''
> 
> explain plan for
> select deptno, 
>     (select sum(depts.deptno) from emps where deptno + 10 = depts.deptno) 
> from depts;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[3, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER EXPR$1) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[0, 0]], joinType=[RIGHT])'
'      LhxAggRel(groupCount=[2], EXPR$0=[SUM(2)])'
'        FennelReshapeRel(projection=[[3, 1, 1]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL $f00, INTEGER NOT NULL $f0) NOT NULL])'
'          LhxJoinRel(leftKeys=[[2]], rightKeys=[[0]], joinType=[INNER])'
'            IteratorToFennelConverter'
'              IterCalcRel(expr#0..1=[{inputs}], expr#2=[10], expr#3=[+($t0, $t2)], proj#0..1=[{exprs}], +($0, 10)=[$t3])'
'                FennelToIteratorConverter'
'                  FennelCartesianProductRel(leftouterjoin=[false])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'                    FennelBufferRel(inMemory=[false], multiPass=[true])'
'                      LhxAggRel(groupCount=[1])'
'                        FennelRenameRel(fieldNames=[[$f0]])'
'                          FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'            LhxAggRel(groupCount=[1])'
'              FennelRenameRel(fieldNames=[[$f0]])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> select deptno, 
>     (select sum(depts.deptno) from emps where deptno + 10 = depts.deptno)
> from depts
> order by deptno;
'DEPTNO','EXPR$1'
'10',''
'20','20'
'30','60'
> 
> -- negative cases
> explain plan for
> select deptno, 
>     (select sum(deptno) from emps where deptno = depts.deptno+1)
> from depts;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER EXPR$1) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], EXPR$0=[SUM(1)])'
'        FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL DEPTNO) NOT NULL])'
'          LhxJoinRel(leftKeys=[[0]], rightKeys=[[1]], joinType=[INNER])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'            IteratorToFennelConverter'
'              IterCalcRel(expr#0=[{inputs}], expr#1=[1], expr#2=[+($t0, $t1)], $f0=[$t0], +($0, 1)=[$t2])'
'                FennelToIteratorConverter'
'                  LhxAggRel(groupCount=[1])'
'                    FennelRenameRel(fieldNames=[[$f0]])'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> -- NOTE: count() always returns a non-null value even in scalar subqueries
> -- however currently correlated scalar subquery produces nullable field
> -- for the count() in the outer query. This will probably be the behavior
> -- so when moving agg across subquery boundaries(for example, during decorrelate),
> -- the type might need to be patched up to return nullable for count() aggs.
> explain plan for
> select deptno, 
>     (select count(deptno) from emps where deptno = depts.deptno)
> from depts;
'column0'
'IterCalcRel(expr#0..2=[{inputs}], expr#3=[IS NULL($t2)], expr#4=[0], expr#5=[CAST($t4):BIGINT], expr#6=[CAST($t2):BIGINT], expr#7=[CASE($t3, $t5, $t6)], DEPTNO=[$t0], EXPR$1=[$t7])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], EXPR$0=[COUNT(1)])'
'        FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL DEPTNO) NOT NULL])'
'          LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'            LhxAggRel(groupCount=[1])'
'              FennelRenameRel(fieldNames=[[$f0]])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> select deptno, 
>     (select count(deptno) from emps where deptno = depts.deptno) a
> from depts
> order by deptno;
'DEPTNO','A'
'10','1'
'20','2'
'30','0'
> 
> -- count(*) is translated to count(true)
> explain plan for
> select deptno, 
>     (select count(*) from emps where deptno = depts.deptno)
> from depts;
'column0'
'IterCalcRel(expr#0..2=[{inputs}], expr#3=[IS NULL($t2)], expr#4=[0], expr#5=[CAST($t4):BIGINT], expr#6=[CAST($t2):BIGINT], expr#7=[CASE($t3, $t5, $t6)], DEPTNO=[$t0], EXPR$1=[$t7])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], EXPR$0=[COUNT()])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'            FennelToIteratorConverter'
'              LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelRenameRel(fieldNames=[[$f0]])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> select deptno, 
>     (select count(*) from emps where deptno = depts.deptno) a
> from depts
> order by deptno;
'DEPTNO','A'
'10','1'
'20','2'
'30','0'
> 
> -- multiple aggregates
> explain plan for
> select deptno, 
>     (select count(*) from emps where deptno = depts.deptno),
>     (select sum(deptno) from emps where deptno = depts.deptno)
> from depts;
'column0'
'IterCalcRel(expr#0..3=[{inputs}], expr#4=[IS NULL($t1)], expr#5=[0], expr#6=[CAST($t5):BIGINT], expr#7=[CAST($t1):BIGINT], expr#8=[CASE($t4, $t6, $t7)], DEPTNO=[$t0], EXPR$1=[$t8], EXPR$2=[$t3])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, BIGINT EXPR$0) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'          LhxAggRel(groupCount=[1], EXPR$0=[COUNT()])'
'            IteratorToFennelConverter'
'              IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'                FennelToIteratorConverter'
'                  LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'                    LhxAggRel(groupCount=[1])'
'                      FennelRenameRel(fieldNames=[[$f0]])'
'                        FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], EXPR$0=[SUM(1)])'
'        FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL DEPTNO) NOT NULL])'
'          LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'            LhxAggRel(groupCount=[1])'
'              FennelRenameRel(fieldNames=[[$f0]])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> select deptno, 
>     (select count(*) from emps where deptno = depts.deptno),
>     (select sum(deptno) from emps where deptno = depts.deptno)
> from depts
> order by deptno;
'DEPTNO','EXPR$1','EXPR$2'
'10','1','10'
'20','2','40'
'30','0',''
> 
> -- 10.7. the subquery is uncorrelated
> explain plan for
> select deptno, 
>     (select sum(depts.deptno) from emps) 
> from depts;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER EXPR$1) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], EXPR$0=[SUM(1)])'
'        FennelReshapeRel(projection=[[1, 1]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL $f0) NOT NULL])'
'          FennelCartesianProductRel(leftouterjoin=[false])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'            FennelBufferRel(inMemory=[false], multiPass=[true])'
'              LhxAggRel(groupCount=[1])'
'                FennelRenameRel(fieldNames=[[$f0]])'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> select deptno, 
>     (select sum(depts.deptno) from emps)
> from depts
> order by deptno;
'DEPTNO','EXPR$1'
'10','40'
'20','80'
'30','120'
> 
> -- negative test
> create table depts3(deptno int, name varchar(20));
> insert into depts3 select * from depts;
> 
> explain plan for
> select deptno, 
>     (select sum(depts.deptno) from emps) 
> from depts3 depts;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER DEPTNO, INTEGER EXPR$1) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS3]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS3$DEPTNO]])'
'      LhxAggRel(groupCount=[1], EXPR$0=[SUM(1)])'
'        FennelReshapeRel(projection=[[1, 1]], outputRowType=[RecordType(INTEGER $f0, INTEGER $f0) NOT NULL])'
'          FennelCartesianProductRel(leftouterjoin=[false])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'            FennelBufferRel(inMemory=[false], multiPass=[true])'
'              LhxAggRel(groupCount=[1])'
'                FennelRenameRel(fieldNames=[[$f0]])'
'                  LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS3]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS3$DEPTNO]])'
> 
> select deptno, 
>     (select sum(depts.deptno) from emps)
> from depts3 depts
> order by deptno;
'DEPTNO','EXPR$1'
'10','40'
'20','80'
'30','120'
> 
> -- NOTE: count() always returns a non-null value even in scalar subqueries
> -- however currently correlated scalar subquery produces nullable field
> -- for the count() in the outer query. This will probably be the behavior
> -- so when moving agg across subquery boundaries(for example, during decorrelate),
> -- the type might need to be patched up to return nullable for count() aggs.
> create table emps3 (a int);
> 
> -- check null indicator works
> -- count($cor) is transformed to count(true from RHS)
> explain plan for
> select deptno, 
>     (select count(depts.deptno) from emps3)
> from depts;
'column0'
'IterCalcRel(expr#0..2=[{inputs}], expr#3=[IS NULL($t2)], expr#4=[0], expr#5=[CAST($t4):BIGINT], expr#6=[CAST($t2):BIGINT], expr#7=[CASE($t3, $t5, $t6)], DEPTNO=[$t0], EXPR$1=[$t7])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], EXPR$0=[COUNT(1)])'
'        FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL $f0) NOT NULL])'
'          FennelCartesianProductRel(leftouterjoin=[false])'
'            LhxAggRel(groupCount=[1])'
'              FennelRenameRel(fieldNames=[[$f0]])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'            LcsRowScanRel(table=[[LOCALDB, SALES, EMPS3]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS3$A]])'
> 
> select deptno, 
>     (select count(depts.deptno) from emps3)
> from depts
> order by deptno;
'DEPTNO','EXPR$1'
'10','0'
'20','0'
'30','0'
> 
> -- test removing trivial single_value aggregate works
> explain plan for
> select deptno, 
>     (select count(*) + count(depts.deptno) + count(a) from emps3)
> from depts;
'column0'
'IterCalcRel(expr#0..4=[{inputs}], expr#5=[+($t2, $t3)], expr#6=[+($t5, $t4)], expr#7=[CAST($t6):BIGINT], expr#8=[CAST($t7):BIGINT], DEPTNO=[$t0], EXPR$1=[$t8])'
'  FennelToIteratorConverter'
'    LhxAggRel(groupCount=[2], agg#0=[COUNT(4)], agg#1=[COUNT(2)], agg#2=[COUNT(3)])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..3=[{inputs}], expr#4=[IS NULL($t3)], expr#5=[null], expr#6=[CAST($t5):INTEGER], expr#7=[CAST($t0):INTEGER], expr#8=[CASE($t4, $t6, $t7)], proj#0..1=[{exprs}], $f2=[$t8], $f3=[$t2], $f4=[$t3])'
'          FennelToIteratorConverter'
'            FennelCartesianProductRel(leftouterjoin=[true])'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'              IteratorToFennelConverter'
'                IterCalcRel(expr#0=[{inputs}], expr#1=[true], proj#0..1=[{exprs}])'
'                  FennelToIteratorConverter'
'                    LcsRowScanRel(table=[[LOCALDB, SALES, EMPS3]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS3$A]])'
> 
> select deptno, 
>     (select count(*) + count(depts.deptno) + count(a) from emps3)
> from depts
> order by deptno;
'DEPTNO','EXPR$1'
'10','0'
'20','0'
'30','0'
> 
> insert into emps3 values(null);
> 
> select deptno, 
>     (select count(depts.deptno) from emps3)
> from depts
> order by deptno;
'DEPTNO','EXPR$1'
'10','1'
'20','1'
'30','1'
> 
> select deptno, 
>     (select count(*) + count(depts.deptno) + count(a) from emps3)
> from depts
> order by deptno;
'DEPTNO','EXPR$1'
'10','2'
'20','2'
'30','2'
> 
> -- multiple aggregates
> explain plan for
> select deptno, 
>     (select count(depts.deptno) from emps),
>     (select sum(depts.deptno) from emps)
> from depts;
'column0'
'IterCalcRel(expr#0..3=[{inputs}], expr#4=[IS NULL($t1)], expr#5=[0], expr#6=[CAST($t5):BIGINT], expr#7=[CAST($t1):BIGINT], expr#8=[CASE($t4, $t6, $t7)], DEPTNO=[$t0], EXPR$1=[$t8], EXPR$2=[$t3])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, BIGINT EXPR$0) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'          LhxAggRel(groupCount=[1], EXPR$0=[COUNT(1)])'
'            FennelReshapeRel(projection=[[1, 1]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL $f0) NOT NULL])'
'              FennelCartesianProductRel(leftouterjoin=[false])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'                FennelBufferRel(inMemory=[false], multiPass=[true])'
'                  LhxAggRel(groupCount=[1])'
'                    FennelRenameRel(fieldNames=[[$f0]])'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], EXPR$0=[SUM(1)])'
'        FennelReshapeRel(projection=[[1, 1]], outputRowType=[RecordType(INTEGER NOT NULL $f0, INTEGER NOT NULL $f0) NOT NULL])'
'          FennelCartesianProductRel(leftouterjoin=[false])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'            FennelBufferRel(inMemory=[false], multiPass=[true])'
'              LhxAggRel(groupCount=[1])'
'                FennelRenameRel(fieldNames=[[$f0]])'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> select deptno, 
>     (select count(depts.deptno) from emps),
>     (select sum(depts.deptno) from emps)
> from depts
> order by deptno;
'DEPTNO','EXPR$1','EXPR$2'
'10','4','40'
'20','4','80'
'30','4','120'
> 
> -- verify that nullability is preserved when not decorrelating with value generators
> create table emps4 (a int);
> create table depts4(a int primary key);
> create table depts5(a int);
> 
> insert into depts4 values (1);
> insert into depts5 values (2);
> 
> select a, (select max(d.a) from emps4) from depts4 d;
'A','EXPR$1'
'1',''
> select a, (select max(d.a) from emps4) from depts5 d;
'A','EXPR$1'
'2',''
> 
> insert into emps4 values (null);
> 
> select a, (select max(d.a) from emps4) from depts4 d;
'A','EXPR$1'
'1','1'
> select a, (select max(d.a) from emps4) from depts5 d;
'A','EXPR$1'
'2','2'
> 
> -- The count() fix when using value generater to decorrelate
> -- now it returns 0 correctly
> truncate table emps3;
> truncate table emps4;
> insert into emps4 values (2);
> 
> explain plan for
> select (select count(e2.a) from emps3 e1) from emps4 e2;
'column0'
'IterCalcRel(expr#0..2=[{inputs}], expr#3=[IS NULL($t2)], expr#4=[0], expr#5=[CAST($t4):BIGINT], expr#6=[CAST($t2):BIGINT], expr#7=[CASE($t3, $t5, $t6)], EXPR$0=[$t7])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      LcsRowScanRel(table=[[LOCALDB, SALES, EMPS4]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS4$A]])'
'      LhxAggRel(groupCount=[1], EXPR$0=[COUNT(1)])'
'        FennelReshapeRel(projection=[[1, 1]], outputRowType=[RecordType(INTEGER $f0, INTEGER $f0) NOT NULL])'
'          FennelCartesianProductRel(leftouterjoin=[false])'
'            LcsRowScanRel(table=[[LOCALDB, SALES, EMPS3]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS3$A]])'
'            LhxAggRel(groupCount=[1])'
'              FennelRenameRel(fieldNames=[[$f0]])'
'                LcsRowScanRel(table=[[LOCALDB, SALES, EMPS4]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS4$A]])'
> 
> -- should return 0
> select (select count(e2.a) from emps3 e1) from emps4 e2;
'EXPR$0'
'0'
> 
> -- The planner workaround: for the planner used in RelDecorrelator,
> -- make sure the RelNode representation remains a tree.
> explain plan for
> select (select count(e2.a) from emps3 e1) from emps3 e2;
'column0'
'IterCalcRel(expr#0..2=[{inputs}], expr#3=[IS NULL($t2)], expr#4=[0], expr#5=[CAST($t4):BIGINT], expr#6=[CAST($t2):BIGINT], expr#7=[CASE($t3, $t5, $t6)], EXPR$0=[$t7])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      LcsRowScanRel(table=[[LOCALDB, SALES, EMPS3]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS3$A]])'
'      LhxAggRel(groupCount=[1], EXPR$0=[COUNT(1)])'
'        FennelReshapeRel(projection=[[1, 1]], outputRowType=[RecordType(INTEGER $f0, INTEGER $f0) NOT NULL])'
'          FennelCartesianProductRel(leftouterjoin=[false])'
'            LcsRowScanRel(table=[[LOCALDB, SALES, EMPS3]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS3$A]])'
'            LhxAggRel(groupCount=[1])'
'              FennelRenameRel(fieldNames=[[$f0]])'
'                LcsRowScanRel(table=[[LOCALDB, SALES, EMPS3]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS3$A]])'
> 
> -- TODO: in predicate correlations can be improved too
> -- Inner correlation
> explain plan for
> SELECT empno
> FROM 
>     emps
> where 
>     deptno in (select deptno FROM depts where deptno = emps.deptno);
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1, 1]], rightKeys=[[0, 1]], joinType=[LEFTSEMI])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'        LhxAggRel(groupCount=[1])'
'          FennelRenameRel(fieldNames=[[$f0]])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> explain plan for
> SELECT empno
> FROM 
>     emps
> where 
>     deptno in (select emps.deptno FROM depts where deptno = emps.deptno);
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1, 1, 1]], rightKeys=[[0, 1, 2]], joinType=[LEFTSEMI])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'      FennelReshapeRel(projection=[[1, 0, 1]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, INTEGER NOT NULL $f0, INTEGER NOT NULL $f00) NOT NULL])'
'        FennelCartesianProductRel(leftouterjoin=[false])'
'          FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])'
'            LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'              LhxAggRel(groupCount=[1])'
'                FennelRenameRel(fieldNames=[[$f0]])'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'          FennelBufferRel(inMemory=[false], multiPass=[true])'
'            LhxAggRel(groupCount=[1])'
'              FennelRenameRel(fieldNames=[[$f0]])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> -- Outer correlation
> explain plan for
> SELECT empno
> FROM 
>     emps
> where 
>     deptno not in (select deptno FROM depts where deptno = emps.deptno);
'column0'
'IterCalcRel(expr#0..4=[{inputs}], expr#5=[IS TRUE($t4)], expr#6=[NOT($t5)], EMPNO=[$t0], $condition=[$t6])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[1, 1]], rightKeys=[[0, 1]], joinType=[LEFT])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..1=[{inputs}], expr#2=[IS NOT NULL($t1)], proj#0..1=[{exprs}], $condition=[$t2])'
'          FennelToIteratorConverter'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxAggRel(groupCount=[2], agg#0=[MIN(2)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], proj#0..2=[{exprs}])'
'            FennelToIteratorConverter'
'              LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelRenameRel(fieldNames=[[$f0]])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> explain plan for
> SELECT empno
> FROM 
>     emps
> where 
>     deptno not in (select emps.deptno FROM depts where deptno = emps.deptno);
'column0'
'IterCalcRel(expr#0..5=[{inputs}], expr#6=[IS TRUE($t5)], expr#7=[NOT($t6)], EMPNO=[$t0], $condition=[$t7])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[1, 1, 1]], rightKeys=[[0, 1, 2]], joinType=[LEFT])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..1=[{inputs}], expr#2=[IS NOT NULL($t1)], proj#0..1=[{exprs}], $condition=[$t2])'
'          FennelToIteratorConverter'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxAggRel(groupCount=[3], agg#0=[MIN(3)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t0], $f00=[$t1], $f1=[$t2])'
'            FennelToIteratorConverter'
'              FennelCartesianProductRel(leftouterjoin=[false])'
'                FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER NOT NULL $f0) NOT NULL])'
'                  LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
'                    LhxAggRel(groupCount=[1])'
'                      FennelRenameRel(fieldNames=[[$f0]])'
'                        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'                FennelBufferRel(inMemory=[false], multiPass=[true])'
'                  LhxAggRel(groupCount=[1])'
'                    FennelRenameRel(fieldNames=[[$f0]])'
'                      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> -- This used to cause a hang due to a Hep bug
> explain plan for
> select
>    (select min(name||' Jr.') from emps2 where deptno = depts2.deptno),
>    (select max(name||' Jr.') from emps2 where deptno = depts2.deptno)
> from depts2;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1, 3]], outputRowType=[RecordType(VARCHAR(44) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" EXPR$0, VARCHAR(44) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" EXPR$1) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER DEPTNO, VARCHAR(44) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" EXPR$0) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'          LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
'          LhxAggRel(groupCount=[1], EXPR$0=[MIN(1)])'
'            IteratorToFennelConverter'
'              IterCalcRel(expr#0..2=[{inputs}], expr#3=[' Jr.'], expr#4=[||($t0, $t3)], $f0=[$t2], $f0=[$t4])'
'                FennelToIteratorConverter'
'                  LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'                    LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$NAME]])'
'                    LhxAggRel(groupCount=[1])'
'                      FennelRenameRel(fieldNames=[[$f0]])'
'                        LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
'      LhxAggRel(groupCount=[1], EXPR$0=[MAX(1)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0..2=[{inputs}], expr#3=[' Jr.'], expr#4=[||($t0, $t3)], $f0=[$t2], $f0=[$t4])'
'            FennelToIteratorConverter'
'              LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'                LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$NAME]])'
'                LhxAggRel(groupCount=[1])'
'                  FennelRenameRel(fieldNames=[[$f0]])'
'                    LcsRowScanRel(table=[[LOCALDB, SALES, DEPTS2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPTS2$DEPTNO]])'
> 
> -- 11 Misc usages of uncorrelated scalar subqueries that can be converted to
> -- constants
> 
> -- scalar subquery as an argument to a UDR
> set path 'sales';
> create function ramp(n int) 
>     returns table(i int)
>     language java
>     parameter style system defined java
>     no sql
>     external name 'class net.sf.farrago.test.FarragoTestUDR.nullableRamp(java.lang.Integer, java.sql.PreparedStatement)';
> 
> explain plan for select * from table(ramp((select min(deptno) from depts)));
'column0'
'FarragoJavaUdxRel(invocation=[CAST(RAMP(CAST(?0):INTEGER)):RecordType(INTEGER I) NOT NULL])'
> 
> select * from table(ramp((select min(deptno) from depts))) order by 1;
'I'
'0'
'1'
'2'
'3'
'4'
'5'
'6'
'7'
'8'
'9'
> 
> -- make sure this returns an exception
> select * from table(ramp((select deptno from depts)));
Error: Scalar query returned more than one row (state=,code=0)
> 
> -- pass in empty subquery result
> select * from table(ramp((select empno from emps where empno > 1000)));
'I'
> 
> -- dynamic parameters are allowed as long as they're not referenced in the
> -- subquery
> explain plan for
> select * from emps where empno = (select min(empno) from emps) and deptno = ?;
'column0'
'IterCalcRel(expr#0..9=[{inputs}], expr#10=[?1], expr#11=[=($t0, $t10)], expr#12=[?0], expr#13=[=($t2, $t12)], expr#14=[AND($t11, $t13)], proj#0..9=[{exprs}], $condition=[$t14])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])'
> 
> explain plan for
> select * from emps where deptno = ? and empno = (select min(empno) from emps);
'column0'
'IterCalcRel(expr#0..9=[{inputs}], expr#10=[?1], expr#11=[=($t0, $t10)], proj#0..9=[{exprs}], $condition=[$t11])'
'  FennelToIteratorConverter'
'    FtrsIndexSearchRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], uniqueKey=[false], preserveOrder=[false], outer=[false], inputKeyProj=[[1, 3]], inputJoinProj=[[]], inputDirectiveProj=[[0, 2]])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0=[{inputs}], expr#1=['['], expr#2=[?0], expr#3=[']'], expr#4=[IS NOT NULL($t2)], expr#5=[AND($t4, $t4)], $f0=[$t1], $f1=[$t2], $f2=[$t3], $f3=[$t2], $condition=[$t5])'
'          IterOneRowRel'
> 
> explain plan for
> select * from emps where empno = (select min(empno) from emps where deptno = ?);
'column0'
'IterCalcRel(expr#0..10=[{inputs}], expr#11=[=($t0, $t10)], proj#0..9=[{exprs}], $condition=[$t11])'
'  FennelToIteratorConverter'
'    FennelCartesianProductRel(leftouterjoin=[true])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])'
'      FennelBufferRel(inMemory=[false], multiPass=[true])'
'        FennelAggRel(groupCount=[0], EXPR$0=[MIN(0)])'
'          IteratorToFennelConverter'
'            IterCalcRel(expr#0..1=[{inputs}], expr#2=[?0], expr#3=[=($t1, $t2)], EMPNO=[$t0], $condition=[$t3])'
'              FennelToIteratorConverter'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 2]], index=[EMPS_UX], preserveOrder=[false])'
> 
> -- make sure the plan is not cached
> select name, (select count(*) from emps2) from emps order by name;
'NAME','EXPR$1'
'Eric','4'
'Fred','4'
'John','4'
'Wilma','4'
> insert into emps2 values('foo', null, null);
> select name, (select count(*) from emps2) from emps order by name;
'NAME','EXPR$1'
'Eric','5'
'Fred','5'
'John','5'
'Wilma','5'
> 
> -- use non-correlated subqueries in DELETE and MERGE
> select * from emps2 order by deptno;
'NAME','EMPNO','DEPTNO'
'foo','',''
'Fred','100','10'
'Eric','110','20'
'Wilma','120','20'
'John','110','40'
> explain plan for
>     delete from emps2 where deptno = (select max(deptno)+10 from depts);
'column0'
'FennelToIteratorConverter'
'  LcsTableDeleteRel(table=[[LOCALDB, SALES, EMPS2]])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0=[{inputs}], expr#1=[CAST($t0):BIGINT NOT NULL], rid=[$t1])'
'        FennelToIteratorConverter'
'          LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO]], residual columns=[[2]])'
'            IteratorToFennelConverter'
'              IterCalcRel(expr#0=[{inputs}], expr#1=['['], expr#2=[?0], expr#3=[']'], expr#4=[IS NOT NULL($t2)], expr#5=[AND($t4, $t4)], $f0=[$t1], $f1=[$t2], $f2=[$t3], $f3=[$t2], $condition=[$t5])'
'                IterOneRowRel'
> delete from emps2 where deptno = (select max(deptno)+10 from depts);
> select * from emps2 order by deptno;
'NAME','EMPNO','DEPTNO'
'foo','',''
'Fred','100','10'
'Eric','110','20'
'Wilma','120','20'
> 
> explain plan for
> merge into emps2 e1
>     using (select * from emps2) e2 on e1.name = e2.name
>     when matched then
>         update set deptno = e1.deptno + (select count(*) from depts2);
'column0'
'FennelToIteratorConverter'
'  LcsTableMergeRel(table=[[LOCALDB, SALES, EMPS2]])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0..4=[{inputs}], expr#5=[?0], expr#6=[+($t3, $t5)], expr#7=[CAST($t4):BIGINT NOT NULL], expr#8=[CAST($t6):INTEGER], rid=[$t7], NAME=[$t1], EMPNO=[$t2], DEPTNO=[$t8])'
'        FennelToIteratorConverter'
'          LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'            LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$NAME]])'
'            IteratorToFennelConverter'
'              IterCalcRel(expr#0..3=[{inputs}], expr#4=[ROW($t2)], expr#5=[?0], expr#6=[+($t2, $t5)], expr#7=[CAST($t6):INTEGER], expr#8=[ROW($t7)], expr#9=[$IS_DIFFERENT_FROM($t4, $t8)], proj#0..3=[{exprs}], $condition=[$t9])'
'                FennelToIteratorConverter'
'                  LcsRowScanRel(table=[[LOCALDB, SALES, EMPS2]], projection=[[0, 1, 2, LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMPS2$DEPTNO, SYS$CLUSTERED_INDEX$EMPS2$EMPNO, SYS$CLUSTERED_INDEX$EMPS2$NAME]])'
> merge into emps2 e1
>     using (select * from emps2) e2 on e1.name = e2.name
>     when matched then
>         update set deptno = e1.deptno + (select count(*) from depts2);
> select * from emps2 order by deptno;
'NAME','EMPNO','DEPTNO'
'foo','',''
'Fred','100','13'
'Eric','110','23'
'Wilma','120','23'
> 
> -- make sure the time function evaluates to the same value in the parent
> -- query and subquery; the queries will return no rows if they don't
> select * from emps where
>     (select current_timestamp from emps where empno = 100) =
>     (select current_timestamp from depts where deptno = 10)
> order by empno;
'EMPNO','NAME','DEPTNO','GENDER','CITY','EMPID','AGE','PUBLIC_KEY','SLACKER','MANAGER'
'100','Fred','10','','','30','25','41626320','true','false'
'110','Eric','20','M','San Francisco','3','80','416263','','false'
'110','John','40','M','Vancouver','2','','58797A','false','true'
'120','Wilma','20','F','','1','50','','','true'
> 
> select * from emps where current_time = 
>     (select current_time from depts where deptno = 10 and current_time =
>         (select current_time from emps where empno = 100))
> order by empno;
'EMPNO','NAME','DEPTNO','GENDER','CITY','EMPID','AGE','PUBLIC_KEY','SLACKER','MANAGER'
'100','Fred','10','','','30','25','41626320','true','false'
'110','Eric','20','M','San Francisco','3','80','416263','','false'
'110','John','40','M','Vancouver','2','','58797A','false','true'
'120','Wilma','20','F','','1','50','','','true'
> 
> -- LER-7530/FRG-277
> explain plan for
> select
>     case when (select count(*) from emps) = 4
>         then (select min(empno) from emps)
>         else (select max(empno) from emps)
>     end,
>     case when (select count(*) from emps) <> 4
>         then (select min(empno) from emps)
>         else (select max(empno) from emps)
>     end
> from (values(0));
'column0'
'IterCalcRel(expr#0=[{inputs}], expr#1=[?0], expr#2=[4], expr#3=[=($t1, $t2)], expr#4=[?1], expr#5=[?2], expr#6=[CASE($t3, $t4, $t5)], expr#7=[?3], expr#8=[<>($t7, $t2)], expr#9=[?4], expr#10=[?5], expr#11=[CASE($t8, $t9, $t10)], EXPR$0=[$t6], EXPR$1=[$t11])'
'  FennelToIteratorConverter'
'    FennelValuesRel(tuples=[[{ 0 }]])'
> 
> select
>     case when (select count(*) from emps) = 4
>         then (select min(empno) from emps)
>         else (select max(empno) from emps)
>     end,
>     case when (select count(*) from emps) <> 4
>         then (select min(empno) from emps)
>         else (select max(empno) from emps)
>     end
> from (values(0));
'EXPR$0','EXPR$1'
'100','120'
> 
> explain plan for
> select
>     case (select count(*) from emps)
>         when (select count(*) from depts)
>         then (select min(empno) from emps)
>         else (select max(empno) from emps)
>     end
> from (values(0));
'column0'
'IterCalcRel(expr#0=[{inputs}], expr#1=[?0], expr#2=[?1], expr#3=[=($t1, $t2)], expr#4=[?2], expr#5=[?3], expr#6=[CASE($t3, $t4, $t5)], EXPR$0=[$t6])'
'  FennelToIteratorConverter'
'    FennelValuesRel(tuples=[[{ 0 }]])'
> 
> select
>     case (select count(*) from emps)
>         when (select count(*) from depts)
>         then (select min(empno) from emps)
>         else (select max(empno) from emps)
>     end
> from (values(0));
'EXPR$0'
'120'
> 
> explain plan for
> select
>     coalesce(
>         (select gender from emps where empno = 100), 
>         (select name from emps where empno = 100))
> from (values(0));
'column0'
'IterCalcRel(expr#0=[{inputs}], expr#1=[?0], expr#2=[IS NOT NULL($t1)], expr#3=[?1], expr#4=[?2], expr#5=[CASE($t2, $t3, $t4)], EXPR$0=[$t5])'
'  FennelToIteratorConverter'
'    FennelValuesRel(tuples=[[{ 0 }]])'
> 
> select
>     coalesce(
>         (select gender from emps where empno = 100), 
>         (select name from emps where empno = 100))
> from (values(0));
'EXPR$0'
'Fred'
> 
> -- subquery references a view
> create view vcount as
>     select count(*) from emps, depts where emps.deptno = depts.deptno;
> explain plan for select * from emps where empid = (select * from vcount);
'column0'
'FennelToIteratorConverter'
'  FtrsIndexSearchRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], uniqueKey=[true], preserveOrder=[false], outer=[false], inputKeyProj=[*], inputJoinProj=[[]], inputDirectiveProj=[[]])'
'    FtrsIndexSearchRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2, 0]], index=[SYS$CONSTRAINT_INDEX$SYS$UNIQUE_KEY$EMPS$EMPID], uniqueKey=[false], preserveOrder=[false], outer=[false], inputKeyProj=[[1, 3]], inputJoinProj=[[]], inputDirectiveProj=[[0, 2]])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0=[{inputs}], expr#1=['['], expr#2=[?0], expr#3=[']'], expr#4=[CAST($t2):INTEGER], expr#5=[IS NOT NULL($t2)], expr#6=[AND($t5, $t5)], $f0=[$t1], $f1=[$t4], $f2=[$t3], $f3=[$t4], $condition=[$t6])'
'          IterOneRowRel'
> select * from emps where empid = (select * from vcount);
'EMPNO','NAME','DEPTNO','GENDER','CITY','EMPID','AGE','PUBLIC_KEY','SLACKER','MANAGER'
'110','Eric','20','M','San Francisco','3','80','416263','','false'
> 
> -- subquery in a view definition
> create view vncsubq as
>     select * from emps where empno = (select min(empno) from emps);
> explain plan for 
>     select * from depts where deptno = (select deptno from vncsubq);
'column0'
'FennelToIteratorConverter'
'  FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], uniqueKey=[false], preserveOrder=[false], outer=[false], inputKeyProj=[[1, 3]], inputJoinProj=[[]], inputDirectiveProj=[[0, 2]])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0=[{inputs}], expr#1=['['], expr#2=[?0], expr#3=[']'], expr#4=[IS NOT NULL($t2)], expr#5=[AND($t4, $t4)], $f0=[$t1], $f1=[$t2], $f2=[$t3], $f3=[$t2], $condition=[$t5])'
'        IterOneRowRel'
> select * from depts where deptno = (select deptno from vncsubq);
'DEPTNO','NAME'
'10','Sales'
> 
> -- make sure reduction doesn't occur during view validation
> create view badview as
>     select (select cast(city as int) from emps where empno = 110) from depts;
> -- reduction still occurs in explain
> explain plan for select * from badview;
'column0'
'IterCalcRel(expr#0=[{inputs}], expr#1=[?0], EXPR$0=[$t1])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> -- finally, an error is returned when actually selecting from the view
> select * from badview;
Error: Cannot assign 'San Francisco' to a NUMERIC value: NumberFormatException (state=,code=0)
> 
> -- disable subquery conversion
> alter session set "reduceNonCorrelatedSubqueries" = false;
> explain plan for select * from emps where empno = (select min(empno) from emps);
'column0'
'IterCalcRel(expr#0..10=[{inputs}], expr#11=[=($t0, $t10)], proj#0..9=[{exprs}], $condition=[$t11])'
'  FennelToIteratorConverter'
'    FennelCartesianProductRel(leftouterjoin=[true])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])'
'      FennelBufferRel(inMemory=[false], multiPass=[true])'
'        FennelAggRel(groupCount=[0], EXPR$0=[MIN(0)])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
> 
> --------------
> -- clean up --
> --------------
> drop table emps2;
> drop table emps3;
> drop table emps4;
> drop table depts2;
> drop table depts3;
> drop table depts4;
> drop table depts5;
> drop view vcount;
> drop view vncsubq;
> drop view badview;
> drop function ramp;
> 
> -- End subquery.sql
> 
> 
> !quit
