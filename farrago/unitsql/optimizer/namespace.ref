> -- $Id$
> -- Test queries which make use of foreign namespaces
> 
> -- force usage of Java calculator
> alter system set "calcVirtualMachine" = 'CALCVM_JAVA';
> 
> create server mof_repository
> foreign data wrapper sys_mdr
> options(
>     "org.netbeans.mdr.persistence.Dir" 'unitsql/ddl/mdr',
>     extent_name 'MOF', 
>     schema_name 'MODEL');
> 
> -- single-table projection with no filters
> select "name" from mof_repository.model."Exception" order by 1;
+------------------+
|       name       |
+------------------+
| NameNotFound     |
| NameNotResolved  |
+------------------+
> 
> -- single-table projection with filter
> select "name" from mof_repository.model."Class" where "isAbstract"
> order by 1;
+-----------------------+
|         name          |
+-----------------------+
| BehavioralFeature     |
| Classifier            |
| DataType              |
| Feature               |
| GeneralizableElement  |
| ModelElement          |
| Namespace             |
| StructuralFeature     |
| TypedElement          |
+-----------------------+
> 
> -- two-way one-to-many join
> select 
>     e."name" as exception_name,
>     p."name" as param_name
> from
>     mof_repository.model."Exception" e
> inner join
>     mof_repository.model."Parameter" p
> on 
>     e."mofId" = p."container"
> order by 
>     exception_name,param_name;
+------------------+--------------+
|  EXCEPTION_NAME  |  PARAM_NAME  |
+------------------+--------------+
| NameNotFound     | name         |
| NameNotResolved  | explanation  |
| NameNotResolved  | restOfName   |
+------------------+--------------+
> 
> -- two-way join with filter
> select 
>     e."name" as exception_name,
>     p."name" as param_name
> from
>     (select * 
>     from mof_repository.model."Exception"
>     where "name"='NameNotResolved') e
> inner join
>     mof_repository.model."Parameter" p
> on 
>     e."mofId" = p."container"
> order by 
>     exception_name,param_name;
+------------------+--------------+
|  EXCEPTION_NAME  |  PARAM_NAME  |
+------------------+--------------+
| NameNotResolved  | explanation  |
| NameNotResolved  | restOfName   |
+------------------+--------------+
> 
> -- two-way many-to-one join
> select 
>     p."name" as param_name,
>     e."name" as exception_name
> from
>     mof_repository.model."Parameter" p
> inner join
>     mof_repository.model."Exception" e
> on 
>     p."container" = e."mofId"
> order by 
>     param_name,exception_name;
+--------------+------------------+
|  PARAM_NAME  |  EXCEPTION_NAME  |
+--------------+------------------+
| explanation  | NameNotResolved  |
| name         | NameNotFound     |
| restOfName   | NameNotResolved  |
+--------------+------------------+
> 
> -- three-way join
> select 
>     namespace_name,
>     exception_name,
>     p."name" as param_name
> from
>     (select n."name" as namespace_name,e.
>         "mofId" as e_id,e."name" as exception_name
>     from
>         mof_repository.model."Namespace" n
>     inner join
>         mof_repository.model."Exception" e
>     on n."mofId" = e."container") ne
> inner join
>     mof_repository.model."Parameter" p
> on 
>     ne.e_id = p."container"
> order by 
>     namespace_name,exception_name,param_name;
+-----------------+------------------+--------------+
| NAMESPACE_NAME  |  EXCEPTION_NAME  |  PARAM_NAME  |
+-----------------+------------------+--------------+
| Namespace       | NameNotFound     | name         |
| Namespace       | NameNotResolved  | explanation  |
| Namespace       | NameNotResolved  | restOfName   |
+-----------------+------------------+--------------+
> 
> -- use outputformat xmlattr for outer joins so we can see nulls
> !set outputformat xmlattr
> 
> -- one-to-many left outer join
> select 
>     p."name" as package_name,
>     i."name" as import_name
> from
>     mof_repository.model."Package" p
> left outer join
>     mof_repository.model."Import" i
> on 
>     p."mofId" = i."container"
> order by 
>     package_name,import_name;
<resultset>
  <result PACKAGE_NAME="CorbaIdlTypes" IMPORT_NAME="null"/>
  <result PACKAGE_NAME="Model" IMPORT_NAME="PrimitiveTypes"/>
  <result PACKAGE_NAME="PrimitiveTypes" IMPORT_NAME="null"/>
</resultset>
> 
> -- many-to-one left outer join
> select 
>     p."name" as param_name,
>     e."name" as exception_name
> from 
>     mof_repository.model."Parameter" p
> left outer join
>     mof_repository.model."Exception" e
> on 
>     p."container" = e."mofId"
> where 
>     p."name"='name'
> order by
>     param_name,exception_name;
<resultset>
  <result PARAM_NAME="name" EXCEPTION_NAME="null"/>
  <result PARAM_NAME="name" EXCEPTION_NAME="null"/>
  <result PARAM_NAME="name" EXCEPTION_NAME="NameNotFound"/>
</resultset>
> 
> -- filter which can be pushed down to foreign DBMS
> select dname 
> from hsqldb_demo.sales.dept
> where deptno=20;
<resultset>
  <result DNAME="RESEARCH"/>
</resultset>
>     
> -- now explain plans for above queries
> !set outputformat csv
> 
> explain plan for
> select "name" from mof_repository.model."Exception" order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" name) NOT NULL])'
'      IteratorToFennelConverter'
'        MedMdrClassExtentRel(table=[[MOF_REPOSITORY, MODEL, Exception]])'
> 
> explain plan for
> select "name" from mof_repository.model."Class" where "isAbstract"
> order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0..9=[{inputs}], name=[$t0], $condition=[$t5])'
'        MedMdrClassExtentRel(table=[[MOF_REPOSITORY, MODEL, Class]])'
> 
> explain plan for
> select 
>     e."name" as exception_name,
>     p."name" as param_name
> from
>     mof_repository.model."Exception" e
> inner join
>     mof_repository.model."Parameter" p
> on 
>     e."mofId" = p."container"
> order by 
>     exception_name,param_name;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 7]], outputRowType=[RecordType(VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" EXCEPTION_NAME, VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" PARAM_NAME) NOT NULL])'
'      IteratorToFennelConverter'
'        MedMdrJoinRel(condition=[=($5, $9)], joinType=[inner])'
'          MedMdrClassExtentRel(table=[[MOF_REPOSITORY, MODEL, Exception]])'
'          MedMdrClassExtentRel(table=[[MOF_REPOSITORY, MODEL, Parameter]])'
> 
> explain plan for
> select 
>     e."name" as exception_name,
>     p."name" as param_name
> from
>     (select * 
>     from mof_repository.model."Exception"
>     where "name"='NameNotResolved') e
> inner join
>     mof_repository.model."Parameter" p
> on 
>     e."mofId" = p."container"
> order by
>      exception_name,param_name;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 7]], outputRowType=[RecordType(VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" EXCEPTION_NAME, VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" PARAM_NAME) NOT NULL])'
'      IteratorToFennelConverter'
'        MedMdrJoinRel(condition=[=($5, $9)], joinType=[inner])'
'          FennelToIteratorConverter'
'            FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5, 6]], filterOp=[COMP_EQ], filterOrdinals=[[0]], filterTuple=[['NameNotResolved']], outputRowType=[RecordType(VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" name, VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" annotation, VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" container, VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" scope, VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" visibility, VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" mofId, VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" mofClassName) NOT NULL])'
'              IteratorToFennelConverter'
'                MedMdrClassExtentRel(table=[[MOF_REPOSITORY, MODEL, Exception]])'
'          MedMdrClassExtentRel(table=[[MOF_REPOSITORY, MODEL, Parameter]])'
> 
> explain plan for
> select 
>     p."name" as param_name,
>     e."name" as exception_name
> from
>     mof_repository.model."Parameter" p
> inner join
>     mof_repository.model."Exception" e
> on 
>     p."container" = e."mofId"
> order 
>     by param_name,exception_name;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 8]], outputRowType=[RecordType(VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" PARAM_NAME, VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" EXCEPTION_NAME) NOT NULL])'
'      IteratorToFennelConverter'
'        MedMdrJoinRel(condition=[=($2, $13)], joinType=[inner])'
'          MedMdrClassExtentRel(table=[[MOF_REPOSITORY, MODEL, Parameter]])'
'          MedMdrClassExtentRel(table=[[MOF_REPOSITORY, MODEL, Exception]])'
> 
> explain plan for
> select 
>     namespace_name,
>     exception_name,
>     p."name" as param_name
> from
>     (select n."name" as namespace_name,e.
>         "mofId" as e_id,e."name" as exception_name
>     from
>         mof_repository.model."Namespace" n
>     inner join
>         mof_repository.model."Exception" e
>     on 
>         n."mofId" = e."container") ne
> inner join
>     mof_repository.model."Parameter" p
> on 
>     ne.e_id = p."container"
> order by 
>     namespace_name,exception_name,param_name;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0, 1, 2]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 2, 3]], outputRowType=[RecordType(VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAMESPACE_NAME, VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" EXCEPTION_NAME, VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" PARAM_NAME) NOT NULL])'
'      IteratorToFennelConverter'
'        MedMdrJoinRel(condition=[=($1, $5)], joinType=[inner])'
'          FennelToIteratorConverter'
'            FennelReshapeRel(projection=[[0, 10, 5]], outputRowType=[RecordType(VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAMESPACE_NAME, VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" E_ID, VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" EXCEPTION_NAME) NOT NULL])'
'              IteratorToFennelConverter'
'                MedMdrJoinRel(condition=[=($3, $7)], joinType=[inner])'
'                  MedMdrClassExtentRel(table=[[MOF_REPOSITORY, MODEL, Namespace]])'
'                  MedMdrClassExtentRel(table=[[MOF_REPOSITORY, MODEL, Exception]])'
'          MedMdrClassExtentRel(table=[[MOF_REPOSITORY, MODEL, Parameter]])'
> 
> explain plan for
> select 
>     p."name" as package_name,
>     i."name" as import_name
> from
>     mof_repository.model."Package" p
> left outer join
>     mof_repository.model."Import" i
> on 
>     p."mofId" = i."container"
> order by 
>     package_name,import_name;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 9]], outputRowType=[RecordType(VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" PACKAGE_NAME, VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" IMPORT_NAME) NOT NULL])'
'      IteratorToFennelConverter'
'        MedMdrJoinRel(condition=[=($7, $11)], joinType=[left])'
'          MedMdrClassExtentRel(table=[[MOF_REPOSITORY, MODEL, Package]])'
'          MedMdrClassExtentRel(table=[[MOF_REPOSITORY, MODEL, Import]])'
> 
> explain plan for
> select 
>     p."name" as param_name,
>     e."name" as exception_name
> from 
>     mof_repository.model."Parameter" p
> left outer join
>     mof_repository.model."Exception" e
> on 
>     p."container" = e."mofId"
> where 
>     p."name"='name'
> order by 
>     param_name,exception_name;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'    FennelRenameRel(fieldNames=[[PARAM_NAME, EXCEPTION_NAME]])'
'      FennelReshapeRel(projection=[[0, 8]], filterOp=[COMP_EQ], filterOrdinals=[[0]], filterTuple=[['name']], outputRowType=[RecordType(VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" name, VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" name0) NOT NULL])'
'        IteratorToFennelConverter'
'          MedMdrJoinRel(condition=[=($2, $13)], joinType=[left])'
'            MedMdrClassExtentRel(table=[[MOF_REPOSITORY, MODEL, Parameter]])'
'            MedMdrClassExtentRel(table=[[MOF_REPOSITORY, MODEL, Exception]])'
> 
> explain plan for 
> select dname 
> from hsqldb_demo.sales.dept
> where deptno=20;
'column0'
'ResultSetToFarragoIteratorConverter'
'  MedJdbcQueryRel(foreignSql=[SELECT "DNAME"'
'FROM "SALES"."DEPT"'
'WHERE "DEPTNO" = 20])'
> 
> -- join on pseudocolumn (FRG-69)
> 
> explain plan for
> select 
>     e."name" as exception_name,
>     p."name" as param_name
> from
>     mof_repository.model."Exception" e
> inner join
>     mof_repository.model."Parameter" p
> on 
>     e."mofId" = p."mofClassName"
> ;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" EXCEPTION_NAME, VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" PARAM_NAME) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'      FennelReshapeRel(projection=[[0, 5]], outputRowType=[RecordType(VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" name, VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" mofId) NOT NULL])'
'        IteratorToFennelConverter'
'          MedMdrClassExtentRel(table=[[MOF_REPOSITORY, MODEL, Exception]])'
'      FennelReshapeRel(projection=[[0, 7]], outputRowType=[RecordType(VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" name, VARCHAR(1024) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" mofClassName) NOT NULL])'
'        IteratorToFennelConverter'
'          MedMdrClassExtentRel(table=[[MOF_REPOSITORY, MODEL, Parameter]])'
> 
> !quit
