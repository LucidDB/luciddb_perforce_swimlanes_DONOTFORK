> -- $Id$
> 
> -- Test optimization of outer join queries
> 
> create schema oj;
> set schema 'oj';
> alter session implementation set jar sys_boot.sys_boot.luciddb_plugin;
> 
> create table A(k int, a int not null);
> create table B(k int, b int not null);
> create table C(k int, c int not null);
> create table D(k int, d int not null);
> insert into A values (1, 1), (2, 2), (3, 3);
> insert into B values (1, 2), (2, 3), (3, 4);
> insert into C values (1, 2), (2, 3), (3, 4);
> insert into D values (1, 3), (2, 4), (3, 5);
> 
> ---------------------------------------------------
> -- Set 1 -- RHS of topmost join is (C inner join D)
> ---------------------------------------------------
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     left outer join
>     (select c, d from C inner join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     right outer join
>     (select c, d from C inner join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    | 4  | 4  |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     full outer join
>     (select c, d from C inner join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    | 4  | 4  |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     inner join
>     (select c, d from C inner join D on c = d)
>     on a = c
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> 
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     left outer join
>     (select c, d from C inner join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    | 4  |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     right outer join
>     (select c, d from C inner join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    | 4  | 4  |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     full outer join
>     (select c, d from C inner join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    | 4  | 4  |
|    | 4  |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     inner join
>     (select c, d from C inner join D on c = d)
>     on a = c
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> 
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     left outer join
>     (select c, d from C inner join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 1  |    |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     right outer join
>     (select c, d from C inner join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    | 4  | 4  |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     full outer join
>     (select c, d from C inner join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    | 4  | 4  |
| 1  |    |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     inner join
>     (select c, d from C inner join D on c = d)
>     on a = c
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> 
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     left outer join
>     (select c, d from C inner join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    | 4  |    |    |
| 1  |    |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     right outer join
>     (select c, d from C inner join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    | 4  | 4  |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     full outer join
>     (select c, d from C inner join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    | 4  | 4  |
|    | 4  |    |    |
| 1  |    |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     inner join
>     (select c, d from C inner join D on c = d)
>     on a = c
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> 
> ---------------------------------------------------------
> -- Set 2 -- RHS of topmost join is (C right outer join D)
> ---------------------------------------------------------
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     left outer join
>     (select c, d from C right outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     right outer join
>     (select c, d from C right outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    |    | 5  |
|    |    | 4  | 4  |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     full outer join
>     (select c, d from C right outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    |    | 5  |
|    |    | 4  | 4  |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     inner join
>     (select c, d from C right outer join D on c = d)
>     on a = c
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> 
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     left outer join
>     (select c, d from C right outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    | 4  |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     right outer join
>     (select c, d from C right outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    |    | 5  |
|    |    | 4  | 4  |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     full outer join
>     (select c, d from C right outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    |    | 5  |
|    |    | 4  | 4  |
|    | 4  |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     inner join
>     (select c, d from C right outer join D on c = d)
>     on a = c
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> 
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     left outer join
>     (select c, d from C right outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 1  |    |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     right outer join
>     (select c, d from C right outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    |    | 5  |
|    |    | 4  | 4  |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     full outer join
>     (select c, d from C right outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    |    | 5  |
|    |    | 4  | 4  |
| 1  |    |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     inner join
>     (select c, d from C right outer join D on c = d)
>     on a = c
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> 
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     left outer join
>     (select c, d from C right outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    | 4  |    |    |
| 1  |    |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     right outer join
>     (select c, d from C right outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    |    | 5  |
|    |    | 4  | 4  |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     full outer join
>     (select c, d from C right outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    |    | 5  |
|    |    | 4  | 4  |
|    | 4  |    |    |
| 1  |    |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     inner join
>     (select c, d from C right outer join D on c = d)
>     on a = c
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> 
> -------------------------------------------------------
> -- Set 3 - RHS of topmost join is (C left outer join D)
> -------------------------------------------------------
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     left outer join
>     (select c, d from C left outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     right outer join
>     (select c, d from C left outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    | 2  |    |
|    |    | 4  | 4  |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     full outer join
>     (select c, d from C left outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    | 2  |    |
|    |    | 4  | 4  |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     inner join
>     (select c, d from C left outer join D on c = d)
>     on a = c
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 2  | 2  | 2  |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> 
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     left outer join
>     (select c, d from C left outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    | 4  |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     right outer join
>     (select c, d from C left outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    | 2  |    |
|    |    | 4  | 4  |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     full outer join
>     (select c, d from C left outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    | 2  |    |
|    |    | 4  | 4  |
|    | 4  |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     inner join
>     (select c, d from C left outer join D on c = d)
>     on a = c
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 2  | 2  | 2  |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> 
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     left outer join
>     (select c, d from C left outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 1  |    |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     right outer join
>     (select c, d from C left outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    | 2  |    |
|    |    | 4  | 4  |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     full outer join
>     (select c, d from C left outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    | 2  |    |
|    |    | 4  | 4  |
| 1  |    |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     inner join
>     (select c, d from C left outer join D on c = d)
>     on a = c
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 2  | 2  | 2  |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> 
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     left outer join
>     (select c, d from C left outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    | 4  |    |    |
| 1  |    |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     right outer join
>     (select c, d from C left outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    | 2  |    |
|    |    | 4  | 4  |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     full outer join
>     (select c, d from C left outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    | 2  |    |
|    |    | 4  | 4  |
|    | 4  |    |    |
| 1  |    |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     inner join
>     (select c, d from C left outer join D on c = d)
>     on a = c
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 2  | 2  | 2  |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> 
> -------------------------------------------------------
> -- Set 4 - RHS of topmost join is (C full outer join D)
> -------------------------------------------------------
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     left outer join
>     (select c, d from C full outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     right outer join
>     (select c, d from C full outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    |    | 5  |
|    |    | 2  |    |
|    |    | 4  | 4  |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     full outer join
>     (select c, d from C full outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    |    | 5  |
|    |    | 2  |    |
|    |    | 4  | 4  |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     inner join
>     (select c, d from C full outer join D on c = d)
>     on a = c
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 2  | 2  | 2  |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> 
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     left outer join
>     (select c, d from C full outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    | 4  |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     right outer join
>     (select c, d from C full outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    |    | 5  |
|    |    | 2  |    |
|    |    | 4  | 4  |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     full outer join
>     (select c, d from C full outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    |    | 5  |
|    |    | 2  |    |
|    |    | 4  | 4  |
|    | 4  |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     inner join
>     (select c, d from C full outer join D on c = d)
>     on a = c
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 2  | 2  | 2  |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> 
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     left outer join
>     (select c, d from C full outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 1  |    |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     right outer join
>     (select c, d from C full outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    |    | 5  |
|    |    | 2  |    |
|    |    | 4  | 4  |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     full outer join
>     (select c, d from C full outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    |    | 5  |
|    |    | 2  |    |
|    |    | 4  | 4  |
| 1  |    |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     inner join
>     (select c, d from C full outer join D on c = d)
>     on a = c
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 2  | 2  | 2  |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> 
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     left outer join
>     (select c, d from C full outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    | 4  |    |    |
| 1  |    |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     right outer join
>     (select c, d from C full outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    |    | 5  |
|    |    | 2  |    |
|    |    | 4  | 4  |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     full outer join
>     (select c, d from C full outer join D on c = d)
>     on a = c and b = d
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
|    |    |    | 5  |
|    |    | 2  |    |
|    |    | 4  | 4  |
|    | 4  |    |    |
| 1  |    |    |    |
| 2  | 2  |    |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     inner join
>     (select c, d from C full outer join D on c = d)
>     on a = c
> order by 1, 2, 3, 4;
+----+----+----+----+
| A  | B  | C  | D  |
+----+----+----+----+
| 2  | 2  | 2  |    |
| 3  | 3  | 3  | 3  |
+----+----+----+----+
> 
> -------------------------------------------
> -- explain on a subset of the above queries
> -------------------------------------------
> !set outputformat csv
> explain plan for
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     left outer join
>     (select c, d from C inner join D on c = d)
>     on a = c and b = d;
'column0'
'FennelToIteratorConverter'
'  LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[0, 1]], joinType=[LEFT])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
> explain plan for
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     right outer join
>     (select c, d from C inner join D on c = d)
>     on a = c and b = d;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[3, 4, 0, 1]], outputRowType=[RecordType(INTEGER A, INTEGER B, INTEGER NOT NULL C, INTEGER NOT NULL D) NOT NULL])'
'    LhxJoinRel(leftKeys=[[2, 1]], rightKeys=[[0, 1]], joinType=[LEFT])'
'      FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL C, INTEGER NOT NULL D, INTEGER CAST($0):INTEGER) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
'      FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER A, INTEGER NOT NULL B) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
> explain plan for
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     full outer join
>     (select c, d from C inner join D on c = d)
>     on a = c and b = d;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER A, INTEGER B, INTEGER C, INTEGER D) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[0, 2]], joinType=[FULL])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
'      FennelReshapeRel(projection=[[0, 1, 1]], outputRowType=[RecordType(INTEGER NOT NULL C, INTEGER NOT NULL D, INTEGER CAST($1):INTEGER) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
> explain plan for
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     inner join
>     (select c, d from C inner join D on c = d)
>     on a = c;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER A, INTEGER B, INTEGER NOT NULL C, INTEGER NOT NULL D) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[2]], joinType=[INNER])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[FULL])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
'      FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL C, INTEGER NOT NULL D, INTEGER CAST($0):INTEGER) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
> 
> explain plan for
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     right outer join
>     (select c, d from C right outer join D on c = d)
>     on a = c and b = d;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[2, 3, 1, 0]], outputRowType=[RecordType(INTEGER A, INTEGER B, INTEGER C, INTEGER NOT NULL D) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1, 0]], rightKeys=[[2, 1]], joinType=[LEFT])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'      FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL A, INTEGER NOT NULL B, INTEGER CAST($0):INTEGER) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
> explain plan for
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     full outer join
>     (select c, d from C right outer join D on c = d)
>     on a = c and b = d;
'column0'
'FennelToIteratorConverter'
'  LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[0, 1]], joinType=[FULL])'
'    FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER A, INTEGER NOT NULL B) NOT NULL])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'    FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER C, INTEGER NOT NULL D) NOT NULL])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
> explain plan for
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     inner join
>     (select c, d from C right outer join D on c = d)
>     on a = c;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[2, 3, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL A, INTEGER B, INTEGER C, INTEGER NOT NULL D) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[2]], joinType=[INNER])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'      FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL A, INTEGER B, INTEGER CAST($0):INTEGER) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
> explain plan for
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     left outer join
>     (select c, d from C right outer join D on c = d)
>     on a = c and b = d;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER A, INTEGER B, INTEGER C, INTEGER D) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[0, 2]], joinType=[LEFT])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[FULL])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
'      FennelReshapeRel(projection=[[1, 0, 0]], outputRowType=[RecordType(INTEGER C, INTEGER NOT NULL D, INTEGER CAST($1):INTEGER) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
> 
> explain plan for
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     full outer join
>     (select c, d from C left outer join D on c = d)
>     on a = c and b = d;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1, 3, 4]], outputRowType=[RecordType(INTEGER A, INTEGER B, INTEGER C, INTEGER D) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0, 2]], rightKeys=[[0, 1]], joinType=[FULL])'
'      FennelReshapeRel(projection=[[0, 1, 1]], outputRowType=[RecordType(INTEGER NOT NULL A, INTEGER NOT NULL B, INTEGER CAST($1):INTEGER) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
> explain plan for
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     inner join
>     (select c, d from C left outer join D on c = d)
>     on a = c;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1, 0, 2, 3]], outputRowType=[RecordType(INTEGER A, INTEGER NOT NULL B, INTEGER NOT NULL C, INTEGER D) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[2]], joinType=[INNER])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'      FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL C, INTEGER D, INTEGER CAST($0):INTEGER) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
> explain plan for
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     left outer join
>     (select c, d from C left outer join D on c = d)
>     on a = c and b = d;
'column0'
'FennelToIteratorConverter'
'  LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[0, 1]], joinType=[LEFT])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
> explain plan for
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     right outer join
>     (select c, d from C left outer join D on c = d)
>     on a = c and b = d;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[3, 4, 0, 1]], outputRowType=[RecordType(INTEGER A, INTEGER B, INTEGER NOT NULL C, INTEGER D) NOT NULL])'
'    LhxJoinRel(leftKeys=[[2, 1]], rightKeys=[[0, 1]], joinType=[LEFT])'
'      FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL C, INTEGER D, INTEGER CAST($0):INTEGER) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[FULL])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
> 
> explain plan for
> select a, b, c, d from
>     (select a, b from A inner join B on a = b)
>     inner join
>     (select c, d from C full outer join D on c = d)
>     on a = c;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1, 3, 4]], outputRowType=[RecordType(INTEGER NOT NULL A, INTEGER NOT NULL B, INTEGER C, INTEGER D) NOT NULL])'
'    LhxJoinRel(leftKeys=[[2]], rightKeys=[[0]], joinType=[INNER])'
'      FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL A, INTEGER NOT NULL B, INTEGER CAST($0):INTEGER) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[FULL])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
> explain plan for
> select a, b, c, d from
>     (select a, b from A right outer join B on a = b)
>     left outer join
>     (select c, d from C full outer join D on c = d)
>     on a = c and b = d;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1, 0, 3, 4]], outputRowType=[RecordType(INTEGER A, INTEGER NOT NULL B, INTEGER C, INTEGER D) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1, 2]], rightKeys=[[0, 1]], joinType=[LEFT])'
'      FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL B, INTEGER A, INTEGER CAST($0):INTEGER) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[FULL])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
> explain plan for
> select a, b, c, d from
>     (select a, b from A left outer join B on a = b)
>     right outer join
>     (select c, d from C full outer join D on c = d)
>     on a = c and b = d;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[2, 3, 0, 1]], outputRowType=[RecordType(INTEGER A, INTEGER B, INTEGER C, INTEGER D) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[2, 1]], joinType=[LEFT])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[FULL])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
'      FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL A, INTEGER B, INTEGER CAST($0):INTEGER) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
> explain plan for
> select a, b, c, d from
>     (select a, b from A full outer join B on a = b)
>     full outer join
>     (select c, d from C full outer join D on c = d)
>     on a = c and b = d;
'column0'
'FennelToIteratorConverter'
'  LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[0, 1]], joinType=[FULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[FULL])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[FULL])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
> 
> ------------------------------------
> -- inner selects contain projections
> ------------------------------------
> !set outputformat table
> -- can't pull because RHS generates nulls
> select a, bb, cc from
>     A left outer join
>     (select b*1 as bb, c*1 as cc from B inner join C on b = c)
>     on a = bb
> order by 1, 2, 3;
+----+-----+-----+
| A  | BB  | CC  |
+----+-----+-----+
| 1  |     |     |
| 2  | 2   | 2   |
| 3  | 3   | 3   |
+----+-----+-----+
> -- can't pull because join condition references expression
> select a, bb, cc from
>     A right outer join
>     (select b*1 as bb, c*1 as cc from B inner join C on b = c)
>     on a = bb
> order by 1, 2, 3;
+----+-----+-----+
| A  | BB  | CC  |
+----+-----+-----+
|    | 4   | 4   |
| 2  | 2   | 2   |
| 3  | 3   | 3   |
+----+-----+-----+
> -- can pull
> select a, bb, cc from
>     A right outer join
>     (select b as bb, c*1 as cc from B inner join C on b = c)
>     on a = bb
> order by 1, 2, 3;
+----+-----+-----+
| A  | BB  | CC  |
+----+-----+-----+
|    | 4   | 4   |
| 2  | 2   | 2   |
| 3  | 3   | 3   |
+----+-----+-----+
> -- can pull RHS since only LHS generates nulls
> select aa, bb, cc, dd from
>     (select a as aa, b*1 as bb from A inner join B on a = b)
>     right outer join
>     (select c as cc, d*1 as dd from C inner join D on c = d)
>     on aa = cc
> order by 1, 2, 3, 4;
+-----+-----+-----+-----+
| AA  | BB  | CC  | DD  |
+-----+-----+-----+-----+
|     |     | 4   | 4   |
| 3   | 3   | 3   | 3   |
+-----+-----+-----+-----+
> 
> -- can't pull because LHS generates nulls
> select aa, bb, c from
>     (select a*1 as aa, b*1 as bb from A inner join b on a = b)
>     right outer join C
>     on aa = c
> order by 1, 2, 3;
+-----+-----+----+
| AA  | BB  | C  |
+-----+-----+----+
|     |     | 4  |
| 2   | 2   | 2  |
| 3   | 3   | 3  |
+-----+-----+----+
> -- can pull even though join condition references expression
> select aa, bb, c from
>     (select a*1 as aa, b*1 as bb from A inner join b on a = b)
>     left outer join C
>     on aa = c
> order by 1, 2, 3;
+-----+-----+----+
| AA  | BB  | C  |
+-----+-----+----+
| 2   | 2   | 2  |
| 3   | 3   | 3  |
+-----+-----+----+
> -- can pull
> select aa, bb, c from
>     (select a as aa, b*1 as bb from A inner join b on a = b)
>     left outer join C
>     on aa = c
> order by 1, 2, 3;
+-----+-----+----+
| AA  | BB  | C  |
+-----+-----+----+
| 2   | 2   | 2  |
| 3   | 3   | 3  |
+-----+-----+----+
> -- can pull LHS because only RHS generates nulls
> select aa, bb, cc, dd from
>     (select a as aa, b*1 as bb from A inner join B on a = b)
>     left outer join
>     (select c as cc, d*1 as dd from C inner join D on c = d)
>     on aa = cc
> order by 1, 2, 3, 4;
+-----+-----+-----+-----+
| AA  | BB  | CC  | DD  |
+-----+-----+-----+-----+
| 2   | 2   |     |     |
| 3   | 3   | 3   | 3   |
+-----+-----+-----+-----+
> 
> -- can't pull because both LHS and RHS generate nulls
> select aa, bb, cc, dd from
>     (select a*1 as aa, b*1 as bb from A inner join B on a = b)
>     full outer join
>     (select c*1 as cc, d*1 as dd from C inner join D on c = d)
>     on aa = cc and bb = dd
> order by 1, 2, 3, 4;
+-----+-----+-----+-----+
| AA  | BB  | CC  | DD  |
+-----+-----+-----+-----+
|     |     | 4   | 4   |
| 2   | 2   |     |     |
| 3   | 3   | 3   | 3   |
+-----+-----+-----+-----+
> -- can pull even though join condition references expressions
> select aa, bb, cc, dd from
>     (select a*1 as aa, b*1 as bb from A inner join B on a = b)
>     inner join
>     (select c*1 as cc, d*1 as dd from C inner join D on c = d)
>     on aa = cc and bb = dd
> order by 1, 2, 3, 4;
+-----+-----+-----+-----+
| AA  | BB  | CC  | DD  |
+-----+-----+-----+-----+
| 3   | 3   | 3   | 3   |
+-----+-----+-----+-----+
> -- can pull
> select * from
>     (select a as aa, b*1 as bb from A inner join B on a = b)
>     inner join
>     (select c as cc, d*1 as dd from C inner join D on c = d)
>     on aa = cc 
> order by 1, 2, 3, 4;
+-----+-----+-----+-----+
| AA  | BB  | CC  | DD  |
+-----+-----+-----+-----+
| 3   | 3   | 3   | 3   |
+-----+-----+-----+-----+
> 
> ------------------------------------
> -- explain on the projection queries
> ------------------------------------
> !set outputformat csv
> -- can't pull because RHS generates nulls
> explain plan for
> select a, bb, cc from
>     A left outer join
>     (select b*1 as bb, c*1 as cc from B inner join C on b = c)
>     on a = bb;
'column0'
'FennelToIteratorConverter'
'  LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'    LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[1], expr#3=[*($t0, $t2)], expr#4=[*($t1, $t2)], BB=[$t3], CC=[$t4])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
> -- can pull even though join condition references expression
> explain plan for
> select a, bb, cc from
>     A right outer join
>     (select b*1 as bb, c*1 as cc from B inner join C on b = c)
>     on a = bb;
'column0'
'IterCalcRel(expr#0..3=[{inputs}], expr#4=[1], expr#5=[*($t0, $t4)], expr#6=[*($t1, $t4)], A=[$t3], BB=[$t5], CC=[$t6])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[2]], rightKeys=[[0]], joinType=[LEFT])'
'      FennelCalcRel(expr#0..1=[{inputs}], expr#2=[1], expr#3=[*($t0, $t2)], proj#0..1=[{exprs}], *($0, 1)=[$t3])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
> -- can pull
> explain plan for
> select a, bb, cc from
>     A right outer join
>     (select b as bb, c*1 as cc from B inner join C on b = c)
>     on a = bb;
'column0'
'IterCalcRel(expr#0..2=[{inputs}], expr#3=[1], expr#4=[*($t1, $t3)], A=[$t2], BB=[$t0], CC=[$t4])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
> -- can pull RHS since only LHS generates nulls
> explain plan for
> select aa, bb, cc, dd from
>     (select a as aa, b*1 as bb from A inner join B on a = b)
>     right outer join
>     (select c as cc, d*1 as dd from C inner join D on c = d)
>     on aa = cc;
'column0'
'IterCalcRel(expr#0..3=[{inputs}], expr#4=[1], expr#5=[*($t1, $t4)], AA=[$t2], BB=[$t3], CC=[$t0], DD=[$t5])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
'      FennelCalcRel(expr#0..1=[{inputs}], expr#2=[1], expr#3=[*($t1, $t2)], AA=[$t0], BB=[$t3])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
> 
> -- can't pull because LHS generates nulls
> explain plan for
> select aa, bb, c from
>     (select a*1 as aa, b*1 as bb from A inner join b on a = b)
>     right outer join C
>     on aa = c;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1, 2, 0]], outputRowType=[RecordType(INTEGER AA, INTEGER BB, INTEGER NOT NULL C) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'      FennelCalcRel(expr#0..1=[{inputs}], expr#2=[1], expr#3=[*($t0, $t2)], expr#4=[*($t1, $t2)], AA=[$t3], BB=[$t4])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
> -- can pull even though join condition references expression
> explain plan for
> select aa, bb, c from
>     (select a*1 as aa, b*1 as bb from A inner join b on a = b)
>     left outer join C
>     on aa = c;
'column0'
'IterCalcRel(expr#0..2=[{inputs}], expr#3=[1], expr#4=[*($t0, $t3)], expr#5=[*($t2, $t3)], AA=[$t4], BB=[$t5], C=[$t1])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'      FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL A, INTEGER C) NOT NULL])'
'        LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'          FennelCalcRel(expr#0=[{inputs}], expr#1=[1], expr#2=[*($t0, $t1)], A=[$t0], *($0, 1)=[$t2])'
'            LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
> -- can pull
> explain plan for
> select aa, bb, c from
>     (select a as aa, b*1 as bb from A inner join b on a = b)
>     left outer join C
>     on aa = c;
'column0'
'IterCalcRel(expr#0..2=[{inputs}], expr#3=[1], expr#4=[*($t2, $t3)], AA=[$t0], BB=[$t4], C=[$t1])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
> -- can pull LHS because only RHS generates nulls
> explain plan for
> select aa, bb, cc, dd from
>     (select a as aa, b*1 as bb from A inner join B on a = b)
>     left outer join
>     (select c as cc, d*1 as dd from C inner join D on c = d)
>     on aa = cc;
'column0'
'IterCalcRel(expr#0..3=[{inputs}], expr#4=[1], expr#5=[*($t1, $t4)], AA=[$t0], BB=[$t5], CC=[$t2], DD=[$t3])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
'      FennelCalcRel(expr#0..1=[{inputs}], expr#2=[1], expr#3=[*($t1, $t2)], CC=[$t0], DD=[$t3])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
> 
> -- can't pull because both LHS and RHS generate nulls
> explain plan for
> select aa, bb, cc, dd from
>     (select a*1 as aa, b*1 as bb from A inner join B on a = b)
>     full outer join
>     (select c*1 as cc, d*1 as dd from C inner join D on c = d)
>     on aa = cc and bb = dd;
'column0'
'FennelToIteratorConverter'
'  LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[0, 1]], joinType=[FULL])'
'    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[1], expr#3=[*($t0, $t2)], expr#4=[*($t1, $t2)], AA=[$t3], BB=[$t4])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
'    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[1], expr#3=[*($t0, $t2)], expr#4=[*($t1, $t2)], CC=[$t3], DD=[$t4])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
> -- can pull even though join condition references expressions
> explain plan for
> select aa, bb, cc, dd from
>     (select a*1 as aa, b*1 as bb from A inner join B on a = b)
>     inner join
>     (select c*1 as cc, d*1 as dd from C inner join D on c = d)
>     on aa = cc and bb = dd;
'column0'
'IterCalcRel(expr#0..5=[{inputs}], expr#6=[1], expr#7=[*($t1, $t6)], expr#8=[*($t4, $t6)], expr#9=[*($t2, $t6)], expr#10=[*($t0, $t6)], AA=[$t7], BB=[$t8], CC=[$t9], DD=[$t10])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[3, 1]], rightKeys=[[1, 0]], joinType=[INNER])'
'      FennelCalcRel(expr#0..2=[{inputs}], expr#3=[1], expr#4=[*($t0, $t3)], proj#0..2=[{exprs}], *($0, 1)=[$t4])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[1]], joinType=[INNER])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
'          FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER NOT NULL A, INTEGER NOT NULL C) NOT NULL])'
'            LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'              FennelCalcRel(expr#0=[{inputs}], expr#1=[1], expr#2=[*($t0, $t1)], A=[$t0], *($0, 1)=[$t2])'
'                LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'              FennelCalcRel(expr#0=[{inputs}], expr#1=[1], expr#2=[*($t0, $t1)], C=[$t0], *($0, 1)=[$t2])'
'                LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'      FennelCalcRel(expr#0=[{inputs}], expr#1=[1], expr#2=[*($t0, $t1)], B=[$t0], *($0, 1)=[$t2])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
> -- can pull
> explain plan for
> select aa, bb, cc, dd from
>     (select a as aa, b*1 as bb from A inner join B on a = b)
>     inner join
>     (select c as cc, d*1 as dd from C inner join D on c = d)
>     on aa = cc;
'column0'
'IterCalcRel(expr#0..3=[{inputs}], expr#4=[1], expr#5=[*($t3, $t4)], expr#6=[*($t2, $t4)], AA=[$t0], BB=[$t5], CC=[$t1], DD=[$t6])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D]])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
> 
> -- a simple example of why projects can't be pulled up if they're part of a
> -- null-generating input in an outer join; the two selects below should return
> -- different results
> !set outputformat table
> create table t1(a int not null);
> insert into t1 values (1), (2);
> create table t2(a int not null, b int);
> insert into t2 values (1, null);
> select * from t1 left outer join
>     (select a, coalesce(b, -99) from t2) as t2
>     on t1.a = t2.a;
+----+-----+---------+
| A  | A0  | EXPR$1  |
+----+-----+---------+
| 1  | 1   | -99     |
| 2  |     |         |
+----+-----+---------+
> select t1.a, t2.a, coalesce(t2.b, -99)
>     from t1 left outer join t2 on t1.a = t2.a;
+----+----+---------+
| A  | A  | EXPR$2  |
+----+----+---------+
| 1  | 1  | -99     |
| 2  |    | -99     |
+----+----+---------+
> 
> -- testcase to ensure that predicates are appropriately converted before being
> -- passed into metadata queries; in this particular case, the left outer join
> -- is converted into a right outer join because there's a filter on y; there's
> -- also a filter on x, but because x is null generating, that filter is not
> -- pushed down; as a result, the outer join becomes a right outer join and the
> -- columns returned from that outer join are returned in reverse order;
> -- therefore the filter on x needs to be adjusted accordingly before its
> -- passed into metadata queries on the new outer join node; otherwise, the
> -- metadata routines will try to manipulate a filter that compares an integer
> -- against a varchar column
> create table x(x0 int);
> create table y(y0 varchar(10), y1 int);
> create table z(z0 varchar(10), z1 int);
> !set outputformat csv
> explain plan for
> select distinct x0, y0, z0
>     from
>         y left outer join x on y1 = x0,
>         z
>     where
>         x0 = z1 and y1 = 1 and x0 > 0;
'column0'
'FennelToIteratorConverter'
'  LhxAggRel(groupCount=[3])'
'    FennelReshapeRel(projection=[[1, 0, 2]], outputRowType=[RecordType(INTEGER X0, VARCHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" Y0, VARCHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" Z0) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'        FennelReshapeRel(projection=[[0, 2]], filterOp=[COMP_GT], filterOrdinals=[[2]], filterTuple=[[0]], outputRowType=[RecordType(VARCHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" Y0, INTEGER X0) NOT NULL])'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'            LcsRowScanRel(table=[[LOCALDB, OJ, Y]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$Y$Y0, SYS$CLUSTERED_INDEX$Y$Y1]], residual columns=[[1]])'
'              FennelValuesRel(tuples=[[{ '[', 1, ']', 1 }]])'
'            LcsRowScanRel(table=[[LOCALDB, OJ, X]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$X$X0]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, Z]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$Z$Z0, SYS$CLUSTERED_INDEX$Z$Z1]])'
> 
> -- LER-2472 - cartesian product joins with outer joins -- ROJ needs to be
> -- converted to a LOJ for the cartesian product join to be valid
> explain plan for
>     select a, b from A right outer join B on a = 1;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER A, INTEGER NOT NULL B) NOT NULL])'
'    FennelCartesianProductRel(leftouterjoin=[true])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]], residual columns=[[1]])'
'        FennelValuesRel(tuples=[[{ '[', 1, ']', 1 }]])'
> !set outputformat table
> select a, b from A right outer join B on a = 1;
+----+----+
| A  | B  |
+----+----+
| 1  | 2  |
| 1  | 3  |
| 1  | 4  |
+----+----+
> 
> ------------------------
> -- removable outer joins
> ------------------------
> create table BUniq(k int, b int not null unique);
> insert into BUniq values (1, 2), (2, 3), (3, 4);
> 
> !set outputformat csv
> explain plan for
>     select A.* from A left outer join BUniq on a = b;
'column0'
'FennelToIteratorConverter'
'  LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A, SYS$CLUSTERED_INDEX$A$K]])'
> explain plan for
>     select A.* from A left outer join BUniq on b = a;
'column0'
'FennelToIteratorConverter'
'  LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A, SYS$CLUSTERED_INDEX$A$K]])'
> explain plan for
>     select A.* from BUniq right outer join A on a = b;
'column0'
'FennelToIteratorConverter'
'  LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A, SYS$CLUSTERED_INDEX$A$K]])'
> explain plan for
>     select a from (select a, b from A left outer join BUniq on a = b), C
>         where a = c;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL A) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
> -- two join keys
> explain plan for 
>     select A.* from A left outer join BUniq B on a = b and A.k = B.k;
'column0'
'FennelToIteratorConverter'
'  LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A, SYS$CLUSTERED_INDEX$A$K]])'
> -- multiple tables that can be removed
> explain plan for
>     select A.* from A left outer join Buniq B1 on A.a = B1.b
>         left outer join Buniq B2 on B2.b = B1.k;
'column0'
'FennelToIteratorConverter'
'  LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A, SYS$CLUSTERED_INDEX$A$K]])'
> 
> !set outputformat table
> select A.* from A left outer join BUniq on a = b order by a;
+----+----+
| K  | A  |
+----+----+
| 1  | 1  |
| 2  | 2  |
| 3  | 3  |
+----+----+
> select A.* from A left outer join BUniq on b = a order by a;
+----+----+
| K  | A  |
+----+----+
| 1  | 1  |
| 2  | 2  |
| 3  | 3  |
+----+----+
> select A.* from BUniq right outer join A on a = b order by a;
+----+----+
| K  | A  |
+----+----+
| 1  | 1  |
| 2  | 2  |
| 3  | 3  |
+----+----+
> select a from (select a, b from A left outer join BUniq on a = b), C
>     where a = c order by a;
+----+
| A  |
+----+
| 2  |
| 3  |
+----+
> select A.* from A left outer join BUniq B on a = b and A.k = B.k order by a;
+----+----+
| K  | A  |
+----+----+
| 1  | 1  |
| 2  | 2  |
| 3  | 3  |
+----+----+
> select A.* from A left outer join Buniq B1 on A.a = B1.b
>     left outer join Buniq B2 on B2.b = B1.k
>     order by a;
+----+----+
| K  | A  |
+----+----+
| 1  | 1  |
| 2  | 2  |
| 3  | 3  |
+----+----+
> 
> ----------------------------
> -- non-removable outer joins
> ----------------------------
> !set outputformat csv
> -- full outer join
> explain plan for
>     select A.* from A full outer join BUniq on a = b;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1]], outputRowType=[RecordType(INTEGER K, INTEGER A) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[FULL])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A, SYS$CLUSTERED_INDEX$A$K]])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, BUNIQ]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$BUNIQ$B]])'
> -- join keys not unique
> explain plan for
>     select A.* from A left outer join B on a = b;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1]], outputRowType=[RecordType(INTEGER K, INTEGER NOT NULL A) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[LEFT])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A, SYS$CLUSTERED_INDEX$A$K]])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B]])'
> explain plan for
>     select A.* from A left outer join B on a = b and A.k = B.k;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1]], outputRowType=[RecordType(INTEGER K, INTEGER NOT NULL A) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1, 0]], rightKeys=[[1, 0]], joinType=[LEFT])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A, SYS$CLUSTERED_INDEX$A$K]])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B, SYS$CLUSTERED_INDEX$B$K]])'
> -- null generating factor projected in projection list
> explain plan for
>     select * from A left outer join BUniq on a = b;
'column0'
'FennelToIteratorConverter'
'  LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[LEFT])'
'    LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A, SYS$CLUSTERED_INDEX$A$K]])'
'    LcsRowScanRel(table=[[LOCALDB, OJ, BUNIQ]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$BUNIQ$B, SYS$CLUSTERED_INDEX$BUNIQ$K]])'
> explain plan for
>     select A.*, BUniq.k from A left outer join BUniq on a = b;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1, 2]], outputRowType=[RecordType(INTEGER K, INTEGER NOT NULL A, INTEGER K0) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[LEFT])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A, SYS$CLUSTERED_INDEX$A$K]])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, BUNIQ]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$BUNIQ$B, SYS$CLUSTERED_INDEX$BUNIQ$K]])'
> -- null generating factor referenced in a join with another table
> explain plan for
>     select a from (select a, b from A left outer join BUniq on a = b), C
>         where b = c;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL A) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, BUNIQ]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$BUNIQ$B]])'
'      FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL C, INTEGER CAST($0):INTEGER) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
> explain plan for
>     select a from
>         (select a, Buniq.k from A left outer join BUniq on a = b) X, C
>         where X.k = c;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER NOT NULL A) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'      FennelReshapeRel(projection=[[0, 1]], outputRowType=[RecordType(INTEGER NOT NULL A, INTEGER K) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[1]], joinType=[LEFT])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, BUNIQ]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$BUNIQ$B, SYS$CLUSTERED_INDEX$BUNIQ$K]])'
'      FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL C, INTEGER CAST($0):INTEGER) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C]])'
> -- non-equijoin filter
> explain plan for
>     select A.* from A left outer join BUniq on true;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1]], outputRowType=[RecordType(INTEGER K, INTEGER NOT NULL A) NOT NULL])'
'    FennelCartesianProductRel(leftouterjoin=[true])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A, SYS$CLUSTERED_INDEX$A$K]])'
'      LcsRowScanRel(table=[[LOCALDB, OJ, BUNIQ]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$BUNIQ$K]])'
> explain plan for
>     select A.* from A left outer join BUniq on a > 1;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1]], outputRowType=[RecordType(INTEGER K, INTEGER NOT NULL A) NOT NULL])'
'    LhxJoinRel(leftKeys=[[2]], rightKeys=[[1]], joinType=[LEFT])'
'      FennelCalcRel(expr#0..1=[{inputs}], expr#2=[1], expr#3=[>($t1, $t2)], proj#0..1=[{exprs}], >($1, 1)=[$t3])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A, SYS$CLUSTERED_INDEX$A$K]])'
'      FennelCalcRel(expr#0=[{inputs}], expr#1=[true], proj#0..1=[{exprs}])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, BUNIQ]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$BUNIQ$K]])'
> -- non-input references
> explain plan for
>     select A.* from A left outer join B on a = 1;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1]], outputRowType=[RecordType(INTEGER K, INTEGER NOT NULL A) NOT NULL])'
'    LhxJoinRel(leftKeys=[[2]], rightKeys=[[1]], joinType=[LEFT])'
'      FennelCalcRel(expr#0..1=[{inputs}], expr#2=[1], expr#3=[=($t1, $t2)], proj#0..1=[{exprs}], =($1, 1)=[$t3])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A, SYS$CLUSTERED_INDEX$A$K]])'
'      FennelCalcRel(expr#0=[{inputs}], expr#1=[true], proj#0..1=[{exprs}])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$K]])'
> explain plan for
>     select A.* from A left outer join BUniq on a + 1 = b + 1;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1]], outputRowType=[RecordType(INTEGER K, INTEGER NOT NULL A) NOT NULL])'
'    LhxJoinRel(leftKeys=[[2]], rightKeys=[[1]], joinType=[LEFT])'
'      FennelCalcRel(expr#0..1=[{inputs}], expr#2=[1], expr#3=[+($t1, $t2)], proj#0..1=[{exprs}], +($1, 1)=[$t3])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A, SYS$CLUSTERED_INDEX$A$K]])'
'      FennelCalcRel(expr#0=[{inputs}], expr#1=[1], expr#2=[+($t0, $t1)], B=[$t0], +($0, 1)=[$t2])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, BUNIQ]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$BUNIQ$B]])'
> -- no keys from null generating factor
> explain plan for
>     select A.* from A left outer join B on a = A.k;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1]], outputRowType=[RecordType(INTEGER K, INTEGER NOT NULL A) NOT NULL])'
'    LhxJoinRel(leftKeys=[[2]], rightKeys=[[1]], joinType=[LEFT])'
'      FennelCalcRel(expr#0..1=[{inputs}], expr#2=[=($t1, $t0)], proj#0..2=[{exprs}])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A, SYS$CLUSTERED_INDEX$A$K]])'
'      FennelCalcRel(expr#0=[{inputs}], expr#1=[true], proj#0..1=[{exprs}])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$B$K]])'
> 
> -------------------
> -- misc outer joins
> -------------------
> -- LER-4650 -- outer join condition doesn't reference the null-generating
> -- table
> !set outputformat csv
> explain plan for
>     select * from
>         (select * from A, B, C where a = b) X
>         left outer join D on X.a = X.c;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1, 4, 5, 2, 3, 7, 8]], outputRowType=[RecordType(INTEGER K, INTEGER NOT NULL A, INTEGER K0, INTEGER NOT NULL B, INTEGER K1, INTEGER NOT NULL C, INTEGER K, INTEGER D) NOT NULL])'
'    LhxJoinRel(leftKeys=[[6]], rightKeys=[[2]], joinType=[LEFT])'
'      FennelCalcRel(expr#0..5=[{inputs}], expr#6=[=($t1, $t3)], proj#0..6=[{exprs}])'
'        LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'          FennelCartesianProductRel(leftouterjoin=[false])'
'            LcsRowScanRel(table=[[LOCALDB, OJ, A]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$A$A, SYS$CLUSTERED_INDEX$A$K]])'
'            LcsRowScanRel(table=[[LOCALDB, OJ, C]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$C$C, SYS$CLUSTERED_INDEX$C$K]])'
'          LcsRowScanRel(table=[[LOCALDB, OJ, B]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$B$B, SYS$CLUSTERED_INDEX$B$K]])'
'      FennelCalcRel(expr#0..1=[{inputs}], expr#2=[true], proj#0..2=[{exprs}])'
'        LcsRowScanRel(table=[[LOCALDB, OJ, D]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$D$D, SYS$CLUSTERED_INDEX$D$K]])'
> !set outputformat table
> select * from
>     (select * from A, B, C where a = b) X
>     left outer join D on X.a = X.c
> order by d, c;
+----+----+-----+----+-----+----+-----+----+
| K  | A  | K0  | B  | K1  | C  | K2  | D  |
+----+----+-----+----+-----+----+-----+----+
| 3  | 3  | 2   | 3  | 1   | 2  |     |    |
| 2  | 2  | 1   | 2  | 2   | 3  |     |    |
| 3  | 3  | 2   | 3  | 3   | 4  |     |    |
| 2  | 2  | 1   | 2  | 3   | 4  |     |    |
| 2  | 2  | 1   | 2  | 1   | 2  | 1   | 3  |
| 3  | 3  | 2   | 3  | 2   | 3  | 1   | 3  |
| 2  | 2  | 1   | 2  | 1   | 2  | 2   | 4  |
| 3  | 3  | 2   | 3  | 2   | 3  | 2   | 4  |
| 2  | 2  | 1   | 2  | 1   | 2  | 3   | 5  |
| 3  | 3  | 2   | 3  | 2   | 3  | 3   | 5  |
+----+----+-----+----+-----+----+-----+----+
> 
> !quit
