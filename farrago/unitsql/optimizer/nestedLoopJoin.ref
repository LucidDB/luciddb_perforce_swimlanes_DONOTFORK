> -- $Id$
> 
> -- Test nested loop joins
> 
> create schema nlj;
> set schema 'nlj';
> 
> alter session implementation set jar sys_boot.sys_boot.luciddb_plugin;
> 
> create table convRates(
>     fromCurrency varchar(5) not null,
>     toCurrency varchar(5) not null,
>     rate float,
>     fromDate date,
>     toDate date not null);
> create table xacts(
>     xid int not null,
>     amount decimal(10,2) not null,
>     currency char(3),
>     xactDate date);
> create view v as 
>     select xid, xactDate, currency, amount as origAmount,
>             toCurrency, cast(amount * rate as decimal(10,2)) as convertedAmount
>         from xacts left outer join convRates
>         on currency = fromCurrency and xactDate between fromDate and toDate;
> 
> insert into convRates values('USD', 'EUR', .76, null, date '2006-12-31');
> insert into convRates values('USD', 'EUR', .7483, date '2007-1-1',
>     date '2007-3-31');
> insert into convRates values('USD', 'EUR', .75, date '2007-4-1',
>     date '2007-6-30');
> insert into convRates values('USD', 'GBP', .5059, date '2007-1-1',
>     date '2007-3-31');
> insert into convRates values('USD', 'GBP', .5, date '2007-4-1',
>     date '2007-6-30');
> insert into convRates values('EUR', 'GBP', .6762, date '2007-1-1',
>     date '2007-3-31');
> insert into convRates values('EUR', 'GBP', .68, date '2007-4-1',
>     date '2007-6-30');
> insert into convRates values('EUR', 'JPY', 165.12, date '2007-1-1',
>     date '2007-3-31');
> insert into convRates values('EUR', 'JPY', 165, date '2007-4-1',
>     date '2007-6-30');
> insert into convRates values('GBP', 'JPY', 244.22, date '2007-1-1',
>     date '2007-3-31');
> insert into convRates values('GBP', 'JPY', 244, date '2007-4-1',
>     date '2007-6-30');
> insert into convRates values('GBP', 'USD', 1.9766, date '2007-1-1',
>     date '2007-3-31');
> insert into convRates values('GBP', 'USD', 2, date '2007-4-1',
>     date '2007-6-30');
> insert into convRates values('JPY', 'USD', .008095, date '2007-1-1',
>     date '2007-3-31');
> insert into convRates values('JPY', 'USD', .0081, date '2007-4-1',
>     date '2007-6-30');
> insert into convRates values('JPY', 'EUR', .006056, date '2007-1-1',
>     date '2007-3-31');
> insert into convRates values('JPY', 'EUR', .0061, date '2007-4-1',
>     date '2007-6-30');
> 
> insert into xacts values(1, 100, 'USD', date '2006-12-31');
> insert into xacts values(2, 200, 'EUR', date '2007-1-1');
> insert into xacts values(3, 300, 'GBP', date '2007-2-1');
> insert into xacts values(4, 50000, 'JPY', date '2007-3-31');
> insert into xacts values(5, 500, 'USD', date '2007-4-1');
> insert into xacts values(6, 600, 'EUR', date '2007-5-1');
> insert into xacts values(7, 700, 'GBP', date '2007-6-30');
> insert into xacts values(8, 80000, 'JPY', date '2007-7-1');
> insert into xacts values(9, 900, 'USD', null);
> insert into xacts values(10, 1000, null, date '2007-3-1');
> insert into xacts values(11, 1100, null, null);
> 
> ---------------------------
> -- first run with Java calc
> ---------------------------
> alter system set "calcVirtualMachine" = 'CALCVM_JAVA';
> 
> -- Only index lookup needed
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, toDate,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and xactDate >= fromDate
>     order by currency, toCurrency, xactDate, toDate;
+------+-------------+-----------+-------------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  |   TODATE    | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+-------------+------------------+
| 11   |             |           | 1100.00     |             |             |                  |
| 10   | 2007-03-01  |           | 1000.00     |             |             |                  |
| 2    | 2007-01-01  | EUR       | 200.00      | GBP         | 2007-03-31  | 135.24           |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 2007-03-31  | 405.72           |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 2007-06-30  | 408.00           |
| 2    | 2007-01-01  | EUR       | 200.00      | JPY         | 2007-03-31  | 33024.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 2007-03-31  | 99072.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 2007-06-30  | 99000.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | JPY         | 2007-03-31  | 73266.00         |
| 7    | 2007-06-30  | GBP       | 700.00      | JPY         | 2007-03-31  | 170954.00        |
| 7    | 2007-06-30  | GBP       | 700.00      | JPY         | 2007-06-30  | 170800.00        |
| 3    | 2007-02-01  | GBP       | 300.00      | USD         | 2007-03-31  | 592.98           |
| 7    | 2007-06-30  | GBP       | 700.00      | USD         | 2007-03-31  | 1383.62          |
| 7    | 2007-06-30  | GBP       | 700.00      | USD         | 2007-06-30  | 1400.00          |
| 4    | 2007-03-31  | JPY       | 50000.00    | EUR         | 2007-03-31  | 302.80           |
| 8    | 2007-07-01  | JPY       | 80000.00    | EUR         | 2007-03-31  | 484.48           |
| 8    | 2007-07-01  | JPY       | 80000.00    | EUR         | 2007-06-30  | 488.00           |
| 4    | 2007-03-31  | JPY       | 50000.00    | USD         | 2007-03-31  | 404.75           |
| 8    | 2007-07-01  | JPY       | 80000.00    | USD         | 2007-03-31  | 647.60           |
| 8    | 2007-07-01  | JPY       | 80000.00    | USD         | 2007-06-30  | 648.00           |
| 9    |             | USD       | 900.00      |             |             |                  |
| 1    | 2006-12-31  | USD       | 100.00      |             |             |                  |
| 5    | 2007-04-01  | USD       | 500.00      | EUR         | 2007-03-31  | 374.15           |
| 5    | 2007-04-01  | USD       | 500.00      | EUR         | 2007-06-30  | 375.00           |
| 5    | 2007-04-01  | USD       | 500.00      | GBP         | 2007-03-31  | 252.95           |
| 5    | 2007-04-01  | USD       | 500.00      | GBP         | 2007-06-30  | 250.00           |
+------+-------------+-----------+-------------+-------------+-------------+------------------+
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, toDate,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on xactDate > fromDate and currency = fromCurrency
>     order by currency, toCurrency, xactDate, toDate;
+------+-------------+-----------+-------------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  |   TODATE    | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+-------------+------------------+
| 11   |             |           | 1100.00     |             |             |                  |
| 10   | 2007-03-01  |           | 1000.00     |             |             |                  |
| 2    | 2007-01-01  | EUR       | 200.00      |             |             |                  |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 2007-03-31  | 405.72           |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 2007-06-30  | 408.00           |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 2007-03-31  | 99072.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 2007-06-30  | 99000.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | JPY         | 2007-03-31  | 73266.00         |
| 7    | 2007-06-30  | GBP       | 700.00      | JPY         | 2007-03-31  | 170954.00        |
| 7    | 2007-06-30  | GBP       | 700.00      | JPY         | 2007-06-30  | 170800.00        |
| 3    | 2007-02-01  | GBP       | 300.00      | USD         | 2007-03-31  | 592.98           |
| 7    | 2007-06-30  | GBP       | 700.00      | USD         | 2007-03-31  | 1383.62          |
| 7    | 2007-06-30  | GBP       | 700.00      | USD         | 2007-06-30  | 1400.00          |
| 4    | 2007-03-31  | JPY       | 50000.00    | EUR         | 2007-03-31  | 302.80           |
| 8    | 2007-07-01  | JPY       | 80000.00    | EUR         | 2007-03-31  | 484.48           |
| 8    | 2007-07-01  | JPY       | 80000.00    | EUR         | 2007-06-30  | 488.00           |
| 4    | 2007-03-31  | JPY       | 50000.00    | USD         | 2007-03-31  | 404.75           |
| 8    | 2007-07-01  | JPY       | 80000.00    | USD         | 2007-03-31  | 647.60           |
| 8    | 2007-07-01  | JPY       | 80000.00    | USD         | 2007-06-30  | 648.00           |
| 9    |             | USD       | 900.00      |             |             |                  |
| 1    | 2006-12-31  | USD       | 100.00      |             |             |                  |
| 5    | 2007-04-01  | USD       | 500.00      | EUR         | 2007-03-31  | 374.15           |
| 5    | 2007-04-01  | USD       | 500.00      | GBP         | 2007-03-31  | 252.95           |
+------+-------------+-----------+-------------+-------------+-------------+------------------+
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, fromDate,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on fromCurrency = currency and toDate >= xactDate
>     order by currency, toCurrency, xactDate, fromDate;
+------+-------------+-----------+-------------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  |  FROMDATE   | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+-------------+------------------+
| 11   |             |           | 1100.00     |             |             |                  |
| 10   | 2007-03-01  |           | 1000.00     |             |             |                  |
| 2    | 2007-01-01  | EUR       | 200.00      | GBP         | 2007-01-01  | 135.24           |
| 2    | 2007-01-01  | EUR       | 200.00      | GBP         | 2007-04-01  | 136.00           |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 2007-04-01  | 408.00           |
| 2    | 2007-01-01  | EUR       | 200.00      | JPY         | 2007-01-01  | 33024.00         |
| 2    | 2007-01-01  | EUR       | 200.00      | JPY         | 2007-04-01  | 33000.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 2007-04-01  | 99000.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | JPY         | 2007-01-01  | 73266.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | JPY         | 2007-04-01  | 73200.00         |
| 7    | 2007-06-30  | GBP       | 700.00      | JPY         | 2007-04-01  | 170800.00        |
| 3    | 2007-02-01  | GBP       | 300.00      | USD         | 2007-01-01  | 592.98           |
| 3    | 2007-02-01  | GBP       | 300.00      | USD         | 2007-04-01  | 600.00           |
| 7    | 2007-06-30  | GBP       | 700.00      | USD         | 2007-04-01  | 1400.00          |
| 8    | 2007-07-01  | JPY       | 80000.00    |             |             |                  |
| 4    | 2007-03-31  | JPY       | 50000.00    | EUR         | 2007-01-01  | 302.80           |
| 4    | 2007-03-31  | JPY       | 50000.00    | EUR         | 2007-04-01  | 305.00           |
| 4    | 2007-03-31  | JPY       | 50000.00    | USD         | 2007-01-01  | 404.75           |
| 4    | 2007-03-31  | JPY       | 50000.00    | USD         | 2007-04-01  | 405.00           |
| 9    |             | USD       | 900.00      |             |             |                  |
| 1    | 2006-12-31  | USD       | 100.00      | EUR         |             | 76.00            |
| 1    | 2006-12-31  | USD       | 100.00      | EUR         | 2007-01-01  | 74.83            |
| 1    | 2006-12-31  | USD       | 100.00      | EUR         | 2007-04-01  | 75.00            |
| 5    | 2007-04-01  | USD       | 500.00      | EUR         | 2007-04-01  | 375.00           |
| 1    | 2006-12-31  | USD       | 100.00      | GBP         | 2007-01-01  | 50.59            |
| 1    | 2006-12-31  | USD       | 100.00      | GBP         | 2007-04-01  | 50.00            |
| 5    | 2007-04-01  | USD       | 500.00      | GBP         | 2007-04-01  | 250.00           |
+------+-------------+-----------+-------------+-------------+-------------+------------------+
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, fromDate,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on toDate > xactDate and fromCurrency = currency
>     order by currency, toCurrency, xactDate, fromDate;
+------+-------------+-----------+-------------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  |  FROMDATE   | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+-------------+------------------+
| 11   |             |           | 1100.00     |             |             |                  |
| 10   | 2007-03-01  |           | 1000.00     |             |             |                  |
| 2    | 2007-01-01  | EUR       | 200.00      | GBP         | 2007-01-01  | 135.24           |
| 2    | 2007-01-01  | EUR       | 200.00      | GBP         | 2007-04-01  | 136.00           |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 2007-04-01  | 408.00           |
| 2    | 2007-01-01  | EUR       | 200.00      | JPY         | 2007-01-01  | 33024.00         |
| 2    | 2007-01-01  | EUR       | 200.00      | JPY         | 2007-04-01  | 33000.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 2007-04-01  | 99000.00         |
| 7    | 2007-06-30  | GBP       | 700.00      |             |             |                  |
| 3    | 2007-02-01  | GBP       | 300.00      | JPY         | 2007-01-01  | 73266.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | JPY         | 2007-04-01  | 73200.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | USD         | 2007-01-01  | 592.98           |
| 3    | 2007-02-01  | GBP       | 300.00      | USD         | 2007-04-01  | 600.00           |
| 8    | 2007-07-01  | JPY       | 80000.00    |             |             |                  |
| 4    | 2007-03-31  | JPY       | 50000.00    | EUR         | 2007-04-01  | 305.00           |
| 4    | 2007-03-31  | JPY       | 50000.00    | USD         | 2007-04-01  | 405.00           |
| 9    |             | USD       | 900.00      |             |             |                  |
| 1    | 2006-12-31  | USD       | 100.00      | EUR         | 2007-01-01  | 74.83            |
| 1    | 2006-12-31  | USD       | 100.00      | EUR         | 2007-04-01  | 75.00            |
| 5    | 2007-04-01  | USD       | 500.00      | EUR         | 2007-04-01  | 375.00           |
| 1    | 2006-12-31  | USD       | 100.00      | GBP         | 2007-01-01  | 50.59            |
| 1    | 2006-12-31  | USD       | 100.00      | GBP         | 2007-04-01  | 50.00            |
| 5    | 2007-04-01  | USD       | 500.00      | GBP         | 2007-04-01  | 250.00           |
+------+-------------+-----------+-------------+-------------+-------------+------------------+
> 
> -- Index lookup + reshape
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and xactDate between fromDate and toDate
>     order by currency, toCurrency, xactDate;
+------+-------------+-----------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+------------------+
| 11   |             |           | 1100.00     |             |                  |
| 10   | 2007-03-01  |           | 1000.00     |             |                  |
| 2    | 2007-01-01  | EUR       | 200.00      | GBP         | 135.24           |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 408.00           |
| 2    | 2007-01-01  | EUR       | 200.00      | JPY         | 33024.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 99000.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | JPY         | 73266.00         |
| 7    | 2007-06-30  | GBP       | 700.00      | JPY         | 170800.00        |
| 3    | 2007-02-01  | GBP       | 300.00      | USD         | 592.98           |
| 7    | 2007-06-30  | GBP       | 700.00      | USD         | 1400.00          |
| 8    | 2007-07-01  | JPY       | 80000.00    |             |                  |
| 4    | 2007-03-31  | JPY       | 50000.00    | EUR         | 302.80           |
| 4    | 2007-03-31  | JPY       | 50000.00    | USD         | 404.75           |
| 9    |             | USD       | 900.00      |             |                  |
| 1    | 2006-12-31  | USD       | 100.00      |             |                  |
| 5    | 2007-04-01  | USD       | 500.00      | EUR         | 375.00           |
| 5    | 2007-04-01  | USD       | 500.00      | GBP         | 250.00           |
+------+-------------+-----------+-------------+-------------+------------------+
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, 
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and fromDate < xactDate and toDate > xactDate
>     order by currency, toCurrency, xactDate;
+------+-------------+-----------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+------------------+
| 11   |             |           | 1100.00     |             |                  |
| 10   | 2007-03-01  |           | 1000.00     |             |                  |
| 2    | 2007-01-01  | EUR       | 200.00      |             |                  |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 408.00           |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 99000.00         |
| 7    | 2007-06-30  | GBP       | 700.00      |             |                  |
| 3    | 2007-02-01  | GBP       | 300.00      | JPY         | 73266.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | USD         | 592.98           |
| 4    | 2007-03-31  | JPY       | 50000.00    |             |                  |
| 8    | 2007-07-01  | JPY       | 80000.00    |             |                  |
| 9    |             | USD       | 900.00      |             |                  |
| 1    | 2006-12-31  | USD       | 100.00      |             |                  |
| 5    | 2007-04-01  | USD       | 500.00      |             |                  |
+------+-------------+-----------+-------------+-------------+------------------+
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and xactDate <= toDate and xactDate >= fromDate
>     order by currency, toCurrency, xactDate;
+------+-------------+-----------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+------------------+
| 11   |             |           | 1100.00     |             |                  |
| 10   | 2007-03-01  |           | 1000.00     |             |                  |
| 2    | 2007-01-01  | EUR       | 200.00      | GBP         | 135.24           |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 408.00           |
| 2    | 2007-01-01  | EUR       | 200.00      | JPY         | 33024.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 99000.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | JPY         | 73266.00         |
| 7    | 2007-06-30  | GBP       | 700.00      | JPY         | 170800.00        |
| 3    | 2007-02-01  | GBP       | 300.00      | USD         | 592.98           |
| 7    | 2007-06-30  | GBP       | 700.00      | USD         | 1400.00          |
| 8    | 2007-07-01  | JPY       | 80000.00    |             |                  |
| 4    | 2007-03-31  | JPY       | 50000.00    | EUR         | 302.80           |
| 4    | 2007-03-31  | JPY       | 50000.00    | USD         | 404.75           |
| 9    |             | USD       | 900.00      |             |                  |
| 1    | 2006-12-31  | USD       | 100.00      |             |                  |
| 5    | 2007-04-01  | USD       | 500.00      | EUR         | 375.00           |
| 5    | 2007-04-01  | USD       | 500.00      | GBP         | 250.00           |
+------+-------------+-----------+-------------+-------------+------------------+
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and toDate > xactDate and fromDate < xactDate
>     order by currency, toCurrency, xactDate;
+------+-------------+-----------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+------------------+
| 11   |             |           | 1100.00     |             |                  |
| 10   | 2007-03-01  |           | 1000.00     |             |                  |
| 2    | 2007-01-01  | EUR       | 200.00      |             |                  |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 408.00           |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 99000.00         |
| 7    | 2007-06-30  | GBP       | 700.00      |             |                  |
| 3    | 2007-02-01  | GBP       | 300.00      | JPY         | 73266.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | USD         | 592.98           |
| 4    | 2007-03-31  | JPY       | 50000.00    |             |                  |
| 8    | 2007-07-01  | JPY       | 80000.00    |             |                  |
| 9    |             | USD       | 900.00      |             |                  |
| 1    | 2006-12-31  | USD       | 100.00      |             |                  |
| 5    | 2007-04-01  | USD       | 500.00      |             |                  |
+------+-------------+-----------+-------------+-------------+------------------+
> 
> -- Index lookup + calc
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, toDate,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on trim(currency) = trim(fromCurrency) and xactDate >= fromDate
>     order by currency, toCurrency, xactDate, toDate;
+------+-------------+-----------+-------------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  |   TODATE    | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+-------------+------------------+
| 11   |             |           | 1100.00     |             |             |                  |
| 10   | 2007-03-01  |           | 1000.00     |             |             |                  |
| 2    | 2007-01-01  | EUR       | 200.00      | GBP         | 2007-03-31  | 135.24           |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 2007-03-31  | 405.72           |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 2007-06-30  | 408.00           |
| 2    | 2007-01-01  | EUR       | 200.00      | JPY         | 2007-03-31  | 33024.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 2007-03-31  | 99072.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 2007-06-30  | 99000.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | JPY         | 2007-03-31  | 73266.00         |
| 7    | 2007-06-30  | GBP       | 700.00      | JPY         | 2007-03-31  | 170954.00        |
| 7    | 2007-06-30  | GBP       | 700.00      | JPY         | 2007-06-30  | 170800.00        |
| 3    | 2007-02-01  | GBP       | 300.00      | USD         | 2007-03-31  | 592.98           |
| 7    | 2007-06-30  | GBP       | 700.00      | USD         | 2007-03-31  | 1383.62          |
| 7    | 2007-06-30  | GBP       | 700.00      | USD         | 2007-06-30  | 1400.00          |
| 4    | 2007-03-31  | JPY       | 50000.00    | EUR         | 2007-03-31  | 302.80           |
| 8    | 2007-07-01  | JPY       | 80000.00    | EUR         | 2007-03-31  | 484.48           |
| 8    | 2007-07-01  | JPY       | 80000.00    | EUR         | 2007-06-30  | 488.00           |
| 4    | 2007-03-31  | JPY       | 50000.00    | USD         | 2007-03-31  | 404.75           |
| 8    | 2007-07-01  | JPY       | 80000.00    | USD         | 2007-03-31  | 647.60           |
| 8    | 2007-07-01  | JPY       | 80000.00    | USD         | 2007-06-30  | 648.00           |
| 9    |             | USD       | 900.00      |             |             |                  |
| 1    | 2006-12-31  | USD       | 100.00      |             |             |                  |
| 5    | 2007-04-01  | USD       | 500.00      | EUR         | 2007-03-31  | 374.15           |
| 5    | 2007-04-01  | USD       | 500.00      | EUR         | 2007-06-30  | 375.00           |
| 5    | 2007-04-01  | USD       | 500.00      | GBP         | 2007-03-31  | 252.95           |
| 5    | 2007-04-01  | USD       | 500.00      | GBP         | 2007-06-30  | 250.00           |
+------+-------------+-----------+-------------+-------------+-------------+------------------+
> 
> -- Index lookup + reshape + calc
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on xactDate between fromDate and toDate and
>         trim(currency) = trim(fromCurrency)
>     order by currency, toCurrency, xactDate;
+------+-------------+-----------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+------------------+
| 11   |             |           | 1100.00     |             |                  |
| 10   | 2007-03-01  |           | 1000.00     |             |                  |
| 2    | 2007-01-01  | EUR       | 200.00      | GBP         | 135.24           |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 408.00           |
| 2    | 2007-01-01  | EUR       | 200.00      | JPY         | 33024.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 99000.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | JPY         | 73266.00         |
| 7    | 2007-06-30  | GBP       | 700.00      | JPY         | 170800.00        |
| 3    | 2007-02-01  | GBP       | 300.00      | USD         | 592.98           |
| 7    | 2007-06-30  | GBP       | 700.00      | USD         | 1400.00          |
| 8    | 2007-07-01  | JPY       | 80000.00    |             |                  |
| 4    | 2007-03-31  | JPY       | 50000.00    | EUR         | 302.80           |
| 4    | 2007-03-31  | JPY       | 50000.00    | USD         | 404.75           |
| 9    |             | USD       | 900.00      |             |                  |
| 1    | 2006-12-31  | USD       | 100.00      |             |                  |
| 5    | 2007-04-01  | USD       | 500.00      | EUR         | 375.00           |
| 5    | 2007-04-01  | USD       | 500.00      | GBP         | 250.00           |
+------+-------------+-----------+-------------+-------------+------------------+
> -- rerun the query
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on xactDate between fromDate and toDate and
>         trim(currency) = trim(fromCurrency)
>     order by currency, toCurrency, xactDate;
+------+-------------+-----------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+------------------+
| 11   |             |           | 1100.00     |             |                  |
| 10   | 2007-03-01  |           | 1000.00     |             |                  |
| 2    | 2007-01-01  | EUR       | 200.00      | GBP         | 135.24           |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 408.00           |
| 2    | 2007-01-01  | EUR       | 200.00      | JPY         | 33024.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 99000.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | JPY         | 73266.00         |
| 7    | 2007-06-30  | GBP       | 700.00      | JPY         | 170800.00        |
| 3    | 2007-02-01  | GBP       | 300.00      | USD         | 592.98           |
| 7    | 2007-06-30  | GBP       | 700.00      | USD         | 1400.00          |
| 8    | 2007-07-01  | JPY       | 80000.00    |             |                  |
| 4    | 2007-03-31  | JPY       | 50000.00    | EUR         | 302.80           |
| 4    | 2007-03-31  | JPY       | 50000.00    | USD         | 404.75           |
| 9    |             | USD       | 900.00      |             |                  |
| 1    | 2006-12-31  | USD       | 100.00      |             |                  |
| 5    | 2007-04-01  | USD       | 500.00      | EUR         | 375.00           |
| 5    | 2007-04-01  | USD       | 500.00      | GBP         | 250.00           |
+------+-------------+-----------+-------------+-------------+------------------+
> 
> -- Calc only
> select xid, xactDate, currency, amount as origAmount,
>         fromCurrency, toCurrency, fromDate, toDate,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts, convRates
>     where currency in (fromCurrency, toCurrency)
>     order by currency, fromCurrency, toCurrency, xactDate, fromDate, toDate;
+------+-------------+-----------+-------------+---------------+-------------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | FROMCURRENCY  | TOCURRENCY  |  FROMDATE   |   TODATE    | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+---------------+-------------+-------------+-------------+------------------+
| 2    | 2007-01-01  | EUR       | 200.00      | EUR           | GBP         | 2007-01-01  | 2007-03-31  | 135.24           |
| 2    | 2007-01-01  | EUR       | 200.00      | EUR           | GBP         | 2007-04-01  | 2007-06-30  | 136.00           |
| 6    | 2007-05-01  | EUR       | 600.00      | EUR           | GBP         | 2007-01-01  | 2007-03-31  | 405.72           |
| 6    | 2007-05-01  | EUR       | 600.00      | EUR           | GBP         | 2007-04-01  | 2007-06-30  | 408.00           |
| 2    | 2007-01-01  | EUR       | 200.00      | EUR           | JPY         | 2007-01-01  | 2007-03-31  | 33024.00         |
| 2    | 2007-01-01  | EUR       | 200.00      | EUR           | JPY         | 2007-04-01  | 2007-06-30  | 33000.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | EUR           | JPY         | 2007-01-01  | 2007-03-31  | 99072.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | EUR           | JPY         | 2007-04-01  | 2007-06-30  | 99000.00         |
| 2    | 2007-01-01  | EUR       | 200.00      | JPY           | EUR         | 2007-01-01  | 2007-03-31  | 1.21             |
| 2    | 2007-01-01  | EUR       | 200.00      | JPY           | EUR         | 2007-04-01  | 2007-06-30  | 1.22             |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY           | EUR         | 2007-01-01  | 2007-03-31  | 3.63             |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY           | EUR         | 2007-04-01  | 2007-06-30  | 3.66             |
| 2    | 2007-01-01  | EUR       | 200.00      | USD           | EUR         |             | 2006-12-31  | 152.00           |
| 2    | 2007-01-01  | EUR       | 200.00      | USD           | EUR         | 2007-01-01  | 2007-03-31  | 149.66           |
| 2    | 2007-01-01  | EUR       | 200.00      | USD           | EUR         | 2007-04-01  | 2007-06-30  | 150.00           |
| 6    | 2007-05-01  | EUR       | 600.00      | USD           | EUR         |             | 2006-12-31  | 456.00           |
| 6    | 2007-05-01  | EUR       | 600.00      | USD           | EUR         | 2007-01-01  | 2007-03-31  | 448.98           |
| 6    | 2007-05-01  | EUR       | 600.00      | USD           | EUR         | 2007-04-01  | 2007-06-30  | 450.00           |
| 3    | 2007-02-01  | GBP       | 300.00      | EUR           | GBP         | 2007-01-01  | 2007-03-31  | 202.86           |
| 3    | 2007-02-01  | GBP       | 300.00      | EUR           | GBP         | 2007-04-01  | 2007-06-30  | 204.00           |
| 7    | 2007-06-30  | GBP       | 700.00      | EUR           | GBP         | 2007-01-01  | 2007-03-31  | 473.34           |
| 7    | 2007-06-30  | GBP       | 700.00      | EUR           | GBP         | 2007-04-01  | 2007-06-30  | 476.00           |
| 3    | 2007-02-01  | GBP       | 300.00      | GBP           | JPY         | 2007-01-01  | 2007-03-31  | 73266.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | GBP           | JPY         | 2007-04-01  | 2007-06-30  | 73200.00         |
| 7    | 2007-06-30  | GBP       | 700.00      | GBP           | JPY         | 2007-01-01  | 2007-03-31  | 170954.00        |
| 7    | 2007-06-30  | GBP       | 700.00      | GBP           | JPY         | 2007-04-01  | 2007-06-30  | 170800.00        |
| 3    | 2007-02-01  | GBP       | 300.00      | GBP           | USD         | 2007-01-01  | 2007-03-31  | 592.98           |
| 3    | 2007-02-01  | GBP       | 300.00      | GBP           | USD         | 2007-04-01  | 2007-06-30  | 600.00           |
| 7    | 2007-06-30  | GBP       | 700.00      | GBP           | USD         | 2007-01-01  | 2007-03-31  | 1383.62          |
| 7    | 2007-06-30  | GBP       | 700.00      | GBP           | USD         | 2007-04-01  | 2007-06-30  | 1400.00          |
| 3    | 2007-02-01  | GBP       | 300.00      | USD           | GBP         | 2007-01-01  | 2007-03-31  | 151.77           |
| 3    | 2007-02-01  | GBP       | 300.00      | USD           | GBP         | 2007-04-01  | 2007-06-30  | 150.00           |
| 7    | 2007-06-30  | GBP       | 700.00      | USD           | GBP         | 2007-01-01  | 2007-03-31  | 354.13           |
| 7    | 2007-06-30  | GBP       | 700.00      | USD           | GBP         | 2007-04-01  | 2007-06-30  | 350.00           |
| 4    | 2007-03-31  | JPY       | 50000.00    | EUR           | JPY         | 2007-01-01  | 2007-03-31  | 8256000.00       |
| 4    | 2007-03-31  | JPY       | 50000.00    | EUR           | JPY         | 2007-04-01  | 2007-06-30  | 8250000.00       |
| 8    | 2007-07-01  | JPY       | 80000.00    | EUR           | JPY         | 2007-01-01  | 2007-03-31  | 13209600.00      |
| 8    | 2007-07-01  | JPY       | 80000.00    | EUR           | JPY         | 2007-04-01  | 2007-06-30  | 13200000.00      |
| 4    | 2007-03-31  | JPY       | 50000.00    | GBP           | JPY         | 2007-01-01  | 2007-03-31  | 12211000.00      |
| 4    | 2007-03-31  | JPY       | 50000.00    | GBP           | JPY         | 2007-04-01  | 2007-06-30  | 12200000.00      |
| 8    | 2007-07-01  | JPY       | 80000.00    | GBP           | JPY         | 2007-01-01  | 2007-03-31  | 19537600.00      |
| 8    | 2007-07-01  | JPY       | 80000.00    | GBP           | JPY         | 2007-04-01  | 2007-06-30  | 19520000.00      |
| 4    | 2007-03-31  | JPY       | 50000.00    | JPY           | EUR         | 2007-01-01  | 2007-03-31  | 302.80           |
| 4    | 2007-03-31  | JPY       | 50000.00    | JPY           | EUR         | 2007-04-01  | 2007-06-30  | 305.00           |
| 8    | 2007-07-01  | JPY       | 80000.00    | JPY           | EUR         | 2007-01-01  | 2007-03-31  | 484.48           |
| 8    | 2007-07-01  | JPY       | 80000.00    | JPY           | EUR         | 2007-04-01  | 2007-06-30  | 488.00           |
| 4    | 2007-03-31  | JPY       | 50000.00    | JPY           | USD         | 2007-01-01  | 2007-03-31  | 404.75           |
| 4    | 2007-03-31  | JPY       | 50000.00    | JPY           | USD         | 2007-04-01  | 2007-06-30  | 405.00           |
| 8    | 2007-07-01  | JPY       | 80000.00    | JPY           | USD         | 2007-01-01  | 2007-03-31  | 647.60           |
| 8    | 2007-07-01  | JPY       | 80000.00    | JPY           | USD         | 2007-04-01  | 2007-06-30  | 648.00           |
| 9    |             | USD       | 900.00      | GBP           | USD         | 2007-01-01  | 2007-03-31  | 1778.94          |
| 9    |             | USD       | 900.00      | GBP           | USD         | 2007-04-01  | 2007-06-30  | 1800.00          |
| 1    | 2006-12-31  | USD       | 100.00      | GBP           | USD         | 2007-01-01  | 2007-03-31  | 197.66           |
| 1    | 2006-12-31  | USD       | 100.00      | GBP           | USD         | 2007-04-01  | 2007-06-30  | 200.00           |
| 5    | 2007-04-01  | USD       | 500.00      | GBP           | USD         | 2007-01-01  | 2007-03-31  | 988.30           |
| 5    | 2007-04-01  | USD       | 500.00      | GBP           | USD         | 2007-04-01  | 2007-06-30  | 1000.00          |
| 9    |             | USD       | 900.00      | JPY           | USD         | 2007-01-01  | 2007-03-31  | 7.29             |
| 9    |             | USD       | 900.00      | JPY           | USD         | 2007-04-01  | 2007-06-30  | 7.29             |
| 1    | 2006-12-31  | USD       | 100.00      | JPY           | USD         | 2007-01-01  | 2007-03-31  | 0.81             |
| 1    | 2006-12-31  | USD       | 100.00      | JPY           | USD         | 2007-04-01  | 2007-06-30  | 0.81             |
| 5    | 2007-04-01  | USD       | 500.00      | JPY           | USD         | 2007-01-01  | 2007-03-31  | 4.05             |
| 5    | 2007-04-01  | USD       | 500.00      | JPY           | USD         | 2007-04-01  | 2007-06-30  | 4.05             |
| 9    |             | USD       | 900.00      | USD           | EUR         |             | 2006-12-31  | 684.00           |
| 9    |             | USD       | 900.00      | USD           | EUR         | 2007-01-01  | 2007-03-31  | 673.47           |
| 9    |             | USD       | 900.00      | USD           | EUR         | 2007-04-01  | 2007-06-30  | 675.00           |
| 1    | 2006-12-31  | USD       | 100.00      | USD           | EUR         |             | 2006-12-31  | 76.00            |
| 1    | 2006-12-31  | USD       | 100.00      | USD           | EUR         | 2007-01-01  | 2007-03-31  | 74.83            |
| 1    | 2006-12-31  | USD       | 100.00      | USD           | EUR         | 2007-04-01  | 2007-06-30  | 75.00            |
| 5    | 2007-04-01  | USD       | 500.00      | USD           | EUR         |             | 2006-12-31  | 380.00           |
| 5    | 2007-04-01  | USD       | 500.00      | USD           | EUR         | 2007-01-01  | 2007-03-31  | 374.15           |
| 5    | 2007-04-01  | USD       | 500.00      | USD           | EUR         | 2007-04-01  | 2007-06-30  | 375.00           |
| 9    |             | USD       | 900.00      | USD           | GBP         | 2007-01-01  | 2007-03-31  | 455.31           |
| 9    |             | USD       | 900.00      | USD           | GBP         | 2007-04-01  | 2007-06-30  | 450.00           |
| 1    | 2006-12-31  | USD       | 100.00      | USD           | GBP         | 2007-01-01  | 2007-03-31  | 50.59            |
| 1    | 2006-12-31  | USD       | 100.00      | USD           | GBP         | 2007-04-01  | 2007-06-30  | 50.00            |
| 5    | 2007-04-01  | USD       | 500.00      | USD           | GBP         | 2007-01-01  | 2007-03-31  | 252.95           |
| 5    | 2007-04-01  | USD       | 500.00      | USD           | GBP         | 2007-04-01  | 2007-06-30  | 250.00           |
+------+-------------+-----------+-------------+---------------+-------------+-------------+-------------+------------------+
> 
> -- RHS of NLJ should be buffered
> select xid, xactDate, currency, amount as origAmount,
>         fromCurrency, toCurrency, fromDate, toDate,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts, convRates
>     where currency in (fromCurrency, toCurrency) and toCurrency = 'USD'
>         and fromCurrency = 'JPY'
>     order by currency, fromCurrency, toCurrency, xactDate, fromDate, toDate;
+------+-------------+-----------+-------------+---------------+-------------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | FROMCURRENCY  | TOCURRENCY  |  FROMDATE   |   TODATE    | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+---------------+-------------+-------------+-------------+------------------+
| 4    | 2007-03-31  | JPY       | 50000.00    | JPY           | USD         | 2007-01-01  | 2007-03-31  | 404.75           |
| 4    | 2007-03-31  | JPY       | 50000.00    | JPY           | USD         | 2007-04-01  | 2007-06-30  | 405.00           |
| 8    | 2007-07-01  | JPY       | 80000.00    | JPY           | USD         | 2007-01-01  | 2007-03-31  | 647.60           |
| 8    | 2007-07-01  | JPY       | 80000.00    | JPY           | USD         | 2007-04-01  | 2007-06-30  | 648.00           |
| 9    |             | USD       | 900.00      | JPY           | USD         | 2007-01-01  | 2007-03-31  | 7.29             |
| 9    |             | USD       | 900.00      | JPY           | USD         | 2007-04-01  | 2007-06-30  | 7.29             |
| 1    | 2006-12-31  | USD       | 100.00      | JPY           | USD         | 2007-01-01  | 2007-03-31  | 0.81             |
| 1    | 2006-12-31  | USD       | 100.00      | JPY           | USD         | 2007-04-01  | 2007-06-30  | 0.81             |
| 5    | 2007-04-01  | USD       | 500.00      | JPY           | USD         | 2007-01-01  | 2007-03-31  | 4.05             |
| 5    | 2007-04-01  | USD       | 500.00      | JPY           | USD         | 2007-04-01  | 2007-06-30  | 4.05             |
+------+-------------+-----------+-------------+---------------+-------------+-------------+-------------+------------------+
> 
> -- Right outer join
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, 
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from convRates right outer join xacts
>     on currency = fromCurrency and xactDate between fromDate and toDate
>     order by currency, toCurrency, xactDate;
+------+-------------+-----------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+------------------+
| 11   |             |           | 1100.00     |             |                  |
| 10   | 2007-03-01  |           | 1000.00     |             |                  |
| 2    | 2007-01-01  | EUR       | 200.00      | GBP         | 135.24           |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 408.00           |
| 2    | 2007-01-01  | EUR       | 200.00      | JPY         | 33024.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 99000.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | JPY         | 73266.00         |
| 7    | 2007-06-30  | GBP       | 700.00      | JPY         | 170800.00        |
| 3    | 2007-02-01  | GBP       | 300.00      | USD         | 592.98           |
| 7    | 2007-06-30  | GBP       | 700.00      | USD         | 1400.00          |
| 8    | 2007-07-01  | JPY       | 80000.00    |             |                  |
| 4    | 2007-03-31  | JPY       | 50000.00    | EUR         | 302.80           |
| 4    | 2007-03-31  | JPY       | 50000.00    | USD         | 404.75           |
| 9    |             | USD       | 900.00      |             |                  |
| 1    | 2006-12-31  | USD       | 100.00      |             |                  |
| 5    | 2007-04-01  | USD       | 500.00      | EUR         | 375.00           |
| 5    | 2007-04-01  | USD       | 500.00      | GBP         | 250.00           |
+------+-------------+-----------+-------------+-------------+------------------+
> 
> -- Table level filters applied on tables
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, 
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and xactDate between fromDate and toDate
>         and toCurrency = 'JPY'
>     order by currency, toCurrency, xactDate;
+------+-------------+-----------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+------------------+
| 11   |             |           | 1100.00     |             |                  |
| 10   | 2007-03-01  |           | 1000.00     |             |                  |
| 2    | 2007-01-01  | EUR       | 200.00      | JPY         | 33024.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 99000.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | JPY         | 73266.00         |
| 7    | 2007-06-30  | GBP       | 700.00      | JPY         | 170800.00        |
| 4    | 2007-03-31  | JPY       | 50000.00    |             |                  |
| 8    | 2007-07-01  | JPY       | 80000.00    |             |                  |
| 9    |             | USD       | 900.00      |             |                  |
| 1    | 2006-12-31  | USD       | 100.00      |             |                  |
| 5    | 2007-04-01  | USD       | 500.00      |             |                  |
+------+-------------+-----------+-------------+-------------+------------------+
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, 
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and xactDate between fromDate and toDate
>         and currency = 'USD'
>     order by currency, toCurrency, xactDate;
+------+-------------+-----------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+------------------+
| 11   |             |           | 1100.00     |             |                  |
| 10   | 2007-03-01  |           | 1000.00     |             |                  |
| 2    | 2007-01-01  | EUR       | 200.00      |             |                  |
| 6    | 2007-05-01  | EUR       | 600.00      |             |                  |
| 3    | 2007-02-01  | GBP       | 300.00      |             |                  |
| 7    | 2007-06-30  | GBP       | 700.00      |             |                  |
| 4    | 2007-03-31  | JPY       | 50000.00    |             |                  |
| 8    | 2007-07-01  | JPY       | 80000.00    |             |                  |
| 9    |             | USD       | 900.00      |             |                  |
| 1    | 2006-12-31  | USD       | 100.00      |             |                  |
| 5    | 2007-04-01  | USD       | 500.00      | EUR         | 375.00           |
| 5    | 2007-04-01  | USD       | 500.00      | GBP         | 250.00           |
+------+-------------+-----------+-------------+-------------+------------------+
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and xactDate between fromDate and toDate
>         and currency = 'EUR' and toCurrency = 'GBP'
>     order by currency, toCurrency, xactDate;
+------+-------------+-----------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+------------------+
| 11   |             |           | 1100.00     |             |                  |
| 10   | 2007-03-01  |           | 1000.00     |             |                  |
| 2    | 2007-01-01  | EUR       | 200.00      | GBP         | 135.24           |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 408.00           |
| 3    | 2007-02-01  | GBP       | 300.00      |             |                  |
| 7    | 2007-06-30  | GBP       | 700.00      |             |                  |
| 4    | 2007-03-31  | JPY       | 50000.00    |             |                  |
| 8    | 2007-07-01  | JPY       | 80000.00    |             |                  |
| 9    |             | USD       | 900.00      |             |                  |
| 1    | 2006-12-31  | USD       | 100.00      |             |                  |
| 5    | 2007-04-01  | USD       | 500.00      |             |                  |
+------+-------------+-----------+-------------+-------------+------------------+
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, 
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and xactDate between fromDate and toDate
>     where toCurrency = 'JPY'
>     order by currency, toCurrency, xactDate;
+------+-------------+-----------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+------------------+
| 2    | 2007-01-01  | EUR       | 200.00      | JPY         | 33024.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 99000.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | JPY         | 73266.00         |
| 7    | 2007-06-30  | GBP       | 700.00      | JPY         | 170800.00        |
+------+-------------+-----------+-------------+-------------+------------------+
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, 
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and xactDate between fromDate and toDate
>     where currency = 'USD'
>     order by currency, toCurrency, xactDate;
+------+-------------+-----------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+------------------+
| 9    |             | USD       | 900.00      |             |                  |
| 1    | 2006-12-31  | USD       | 100.00      |             |                  |
| 5    | 2007-04-01  | USD       | 500.00      | EUR         | 375.00           |
| 5    | 2007-04-01  | USD       | 500.00      | GBP         | 250.00           |
+------+-------------+-----------+-------------+-------------+------------------+
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and xactDate between fromDate and toDate
>     where currency = 'EUR' and toCurrency = 'GBP'
>     order by currency, toCurrency, xactDate;
+------+-------------+-----------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+------------------+
| 2    | 2007-01-01  | EUR       | 200.00      | GBP         | 135.24           |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 408.00           |
+------+-------------+-----------+-------------+-------------+------------------+
> 
> -- Multi-way joins
> select v1.xid, v1.xactDate, v1.currency, v1.origAmount, v1.toCurrency,
>         v1.convertedAmount, v2.toCurrency, v2.convertedAmount
>     from v v1, v v2
>     where v1.currency = 'EUR' and v1.toCurrency = 'GBP' and
>         v2.toCurrency = 'JPY' and v1.xid = v2.xid
>     order by xactDate;
+------+-------------+-----------+-------------+-------------+------------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  | CONVERTEDAMOUNT  | TOCURRENCY  | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+------------------+-------------+------------------+
| 2    | 2007-01-01  | EUR       | 200.00      | GBP         | 135.24           | JPY         | 33024.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 408.00           | JPY         | 99000.00         |
+------+-------------+-----------+-------------+-------------+------------------+-------------+------------------+
> select v1.xid, v1.xactDate, v2.xactDate as xactDate2, v1.currency,
>         v1.origAmount, v1.toCurrency, v1.convertedAmount, v2.toCurrency,
>         v2.convertedAmount
>     from v v1 left outer join v v2
>     on v1.xactDate > v2.xactDate
>     where v1.currency = 'EUR' and v1.toCurrency = 'GBP' and
>         v2.toCurrency = 'JPY'
>     order by xactDate2;
+------+-------------+-------------+-----------+-------------+-------------+------------------+-------------+------------------+
| XID  |  XACTDATE   |  XACTDATE2  | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  | CONVERTEDAMOUNT  | TOCURRENCY  | CONVERTEDAMOUNT  |
+------+-------------+-------------+-----------+-------------+-------------+------------------+-------------+------------------+
| 6    | 2007-05-01  | 2007-01-01  | EUR       | 600.00      | GBP         | 408.00           | JPY         | 33024.00         |
| 6    | 2007-05-01  | 2007-02-01  | EUR       | 600.00      | GBP         | 408.00           | JPY         | 73266.00         |
+------+-------------+-------------+-----------+-------------+-------------+------------------+-------------+------------------+
> 
> ---------
> -- Merges
> ---------
> 
> create table target(
>     xid int not null, xactDate date, currency varchar(5), toCurrency varchar(5),
>     amount decimal(10,2), convertedAmount decimal(10,2));
> insert into target
>     select xid, xactDate, currency, toCurrency, origAmount,
>         convertedAmount
>         from v
>         where currency is not null and xactDate is not null and
>             toCurrency is not null;
> select * from target order by currency, toCurrency, xactDate;
+------+-------------+-----------+-------------+-----------+------------------+
| XID  |  XACTDATE   | CURRENCY  | TOCURRENCY  |  AMOUNT   | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-----------+------------------+
| 2    | 2007-01-01  | EUR       | GBP         | 200.00    | 135.24           |
| 6    | 2007-05-01  | EUR       | GBP         | 600.00    | 408.00           |
| 2    | 2007-01-01  | EUR       | JPY         | 200.00    | 33024.00         |
| 6    | 2007-05-01  | EUR       | JPY         | 600.00    | 99000.00         |
| 3    | 2007-02-01  | GBP       | JPY         | 300.00    | 73266.00         |
| 7    | 2007-06-30  | GBP       | JPY         | 700.00    | 170800.00        |
| 3    | 2007-02-01  | GBP       | USD         | 300.00    | 592.98           |
| 7    | 2007-06-30  | GBP       | USD         | 700.00    | 1400.00          |
| 4    | 2007-03-31  | JPY       | EUR         | 50000.00  | 302.80           |
| 4    | 2007-03-31  | JPY       | USD         | 50000.00  | 404.75           |
| 5    | 2007-04-01  | USD       | EUR         | 500.00    | 375.00           |
| 5    | 2007-04-01  | USD       | GBP         | 500.00    | 250.00           |
+------+-------------+-----------+-------------+-----------+------------------+
>         
> -- NLJ used in view that is the source for the merge
> merge into target t
>     using v on t.xid = v.xid and t.currency = v.currency and
>         t.toCurrency = v.toCurrency and t.xactDate = v.xactDate
>     when matched then
>         update set convertedAmount = v.convertedAmount + 10.56
>     when not matched then
>         insert values(
>         v.xid, v.xactDate, v.currency, v.toCurrency, v.origAmount,
>             v.convertedAmount);
> select * from target order by currency, toCurrency, xactDate;
+------+-------------+-----------+-------------+-----------+------------------+
| XID  |  XACTDATE   | CURRENCY  | TOCURRENCY  |  AMOUNT   | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-----------+------------------+
| 11   |             |           |             | 1100.00   |                  |
| 10   | 2007-03-01  |           |             | 1000.00   |                  |
| 2    | 2007-01-01  | EUR       | GBP         | 200.00    | 145.80           |
| 6    | 2007-05-01  | EUR       | GBP         | 600.00    | 418.56           |
| 2    | 2007-01-01  | EUR       | JPY         | 200.00    | 33034.56         |
| 6    | 2007-05-01  | EUR       | JPY         | 600.00    | 99010.56         |
| 3    | 2007-02-01  | GBP       | JPY         | 300.00    | 73276.56         |
| 7    | 2007-06-30  | GBP       | JPY         | 700.00    | 170810.56        |
| 3    | 2007-02-01  | GBP       | USD         | 300.00    | 603.54           |
| 7    | 2007-06-30  | GBP       | USD         | 700.00    | 1410.56          |
| 8    | 2007-07-01  | JPY       |             | 80000.00  |                  |
| 4    | 2007-03-31  | JPY       | EUR         | 50000.00  | 313.36           |
| 4    | 2007-03-31  | JPY       | USD         | 50000.00  | 415.31           |
| 9    |             | USD       |             | 900.00    |                  |
| 1    | 2006-12-31  | USD       |             | 100.00    |                  |
| 5    | 2007-04-01  | USD       | EUR         | 500.00    | 385.56           |
| 5    | 2007-04-01  | USD       | GBP         | 500.00    | 260.56           |
+------+-------------+-----------+-------------+-----------+------------------+
> 
> -- NLJ in the using clause of the MERGE statement
> merge into target t
>     using convRates cv on t.currency = cv.fromCurrency and
>         t.toCurrency = cv.toCurrency and
>         t.xactDate between cv.fromDate and cv.toDate
>     when matched then
>         update set convertedAmount =
>             cast((t.convertedAmount - 10.56)/cv.rate  as decimal(10,2))
>     when not matched then
>         insert values(-1, cv.fromDate, cv.fromCurrency, cv.toCurrency,
>             null, null);
> -- the convertedAmount should now be equal to the original amount
> select * from target order by currency, toCurrency, xactDate;
+------+-------------+-----------+-------------+-----------+------------------+
| XID  |  XACTDATE   | CURRENCY  | TOCURRENCY  |  AMOUNT   | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-----------+------------------+
| 11   |             |           |             | 1100.00   |                  |
| 10   | 2007-03-01  |           |             | 1000.00   |                  |
| 2    | 2007-01-01  | EUR       | GBP         | 200.00    | 200.00           |
| 6    | 2007-05-01  | EUR       | GBP         | 600.00    | 600.00           |
| 2    | 2007-01-01  | EUR       | JPY         | 200.00    | 200.00           |
| 6    | 2007-05-01  | EUR       | JPY         | 600.00    | 600.00           |
| 3    | 2007-02-01  | GBP       | JPY         | 300.00    | 300.00           |
| 7    | 2007-06-30  | GBP       | JPY         | 700.00    | 700.00           |
| 3    | 2007-02-01  | GBP       | USD         | 300.00    | 300.00           |
| 7    | 2007-06-30  | GBP       | USD         | 700.00    | 700.00           |
| 8    | 2007-07-01  | JPY       |             | 80000.00  |                  |
| 4    | 2007-03-31  | JPY       | EUR         | 50000.00  | 50000.00         |
| -1   | 2007-04-01  | JPY       | EUR         |           |                  |
| 4    | 2007-03-31  | JPY       | USD         | 50000.00  | 50000.00         |
| -1   | 2007-04-01  | JPY       | USD         |           |                  |
| 9    |             | USD       |             | 900.00    |                  |
| 1    | 2006-12-31  | USD       |             | 100.00    |                  |
| -1   |             | USD       | EUR         |           |                  |
| -1   | 2007-01-01  | USD       | EUR         |           |                  |
| 5    | 2007-04-01  | USD       | EUR         | 500.00    | 500.00           |
| -1   | 2007-01-01  | USD       | GBP         |           |                  |
| 5    | 2007-04-01  | USD       | GBP         | 500.00    | 500.00           |
+------+-------------+-----------+-------------+-----------+------------------+
> 
> ----------------------------------------------
> -- Additional testcases to test misc codepaths
> ----------------------------------------------
> 
> create table ints_notnullable(
>     id int not null, a bigint not null, b int not null, c smallint not null);
> create table ints_nullable(
>     id int not null, a bigint, b int, c smallint);
> 
> insert into ints_notnullable values(1, 1, 1, 1);
> insert into ints_notnullable values(2, 2, 2, 2);
> insert into ints_notnullable values(2, 5000000000, 2, 2);
> insert into ints_notnullable values(3, 3, 3, 3);
> insert into ints_notnullable values(3, 3, 100000, 3);
> insert into ints_nullable select * from ints_notnullable;
> 
> -- casting feasible
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.id = i_n.id and i_nn.a > i_n.a
>     order by 1, 2, 3, 4, 5, 6, 7, 8;
+-----+-------------+---------+----+------+-----+-----+-----+
| ID  |      A      |    B    | C  | ID0  | A0  | B0  | C0  |
+-----+-------------+---------+----+------+-----+-----+-----+
| 1   | 1           | 1       | 1  |      |     |     |     |
| 2   | 2           | 2       | 2  |      |     |     |     |
| 2   | 5000000000  | 2       | 2  | 2    | 2   | 2   | 2   |
| 3   | 3           | 3       | 3  |      |     |     |     |
| 3   | 3           | 100000  | 3  |      |     |     |     |
+-----+-------------+---------+----+------+-----+-----+-----+
> 
> -- casting not feasible because LHS can't be cast to RHS's type
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.id = i_n.id and i_nn.a > i_n.b
>     order by 1, 2, 3, 4, 5, 6, 7, 8;
+-----+-------------+---------+----+------+-------------+-----+-----+
| ID  |      A      |    B    | C  | ID0  |     A0      | B0  | C0  |
+-----+-------------+---------+----+------+-------------+-----+-----+
| 1   | 1           | 1       | 1  |      |             |     |     |
| 2   | 2           | 2       | 2  |      |             |     |     |
| 2   | 5000000000  | 2       | 2  | 2    | 2           | 2   | 2   |
| 2   | 5000000000  | 2       | 2  | 2    | 5000000000  | 2   | 2   |
| 3   | 3           | 3       | 3  |      |             |     |     |
| 3   | 3           | 100000  | 3  |      |             |     |     |
+-----+-------------+---------+----+------+-------------+-----+-----+
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.a = i_n.b and i_nn.id >= i_n.id
>     order by 1, 2, 3, 4, 5, 6, 7, 8;
+-----+-------------+---------+----+------+-------------+-----+-----+
| ID  |      A      |    B    | C  | ID0  |     A0      | B0  | C0  |
+-----+-------------+---------+----+------+-------------+-----+-----+
| 1   | 1           | 1       | 1  | 1    | 1           | 1   | 1   |
| 2   | 2           | 2       | 2  | 2    | 2           | 2   | 2   |
| 2   | 2           | 2       | 2  | 2    | 5000000000  | 2   | 2   |
| 2   | 5000000000  | 2       | 2  |      |             |     |     |
| 3   | 3           | 3       | 3  | 3    | 3           | 3   | 3   |
| 3   | 3           | 100000  | 3  | 3    | 3           | 3   | 3   |
+-----+-------------+---------+----+------+-------------+-----+-----+
> 
> -- LHS is cast to two different types
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.id = i_n.id and i_nn.c >= i_n.a and i_nn.c < i_n.b
>     order by 1, 2, 3, 4, 5, 6, 7, 8;
+-----+-------------+---------+----+------+-----+---------+-----+
| ID  |      A      |    B    | C  | ID0  | A0  |   B0    | C0  |
+-----+-------------+---------+----+------+-----+---------+-----+
| 1   | 1           | 1       | 1  |      |     |         |     |
| 2   | 2           | 2       | 2  |      |     |         |     |
| 2   | 5000000000  | 2       | 2  |      |     |         |     |
| 3   | 3           | 3       | 3  | 3    | 3   | 100000  | 3   |
| 3   | 3           | 100000  | 3  | 3    | 3   | 100000  | 3   |
+-----+-------------+---------+----+------+-----+---------+-----+
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.c = i_n.a and i_nn.c < i_n.b
>     order by 1, 2, 3, 4, 5, 6, 7, 8;
+-----+-------------+---------+----+------+-----+---------+-----+
| ID  |      A      |    B    | C  | ID0  | A0  |   B0    | C0  |
+-----+-------------+---------+----+------+-----+---------+-----+
| 1   | 1           | 1       | 1  |      |     |         |     |
| 2   | 2           | 2       | 2  |      |     |         |     |
| 2   | 5000000000  | 2       | 2  |      |     |         |     |
| 3   | 3           | 3       | 3  | 3    | 3   | 100000  | 3   |
| 3   | 3           | 100000  | 3  | 3    | 3   | 100000  | 3   |
+-----+-------------+---------+----+------+-----+---------+-----+
> 
> -- column filtered by both reshape and calc
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.id > i_n.id and i_nn.a >= i_n.a and i_nn.a > i_n.b
>     order by 1, 2, 3, 4, 5, 6, 7, 8;
+-----+-------------+---------+----+------+-----+-----+-----+
| ID  |      A      |    B    | C  | ID0  | A0  | B0  | C0  |
+-----+-------------+---------+----+------+-----+-----+-----+
| 1   | 1           | 1       | 1  |      |     |     |     |
| 2   | 2           | 2       | 2  | 1    | 1   | 1   | 1   |
| 2   | 5000000000  | 2       | 2  | 1    | 1   | 1   | 1   |
| 3   | 3           | 3       | 3  | 1    | 1   | 1   | 1   |
| 3   | 3           | 3       | 3  | 2    | 2   | 2   | 2   |
| 3   | 3           | 100000  | 3  | 1    | 1   | 1   | 1   |
| 3   | 3           | 100000  | 3  | 2    | 2   | 2   | 2   |
+-----+-------------+---------+----+------+-----+-----+-----+
> 
> -- more than one filter to be processed by calc
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.id > i_n.id and i_nn.a > i_n.a and i_nn.b > i_n.b and
>         i_nn.c > i_n.c
>     order by 1, 2, 3, 4, 5, 6, 7, 8;
+-----+-------------+---------+----+------+-----+-----+-----+
| ID  |      A      |    B    | C  | ID0  | A0  | B0  | C0  |
+-----+-------------+---------+----+------+-----+-----+-----+
| 1   | 1           | 1       | 1  |      |     |     |     |
| 2   | 2           | 2       | 2  | 1    | 1   | 1   | 1   |
| 2   | 5000000000  | 2       | 2  | 1    | 1   | 1   | 1   |
| 3   | 3           | 3       | 3  | 1    | 1   | 1   | 1   |
| 3   | 3           | 3       | 3  | 2    | 2   | 2   | 2   |
| 3   | 3           | 100000  | 3  | 1    | 1   | 1   | 1   |
| 3   | 3           | 100000  | 3  | 2    | 2   | 2   | 2   |
+-----+-------------+---------+----+------+-----+-----+-----+
> 
> ----------------------------------------
> -- explain outputs for the above queries
> ----------------------------------------
> !set outputformat csv
> 
> -- Only index lookup needed
> explain plan for
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, toDate,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and xactDate >= fromDate;
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t2):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#10=[Reinterpret($t1)], expr#11=[CAST($t10):DOUBLE NOT NULL], expr#12=[1E2], expr#13=[/INT($t11, $t12)], expr#14=[*($t13, $t6)], expr#15=[*($t14, $t12)], expr#16=[CAST($t15):BIGINT], expr#17=[true], expr#18=[Reinterpret($t16, $t17)], XID=[$t0], XACTDATE=[$t3], CURRENCY=[$t9], ORIGAMOUNT=[$t1], TOCURRENCY=[$t5], TODATE=[$t8], CONVERTEDAMOUNT=[$t18])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[1, 2]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]])'
'      FennelTempIdxSearchRel(indexKeys=[[0, 3]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[1, 1, 2]], keyOffsets=[[0, 2, 3]], rootPageIdParamId=[3])'
'        FennelValuesRel(tuples=[[{ '(', null, null, ']', null, null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0, 3]])'
'        FennelSortRel(key=[[0, 3]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
> explain plan for
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, toDate,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on xactDate > fromDate and currency = fromCurrency;
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t2):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#10=[Reinterpret($t1)], expr#11=[CAST($t10):DOUBLE NOT NULL], expr#12=[1E2], expr#13=[/INT($t11, $t12)], expr#14=[*($t13, $t6)], expr#15=[*($t14, $t12)], expr#16=[CAST($t15):BIGINT], expr#17=[true], expr#18=[Reinterpret($t16, $t17)], XID=[$t0], XACTDATE=[$t3], CURRENCY=[$t9], ORIGAMOUNT=[$t1], TOCURRENCY=[$t5], TODATE=[$t8], CONVERTEDAMOUNT=[$t18])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[1, 2]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]])'
'      FennelTempIdxSearchRel(indexKeys=[[0, 3]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[1, 1, 2]], keyOffsets=[[0, 2, 3]], rootPageIdParamId=[3])'
'        FennelValuesRel(tuples=[[{ '(', null, null, ')', null, null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0, 3]])'
'        FennelSortRel(key=[[0, 3]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
> explain plan for
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, fromDate,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on fromCurrency = currency and toDate >= xactDate;
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t2):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#10=[Reinterpret($t1)], expr#11=[CAST($t10):DOUBLE NOT NULL], expr#12=[1E2], expr#13=[/INT($t11, $t12)], expr#14=[*($t13, $t6)], expr#15=[*($t14, $t12)], expr#16=[CAST($t15):BIGINT], expr#17=[true], expr#18=[Reinterpret($t16, $t17)], XID=[$t0], XACTDATE=[$t3], CURRENCY=[$t9], ORIGAMOUNT=[$t1], TOCURRENCY=[$t5], FROMDATE=[$t7], CONVERTEDAMOUNT=[$t18])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[1, 2]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]])'
'      FennelTempIdxSearchRel(indexKeys=[[0, 4]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[1, 2, 1]], keyOffsets=[[0, 1, 2]], rootPageIdParamId=[3])'
'        FennelValuesRel(tuples=[[{ '[', null, null, '+', null, null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0, 4]])'
'        FennelSortRel(key=[[0, 4]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
> explain plan for
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, fromDate,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on toDate > xactDate and fromCurrency = currency;
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t2):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#10=[Reinterpret($t1)], expr#11=[CAST($t10):DOUBLE NOT NULL], expr#12=[1E2], expr#13=[/INT($t11, $t12)], expr#14=[*($t13, $t6)], expr#15=[*($t14, $t12)], expr#16=[CAST($t15):BIGINT], expr#17=[true], expr#18=[Reinterpret($t16, $t17)], XID=[$t0], XACTDATE=[$t3], CURRENCY=[$t9], ORIGAMOUNT=[$t1], TOCURRENCY=[$t5], FROMDATE=[$t7], CONVERTEDAMOUNT=[$t18])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[1, 2]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]])'
'      FennelTempIdxSearchRel(indexKeys=[[0, 4]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[1, 2, 1]], keyOffsets=[[0, 1, 2]], rootPageIdParamId=[3])'
'        FennelValuesRel(tuples=[[{ '(', null, null, '+', null, null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0, 4]])'
'        FennelSortRel(key=[[0, 4]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
> 
> -- Index lookup + reshape
> explain plan for
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and xactDate between fromDate and toDate;
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t2):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#10=[Reinterpret($t1)], expr#11=[CAST($t10):DOUBLE NOT NULL], expr#12=[1E2], expr#13=[/INT($t11, $t12)], expr#14=[*($t13, $t6)], expr#15=[*($t14, $t12)], expr#16=[CAST($t15):BIGINT], expr#17=[true], expr#18=[Reinterpret($t16, $t17)], XID=[$t0], XACTDATE=[$t3], CURRENCY=[$t9], ORIGAMOUNT=[$t1], TOCURRENCY=[$t5], CONVERTEDAMOUNT=[$t18])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[1, 2]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], filterOp=[COMP_GE], filterOrdinals=[[4]], dynamicParameters=[[2]], paramCompareOffsets=[[4]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE) NOT NULL])'
'        FennelTempIdxSearchRel(indexKeys=[[0, 3]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[1, 1, 2]], keyOffsets=[[0, 2, 3]], rootPageIdParamId=[3])'
'          FennelValuesRel(tuples=[[{ '(', null, null, ']', null, null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0, 3]])'
'        FennelSortRel(key=[[0, 3]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
> explain plan for
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, 
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and fromDate < xactDate and toDate > xactDate;
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t2):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#10=[Reinterpret($t1)], expr#11=[CAST($t10):DOUBLE NOT NULL], expr#12=[1E2], expr#13=[/INT($t11, $t12)], expr#14=[*($t13, $t6)], expr#15=[*($t14, $t12)], expr#16=[CAST($t15):BIGINT], expr#17=[true], expr#18=[Reinterpret($t16, $t17)], XID=[$t0], XACTDATE=[$t3], CURRENCY=[$t9], ORIGAMOUNT=[$t1], TOCURRENCY=[$t5], CONVERTEDAMOUNT=[$t18])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[1, 2]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], filterOp=[COMP_GT], filterOrdinals=[[4]], dynamicParameters=[[2]], paramCompareOffsets=[[4]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE) NOT NULL])'
'        FennelTempIdxSearchRel(indexKeys=[[0, 3]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[1, 1, 2]], keyOffsets=[[0, 2, 3]], rootPageIdParamId=[3])'
'          FennelValuesRel(tuples=[[{ '(', null, null, ')', null, null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0, 3]])'
'        FennelSortRel(key=[[0, 3]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
> explain plan for
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and xactDate <= toDate and xactDate >= fromDate;
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t2):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#10=[Reinterpret($t1)], expr#11=[CAST($t10):DOUBLE NOT NULL], expr#12=[1E2], expr#13=[/INT($t11, $t12)], expr#14=[*($t13, $t6)], expr#15=[*($t14, $t12)], expr#16=[CAST($t15):BIGINT], expr#17=[true], expr#18=[Reinterpret($t16, $t17)], XID=[$t0], XACTDATE=[$t3], CURRENCY=[$t9], ORIGAMOUNT=[$t1], TOCURRENCY=[$t5], CONVERTEDAMOUNT=[$t18])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[1, 2]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], filterOp=[COMP_LE], filterOrdinals=[[3]], dynamicParameters=[[2]], paramCompareOffsets=[[3]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE) NOT NULL])'
'        FennelTempIdxSearchRel(indexKeys=[[0, 4]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[1, 2, 1]], keyOffsets=[[0, 1, 2]], rootPageIdParamId=[3])'
'          FennelValuesRel(tuples=[[{ '[', null, null, '+', null, null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0, 4]])'
'        FennelSortRel(key=[[0, 4]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
> explain plan for
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and toDate > xactDate and fromDate < xactDate;
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t2):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#10=[Reinterpret($t1)], expr#11=[CAST($t10):DOUBLE NOT NULL], expr#12=[1E2], expr#13=[/INT($t11, $t12)], expr#14=[*($t13, $t6)], expr#15=[*($t14, $t12)], expr#16=[CAST($t15):BIGINT], expr#17=[true], expr#18=[Reinterpret($t16, $t17)], XID=[$t0], XACTDATE=[$t3], CURRENCY=[$t9], ORIGAMOUNT=[$t1], TOCURRENCY=[$t5], CONVERTEDAMOUNT=[$t18])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[1, 2]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], filterOp=[COMP_LT], filterOrdinals=[[3]], dynamicParameters=[[2]], paramCompareOffsets=[[3]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE) NOT NULL])'
'        FennelTempIdxSearchRel(indexKeys=[[0, 4]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[1, 2, 1]], keyOffsets=[[0, 1, 2]], rootPageIdParamId=[3])'
'          FennelValuesRel(tuples=[[{ '(', null, null, '+', null, null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0, 4]])'
'        FennelSortRel(key=[[0, 4]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
> 
> -- Index lookup + calc
> explain plan for
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, toDate,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on trim(currency) = trim(fromCurrency) and xactDate >= fromDate;
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[Reinterpret($t1)], expr#10=[CAST($t9):DOUBLE NOT NULL], expr#11=[1E2], expr#12=[/INT($t10, $t11)], expr#13=[*($t12, $t6)], expr#14=[*($t13, $t11)], expr#15=[CAST($t14):BIGINT], expr#16=[true], expr#17=[Reinterpret($t15, $t16)], XID=[$t0], XACTDATE=[$t3], CURRENCY=[$t2], ORIGAMOUNT=[$t1], TOCURRENCY=[$t5], TODATE=[$t8], CONVERTEDAMOUNT=[$t17])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[2, 1]])'
'      LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..5=[{inputs}], expr#6=[FLAG(BOTH)], expr#7=[' '], expr#8=[TRIM($t6, $t7, $t5)], expr#9=[TRIM($t6, $t7, $t0)], expr#10=[=($t8, $t9)], proj#0..4=[{exprs}], $condition=[$t10])'
'          FennelToIteratorConverter'
'            FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], dynamicParameters=[[2]], paramCompareOffsets=[[-1]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE, CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY) NOT NULL])'
'              FennelTempIdxSearchRel(indexKeys=[[3]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[3])'
'                FennelValuesRel(tuples=[[{ '(', null, ']', null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[3]])'
'        FennelSortRel(key=[[3]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
> 
> -- Index lookup + reshape + calc
> explain plan for
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on xactDate between fromDate and toDate and
>         trim(currency) = trim(fromCurrency);
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[Reinterpret($t1)], expr#10=[CAST($t9):DOUBLE NOT NULL], expr#11=[1E2], expr#12=[/INT($t10, $t11)], expr#13=[*($t12, $t6)], expr#14=[*($t13, $t11)], expr#15=[CAST($t14):BIGINT], expr#16=[true], expr#17=[Reinterpret($t15, $t16)], XID=[$t0], XACTDATE=[$t3], CURRENCY=[$t2], ORIGAMOUNT=[$t1], TOCURRENCY=[$t5], CONVERTEDAMOUNT=[$t17])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[2, 1]])'
'      LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..5=[{inputs}], expr#6=[FLAG(BOTH)], expr#7=[' '], expr#8=[TRIM($t6, $t7, $t5)], expr#9=[TRIM($t6, $t7, $t0)], expr#10=[=($t8, $t9)], proj#0..4=[{exprs}], $condition=[$t10])'
'          FennelToIteratorConverter'
'            FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], filterOp=[COMP_GE], filterOrdinals=[[4]], dynamicParameters=[[1, 2]], paramCompareOffsets=[[4, -1]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE, CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY) NOT NULL])'
'              FennelTempIdxSearchRel(indexKeys=[[3]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[3])'
'                FennelValuesRel(tuples=[[{ '(', null, ']', null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[3]])'
'        FennelSortRel(key=[[3]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
> 
> -- Calc only
> explain plan for
> select xid, xactDate, currency, amount as origAmount,
>         fromCurrency, toCurrency, fromDate, toDate,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts, convRates
>     where currency in (fromCurrency, toCurrency);
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[Reinterpret($t6)], expr#10=[CAST($t9):DOUBLE NOT NULL], expr#11=[1E2], expr#12=[/INT($t10, $t11)], expr#13=[*($t12, $t2)], expr#14=[*($t13, $t11)], expr#15=[CAST($t14):BIGINT], expr#16=[true], expr#17=[Reinterpret($t15, $t16)], XID=[$t5], XACTDATE=[$t8], CURRENCY=[$t7], ORIGAMOUNT=[$t6], FROMCURRENCY=[$t0], TOCURRENCY=[$t1], FROMDATE=[$t3], TODATE=[$t4], CONVERTEDAMOUNT=[$t17])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1, 0]], joinKeyParamIds=[[2, 1]])'
'      LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..5=[{inputs}], expr#6=[=($t2, $t4)], expr#7=[=($t2, $t5)], expr#8=[OR($t6, $t7)], proj#0..3=[{exprs}], $condition=[$t8])'
'          FennelToIteratorConverter'
'            FennelReshapeRel(projection=[[0, 1, 2, 3]], dynamicParameters=[[1, 2]], paramCompareOffsets=[[-1, -1]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY) NOT NULL])'
'              LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]])'
> 
> -- RHS of join should be buffered
> explain plan for
> select xid, xactDate, currency, amount as origAmount,
>         fromCurrency, toCurrency, fromDate, toDate,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts, convRates
>     where currency in (fromCurrency, toCurrency) and toCurrency = 'USD'
>         and fromCurrency = 'JPY';
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[Reinterpret($t1)], expr#10=[CAST($t9):DOUBLE NOT NULL], expr#11=[1E2], expr#12=[/INT($t10, $t11)], expr#13=[*($t12, $t6)], expr#14=[*($t13, $t11)], expr#15=[CAST($t14):BIGINT], expr#16=[true], expr#17=[Reinterpret($t15, $t16)], XID=[$t0], XACTDATE=[$t3], CURRENCY=[$t2], ORIGAMOUNT=[$t1], FROMCURRENCY=[$t4], TOCURRENCY=[$t5], FROMDATE=[$t7], TODATE=[$t8], CONVERTEDAMOUNT=[$t17])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[2]], joinKeyParamIds=[[1]])'
'      LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..5=[{inputs}], expr#6=[=($t5, $t0)], expr#7=[=($t5, $t1)], expr#8=[OR($t6, $t7)], proj#0..4=[{exprs}], $condition=[$t8])'
'          FennelToIteratorConverter'
'            FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], dynamicParameters=[[1]], paramCompareOffsets=[[-1]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE, CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY) NOT NULL])'
'              FennelBufferRel(inMemory=[false], multiPass=[true])'
'                LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]], residual columns=[[0, 1]])'
'                  FennelValuesRel(tuples=[[{ '[', 'JPY', ']', 'JPY' }]])'
'                  FennelValuesRel(tuples=[[{ '[', 'USD', ']', 'USD' }]])'
> 
> -- Right outer join
> explain plan for
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, 
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from convRates right outer join xacts
>     on currency = fromCurrency and xactDate between fromDate and toDate;
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t2):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#10=[Reinterpret($t1)], expr#11=[CAST($t10):DOUBLE NOT NULL], expr#12=[1E2], expr#13=[/INT($t11, $t12)], expr#14=[*($t13, $t6)], expr#15=[*($t14, $t12)], expr#16=[CAST($t15):BIGINT], expr#17=[true], expr#18=[Reinterpret($t16, $t17)], XID=[$t0], XACTDATE=[$t3], CURRENCY=[$t9], ORIGAMOUNT=[$t1], TOCURRENCY=[$t5], CONVERTEDAMOUNT=[$t18])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[1, 2]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], filterOp=[COMP_GE], filterOrdinals=[[4]], dynamicParameters=[[2]], paramCompareOffsets=[[4]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE) NOT NULL])'
'        FennelTempIdxSearchRel(indexKeys=[[0, 3]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[1, 1, 2]], keyOffsets=[[0, 2, 3]], rootPageIdParamId=[3])'
'          FennelValuesRel(tuples=[[{ '(', null, null, ']', null, null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0, 3]])'
'        FennelSortRel(key=[[0, 3]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
> 
> -- Table level filters applied on tables
> explain plan for
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, 
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and xactDate between fromDate and toDate
>         and toCurrency = 'JPY';
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t2):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#10=[Reinterpret($t1)], expr#11=[CAST($t10):DOUBLE NOT NULL], expr#12=[1E2], expr#13=[/INT($t11, $t12)], expr#14=[*($t13, $t6)], expr#15=[*($t14, $t12)], expr#16=[CAST($t15):BIGINT], expr#17=[true], expr#18=[Reinterpret($t16, $t17)], XID=[$t0], XACTDATE=[$t3], CURRENCY=[$t9], ORIGAMOUNT=[$t1], TOCURRENCY=[$t5], CONVERTEDAMOUNT=[$t18])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[1, 2]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], filterOp=[COMP_GE], filterOrdinals=[[4]], dynamicParameters=[[2]], paramCompareOffsets=[[4]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE) NOT NULL])'
'        FennelTempIdxSearchRel(indexKeys=[[0, 3]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[1, 1, 2]], keyOffsets=[[0, 2, 3]], rootPageIdParamId=[3])'
'          FennelValuesRel(tuples=[[{ '(', null, null, ']', null, null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0, 3]])'
'        FennelSortRel(key=[[0, 3]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]], residual columns=[[1]])'
'            FennelValuesRel(tuples=[[{ '[', 'JPY', ']', 'JPY' }]])'
> explain plan for
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, 
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and xactDate between fromDate and toDate
>         and currency = 'USD';
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t2):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#10=[Reinterpret($t1)], expr#11=[CAST($t10):DOUBLE NOT NULL], expr#12=[1E2], expr#13=[/INT($t11, $t12)], expr#14=[*($t13, $t6)], expr#15=[*($t14, $t12)], expr#16=[CAST($t15):BIGINT], expr#17=[true], expr#18=[Reinterpret($t16, $t17)], XID=[$t0], XACTDATE=[$t3], CURRENCY=[$t9], ORIGAMOUNT=[$t1], TOCURRENCY=[$t5], CONVERTEDAMOUNT=[$t18])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[1, 2]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], filterOp=[COMP_EQ], filterOrdinals=[[5]], filterTuple=[['USD']], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE) NOT NULL])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], filterOp=[COMP_GE], filterOrdinals=[[4]], dynamicParameters=[[2, 1]], paramCompareOffsets=[[4, -1]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY) NOT NULL])'
'          FennelTempIdxSearchRel(indexKeys=[[0, 3]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[1, 1, 2]], keyOffsets=[[0, 2, 3]], rootPageIdParamId=[3])'
'            FennelValuesRel(tuples=[[{ '(', null, null, ']', null, null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0, 3]])'
'        FennelSortRel(key=[[0, 3]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
> explain plan for
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and xactDate between fromDate and toDate
>         and currency = 'EUR' and toCurrency = 'GBP';
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t2):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#10=[Reinterpret($t1)], expr#11=[CAST($t10):DOUBLE NOT NULL], expr#12=[1E2], expr#13=[/INT($t11, $t12)], expr#14=[*($t13, $t6)], expr#15=[*($t14, $t12)], expr#16=[CAST($t15):BIGINT], expr#17=[true], expr#18=[Reinterpret($t16, $t17)], XID=[$t0], XACTDATE=[$t3], CURRENCY=[$t9], ORIGAMOUNT=[$t1], TOCURRENCY=[$t5], CONVERTEDAMOUNT=[$t18])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[1, 2]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], filterOp=[COMP_EQ], filterOrdinals=[[5]], filterTuple=[['EUR']], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE) NOT NULL])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], filterOp=[COMP_GE], filterOrdinals=[[4]], dynamicParameters=[[2, 1]], paramCompareOffsets=[[4, -1]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY) NOT NULL])'
'          FennelTempIdxSearchRel(indexKeys=[[0, 3]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[1, 1, 2]], keyOffsets=[[0, 2, 3]], rootPageIdParamId=[3])'
'            FennelValuesRel(tuples=[[{ '(', null, null, ']', null, null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0, 3]])'
'        FennelSortRel(key=[[0, 3]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]], residual columns=[[1]])'
'            FennelValuesRel(tuples=[[{ '[', 'GBP', ']', 'GBP' }]])'
> explain plan for
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, 
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and xactDate between fromDate and toDate
>     where toCurrency = 'JPY';
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t2):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#10=[Reinterpret($t1)], expr#11=[CAST($t10):DOUBLE NOT NULL], expr#12=[1E2], expr#13=[/INT($t11, $t12)], expr#14=[*($t13, $t6)], expr#15=[*($t14, $t12)], expr#16=[CAST($t15):BIGINT], expr#17=[true], expr#18=[Reinterpret($t16, $t17)], expr#19=['JPY'], expr#20=[=($t5, $t19)], XID=[$t0], XACTDATE=[$t3], CURRENCY=[$t9], ORIGAMOUNT=[$t1], TOCURRENCY=[$t5], CONVERTEDAMOUNT=[$t18], $condition=[$t20])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[1, 2]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], filterOp=[COMP_GE], filterOrdinals=[[4]], dynamicParameters=[[2]], paramCompareOffsets=[[4]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE) NOT NULL])'
'        FennelTempIdxSearchRel(indexKeys=[[0, 3]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[1, 1, 2]], keyOffsets=[[0, 2, 3]], rootPageIdParamId=[3])'
'          FennelValuesRel(tuples=[[{ '(', null, null, ']', null, null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0, 3]])'
'        FennelSortRel(key=[[0, 3]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
> explain plan for
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, 
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and xactDate between fromDate and toDate
>     where currency = 'USD';
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t2):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#10=[Reinterpret($t1)], expr#11=[CAST($t10):DOUBLE NOT NULL], expr#12=[1E2], expr#13=[/INT($t11, $t12)], expr#14=[*($t13, $t6)], expr#15=[*($t14, $t12)], expr#16=[CAST($t15):BIGINT], expr#17=[true], expr#18=[Reinterpret($t16, $t17)], XID=[$t0], XACTDATE=[$t3], CURRENCY=[$t9], ORIGAMOUNT=[$t1], TOCURRENCY=[$t5], CONVERTEDAMOUNT=[$t18])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[1, 2]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]], residual columns=[[2]])'
'          FennelValuesRel(tuples=[[{ '[', 'USD', ']', 'USD' }]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], filterOp=[COMP_GE], filterOrdinals=[[4]], dynamicParameters=[[2]], paramCompareOffsets=[[4]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE) NOT NULL])'
'        FennelTempIdxSearchRel(indexKeys=[[0, 3]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[1, 1, 2]], keyOffsets=[[0, 2, 3]], rootPageIdParamId=[3])'
'          FennelValuesRel(tuples=[[{ '(', null, null, ']', null, null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0, 3]])'
'        FennelSortRel(key=[[0, 3]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
> explain plan for
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on currency = fromCurrency and xactDate between fromDate and toDate
>     where currency = 'EUR' and toCurrency = 'GBP';
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t2):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#10=[Reinterpret($t1)], expr#11=[CAST($t10):DOUBLE NOT NULL], expr#12=[1E2], expr#13=[/INT($t11, $t12)], expr#14=[*($t13, $t6)], expr#15=[*($t14, $t12)], expr#16=[CAST($t15):BIGINT], expr#17=[true], expr#18=[Reinterpret($t16, $t17)], expr#19=['GBP'], expr#20=[=($t5, $t19)], XID=[$t0], XACTDATE=[$t3], CURRENCY=[$t9], ORIGAMOUNT=[$t1], TOCURRENCY=[$t5], CONVERTEDAMOUNT=[$t18], $condition=[$t20])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[1, 2]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]], residual columns=[[2]])'
'          FennelValuesRel(tuples=[[{ '[', 'EUR', ']', 'EUR' }]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], filterOp=[COMP_GE], filterOrdinals=[[4]], dynamicParameters=[[2]], paramCompareOffsets=[[4]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE) NOT NULL])'
'        FennelTempIdxSearchRel(indexKeys=[[0, 3]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[1, 1, 2]], keyOffsets=[[0, 2, 3]], rootPageIdParamId=[3])'
'          FennelValuesRel(tuples=[[{ '(', null, null, ']', null, null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0, 3]])'
'        FennelSortRel(key=[[0, 3]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
> 
> -- Multi-way joins
> explain plan for
> select v1.xid, v1.xactDate, v1.currency, v1.origAmount, v1.toCurrency,
>         v1.convertedAmount, v2.toCurrency, v2.convertedAmount
>     from v v1, v v2
>     where v1.currency = 'EUR' and v1.toCurrency = 'GBP' and
>         v2.toCurrency = 'JPY' and v1.xid = v2.xid;
'column0'
'IterCalcRel(expr#0..9=[{inputs}], expr#10=[Reinterpret($t5)], expr#11=[CAST($t10):DOUBLE NOT NULL], expr#12=[1E2], expr#13=[/INT($t11, $t12)], expr#14=[*($t13, $t9)], expr#15=[*($t14, $t12)], expr#16=[CAST($t15):BIGINT], expr#17=[true], expr#18=[Reinterpret($t16, $t17)], expr#19=[Reinterpret($t1)], expr#20=[CAST($t19):DOUBLE NOT NULL], expr#21=[/INT($t20, $t12)], expr#22=[*($t21, $t3)], expr#23=[*($t22, $t12)], expr#24=[CAST($t23):BIGINT], expr#25=[Reinterpret($t24, $t17)], XID=[$t4], XACTDATE=[$t7], CURRENCY=[$t6], ORIGAMOUNT=[$t5], TOCURRENCY=[$t8], CONVERTEDAMOUNT=[$t18], TOCURRENCY0=[$t2], CONVERTEDAMOUNT0=[$t25])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'      FennelReshapeRel(projection=[[0, 1, 5, 6]], filterOp=[COMP_EQ], filterOrdinals=[[5]], filterTuple=[['JPY']], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" TOCURRENCY, DOUBLE RATE) NOT NULL])'
'        FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[4, 5]])'
'          FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'            LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]])'
'          FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], filterOp=[COMP_GE], filterOrdinals=[[4]], dynamicParameters=[[5]], paramCompareOffsets=[[4]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE) NOT NULL])'
'            FennelTempIdxSearchRel(indexKeys=[[0, 3]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[4, 4, 5]], keyOffsets=[[0, 2, 3]], rootPageIdParamId=[6])'
'              FennelValuesRel(tuples=[[{ '(', null, null, ']', null, null }]])'
'          FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[6], indexCols=[[0, 3]])'
'            FennelSortRel(key=[[0, 3]], discardDuplicates=[false])'
'              LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t2):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#10=['GBP'], expr#11=[=($t5, $t10)], proj#0..1=[{exprs}], CURRENCY=[$t9], XACTDATE=[$t3], TOCURRENCY=[$t5], RATE=[$t6], $condition=[$t11])'
'          FennelToIteratorConverter'
'            FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[1, 2]])'
'              FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'                LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]], residual columns=[[2]])'
'                  FennelValuesRel(tuples=[[{ '[', 'EUR', ']', 'EUR' }]])'
'              FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], filterOp=[COMP_GE], filterOrdinals=[[4]], dynamicParameters=[[2]], paramCompareOffsets=[[4]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE) NOT NULL])'
'                FennelTempIdxSearchRel(indexKeys=[[0, 3]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[1, 1, 2]], keyOffsets=[[0, 2, 3]], rootPageIdParamId=[3])'
'                  FennelValuesRel(tuples=[[{ '(', null, null, ']', null, null }]])'
'              FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0, 3]])'
'                FennelSortRel(key=[[0, 3]], discardDuplicates=[false])'
'                  LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
> explain plan for
> select v1.xid, v1.xactDate, v2.xactDate as xactDate2, v1.currency,
>         v1.origAmount, v1.toCurrency, v1.convertedAmount, v2.toCurrency,
>         v2.convertedAmount
>     from v v1 left outer join v v2
>     on v1.xactDate > v2.xactDate
>     where v1.currency = 'EUR' and v1.toCurrency = 'GBP' and
>         v2.toCurrency = 'JPY';
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[Reinterpret($t1)], expr#10=[CAST($t9):DOUBLE NOT NULL], expr#11=[1E2], expr#12=[/INT($t10, $t11)], expr#13=[*($t12, $t5)], expr#14=[*($t13, $t11)], expr#15=[CAST($t14):BIGINT], expr#16=[true], expr#17=[Reinterpret($t15, $t16)], expr#18=['JPY'], expr#19=[=($t7, $t18)], XID=[$t0], XACTDATE=[$t3], XACTDATE2=[$t6], CURRENCY=[$t2], ORIGAMOUNT=[$t1], TOCURRENCY=[$t4], CONVERTEDAMOUNT=[$t17], TOCURRENCY0=[$t7], CONVERTEDAMOUNT0=[$t8], $condition=[$t19])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[3]], joinKeyParamIds=[[1]])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t2):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#10=['GBP'], expr#11=[=($t5, $t10)], proj#0..1=[{exprs}], CURRENCY=[$t9], XACTDATE=[$t3], TOCURRENCY=[$t5], RATE=[$t6], $condition=[$t11])'
'          FennelToIteratorConverter'
'            FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[6, 7]])'
'              FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'                LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]], residual columns=[[2]])'
'                  FennelValuesRel(tuples=[[{ '[', 'EUR', ']', 'EUR' }]])'
'              FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], filterOp=[COMP_GE], filterOrdinals=[[4]], dynamicParameters=[[7]], paramCompareOffsets=[[4]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE) NOT NULL])'
'                FennelTempIdxSearchRel(indexKeys=[[0, 3]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[6, 6, 7]], keyOffsets=[[0, 2, 3]], rootPageIdParamId=[8])'
'                  FennelValuesRel(tuples=[[{ '(', null, null, ']', null, null }]])'
'              FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[8], indexCols=[[0, 3]])'
'                FennelSortRel(key=[[0, 3]], discardDuplicates=[false])'
'                  LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
'      FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[2])'
'        FennelValuesRel(tuples=[[{ '(', null, ')', null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[2], indexCols=[[0]])'
'        FennelSortRel(key=[[0]], discardDuplicates=[false])'
'          IteratorToFennelConverter'
'            IterCalcRel(expr#0..7=[{inputs}], expr#8=[Reinterpret($t0)], expr#9=[CAST($t8):DOUBLE NOT NULL], expr#10=[1E2], expr#11=[/INT($t9, $t10)], expr#12=[*($t11, $t5)], expr#13=[*($t12, $t10)], expr#14=[CAST($t13):BIGINT], expr#15=[true], expr#16=[Reinterpret($t14, $t15)], XACTDATE=[$t2], TOCURRENCY=[$t4], CONVERTEDAMOUNT=[$t16])'
'              FennelToIteratorConverter'
'                FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 1]], joinKeyParamIds=[[4, 3]])'
'                  FennelReshapeRel(projection=[[0, 1, 2]], outputRowType=[RecordType(DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'                    LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[[1, 2, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE]])'
'                  FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], filterOp=[COMP_GE], filterOrdinals=[[4]], dynamicParameters=[[4]], paramCompareOffsets=[[4]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE) NOT NULL])'
'                    FennelTempIdxSearchRel(indexKeys=[[0, 3]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[3, 3, 4]], keyOffsets=[[0, 2, 3]], rootPageIdParamId=[5])'
'                      FennelValuesRel(tuples=[[{ '(', null, null, ']', null, null }]])'
'                  FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[5], indexCols=[[0, 3]])'
'                    FennelSortRel(key=[[0, 3]], discardDuplicates=[false])'
'                      LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
> 
> -- Merge
> explain plan for
> merge into target t
>     using v on t.xid = v.xid and t.currency = v.currency and
>         t.toCurrency = v.toCurrency and t.xactDate = v.xactDate
>     when matched then
>         update set convertedAmount = v.convertedAmount + 10.56
>     when not matched then
>         insert values(
>         v.xid, v.xactDate, v.currency, v.toCurrency, v.origAmount,
>             v.convertedAmount);
'column0'
'FennelToIteratorConverter'
'  LcsTableMergeRel(table=[[LOCALDB, NLJ, TARGET]])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0..13=[{inputs}], expr#14=[IS NULL($t6)], expr#15=[CASE($t14, $t9, $t0)], expr#16=[CAST($t15):INTEGER NOT NULL], expr#17=[CASE($t14, $t12, $t1)], expr#18=[CASE($t14, $t11, $t2)], expr#19=[CASE($t14, $t7, $t3)], expr#20=[Reinterpret($t10)], expr#21=[Reinterpret($t20)], expr#22=[Reinterpret($t21)], expr#23=[Reinterpret($t4)], expr#24=[CASE($t14, $t22, $t23)], expr#25=[Reinterpret($t24)], expr#26=[CAST($t20):DOUBLE NOT NULL], expr#27=[1E2], expr#28=[/INT($t26, $t27)], expr#29=[*($t28, $t8)], expr#30=[*($t29, $t27)], expr#31=[CAST($t30):BIGINT], expr#32=[true], expr#33=[Reinterpret($t31, $t32)], expr#34=[10.56], expr#35=[Reinterpret($t33)], expr#36=[Reinterpret($t34)], expr#37=[+($t35, $t36)], expr#38=[Reinterpret($t37)], expr#39=[Reinterpret($t38)], expr#40=[CASE($t14, $t35, $t39)], expr#41=[Reinterpret($t40)], expr#42=[Reinterpret($t41)], expr#43=[Reinterpret($t42, $t32)], expr#44=[ROW($t5)], expr#45=[Reinterpret($t39, $t32)], expr#46=[ROW($t45)], expr#47=[$IS_DIFFERENT_FROM($t44, $t46)], expr#48=[OR($t14, $t47)], rid=[$t6], XID=[$t16], XACTDATE=[$t17], CURRENCY=[$t18], TOCURRENCY=[$t19], AMOUNT=[$t25], CONVERTEDAMOUNT=[$t43], $condition=[$t48])'
'        FennelToIteratorConverter'
'          LhxJoinRel(leftKeys=[[0, 2, 3, 1]], rightKeys=[[2, 6, 0, 5]], joinType=[RIGHT])'
'            LcsRowScanRel(table=[[LOCALDB, NLJ, TARGET]], projection=[[0, 1, 2, 3, 4, 5, LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$TARGET$AMOUNT, SYS$CLUSTERED_INDEX$TARGET$CONVERTEDAMOUNT, SYS$CLUSTERED_INDEX$TARGET$CURRENCY, SYS$CLUSTERED_INDEX$TARGET$TOCURRENCY, SYS$CLUSTERED_INDEX$TARGET$XACTDATE, SYS$CLUSTERED_INDEX$TARGET$XID]])'
'            IteratorToFennelConverter'
'              IterCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t2):CHAR(3) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#10=[CAST($t9):VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], TOCURRENCY=[$t5], RATE=[$t6], XID=[$t0], AMOUNT=[$t1], CURRENCY=[$t9], XACTDATE=[$t3], CAST($4):VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"=[$t10])'
'                FennelToIteratorConverter'
'                  FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 3]], joinKeyParamIds=[[1, 2]])'
'                    FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL XID, DECIMAL(10, 2) NOT NULL AMOUNT, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, DATE XACTDATE) NOT NULL])'
'                      LcsRowScanRel(table=[[LOCALDB, NLJ, XACTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$XACTS$AMOUNT, SYS$CLUSTERED_INDEX$XACTS$CURRENCY, SYS$CLUSTERED_INDEX$XACTS$XACTDATE, SYS$CLUSTERED_INDEX$XACTS$XID]])'
'                    FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], filterOp=[COMP_GE], filterOrdinals=[[4]], dynamicParameters=[[2]], paramCompareOffsets=[[4]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE NOT NULL TODATE) NOT NULL])'
'                      FennelTempIdxSearchRel(indexKeys=[[0, 3]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[1, 1, 2]], keyOffsets=[[0, 2, 3]], rootPageIdParamId=[3])'
'                        FennelValuesRel(tuples=[[{ '(', null, null, ']', null, null }]])'
'                    FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0, 3]])'
'                      FennelSortRel(key=[[0, 3]], discardDuplicates=[false])'
'                        LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
> explain plan for
> merge into target t
>     using convRates cv on t.currency = cv.fromCurrency and
>         t.toCurrency = cv.toCurrency and
>         t.xactDate between cv.fromDate and cv.toDate
>     when matched then
>         update set convertedAmount =
>             cast((t.convertedAmount - 10.56)/cv.rate  as decimal(10,2))
>     when not matched then
>         insert values(-1, cv.fromDate, cv.fromCurrency, cv.toCurrency,
>             null, null);
'column0'
'FennelToIteratorConverter'
'  LcsTableMergeRel(table=[[LOCALDB, NLJ, TARGET]])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0..11=[{inputs}], expr#12=[CAST($t0):VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], expr#13=[CAST($t1):VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], expr#14=[IS NULL($t11)], expr#15=[-1], expr#16=[CASE($t14, $t15, $t5)], expr#17=[CAST($t16):INTEGER NOT NULL], expr#18=[CASE($t14, $t3, $t6)], expr#19=[CASE($t14, $t12, $t7)], expr#20=[CASE($t14, $t13, $t8)], expr#21=[null], expr#22=[CAST($t21):DECIMAL(10, 2)], expr#23=[Reinterpret($t22)], expr#24=[Reinterpret($t9)], expr#25=[CASE($t14, $t23, $t24)], expr#26=[Reinterpret($t25)], expr#27=[10.56], expr#28=[Reinterpret($t10)], expr#29=[Reinterpret($t27)], expr#30=[-($t28, $t29)], expr#31=[Reinterpret($t30)], expr#32=[Reinterpret($t31)], expr#33=[CAST($t32):DOUBLE], expr#34=[1E2], expr#35=[/INT($t33, $t34)], expr#36=[/($t35, $t2)], expr#37=[*($t36, $t34)], expr#38=[CAST($t37):BIGINT], expr#39=[true], expr#40=[Reinterpret($t38, $t39)], expr#41=[Reinterpret($t40)], expr#42=[CASE($t14, $t23, $t41)], expr#43=[Reinterpret($t42)], expr#44=[ROW($t10)], expr#45=[ROW($t40)], expr#46=[$IS_DIFFERENT_FROM($t44, $t45)], expr#47=[OR($t14, $t46)], rid=[$t11], XID=[$t17], XACTDATE=[$t18], CURRENCY=[$t19], TOCURRENCY=[$t20], AMOUNT=[$t26], CONVERTEDAMOUNT=[$t43], $condition=[$t47])'
'        FennelToIteratorConverter'
'          FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[4, 1, 3, 0]], joinKeyParamIds=[[4, 2, 3, 1]])'
'            FennelReshapeRel(projection=[[0, 1, 2, 3, 4]], outputRowType=[RecordType(VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" FROMCURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" TOCURRENCY, DOUBLE RATE, DATE FROMDATE, DATE TODATE) NOT NULL])'
'              LcsRowScanRel(table=[[LOCALDB, NLJ, CONVRATES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CONVRATES$FROMCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$FROMDATE, SYS$CLUSTERED_INDEX$CONVRATES$RATE, SYS$CLUSTERED_INDEX$CONVRATES$TOCURRENCY, SYS$CLUSTERED_INDEX$CONVRATES$TODATE]])'
'            FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5, 6]], filterOp=[COMP_LE], filterOrdinals=[[1]], dynamicParameters=[[4]], paramCompareOffsets=[[1]], outputRowType=[RecordType(INTEGER NOT NULL XID, DATE XACTDATE, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CURRENCY, VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" TOCURRENCY, DECIMAL(10, 2) AMOUNT, DECIMAL(10, 2) CONVERTEDAMOUNT, BIGINT LCS_RID) NOT NULL])'
'              FennelTempIdxSearchRel(indexKeys=[[2, 3, 1]], inputKeyProj=[[1, 2, 3, 5, 6, 7]], inputDirectiveProj=[[0, 4]], searchKeyParamIds=[[1, 2, 3, 1, 2]], keyOffsets=[[0, 1, 2, 3, 4]], rootPageIdParamId=[5])'
'                FennelValuesRel(tuples=[[{ '[', null, null, null, '+', null, null, null }]])'
'            FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[5], indexCols=[[2, 3, 1]])'
'              FennelSortRel(key=[[2, 3, 1]], discardDuplicates=[false])'
'                LcsRowScanRel(table=[[LOCALDB, NLJ, TARGET]], projection=[[0, 1, 2, 3, 4, 5, LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$TARGET$AMOUNT, SYS$CLUSTERED_INDEX$TARGET$CONVERTEDAMOUNT, SYS$CLUSTERED_INDEX$TARGET$CURRENCY, SYS$CLUSTERED_INDEX$TARGET$TOCURRENCY, SYS$CLUSTERED_INDEX$TARGET$XACTDATE, SYS$CLUSTERED_INDEX$TARGET$XID]])'
> 
> -- casting feasible
> explain plan for
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.id = i_n.id and i_nn.a > i_n.a;
'column0'
'IterCalcRel(expr#0..7=[{inputs}], expr#8=[CAST($t1):BIGINT NOT NULL], ID=[$t0], A=[$t8], B=[$t2], C=[$t3], ID0=[$t4], A0=[$t5], B0=[$t6], C0=[$t7])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[1, 0]], joinKeyParamIds=[[2, 1]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL ID, BIGINT A, INTEGER NOT NULL B, SMALLINT NOT NULL C) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, INTS_NOTNULLABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$A, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$B, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$C, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$ID]])'
'      FennelTempIdxSearchRel(indexKeys=[[0, 1]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[1, 1, 2]], keyOffsets=[[0, 2, 3]], rootPageIdParamId=[3])'
'        FennelValuesRel(tuples=[[{ '(', null, null, ')', null, null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0, 1]])'
'        FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, INTS_NULLABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$INTS_NULLABLE$A, SYS$CLUSTERED_INDEX$INTS_NULLABLE$B, SYS$CLUSTERED_INDEX$INTS_NULLABLE$C, SYS$CLUSTERED_INDEX$INTS_NULLABLE$ID]])'
> 
> -- casting not feasible because LHS can't be cast to RHS's type
> explain plan for
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.id = i_n.id and i_nn.a > i_n.b;
'column0'
'FennelToIteratorConverter'
'  FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[1, 0]], joinKeyParamIds=[[2, 1]])'
'    LcsRowScanRel(table=[[LOCALDB, NLJ, INTS_NOTNULLABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$A, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$B, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$C, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$ID]])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0..4=[{inputs}], expr#5=[>($t4, $t2)], proj#0..3=[{exprs}], $condition=[$t5])'
'        FennelToIteratorConverter'
'          FennelReshapeRel(projection=[[0, 1, 2, 3]], dynamicParameters=[[2]], paramCompareOffsets=[[-1]], outputRowType=[RecordType(INTEGER NOT NULL ID, BIGINT A, INTEGER B, SMALLINT C, BIGINT NOT NULL A) NOT NULL])'
'            FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1, 1]], keyOffsets=[[0, 1]], rootPageIdParamId=[3])'
'              FennelValuesRel(tuples=[[{ '[', null, ']', null }]])'
'    FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0]])'
'      FennelSortRel(key=[[0]], discardDuplicates=[false])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, INTS_NULLABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$INTS_NULLABLE$A, SYS$CLUSTERED_INDEX$INTS_NULLABLE$B, SYS$CLUSTERED_INDEX$INTS_NULLABLE$C, SYS$CLUSTERED_INDEX$INTS_NULLABLE$ID]])'
> explain plan for
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.a = i_n.b and i_nn.id >= i_n.id;
'column0'
'FennelToIteratorConverter'
'  FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[1, 0]], joinKeyParamIds=[[2, 1]])'
'    LcsRowScanRel(table=[[LOCALDB, NLJ, INTS_NOTNULLABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$A, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$B, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$C, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$ID]])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0..4=[{inputs}], expr#5=[=($t4, $t2)], proj#0..3=[{exprs}], $condition=[$t5])'
'        FennelToIteratorConverter'
'          FennelReshapeRel(projection=[[0, 1, 2, 3]], dynamicParameters=[[2]], paramCompareOffsets=[[-1]], outputRowType=[RecordType(INTEGER NOT NULL ID, BIGINT A, INTEGER B, SMALLINT C, BIGINT NOT NULL A) NOT NULL])'
'            FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[3])'
'              FennelValuesRel(tuples=[[{ '(', null, ']', null }]])'
'    FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0]])'
'      FennelSortRel(key=[[0]], discardDuplicates=[false])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, INTS_NULLABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$INTS_NULLABLE$A, SYS$CLUSTERED_INDEX$INTS_NULLABLE$B, SYS$CLUSTERED_INDEX$INTS_NULLABLE$C, SYS$CLUSTERED_INDEX$INTS_NULLABLE$ID]])'
> 
> -- LHS is cast to two different types
> explain plan for
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.id = i_n.id and i_nn.c >= i_n.a and i_nn.c < i_n.b;
'column0'
'IterCalcRel(expr#0..7=[{inputs}], expr#8=[CAST($t3):SMALLINT NOT NULL], proj#0..2=[{exprs}], C=[$t8], ID0=[$t4], A0=[$t5], B0=[$t6], C0=[$t7])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[3, 0]], joinKeyParamIds=[[2, 1]])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..3=[{inputs}], expr#4=[CAST($t3):BIGINT], proj#0..2=[{exprs}], C=[$t4])'
'          FennelToIteratorConverter'
'            LcsRowScanRel(table=[[LOCALDB, NLJ, INTS_NOTNULLABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$A, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$B, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$C, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$ID]])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..4=[{inputs}], expr#5=[<($t4, $t2)], proj#0..3=[{exprs}], $condition=[$t5])'
'          FennelToIteratorConverter'
'            FennelReshapeRel(projection=[[0, 1, 2, 3]], dynamicParameters=[[2]], paramCompareOffsets=[[-1]], outputRowType=[RecordType(INTEGER NOT NULL ID, BIGINT A, INTEGER B, SMALLINT C, BIGINT C) NOT NULL])'
'              FennelTempIdxSearchRel(indexKeys=[[0, 1]], inputKeyProj=[[1, 2, 4, 5]], inputDirectiveProj=[[0, 3]], searchKeyParamIds=[[1, 1, 2]], keyOffsets=[[0, 2, 3]], rootPageIdParamId=[3])'
'                FennelValuesRel(tuples=[[{ '(', null, null, ']', null, null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0, 1]])'
'        FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, INTS_NULLABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$INTS_NULLABLE$A, SYS$CLUSTERED_INDEX$INTS_NULLABLE$B, SYS$CLUSTERED_INDEX$INTS_NULLABLE$C, SYS$CLUSTERED_INDEX$INTS_NULLABLE$ID]])'
> explain plan for
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.c = i_n.a and i_nn.c < i_n.b;
'column0'
'IterCalcRel(expr#0..7=[{inputs}], expr#8=[CAST($t3):SMALLINT NOT NULL], proj#0..2=[{exprs}], C=[$t8], ID0=[$t4], A0=[$t5], B0=[$t6], C0=[$t7])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[3]], joinKeyParamIds=[[1]])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..3=[{inputs}], expr#4=[CAST($t3):BIGINT], proj#0..2=[{exprs}], C=[$t4])'
'          FennelToIteratorConverter'
'            LcsRowScanRel(table=[[LOCALDB, NLJ, INTS_NOTNULLABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$A, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$B, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$C, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$ID]])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..4=[{inputs}], expr#5=[<($t4, $t2)], proj#0..3=[{exprs}], $condition=[$t5])'
'          FennelToIteratorConverter'
'            FennelReshapeRel(projection=[[0, 1, 2, 3]], dynamicParameters=[[1]], paramCompareOffsets=[[-1]], outputRowType=[RecordType(INTEGER NOT NULL ID, BIGINT A, INTEGER B, SMALLINT C, BIGINT C) NOT NULL])'
'              FennelTempIdxSearchRel(indexKeys=[[1]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1, 1]], keyOffsets=[[0, 1]], rootPageIdParamId=[2])'
'                FennelValuesRel(tuples=[[{ '[', null, ']', null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[2], indexCols=[[1]])'
'        FennelSortRel(key=[[1]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, INTS_NULLABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$INTS_NULLABLE$A, SYS$CLUSTERED_INDEX$INTS_NULLABLE$B, SYS$CLUSTERED_INDEX$INTS_NULLABLE$C, SYS$CLUSTERED_INDEX$INTS_NULLABLE$ID]])'
> 
> -- column filtered by both reshape and calc
> explain plan for
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.id > i_n.id and i_nn.a >= i_n.a and i_nn.a > i_n.b;
'column0'
'IterCalcRel(expr#0..7=[{inputs}], expr#8=[CAST($t1):BIGINT NOT NULL], ID=[$t0], A=[$t8], B=[$t2], C=[$t3], ID0=[$t4], A0=[$t5], B0=[$t6], C0=[$t7])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[1, 0]], joinKeyParamIds=[[2, 1]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL ID, BIGINT A, INTEGER NOT NULL B, SMALLINT NOT NULL C) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, INTS_NOTNULLABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$A, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$B, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$C, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$ID]])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..4=[{inputs}], expr#5=[>($t4, $t2)], proj#0..3=[{exprs}], $condition=[$t5])'
'          FennelToIteratorConverter'
'            FennelReshapeRel(projection=[[0, 1, 2, 3]], filterOp=[COMP_LE], filterOrdinals=[[1]], dynamicParameters=[[2]], paramCompareOffsets=[[1]], outputRowType=[RecordType(INTEGER NOT NULL ID, BIGINT A, INTEGER B, SMALLINT C, BIGINT A) NOT NULL])'
'              FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[3])'
'                FennelValuesRel(tuples=[[{ '(', null, ')', null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[3], indexCols=[[0]])'
'        FennelSortRel(key=[[0]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, INTS_NULLABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$INTS_NULLABLE$A, SYS$CLUSTERED_INDEX$INTS_NULLABLE$B, SYS$CLUSTERED_INDEX$INTS_NULLABLE$C, SYS$CLUSTERED_INDEX$INTS_NULLABLE$ID]])'
> 
> -- more than one filter to be processed by calc
> explain plan for
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.id > i_n.id and i_nn.a > i_n.a and i_nn.b > i_n.b and
>         i_nn.c > i_n.c;
'column0'
'IterCalcRel(expr#0..7=[{inputs}], expr#8=[CAST($t1):BIGINT NOT NULL], ID=[$t0], A=[$t8], B=[$t2], C=[$t3], ID0=[$t4], A0=[$t5], B0=[$t6], C0=[$t7])'
'  FennelToIteratorConverter'
'    FennelNestedLoopJoinRel(joinType=[LEFT], leftJoinKeys=[[2, 1, 3, 0]], joinKeyParamIds=[[3, 2, 4, 1]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER NOT NULL ID, BIGINT A, INTEGER NOT NULL B, SMALLINT NOT NULL C) NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, NLJ, INTS_NOTNULLABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$A, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$B, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$C, SYS$CLUSTERED_INDEX$INTS_NOTNULLABLE$ID]])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..5=[{inputs}], expr#6=[>($t4, $t2)], expr#7=[>($t5, $t3)], expr#8=[AND($t6, $t7)], proj#0..3=[{exprs}], $condition=[$t8])'
'          FennelToIteratorConverter'
'            FennelReshapeRel(projection=[[0, 1, 2, 3]], filterOp=[COMP_LT], filterOrdinals=[[1]], dynamicParameters=[[2, 3, 4]], paramCompareOffsets=[[1, -1, -1]], outputRowType=[RecordType(INTEGER NOT NULL ID, BIGINT A, INTEGER B, SMALLINT C, INTEGER NOT NULL B, SMALLINT NOT NULL C) NOT NULL])'
'              FennelTempIdxSearchRel(indexKeys=[[0]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[5])'
'                FennelValuesRel(tuples=[[{ '(', null, ')', null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[5], indexCols=[[0]])'
'        FennelSortRel(key=[[0]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, NLJ, INTS_NULLABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$INTS_NULLABLE$A, SYS$CLUSTERED_INDEX$INTS_NULLABLE$B, SYS$CLUSTERED_INDEX$INTS_NULLABLE$C, SYS$CLUSTERED_INDEX$INTS_NULLABLE$ID]])'
> 
> ------------------------------------------------
> -- Rerun queries that use calcs with Fennel Calc
> ------------------------------------------------
> 
> !set outputformat table
> alter system set "calcVirtualMachine" = 'CALCVM_FENNEL';
> 
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency, toDate,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on trim(currency) = trim(fromCurrency) and xactDate >= fromDate
>     order by currency, toCurrency, xactDate, toDate;
+------+-------------+-----------+-------------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  |   TODATE    | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+-------------+------------------+
| 11   |             |           | 1100.00     |             |             |                  |
| 10   | 2007-03-01  |           | 1000.00     |             |             |                  |
| 2    | 2007-01-01  | EUR       | 200.00      | GBP         | 2007-03-31  | 135.24           |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 2007-03-31  | 405.72           |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 2007-06-30  | 408.00           |
| 2    | 2007-01-01  | EUR       | 200.00      | JPY         | 2007-03-31  | 33024.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 2007-03-31  | 99072.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 2007-06-30  | 99000.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | JPY         | 2007-03-31  | 73266.00         |
| 7    | 2007-06-30  | GBP       | 700.00      | JPY         | 2007-03-31  | 170954.00        |
| 7    | 2007-06-30  | GBP       | 700.00      | JPY         | 2007-06-30  | 170800.00        |
| 3    | 2007-02-01  | GBP       | 300.00      | USD         | 2007-03-31  | 592.98           |
| 7    | 2007-06-30  | GBP       | 700.00      | USD         | 2007-03-31  | 1383.62          |
| 7    | 2007-06-30  | GBP       | 700.00      | USD         | 2007-06-30  | 1400.00          |
| 4    | 2007-03-31  | JPY       | 50000.00    | EUR         | 2007-03-31  | 302.80           |
| 8    | 2007-07-01  | JPY       | 80000.00    | EUR         | 2007-03-31  | 484.48           |
| 8    | 2007-07-01  | JPY       | 80000.00    | EUR         | 2007-06-30  | 488.00           |
| 4    | 2007-03-31  | JPY       | 50000.00    | USD         | 2007-03-31  | 404.75           |
| 8    | 2007-07-01  | JPY       | 80000.00    | USD         | 2007-03-31  | 647.60           |
| 8    | 2007-07-01  | JPY       | 80000.00    | USD         | 2007-06-30  | 648.00           |
| 9    |             | USD       | 900.00      |             |             |                  |
| 1    | 2006-12-31  | USD       | 100.00      |             |             |                  |
| 5    | 2007-04-01  | USD       | 500.00      | EUR         | 2007-03-31  | 374.15           |
| 5    | 2007-04-01  | USD       | 500.00      | EUR         | 2007-06-30  | 375.00           |
| 5    | 2007-04-01  | USD       | 500.00      | GBP         | 2007-03-31  | 252.95           |
| 5    | 2007-04-01  | USD       | 500.00      | GBP         | 2007-06-30  | 250.00           |
+------+-------------+-----------+-------------+-------------+-------------+------------------+
> select xid, xactDate, currency, amount as origAmount,
>         toCurrency,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts left outer join convRates
>     on xactDate between fromDate and toDate and
>         trim(currency) = trim(fromCurrency)
>     order by currency, toCurrency, xactDate;
+------+-------------+-----------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | TOCURRENCY  | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+-------------+------------------+
| 11   |             |           | 1100.00     |             |                  |
| 10   | 2007-03-01  |           | 1000.00     |             |                  |
| 2    | 2007-01-01  | EUR       | 200.00      | GBP         | 135.24           |
| 6    | 2007-05-01  | EUR       | 600.00      | GBP         | 408.00           |
| 2    | 2007-01-01  | EUR       | 200.00      | JPY         | 33024.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY         | 99000.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | JPY         | 73266.00         |
| 7    | 2007-06-30  | GBP       | 700.00      | JPY         | 170800.00        |
| 3    | 2007-02-01  | GBP       | 300.00      | USD         | 592.98           |
| 7    | 2007-06-30  | GBP       | 700.00      | USD         | 1400.00          |
| 8    | 2007-07-01  | JPY       | 80000.00    |             |                  |
| 4    | 2007-03-31  | JPY       | 50000.00    | EUR         | 302.80           |
| 4    | 2007-03-31  | JPY       | 50000.00    | USD         | 404.75           |
| 9    |             | USD       | 900.00      |             |                  |
| 1    | 2006-12-31  | USD       | 100.00      |             |                  |
| 5    | 2007-04-01  | USD       | 500.00      | EUR         | 375.00           |
| 5    | 2007-04-01  | USD       | 500.00      | GBP         | 250.00           |
+------+-------------+-----------+-------------+-------------+------------------+
> select xid, xactDate, currency, amount as origAmount,
>         fromCurrency, toCurrency, fromDate, toDate,
>         cast(amount * rate as decimal(10,2)) as convertedAmount
>     from xacts, convRates
>     where currency in (fromCurrency, toCurrency)
>     order by currency, fromCurrency, toCurrency, xactDate, fromDate, toDate;
+------+-------------+-----------+-------------+---------------+-------------+-------------+-------------+------------------+
| XID  |  XACTDATE   | CURRENCY  | ORIGAMOUNT  | FROMCURRENCY  | TOCURRENCY  |  FROMDATE   |   TODATE    | CONVERTEDAMOUNT  |
+------+-------------+-----------+-------------+---------------+-------------+-------------+-------------+------------------+
| 2    | 2007-01-01  | EUR       | 200.00      | EUR           | GBP         | 2007-01-01  | 2007-03-31  | 135.24           |
| 2    | 2007-01-01  | EUR       | 200.00      | EUR           | GBP         | 2007-04-01  | 2007-06-30  | 136.00           |
| 6    | 2007-05-01  | EUR       | 600.00      | EUR           | GBP         | 2007-01-01  | 2007-03-31  | 405.72           |
| 6    | 2007-05-01  | EUR       | 600.00      | EUR           | GBP         | 2007-04-01  | 2007-06-30  | 408.00           |
| 2    | 2007-01-01  | EUR       | 200.00      | EUR           | JPY         | 2007-01-01  | 2007-03-31  | 33024.00         |
| 2    | 2007-01-01  | EUR       | 200.00      | EUR           | JPY         | 2007-04-01  | 2007-06-30  | 33000.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | EUR           | JPY         | 2007-01-01  | 2007-03-31  | 99072.00         |
| 6    | 2007-05-01  | EUR       | 600.00      | EUR           | JPY         | 2007-04-01  | 2007-06-30  | 99000.00         |
| 2    | 2007-01-01  | EUR       | 200.00      | JPY           | EUR         | 2007-01-01  | 2007-03-31  | 1.21             |
| 2    | 2007-01-01  | EUR       | 200.00      | JPY           | EUR         | 2007-04-01  | 2007-06-30  | 1.22             |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY           | EUR         | 2007-01-01  | 2007-03-31  | 3.63             |
| 6    | 2007-05-01  | EUR       | 600.00      | JPY           | EUR         | 2007-04-01  | 2007-06-30  | 3.66             |
| 2    | 2007-01-01  | EUR       | 200.00      | USD           | EUR         |             | 2006-12-31  | 152.00           |
| 2    | 2007-01-01  | EUR       | 200.00      | USD           | EUR         | 2007-01-01  | 2007-03-31  | 149.66           |
| 2    | 2007-01-01  | EUR       | 200.00      | USD           | EUR         | 2007-04-01  | 2007-06-30  | 150.00           |
| 6    | 2007-05-01  | EUR       | 600.00      | USD           | EUR         |             | 2006-12-31  | 456.00           |
| 6    | 2007-05-01  | EUR       | 600.00      | USD           | EUR         | 2007-01-01  | 2007-03-31  | 448.98           |
| 6    | 2007-05-01  | EUR       | 600.00      | USD           | EUR         | 2007-04-01  | 2007-06-30  | 450.00           |
| 3    | 2007-02-01  | GBP       | 300.00      | EUR           | GBP         | 2007-01-01  | 2007-03-31  | 202.86           |
| 3    | 2007-02-01  | GBP       | 300.00      | EUR           | GBP         | 2007-04-01  | 2007-06-30  | 204.00           |
| 7    | 2007-06-30  | GBP       | 700.00      | EUR           | GBP         | 2007-01-01  | 2007-03-31  | 473.34           |
| 7    | 2007-06-30  | GBP       | 700.00      | EUR           | GBP         | 2007-04-01  | 2007-06-30  | 476.00           |
| 3    | 2007-02-01  | GBP       | 300.00      | GBP           | JPY         | 2007-01-01  | 2007-03-31  | 73266.00         |
| 3    | 2007-02-01  | GBP       | 300.00      | GBP           | JPY         | 2007-04-01  | 2007-06-30  | 73200.00         |
| 7    | 2007-06-30  | GBP       | 700.00      | GBP           | JPY         | 2007-01-01  | 2007-03-31  | 170954.00        |
| 7    | 2007-06-30  | GBP       | 700.00      | GBP           | JPY         | 2007-04-01  | 2007-06-30  | 170800.00        |
| 3    | 2007-02-01  | GBP       | 300.00      | GBP           | USD         | 2007-01-01  | 2007-03-31  | 592.98           |
| 3    | 2007-02-01  | GBP       | 300.00      | GBP           | USD         | 2007-04-01  | 2007-06-30  | 600.00           |
| 7    | 2007-06-30  | GBP       | 700.00      | GBP           | USD         | 2007-01-01  | 2007-03-31  | 1383.62          |
| 7    | 2007-06-30  | GBP       | 700.00      | GBP           | USD         | 2007-04-01  | 2007-06-30  | 1400.00          |
| 3    | 2007-02-01  | GBP       | 300.00      | USD           | GBP         | 2007-01-01  | 2007-03-31  | 151.77           |
| 3    | 2007-02-01  | GBP       | 300.00      | USD           | GBP         | 2007-04-01  | 2007-06-30  | 150.00           |
| 7    | 2007-06-30  | GBP       | 700.00      | USD           | GBP         | 2007-01-01  | 2007-03-31  | 354.13           |
| 7    | 2007-06-30  | GBP       | 700.00      | USD           | GBP         | 2007-04-01  | 2007-06-30  | 350.00           |
| 4    | 2007-03-31  | JPY       | 50000.00    | EUR           | JPY         | 2007-01-01  | 2007-03-31  | 8256000.00       |
| 4    | 2007-03-31  | JPY       | 50000.00    | EUR           | JPY         | 2007-04-01  | 2007-06-30  | 8250000.00       |
| 8    | 2007-07-01  | JPY       | 80000.00    | EUR           | JPY         | 2007-01-01  | 2007-03-31  | 13209600.00      |
| 8    | 2007-07-01  | JPY       | 80000.00    | EUR           | JPY         | 2007-04-01  | 2007-06-30  | 13200000.00      |
| 4    | 2007-03-31  | JPY       | 50000.00    | GBP           | JPY         | 2007-01-01  | 2007-03-31  | 12211000.00      |
| 4    | 2007-03-31  | JPY       | 50000.00    | GBP           | JPY         | 2007-04-01  | 2007-06-30  | 12200000.00      |
| 8    | 2007-07-01  | JPY       | 80000.00    | GBP           | JPY         | 2007-01-01  | 2007-03-31  | 19537600.00      |
| 8    | 2007-07-01  | JPY       | 80000.00    | GBP           | JPY         | 2007-04-01  | 2007-06-30  | 19520000.00      |
| 4    | 2007-03-31  | JPY       | 50000.00    | JPY           | EUR         | 2007-01-01  | 2007-03-31  | 302.80           |
| 4    | 2007-03-31  | JPY       | 50000.00    | JPY           | EUR         | 2007-04-01  | 2007-06-30  | 305.00           |
| 8    | 2007-07-01  | JPY       | 80000.00    | JPY           | EUR         | 2007-01-01  | 2007-03-31  | 484.48           |
| 8    | 2007-07-01  | JPY       | 80000.00    | JPY           | EUR         | 2007-04-01  | 2007-06-30  | 488.00           |
| 4    | 2007-03-31  | JPY       | 50000.00    | JPY           | USD         | 2007-01-01  | 2007-03-31  | 404.75           |
| 4    | 2007-03-31  | JPY       | 50000.00    | JPY           | USD         | 2007-04-01  | 2007-06-30  | 405.00           |
| 8    | 2007-07-01  | JPY       | 80000.00    | JPY           | USD         | 2007-01-01  | 2007-03-31  | 647.60           |
| 8    | 2007-07-01  | JPY       | 80000.00    | JPY           | USD         | 2007-04-01  | 2007-06-30  | 648.00           |
| 9    |             | USD       | 900.00      | GBP           | USD         | 2007-01-01  | 2007-03-31  | 1778.94          |
| 9    |             | USD       | 900.00      | GBP           | USD         | 2007-04-01  | 2007-06-30  | 1800.00          |
| 1    | 2006-12-31  | USD       | 100.00      | GBP           | USD         | 2007-01-01  | 2007-03-31  | 197.66           |
| 1    | 2006-12-31  | USD       | 100.00      | GBP           | USD         | 2007-04-01  | 2007-06-30  | 200.00           |
| 5    | 2007-04-01  | USD       | 500.00      | GBP           | USD         | 2007-01-01  | 2007-03-31  | 988.30           |
| 5    | 2007-04-01  | USD       | 500.00      | GBP           | USD         | 2007-04-01  | 2007-06-30  | 1000.00          |
| 9    |             | USD       | 900.00      | JPY           | USD         | 2007-01-01  | 2007-03-31  | 7.29             |
| 9    |             | USD       | 900.00      | JPY           | USD         | 2007-04-01  | 2007-06-30  | 7.29             |
| 1    | 2006-12-31  | USD       | 100.00      | JPY           | USD         | 2007-01-01  | 2007-03-31  | 0.81             |
| 1    | 2006-12-31  | USD       | 100.00      | JPY           | USD         | 2007-04-01  | 2007-06-30  | 0.81             |
| 5    | 2007-04-01  | USD       | 500.00      | JPY           | USD         | 2007-01-01  | 2007-03-31  | 4.05             |
| 5    | 2007-04-01  | USD       | 500.00      | JPY           | USD         | 2007-04-01  | 2007-06-30  | 4.05             |
| 9    |             | USD       | 900.00      | USD           | EUR         |             | 2006-12-31  | 684.00           |
| 9    |             | USD       | 900.00      | USD           | EUR         | 2007-01-01  | 2007-03-31  | 673.47           |
| 9    |             | USD       | 900.00      | USD           | EUR         | 2007-04-01  | 2007-06-30  | 675.00           |
| 1    | 2006-12-31  | USD       | 100.00      | USD           | EUR         |             | 2006-12-31  | 76.00            |
| 1    | 2006-12-31  | USD       | 100.00      | USD           | EUR         | 2007-01-01  | 2007-03-31  | 74.83            |
| 1    | 2006-12-31  | USD       | 100.00      | USD           | EUR         | 2007-04-01  | 2007-06-30  | 75.00            |
| 5    | 2007-04-01  | USD       | 500.00      | USD           | EUR         |             | 2006-12-31  | 380.00           |
| 5    | 2007-04-01  | USD       | 500.00      | USD           | EUR         | 2007-01-01  | 2007-03-31  | 374.15           |
| 5    | 2007-04-01  | USD       | 500.00      | USD           | EUR         | 2007-04-01  | 2007-06-30  | 375.00           |
| 9    |             | USD       | 900.00      | USD           | GBP         | 2007-01-01  | 2007-03-31  | 455.31           |
| 9    |             | USD       | 900.00      | USD           | GBP         | 2007-04-01  | 2007-06-30  | 450.00           |
| 1    | 2006-12-31  | USD       | 100.00      | USD           | GBP         | 2007-01-01  | 2007-03-31  | 50.59            |
| 1    | 2006-12-31  | USD       | 100.00      | USD           | GBP         | 2007-04-01  | 2007-06-30  | 50.00            |
| 5    | 2007-04-01  | USD       | 500.00      | USD           | GBP         | 2007-01-01  | 2007-03-31  | 252.95           |
| 5    | 2007-04-01  | USD       | 500.00      | USD           | GBP         | 2007-04-01  | 2007-06-30  | 250.00           |
+------+-------------+-----------+-------------+---------------+-------------+-------------+-------------+------------------+
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.id = i_n.id and i_nn.a > i_n.b
>     order by 1, 2, 3, 4, 5, 6, 7, 8;
+-----+-------------+---------+----+------+-------------+-----+-----+
| ID  |      A      |    B    | C  | ID0  |     A0      | B0  | C0  |
+-----+-------------+---------+----+------+-------------+-----+-----+
| 1   | 1           | 1       | 1  |      |             |     |     |
| 2   | 2           | 2       | 2  |      |             |     |     |
| 2   | 5000000000  | 2       | 2  | 2    | 2           | 2   | 2   |
| 2   | 5000000000  | 2       | 2  | 2    | 5000000000  | 2   | 2   |
| 3   | 3           | 3       | 3  |      |             |     |     |
| 3   | 3           | 100000  | 3  |      |             |     |     |
+-----+-------------+---------+----+------+-------------+-----+-----+
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.a = i_n.b and i_nn.id >= i_n.id
>     order by 1, 2, 3, 4, 5, 6, 7, 8;
+-----+-------------+---------+----+------+-------------+-----+-----+
| ID  |      A      |    B    | C  | ID0  |     A0      | B0  | C0  |
+-----+-------------+---------+----+------+-------------+-----+-----+
| 1   | 1           | 1       | 1  | 1    | 1           | 1   | 1   |
| 2   | 2           | 2       | 2  | 2    | 2           | 2   | 2   |
| 2   | 2           | 2       | 2  | 2    | 5000000000  | 2   | 2   |
| 2   | 5000000000  | 2       | 2  |      |             |     |     |
| 3   | 3           | 3       | 3  | 3    | 3           | 3   | 3   |
| 3   | 3           | 100000  | 3  | 3    | 3           | 3   | 3   |
+-----+-------------+---------+----+------+-------------+-----+-----+
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.id = i_n.id and i_nn.c >= i_n.a and i_nn.c < i_n.b
>     order by 1, 2, 3, 4, 5, 6, 7, 8;
+-----+-------------+---------+----+------+-----+---------+-----+
| ID  |      A      |    B    | C  | ID0  | A0  |   B0    | C0  |
+-----+-------------+---------+----+------+-----+---------+-----+
| 1   | 1           | 1       | 1  |      |     |         |     |
| 2   | 2           | 2       | 2  |      |     |         |     |
| 2   | 5000000000  | 2       | 2  |      |     |         |     |
| 3   | 3           | 3       | 3  | 3    | 3   | 100000  | 3   |
| 3   | 3           | 100000  | 3  | 3    | 3   | 100000  | 3   |
+-----+-------------+---------+----+------+-----+---------+-----+
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.c = i_n.a and i_nn.c < i_n.b
>     order by 1, 2, 3, 4, 5, 6, 7, 8;
+-----+-------------+---------+----+------+-----+---------+-----+
| ID  |      A      |    B    | C  | ID0  | A0  |   B0    | C0  |
+-----+-------------+---------+----+------+-----+---------+-----+
| 1   | 1           | 1       | 1  |      |     |         |     |
| 2   | 2           | 2       | 2  |      |     |         |     |
| 2   | 5000000000  | 2       | 2  |      |     |         |     |
| 3   | 3           | 3       | 3  | 3    | 3   | 100000  | 3   |
| 3   | 3           | 100000  | 3  | 3    | 3   | 100000  | 3   |
+-----+-------------+---------+----+------+-----+---------+-----+
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.id > i_n.id and i_nn.a >= i_n.a and i_nn.a > i_n.b
>     order by 1, 2, 3, 4, 5, 6, 7, 8;
+-----+-------------+---------+----+------+-----+-----+-----+
| ID  |      A      |    B    | C  | ID0  | A0  | B0  | C0  |
+-----+-------------+---------+----+------+-----+-----+-----+
| 1   | 1           | 1       | 1  |      |     |     |     |
| 2   | 2           | 2       | 2  | 1    | 1   | 1   | 1   |
| 2   | 5000000000  | 2       | 2  | 1    | 1   | 1   | 1   |
| 3   | 3           | 3       | 3  | 1    | 1   | 1   | 1   |
| 3   | 3           | 3       | 3  | 2    | 2   | 2   | 2   |
| 3   | 3           | 100000  | 3  | 1    | 1   | 1   | 1   |
| 3   | 3           | 100000  | 3  | 2    | 2   | 2   | 2   |
+-----+-------------+---------+----+------+-----+-----+-----+
> select * from ints_notnullable i_nn left outer join ints_nullable i_n
>     on i_nn.id > i_n.id and i_nn.a > i_n.a and i_nn.b > i_n.b and
>         i_nn.c > i_n.c
>     order by 1, 2, 3, 4, 5, 6, 7, 8;
+-----+-------------+---------+----+------+-----+-----+-----+
| ID  |      A      |    B    | C  | ID0  | A0  | B0  | C0  |
+-----+-------------+---------+----+------+-----+-----+-----+
| 1   | 1           | 1       | 1  |      |     |     |     |
| 2   | 2           | 2       | 2  | 1    | 1   | 1   | 1   |
| 2   | 5000000000  | 2       | 2  | 1    | 1   | 1   | 1   |
| 3   | 3           | 3       | 3  | 1    | 1   | 1   | 1   |
| 3   | 3           | 3       | 3  | 2    | 2   | 2   | 2   |
| 3   | 3           | 100000  | 3  | 1    | 1   | 1   | 1   |
| 3   | 3           | 100000  | 3  | 2    | 2   | 2   | 2   |
+-----+-------------+---------+----+------+-----+-----+-----+
> 
> !quit
