0: jdbc:farrago:> -- $Id$
0: jdbc:farrago:> 
0: jdbc:farrago:> ----------------------------
0: jdbc:farrago:> -- Tests for MERGE statement
0: jdbc:farrago:> ----------------------------
0: jdbc:farrago:> 
0: jdbc:farrago:> create schema m;
0: jdbc:farrago:> set schema 'm';
0: jdbc:farrago:> alter session implementation set jar sys_boot.sys_boot.luciddb_plugin;
0: jdbc:farrago:> 
0: jdbc:farrago:> create table emps(
. . . . . . . . >     empno int not null, name varchar(20) not null, deptno int,
. . . . . . . . >     gender char(1), city char(30), age int, salary int);
0: jdbc:farrago:> create table tempemps(
. . . . . . . . >     t_empno int, t_name varchar(25), t_deptno int, t_gender char(1),
. . . . . . . . >     t_city char(35), t_age int);
0: jdbc:farrago:> create table salarytable(empno int, salary int);
0: jdbc:farrago:> 
0: jdbc:farrago:> insert into emps(empno, name, deptno, gender, city, age, salary)
. . . . . . . . >     select case when name = 'John' then 130 else empno end,
. . . . . . . . >         name, deptno, gender, city, age, age * 900 from sales.emps;
0: jdbc:farrago:> select * from emps order by empno;
+--------+--------+---------+---------+---------------------------------+------+---------+
| EMPNO  |  NAME  | DEPTNO  | GENDER  |              CITY               | AGE  | SALARY  |
+--------+--------+---------+---------+---------------------------------+------+---------+
| 100    | Fred   | 10      |         |                                 | 25   | 22500   |
| 110    | Eric   | 20      | M       | San Francisco                   | 80   | 72000   |
| 120    | Wilma  | 20      | F       |                                 | 50   | 45000   |
| 130    | John   | 40      | M       | Vancouver                       |      |         |
+--------+--------+---------+---------+---------------------------------+------+---------+
0: jdbc:farrago:> insert into tempemps
. . . . . . . . >     select empno, name, deptno + 1, gender, coalesce(city, 'San Mateo'), age
. . . . . . . . >         from emps;
0: jdbc:farrago:> insert into tempemps values(140, 'Barney', 10, 'M', 'San Mateo', 41);
0: jdbc:farrago:> insert into tempemps values(150, 'Betty', 20, 'F', 'San Francisco', 40);
0: jdbc:farrago:> select * from tempemps order by t_empno;
+----------+---------+-----------+-----------+--------------------------------------+--------+
| T_EMPNO  | T_NAME  | T_DEPTNO  | T_GENDER  |                T_CITY                | T_AGE  |
+----------+---------+-----------+-----------+--------------------------------------+--------+
| 100      | Fred    | 11        |           | San Mateo                            | 25     |
| 110      | Eric    | 21        | M         | San Francisco                        | 80     |
| 120      | Wilma   | 21        | F         | San Mateo                            | 50     |
| 130      | John    | 41        | M         | Vancouver                            |        |
| 140      | Barney  | 10        | M         | San Mateo                            | 41     |
| 150      | Betty   | 20        | F         | San Francisco                        | 40     |
+----------+---------+-----------+-----------+--------------------------------------+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- basic merge
0: jdbc:farrago:> merge into emps e
. . . . . . . . >     using tempemps t on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t.t_deptno, city = upper(t.t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(t.t_name), t.t_age, t.t_gender, t.t_age * 1000,
. . . . . . . . >             t.t_city);
0: jdbc:farrago:> select * from emps order by empno;
+--------+---------+---------+---------+---------------------------------+------+---------+
| EMPNO  |  NAME   | DEPTNO  | GENDER  |              CITY               | AGE  | SALARY  |
+--------+---------+---------+---------+---------------------------------+------+---------+
| 100    | Fred    | 11      |         | SAN MATEO                       | 25   | 5625    |
| 110    | Eric    | 21      | M       | SAN FRANCISCO                   | 80   | 18000   |
| 120    | Wilma   | 21      | F       | SAN MATEO                       | 50   | 11250   |
| 130    | John    | 41      | M       | VANCOUVER                       |      |         |
| 140    | BARNEY  |         | M       | San Mateo                       | 41   | 41000   |
| 150    | BETTY   |         | F       | San Francisco                   | 40   | 40000   |
+--------+---------+---------+---------+---------------------------------+------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- source select is a join
0: jdbc:farrago:> delete from emps where name in ('BARNEY', 'BETTY');
0: jdbc:farrago:> insert into salarytable values(100, 100000);
0: jdbc:farrago:> insert into salarytable values(110, 110000);
0: jdbc:farrago:> insert into salarytable values(120, 120000);
0: jdbc:farrago:> insert into salarytable values(130, 130000);
0: jdbc:farrago:> insert into salarytable values(140, 140000);
0: jdbc:farrago:> insert into salarytable values(150, 150000);
0: jdbc:farrago:> select * from emps order by empno;
+--------+--------+---------+---------+---------------------------------+------+---------+
| EMPNO  |  NAME  | DEPTNO  | GENDER  |              CITY               | AGE  | SALARY  |
+--------+--------+---------+---------+---------------------------------+------+---------+
| 100    | Fred   | 11      |         | SAN MATEO                       | 25   | 5625    |
| 110    | Eric   | 21      | M       | SAN FRANCISCO                   | 80   | 18000   |
| 120    | Wilma  | 21      | F       | SAN MATEO                       | 50   | 11250   |
| 130    | John   | 41      | M       | VANCOUVER                       |      |         |
+--------+--------+---------+---------+---------------------------------+------+---------+
0: jdbc:farrago:> select * from salarytable order by empno;
+--------+---------+
| EMPNO  | SALARY  |
+--------+---------+
| 100    | 100000  |
| 110    | 110000  |
| 120    | 120000  |
| 130    | 130000  |
| 140    | 140000  |
| 150    | 150000  |
+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> merge into emps e
. . . . . . . . >     using (select s.empno, s.salary, t.* from salarytable s, tempemps t
. . . . . . . . >         where t.t_empno = s.empno) t
. . . . . . . . >     on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t.t_deptno-1, city = lower(t.t_city),
. . . . . . . . >             salary = e.salary * 1.25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(t.t_name), t.t_age, t.t_gender, t.salary * .15,
. . . . . . . . >             t.t_city);
0: jdbc:farrago:> select * from emps order by empno;
+--------+---------+---------+---------+---------------------------------+------+---------+
| EMPNO  |  NAME   | DEPTNO  | GENDER  |              CITY               | AGE  | SALARY  |
+--------+---------+---------+---------+---------------------------------+------+---------+
| 100    | Fred    | 10      |         | san mateo                       | 25   | 7031    |
| 110    | Eric    | 20      | M       | san francisco                   | 80   | 22500   |
| 120    | Wilma   | 20      | F       | san mateo                       | 50   | 14063   |
| 130    | John    | 40      | M       | vancouver                       |      |         |
| 140    | BARNEY  |         | M       | San Mateo                       | 41   | 21000   |
| 150    | BETTY   |         | F       | San Francisco                   | 40   | 22500   |
+--------+---------+---------+---------+---------------------------------+------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- no source rows; therefore, no rows should be affected
0: jdbc:farrago:> merge into emps
. . . . . . . . >     using (select * from tempemps where t_deptno = 100) on t_empno = empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t_deptno, city = upper(t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t_empno, upper(t_name), t_age, t_gender, t_age * 1000, t_city);
0: jdbc:farrago:> select * from emps order by empno;
+--------+---------+---------+---------+---------------------------------+------+---------+
| EMPNO  |  NAME   | DEPTNO  | GENDER  |              CITY               | AGE  | SALARY  |
+--------+---------+---------+---------+---------------------------------+------+---------+
| 100    | Fred    | 10      |         | san mateo                       | 25   | 7031    |
| 110    | Eric    | 20      | M       | san francisco                   | 80   | 22500   |
| 120    | Wilma   | 20      | F       | san mateo                       | 50   | 14063   |
| 130    | John    | 40      | M       | vancouver                       |      |         |
| 140    | BARNEY  |         | M       | San Mateo                       | 41   | 21000   |
| 150    | BETTY   |         | F       | San Francisco                   | 40   | 22500   |
+--------+---------+---------+---------+---------------------------------+------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- only updates, no inserts
0: jdbc:farrago:> merge into emps
. . . . . . . . >     using tempemps on t_empno = empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set name = lower(name), deptno = t_deptno,
. . . . . . . . >             city = upper(t_city),
. . . . . . . . >             salary = salary * 10
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t_empno, upper(t_name), t_age, t_gender, t_age * 1000, t_city);
0: jdbc:farrago:> select * from emps order by empno;
+--------+---------+---------+---------+---------------------------------+------+---------+
| EMPNO  |  NAME   | DEPTNO  | GENDER  |              CITY               | AGE  | SALARY  |
+--------+---------+---------+---------+---------------------------------+------+---------+
| 100    | fred    | 11      |         | SAN MATEO                       | 25   | 70310   |
| 110    | eric    | 21      | M       | SAN FRANCISCO                   | 80   | 225000  |
| 120    | wilma   | 21      | F       | SAN MATEO                       | 50   | 140630  |
| 130    | john    | 41      | M       | VANCOUVER                       |      |         |
| 140    | barney  | 10      | M       | SAN MATEO                       | 41   | 210000  |
| 150    | betty   | 20      | F       | SAN FRANCISCO                   | 40   | 225000  |
+--------+---------+---------+---------+---------------------------------+------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- only inserts, no updates
0: jdbc:farrago:> delete from emps where empno >= 140;
0: jdbc:farrago:> select * from emps order by empno;
+--------+--------+---------+---------+---------------------------------+------+---------+
| EMPNO  |  NAME  | DEPTNO  | GENDER  |              CITY               | AGE  | SALARY  |
+--------+--------+---------+---------+---------------------------------+------+---------+
| 100    | fred   | 11      |         | SAN MATEO                       | 25   | 70310   |
| 110    | eric   | 21      | M       | SAN FRANCISCO                   | 80   | 225000  |
| 120    | wilma  | 21      | F       | SAN MATEO                       | 50   | 140630  |
| 130    | john   | 41      | M       | VANCOUVER                       |      |         |
+--------+--------+---------+---------+---------------------------------+------+---------+
0: jdbc:farrago:> merge into emps
. . . . . . . . >     using (select * from tempemps where t_empno >= 140) on t_empno = empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t_deptno, city = upper(t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert
. . . . . . . . >             values(t_empno, upper(t_name), t_empno-100, t_gender, t_city, t_age,
. . . . . . . . >                 t_age * 1000);
0: jdbc:farrago:> select * from emps order by empno;
+--------+---------+---------+---------+---------------------------------+------+---------+
| EMPNO  |  NAME   | DEPTNO  | GENDER  |              CITY               | AGE  | SALARY  |
+--------+---------+---------+---------+---------------------------------+------+---------+
| 100    | fred    | 11      |         | SAN MATEO                       | 25   | 70310   |
| 110    | eric    | 21      | M       | SAN FRANCISCO                   | 80   | 225000  |
| 120    | wilma   | 21      | F       | SAN MATEO                       | 50   | 140630  |
| 130    | john    | 41      | M       | VANCOUVER                       |      |         |
| 140    | BARNEY  | 40      | M       | San Mateo                       | 41   | 41000   |
| 150    | BETTY   | 50      | F       | San Francisco                   | 40   | 40000   |
+--------+---------+---------+---------+---------------------------------+------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- more than 1 row in the source table matches the target; per SQL2003, this
0: jdbc:farrago:> -- should return an error; currently, we do not return an error
0: jdbc:farrago:> insert into tempemps values(130, 'JohnClone', 41, 'M', 'Vancouver', null);
0: jdbc:farrago:> select * from tempemps order by t_empno, t_name;
+----------+------------+-----------+-----------+--------------------------------------+--------+
| T_EMPNO  |   T_NAME   | T_DEPTNO  | T_GENDER  |                T_CITY                | T_AGE  |
+----------+------------+-----------+-----------+--------------------------------------+--------+
| 100      | Fred       | 11        |           | San Mateo                            | 25     |
| 110      | Eric       | 21        | M         | San Francisco                        | 80     |
| 120      | Wilma      | 21        | F         | San Mateo                            | 50     |
| 130      | John       | 41        | M         | Vancouver                            |        |
| 130      | JohnClone  | 41        | M         | Vancouver                            |        |
| 140      | Barney     | 10        | M         | San Mateo                            | 41     |
| 150      | Betty      | 20        | F         | San Francisco                        | 40     |
+----------+------------+-----------+-----------+--------------------------------------+--------+
0: jdbc:farrago:> merge into emps
. . . . . . . . >     using (select * from tempemps where t_empno = 130) on t_empno = empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t_deptno, city = t_city, age = t_age,
. . . . . . . . >             gender = t_gender
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t_empno, upper(t_name), t_age, t_gender, t_age * 1000, t_city);
0: jdbc:farrago:> select * from emps order by empno, name;
+--------+---------+---------+---------+---------------------------------+------+---------+
| EMPNO  |  NAME   | DEPTNO  | GENDER  |              CITY               | AGE  | SALARY  |
+--------+---------+---------+---------+---------------------------------+------+---------+
| 100    | fred    | 11      |         | SAN MATEO                       | 25   | 70310   |
| 110    | eric    | 21      | M       | SAN FRANCISCO                   | 80   | 225000  |
| 120    | wilma   | 21      | F       | SAN MATEO                       | 50   | 140630  |
| 130    | john    | 41      | M       | Vancouver                       |      |         |
| 130    | john    | 41      | M       | Vancouver                       |      |         |
| 140    | BARNEY  | 40      | M       | San Mateo                       | 41   | 41000   |
| 150    | BETTY   | 50      | F       | San Francisco                   | 40   | 40000   |
+--------+---------+---------+---------+---------------------------------+------+---------+
0: jdbc:farrago:> delete from tempemps where t_name = 'JohnClone';
0: jdbc:farrago:>                 
0: jdbc:farrago:> -- no insert substatement
0: jdbc:farrago:> insert into tempemps values(160, 'Pebbles', 60, 'F', 'Foster City', 2);
0: jdbc:farrago:> select * from tempemps order by t_empno;
+----------+----------+-----------+-----------+--------------------------------------+--------+
| T_EMPNO  |  T_NAME  | T_DEPTNO  | T_GENDER  |                T_CITY                | T_AGE  |
+----------+----------+-----------+-----------+--------------------------------------+--------+
| 100      | Fred     | 11        |           | San Mateo                            | 25     |
| 110      | Eric     | 21        | M         | San Francisco                        | 80     |
| 120      | Wilma    | 21        | F         | San Mateo                            | 50     |
| 130      | John     | 41        | M         | Vancouver                            |        |
| 140      | Barney   | 10        | M         | San Mateo                            | 41     |
| 150      | Betty    | 20        | F         | San Francisco                        | 40     |
| 160      | Pebbles  | 60        | F         | Foster City                          | 2      |
+----------+----------+-----------+-----------+--------------------------------------+--------+
0: jdbc:farrago:> merge into emps
. . . . . . . . >     using (select * from tempemps) on t_empno = empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set name = t_name, city = t_city;
0: jdbc:farrago:> select * from emps order by empno, name;
+--------+---------+---------+---------+---------------------------------+------+---------+
| EMPNO  |  NAME   | DEPTNO  | GENDER  |              CITY               | AGE  | SALARY  |
+--------+---------+---------+---------+---------------------------------+------+---------+
| 100    | Fred    | 11      |         | San Mateo                       | 25   | 70310   |
| 110    | Eric    | 21      | M       | San Francisco                   | 80   | 225000  |
| 120    | Wilma   | 21      | F       | San Mateo                       | 50   | 140630  |
| 130    | John    | 41      | M       | Vancouver                       |      |         |
| 130    | John    | 41      | M       | Vancouver                       |      |         |
| 140    | Barney  | 40      | M       | San Mateo                       | 41   | 41000   |
| 150    | Betty   | 50      | F       | San Francisco                   | 40   | 40000   |
+--------+---------+---------+---------+---------------------------------+------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- no update substatement
0: jdbc:farrago:> merge into emps
. . . . . . . . >     using (select * from tempemps) on t_empno = empno
. . . . . . . . >     when not matched then
. . . . . . . . >         insert values (t_empno, t_name, t_deptno, t_gender, t_city, t_age, 0);
0: jdbc:farrago:> select * from emps order by empno, name;
+--------+----------+---------+---------+---------------------------------+------+---------+
| EMPNO  |   NAME   | DEPTNO  | GENDER  |              CITY               | AGE  | SALARY  |
+--------+----------+---------+---------+---------------------------------+------+---------+
| 100    | Fred     | 11      |         | San Mateo                       | 25   | 70310   |
| 110    | Eric     | 21      | M       | San Francisco                   | 80   | 225000  |
| 120    | Wilma    | 21      | F       | San Mateo                       | 50   | 140630  |
| 130    | John     | 41      | M       | Vancouver                       |      |         |
| 130    | John     | 41      | M       | Vancouver                       |      |         |
| 140    | Barney   | 40      | M       | San Mateo                       | 41   | 41000   |
| 150    | Betty    | 50      | F       | San Francisco                   | 40   | 40000   |
| 160    | Pebbles  | 60      | F       | Foster City                     | 2    | 0       |
+--------+----------+---------+---------+---------------------------------+------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- simple update via a merge
0: jdbc:farrago:> delete from emps where empno = 130;
0: jdbc:farrago:> select * from emps order by empno;
+--------+----------+---------+---------+---------------------------------+------+---------+
| EMPNO  |   NAME   | DEPTNO  | GENDER  |              CITY               | AGE  | SALARY  |
+--------+----------+---------+---------+---------------------------------+------+---------+
| 100    | Fred     | 11      |         | San Mateo                       | 25   | 70310   |
| 110    | Eric     | 21      | M       | San Francisco                   | 80   | 225000  |
| 120    | Wilma    | 21      | F       | San Mateo                       | 50   | 140630  |
| 140    | Barney   | 40      | M       | San Mateo                       | 41   | 41000   |
| 150    | Betty    | 50      | F       | San Francisco                   | 40   | 40000   |
| 160    | Pebbles  | 60      | F       | Foster City                     | 2    | 0       |
+--------+----------+---------+---------+---------------------------------+------+---------+
0: jdbc:farrago:> merge into emps e1
. . . . . . . . >     using (select * from emps) e2 on e1.empno = e2.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set age = e1.age + 1;
0: jdbc:farrago:> select * from emps order by empno;
+--------+----------+---------+---------+---------------------------------+------+---------+
| EMPNO  |   NAME   | DEPTNO  | GENDER  |              CITY               | AGE  | SALARY  |
+--------+----------+---------+---------+---------------------------------+------+---------+
| 100    | Fred     | 11      |         | San Mateo                       | 26   | 70310   |
| 110    | Eric     | 21      | M       | San Francisco                   | 81   | 225000  |
| 120    | Wilma    | 21      | F       | San Mateo                       | 51   | 140630  |
| 140    | Barney   | 40      | M       | San Mateo                       | 42   | 41000   |
| 150    | Betty    | 50      | F       | San Francisco                   | 41   | 40000   |
| 160    | Pebbles  | 60      | F       | Foster City                     | 3    | 0       |
+--------+----------+---------+---------+---------------------------------+------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- the updates in the following merges are no-ops
0: jdbc:farrago:> -- verify that no updates have occurred by ensuring that the rids haven't
0: jdbc:farrago:> -- changed
0: jdbc:farrago:> select lcs_rid(empno), * from emps order by empno;
+---------+--------+----------+---------+---------+---------------------------------+------+---------+
| EXPR$0  | EMPNO  |   NAME   | DEPTNO  | GENDER  |              CITY               | AGE  | SALARY  |
+---------+--------+----------+---------+---------+---------------------------------+------+---------+
| 34      | 100    | Fred     | 11      |         | San Mateo                       | 26   | 70310   |
| 35      | 110    | Eric     | 21      | M       | San Francisco                   | 81   | 225000  |
| 36      | 120    | Wilma    | 21      | F       | San Mateo                       | 51   | 140630  |
| 37      | 140    | Barney   | 40      | M       | San Mateo                       | 42   | 41000   |
| 38      | 150    | Betty    | 50      | F       | San Francisco                   | 41   | 40000   |
| 39      | 160    | Pebbles  | 60      | F       | Foster City                     | 3    | 0       |
+---------+--------+----------+---------+---------+---------------------------------+------+---------+
0: jdbc:farrago:> merge into emps e
. . . . . . . . >     using tempemps t on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = deptno, city = city,
. . . . . . . . >             salary = salary
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(t.t_name), t.t_age, t.t_gender, t.t_age * 1000,
. . . . . . . . >             t.t_city);
0: jdbc:farrago:> select lcs_rid(empno), * from emps order by empno;
+---------+--------+----------+---------+---------+---------------------------------+------+---------+
| EXPR$0  | EMPNO  |   NAME   | DEPTNO  | GENDER  |              CITY               | AGE  | SALARY  |
+---------+--------+----------+---------+---------+---------------------------------+------+---------+
| 34      | 100    | Fred     | 11      |         | San Mateo                       | 26   | 70310   |
| 35      | 110    | Eric     | 21      | M       | San Francisco                   | 81   | 225000  |
| 36      | 120    | Wilma    | 21      | F       | San Mateo                       | 51   | 140630  |
| 40      | 130    | JOHN     |         | M       | Vancouver                       |      |         |
| 37      | 140    | Barney   | 40      | M       | San Mateo                       | 42   | 41000   |
| 38      | 150    | Betty    | 50      | F       | San Francisco                   | 41   | 40000   |
| 39      | 160    | Pebbles  | 60      | F       | Foster City                     | 3    | 0       |
+---------+--------+----------+---------+---------+---------------------------------+------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> merge into emps e1
. . . . . . . . >     using (select * from emps) e2 on e1.empno = e2.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set age = e1.age + e1.deptno - e1.deptno;
0: jdbc:farrago:> select lcs_rid(empno), * from emps order by empno;
+---------+--------+----------+---------+---------+---------------------------------+------+---------+
| EXPR$0  | EMPNO  |   NAME   | DEPTNO  | GENDER  |              CITY               | AGE  | SALARY  |
+---------+--------+----------+---------+---------+---------------------------------+------+---------+
| 34      | 100    | Fred     | 11      |         | San Mateo                       | 26   | 70310   |
| 35      | 110    | Eric     | 21      | M       | San Francisco                   | 81   | 225000  |
| 36      | 120    | Wilma    | 21      | F       | San Mateo                       | 51   | 140630  |
| 40      | 130    | JOHN     |         | M       | Vancouver                       |      |         |
| 37      | 140    | Barney   | 40      | M       | San Mateo                       | 42   | 41000   |
| 38      | 150    | Betty    | 50      | F       | San Francisco                   | 41   | 40000   |
| 39      | 160    | Pebbles  | 60      | F       | Foster City                     | 3    | 0       |
+---------+--------+----------+---------+---------+---------------------------------+------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- make sure that when the original value is null, the update does occur
0: jdbc:farrago:> merge into emps e
. . . . . . . . >     using tempemps t on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set salary =
. . . . . . . . >             (case when salary is null then 10000 else salary end)
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(t.t_name), t.t_age, t.t_gender, t.t_age * 1000,
. . . . . . . . >             t.t_city);
0: jdbc:farrago:> select lcs_rid(empno), * from emps order by empno;
+---------+--------+----------+---------+---------+---------------------------------+------+---------+
| EXPR$0  | EMPNO  |   NAME   | DEPTNO  | GENDER  |              CITY               | AGE  | SALARY  |
+---------+--------+----------+---------+---------+---------------------------------+------+---------+
| 34      | 100    | Fred     | 11      |         | San Mateo                       | 26   | 70310   |
| 35      | 110    | Eric     | 21      | M       | San Francisco                   | 81   | 225000  |
| 36      | 120    | Wilma    | 21      | F       | San Mateo                       | 51   | 140630  |
| 41      | 130    | JOHN     |         | M       | Vancouver                       |      | 10000   |
| 37      | 140    | Barney   | 40      | M       | San Mateo                       | 42   | 41000   |
| 38      | 150    | Betty    | 50      | F       | San Francisco                   | 41   | 40000   |
| 39      | 160    | Pebbles  | 60      | F       | Foster City                     | 3    | 0       |
+---------+--------+----------+---------+---------+---------------------------------+------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- make sure that when the new value is null, the update occurs
0: jdbc:farrago:> merge into emps e
. . . . . . . . >     using tempemps t on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set salary =
. . . . . . . . >             (case when age is null then null else salary end)
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(t.t_name), t.t_age, t.t_gender, t.t_age * 1000,
. . . . . . . . >             t.t_city);
0: jdbc:farrago:> select lcs_rid(empno), * from emps order by empno;
+---------+--------+----------+---------+---------+---------------------------------+------+---------+
| EXPR$0  | EMPNO  |   NAME   | DEPTNO  | GENDER  |              CITY               | AGE  | SALARY  |
+---------+--------+----------+---------+---------+---------------------------------+------+---------+
| 34      | 100    | Fred     | 11      |         | San Mateo                       | 26   | 70310   |
| 35      | 110    | Eric     | 21      | M       | San Francisco                   | 81   | 225000  |
| 36      | 120    | Wilma    | 21      | F       | San Mateo                       | 51   | 140630  |
| 42      | 130    | JOHN     |         | M       | Vancouver                       |      |         |
| 37      | 140    | Barney   | 40      | M       | San Mateo                       | 42   | 41000   |
| 38      | 150    | Betty    | 50      | F       | San Francisco                   | 41   | 40000   |
| 39      | 160    | Pebbles  | 60      | F       | Foster City                     | 3    | 0       |
+---------+--------+----------+---------+---------+---------------------------------+------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- LER-1953
0: jdbc:farrago:> -- cast in the ON clause should cast to a not null type
0: jdbc:farrago:> merge into emps e
. . . . . . . . >     using tempemps t on t.t_empno = e.empno and
. . . . . . . . >         e.name = cast('Fred' as varchar(20))
. . . . . . . . >     when matched then
. . . . . . . . >         update set name = cast('FRED' as varchar(20));
0: jdbc:farrago:> select * from emps order by empno;
+--------+----------+---------+---------+---------------------------------+------+---------+
| EMPNO  |   NAME   | DEPTNO  | GENDER  |              CITY               | AGE  | SALARY  |
+--------+----------+---------+---------+---------------------------------+------+---------+
| 100    | FRED     | 11      |         | San Mateo                       | 26   | 70310   |
| 110    | Eric     | 21      | M       | San Francisco                   | 81   | 225000  |
| 120    | Wilma    | 21      | F       | San Mateo                       | 51   | 140630  |
| 130    | JOHN     |         | M       | Vancouver                       |      |         |
| 140    | Barney   | 40      | M       | San Mateo                       | 42   | 41000   |
| 150    | Betty    | 50      | F       | San Francisco                   | 41   | 40000   |
| 160    | Pebbles  | 60      | F       | Foster City                     | 3    | 0       |
+--------+----------+---------+---------+---------------------------------+------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -----------------
0: jdbc:farrago:> -- Explain output
0: jdbc:farrago:> -----------------
0: jdbc:farrago:> !set outputformat csv
0: jdbc:farrago:> 
0: jdbc:farrago:> -- source table reference is a table
0: jdbc:farrago:> explain plan for
. . . . . . . . > merge into emps e
. . . . . . . . >     using tempemps t on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t.t_deptno, city = upper(t.t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(t.t_name), t.t_age, t.t_gender, t.t_age * 1000,
. . . . . . . . >             t.t_city);
'column0'
'FennelToIteratorConverter'
'  LcsTableMergeRel(table=[[LOCALDB, M, EMPS]])'
'    FennelCalcRel(expr#0..14=[{inputs}], expr#15=[null], expr#16=[CAST($t15):VARBINARY(512)], expr#17=[IS NULL($t13)], expr#18=[CASE($t17, $t0, $t6)], expr#19=[CAST($t18):INTEGER NOT NULL], expr#20=[UPPER($t1)], expr#21=[CASE($t17, $t20, $t7)], expr#22=[CAST($t21):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], expr#23=[CASE($t17, $t15, $t2)], expr#24=[CASE($t17, $t3, $t9)], expr#25=[UPPER($t4)], expr#26=[CASE($t17, $t4, $t25)], expr#27=[CAST($t26):CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#28=[CASE($t17, $t5, $t11)], expr#29=[1000], expr#30=[*($t5, $t29)], expr#31=[0.25], expr#32=[Reinterpret($t31)], expr#33=[*($t12, $t32)], expr#34=[Reinterpret($t33)], expr#35=[100], expr#36=[*($t30, $t35)], expr#37=[Reinterpret($t34)], expr#38=[CASE($t17, $t36, $t37)], expr#39=[Reinterpret($t38)], expr#40=[Reinterpret($t39)], expr#41=[0], expr#42=[>($t40, $t41)], expr#43=[50], expr#44=[+($t40, $t43)], expr#45=[-($t40, $t43)], expr#46=[CASE($t42, $t44, $t45)], expr#47=[/($t46, $t35)], expr#48=[CAST($t47):INTEGER], expr#49=[IS NULL($t8)], expr#50=[IS NOT NULL($t2)], expr#51=[AND($t49, $t50)], expr#52=[IS NULL($t2)], expr#53=[IS NOT NULL($t8)], expr#54=[AND($t52, $t53)], expr#55=[<>($t8, $t2)], expr#56=[IS NULL($t10)], expr#57=[IS NOT NULL($t25)], expr#58=[AND($t56, $t57)], expr#59=[IS NULL($t25)], expr#60=[IS NOT NULL($t10)], expr#61=[AND($t59, $t60)], expr#62=[<>($t10, $t25)], expr#63=[IS NULL($t12)], expr#64=[IS NOT NULL($t37)], expr#65=[AND($t63, $t64)], expr#66=[IS NULL($t34)], expr#67=[IS NOT NULL($t12)], expr#68=[AND($t66, $t67)], expr#69=[CAST($t37):DOUBLE], expr#70=[1E2], expr#71=[/($t69, $t70)], expr#72=[<>($t12, $t71)], expr#73=[OR($t68, $t72)], expr#74=[OR($t65, $t73)], expr#75=[OR($t62, $t74)], expr#76=[OR($t61, $t75)], expr#77=[OR($t58, $t76)], expr#78=[OR($t55, $t77)], expr#79=[OR($t54, $t78)], expr#80=[OR($t51, $t79)], expr#81=[OR($t17, $t80)], rid=[$t13], descriptor=[$t16], segment=[$t16], EMPNO=[$t19], NAME=[$t22], DEPTNO=[$t23], GENDER=[$t24], CITY=[$t27], AGE=[$t28], SALARY=[$t48], $condition=[$t81])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[8]], joinType=[LEFT])'
'        LcsRowScanRel(table=[[LOCALDB, M, TEMPEMPS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_AGE, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_CITY, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_DEPTNO, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_EMPNO, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_GENDER, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_NAME]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5, 6, 7, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER DEPTNO, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" GENDER, CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CITY, INTEGER AGE, INTEGER SALARY, BIGINT LCS_RID, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, M, EMPS]], projection=[[0, 1, 2, 3, 4, 5, 6, LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$M$EMPS$AGE, SYS$CLUSTERED_INDEX$M$EMPS$CITY, SYS$CLUSTERED_INDEX$M$EMPS$DEPTNO, SYS$CLUSTERED_INDEX$M$EMPS$EMPNO, SYS$CLUSTERED_INDEX$M$EMPS$GENDER, SYS$CLUSTERED_INDEX$M$EMPS$NAME, SYS$CLUSTERED_INDEX$M$EMPS$SALARY]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- source table reference is a single table select
0: jdbc:farrago:> explain plan for
. . . . . . . . > merge into emps e
. . . . . . . . >     using (select * from tempemps where t_deptno = 100) t on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t.t_deptno, city = upper(t.t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(t.t_name), t.t_age, t.t_gender, t.t_age * 1000,
. . . . . . . . >             t.t_city);
'column0'
'FennelToIteratorConverter'
'  LcsTableMergeRel(table=[[LOCALDB, M, EMPS]])'
'    FennelCalcRel(expr#0..14=[{inputs}], expr#15=[null], expr#16=[CAST($t15):VARBINARY(512)], expr#17=[IS NULL($t13)], expr#18=[CASE($t17, $t0, $t6)], expr#19=[CAST($t18):INTEGER NOT NULL], expr#20=[UPPER($t1)], expr#21=[CASE($t17, $t20, $t7)], expr#22=[CAST($t21):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], expr#23=[CASE($t17, $t15, $t2)], expr#24=[CASE($t17, $t3, $t9)], expr#25=[UPPER($t4)], expr#26=[CASE($t17, $t4, $t25)], expr#27=[CAST($t26):CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#28=[CASE($t17, $t5, $t11)], expr#29=[1000], expr#30=[*($t5, $t29)], expr#31=[0.25], expr#32=[Reinterpret($t31)], expr#33=[*($t12, $t32)], expr#34=[Reinterpret($t33)], expr#35=[100], expr#36=[*($t30, $t35)], expr#37=[Reinterpret($t34)], expr#38=[CASE($t17, $t36, $t37)], expr#39=[Reinterpret($t38)], expr#40=[Reinterpret($t39)], expr#41=[0], expr#42=[>($t40, $t41)], expr#43=[50], expr#44=[+($t40, $t43)], expr#45=[-($t40, $t43)], expr#46=[CASE($t42, $t44, $t45)], expr#47=[/($t46, $t35)], expr#48=[CAST($t47):INTEGER], expr#49=[IS NULL($t8)], expr#50=[IS NOT NULL($t2)], expr#51=[AND($t49, $t50)], expr#52=[IS NULL($t2)], expr#53=[IS NOT NULL($t8)], expr#54=[AND($t52, $t53)], expr#55=[<>($t8, $t2)], expr#56=[IS NULL($t10)], expr#57=[IS NOT NULL($t25)], expr#58=[AND($t56, $t57)], expr#59=[IS NULL($t25)], expr#60=[IS NOT NULL($t10)], expr#61=[AND($t59, $t60)], expr#62=[<>($t10, $t25)], expr#63=[IS NULL($t12)], expr#64=[IS NOT NULL($t37)], expr#65=[AND($t63, $t64)], expr#66=[IS NULL($t34)], expr#67=[IS NOT NULL($t12)], expr#68=[AND($t66, $t67)], expr#69=[CAST($t37):DOUBLE], expr#70=[1E2], expr#71=[/($t69, $t70)], expr#72=[<>($t12, $t71)], expr#73=[OR($t68, $t72)], expr#74=[OR($t65, $t73)], expr#75=[OR($t62, $t74)], expr#76=[OR($t61, $t75)], expr#77=[OR($t58, $t76)], expr#78=[OR($t55, $t77)], expr#79=[OR($t54, $t78)], expr#80=[OR($t51, $t79)], expr#81=[OR($t17, $t80)], rid=[$t13], descriptor=[$t16], segment=[$t16], EMPNO=[$t19], NAME=[$t22], DEPTNO=[$t23], GENDER=[$t24], CITY=[$t27], AGE=[$t28], SALARY=[$t48], $condition=[$t81])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[8]], joinType=[LEFT])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5]], filterOp=[COMP_EQ], filterOrdinals=[[2]], filterTuple=[[100]], outputRowType=[RecordType(INTEGER T_EMPNO, VARCHAR(25) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T_NAME, INTEGER T_DEPTNO, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T_GENDER, CHAR(35) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T_CITY, INTEGER T_AGE) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, M, TEMPEMPS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_AGE, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_CITY, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_DEPTNO, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_EMPNO, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_GENDER, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_NAME]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5, 6, 7, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER DEPTNO, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" GENDER, CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CITY, INTEGER AGE, INTEGER SALARY, BIGINT LCS_RID, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, M, EMPS]], projection=[[0, 1, 2, 3, 4, 5, 6, LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$M$EMPS$AGE, SYS$CLUSTERED_INDEX$M$EMPS$CITY, SYS$CLUSTERED_INDEX$M$EMPS$DEPTNO, SYS$CLUSTERED_INDEX$M$EMPS$EMPNO, SYS$CLUSTERED_INDEX$M$EMPS$GENDER, SYS$CLUSTERED_INDEX$M$EMPS$NAME, SYS$CLUSTERED_INDEX$M$EMPS$SALARY]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- source table reference is a join
0: jdbc:farrago:> explain plan for
. . . . . . . . > merge into emps e
. . . . . . . . >     using (select s.empno, s.salary, t.* from salarytable s, tempemps t
. . . . . . . . >         where t.t_empno = s.empno) t
. . . . . . . . >     on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t.t_deptno, city = upper(t.t_city),
. . . . . . . . >             salary = e.salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(t.t_name), t.t_age, t.t_gender, t.salary * .15,
. . . . . . . . >             t.t_city);
'column0'
'FennelToIteratorConverter'
'  LcsTableMergeRel(table=[[LOCALDB, M, EMPS]])'
'    FennelCalcRel(expr#0..14=[{inputs}], expr#15=[IS NULL($t14)], expr#16=[IS NULL($t9)], expr#17=[IS NOT NULL($t3)], expr#18=[AND($t16, $t17)], expr#19=[IS NULL($t3)], expr#20=[IS NOT NULL($t9)], expr#21=[AND($t19, $t20)], expr#22=[<>($t9, $t3)], expr#23=[IS NULL($t11)], expr#24=[UPPER($t5)], expr#25=[IS NOT NULL($t24)], expr#26=[AND($t23, $t25)], expr#27=[IS NULL($t24)], expr#28=[IS NOT NULL($t11)], expr#29=[AND($t27, $t28)], expr#30=[<>($t11, $t24)], expr#31=[IS NULL($t13)], expr#32=[0.25], expr#33=[Reinterpret($t32)], expr#34=[*($t13, $t33)], expr#35=[Reinterpret($t34)], expr#36=[Reinterpret($t35)], expr#37=[IS NOT NULL($t36)], expr#38=[AND($t31, $t37)], expr#39=[IS NULL($t35)], expr#40=[IS NOT NULL($t13)], expr#41=[AND($t39, $t40)], expr#42=[CAST($t36):DOUBLE], expr#43=[1E2], expr#44=[/($t42, $t43)], expr#45=[<>($t13, $t44)], expr#46=[OR($t41, $t45)], expr#47=[OR($t38, $t46)], expr#48=[OR($t30, $t47)], expr#49=[OR($t29, $t48)], expr#50=[OR($t26, $t49)], expr#51=[OR($t22, $t50)], expr#52=[OR($t21, $t51)], expr#53=[OR($t18, $t52)], expr#54=[OR($t15, $t53)], expr#55=[null], expr#56=[CAST($t55):VARBINARY(512)], expr#57=[CASE($t15, $t1, $t7)], expr#58=[CAST($t57):INTEGER NOT NULL], expr#59=[UPPER($t2)], expr#60=[CASE($t15, $t59, $t8)], expr#61=[CAST($t60):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], expr#62=[CASE($t15, $t55, $t3)], expr#63=[CASE($t15, $t4, $t10)], expr#64=[CASE($t15, $t5, $t24)], expr#65=[CAST($t64):CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#66=[CASE($t15, $t6, $t12)], expr#67=[0.15], expr#68=[Reinterpret($t67)], expr#69=[*($t0, $t68)], expr#70=[Reinterpret($t69)], expr#71=[Reinterpret($t70)], expr#72=[CASE($t15, $t71, $t36)], expr#73=[Reinterpret($t72)], expr#74=[Reinterpret($t73)], expr#75=[0], expr#76=[>($t74, $t75)], expr#77=[50], expr#78=[+($t74, $t77)], expr#79=[-($t74, $t77)], expr#80=[CASE($t76, $t78, $t79)], expr#81=[100], expr#82=[/($t80, $t81)], expr#83=[CAST($t82):INTEGER], rid=[$t14], descriptor=[$t56], segment=[$t56], EMPNO=[$t58], NAME=[$t61], DEPTNO=[$t62], GENDER=[$t63], CITY=[$t65], AGE=[$t66], SALARY=[$t83], $condition=[$t54])'
'      FennelRenameRel(fieldNames=[[SALARY, T_EMPNO, T_NAME, T_DEPTNO, T_GENDER, T_CITY, T_AGE, EMPNO0, NAME, DEPTNO, GENDER, CITY, AGE, SALARY0, LCS_RID]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]], outputRowType=[RecordType(INTEGER SALARY, INTEGER T_EMPNO, VARCHAR(25) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T_NAME, INTEGER T_DEPTNO, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T_GENDER, CHAR(35) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T_CITY, INTEGER T_AGE, INTEGER EMPNO, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, INTEGER DEPTNO, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" GENDER, CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CITY, INTEGER AGE, INTEGER SALARY, BIGINT LCS_RID) NOT NULL])'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[8]], joinType=[LEFT])'
'            FennelReshapeRel(projection=[[1, 2, 3, 4, 5, 6, 7]], outputRowType=[RecordType(INTEGER SALARY, INTEGER T_EMPNO, VARCHAR(25) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T_NAME, INTEGER T_DEPTNO, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T_GENDER, CHAR(35) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T_CITY, INTEGER T_AGE) NOT NULL])'
'              LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                LcsRowScanRel(table=[[LOCALDB, M, SALARYTABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$M$SALARYTABLE$EMPNO, SYS$CLUSTERED_INDEX$M$SALARYTABLE$SALARY]])'
'                LcsRowScanRel(table=[[LOCALDB, M, TEMPEMPS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_AGE, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_CITY, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_DEPTNO, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_EMPNO, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_GENDER, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_NAME]])'
'            FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5, 6, 7, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER DEPTNO, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" GENDER, CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CITY, INTEGER AGE, INTEGER SALARY, BIGINT LCS_RID, INTEGER CAST($0):INTEGER) NOT NULL])'
'              LcsRowScanRel(table=[[LOCALDB, M, EMPS]], projection=[[0, 1, 2, 3, 4, 5, 6, LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$M$EMPS$AGE, SYS$CLUSTERED_INDEX$M$EMPS$CITY, SYS$CLUSTERED_INDEX$M$EMPS$DEPTNO, SYS$CLUSTERED_INDEX$M$EMPS$EMPNO, SYS$CLUSTERED_INDEX$M$EMPS$GENDER, SYS$CLUSTERED_INDEX$M$EMPS$NAME, SYS$CLUSTERED_INDEX$M$EMPS$SALARY]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- columns aren't qualified
0: jdbc:farrago:> explain plan for
. . . . . . . . > merge into emps
. . . . . . . . >     using (select * from tempemps where t_deptno = 100) on t_empno = empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t_deptno, city = upper(t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t_empno, upper(t_name), t_age, t_gender, t_age * 1000, t_city);
'column0'
'FennelToIteratorConverter'
'  LcsTableMergeRel(table=[[LOCALDB, M, EMPS]])'
'    FennelCalcRel(expr#0..14=[{inputs}], expr#15=[null], expr#16=[CAST($t15):VARBINARY(512)], expr#17=[IS NULL($t13)], expr#18=[CASE($t17, $t0, $t6)], expr#19=[CAST($t18):INTEGER NOT NULL], expr#20=[UPPER($t1)], expr#21=[CASE($t17, $t20, $t7)], expr#22=[CAST($t21):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], expr#23=[CASE($t17, $t15, $t2)], expr#24=[CASE($t17, $t3, $t9)], expr#25=[UPPER($t4)], expr#26=[CASE($t17, $t4, $t25)], expr#27=[CAST($t26):CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#28=[CASE($t17, $t5, $t11)], expr#29=[1000], expr#30=[*($t5, $t29)], expr#31=[0.25], expr#32=[Reinterpret($t31)], expr#33=[*($t12, $t32)], expr#34=[Reinterpret($t33)], expr#35=[100], expr#36=[*($t30, $t35)], expr#37=[Reinterpret($t34)], expr#38=[CASE($t17, $t36, $t37)], expr#39=[Reinterpret($t38)], expr#40=[Reinterpret($t39)], expr#41=[0], expr#42=[>($t40, $t41)], expr#43=[50], expr#44=[+($t40, $t43)], expr#45=[-($t40, $t43)], expr#46=[CASE($t42, $t44, $t45)], expr#47=[/($t46, $t35)], expr#48=[CAST($t47):INTEGER], expr#49=[IS NULL($t8)], expr#50=[IS NOT NULL($t2)], expr#51=[AND($t49, $t50)], expr#52=[IS NULL($t2)], expr#53=[IS NOT NULL($t8)], expr#54=[AND($t52, $t53)], expr#55=[<>($t8, $t2)], expr#56=[IS NULL($t10)], expr#57=[IS NOT NULL($t25)], expr#58=[AND($t56, $t57)], expr#59=[IS NULL($t25)], expr#60=[IS NOT NULL($t10)], expr#61=[AND($t59, $t60)], expr#62=[<>($t10, $t25)], expr#63=[IS NULL($t12)], expr#64=[IS NOT NULL($t37)], expr#65=[AND($t63, $t64)], expr#66=[IS NULL($t34)], expr#67=[IS NOT NULL($t12)], expr#68=[AND($t66, $t67)], expr#69=[CAST($t37):DOUBLE], expr#70=[1E2], expr#71=[/($t69, $t70)], expr#72=[<>($t12, $t71)], expr#73=[OR($t68, $t72)], expr#74=[OR($t65, $t73)], expr#75=[OR($t62, $t74)], expr#76=[OR($t61, $t75)], expr#77=[OR($t58, $t76)], expr#78=[OR($t55, $t77)], expr#79=[OR($t54, $t78)], expr#80=[OR($t51, $t79)], expr#81=[OR($t17, $t80)], rid=[$t13], descriptor=[$t16], segment=[$t16], EMPNO=[$t19], NAME=[$t22], DEPTNO=[$t23], GENDER=[$t24], CITY=[$t27], AGE=[$t28], SALARY=[$t48], $condition=[$t81])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[8]], joinType=[LEFT])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5]], filterOp=[COMP_EQ], filterOrdinals=[[2]], filterTuple=[[100]], outputRowType=[RecordType(INTEGER T_EMPNO, VARCHAR(25) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T_NAME, INTEGER T_DEPTNO, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T_GENDER, CHAR(35) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T_CITY, INTEGER T_AGE) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, M, TEMPEMPS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_AGE, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_CITY, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_DEPTNO, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_EMPNO, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_GENDER, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_NAME]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5, 6, 7, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER DEPTNO, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" GENDER, CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CITY, INTEGER AGE, INTEGER SALARY, BIGINT LCS_RID, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, M, EMPS]], projection=[[0, 1, 2, 3, 4, 5, 6, LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$M$EMPS$AGE, SYS$CLUSTERED_INDEX$M$EMPS$CITY, SYS$CLUSTERED_INDEX$M$EMPS$DEPTNO, SYS$CLUSTERED_INDEX$M$EMPS$EMPNO, SYS$CLUSTERED_INDEX$M$EMPS$GENDER, SYS$CLUSTERED_INDEX$M$EMPS$NAME, SYS$CLUSTERED_INDEX$M$EMPS$SALARY]])'
0: jdbc:farrago:> explain plan for
. . . . . . . . > merge into emps
. . . . . . . . >     using tempemps on t_empno = empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t_deptno, city = upper(t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t_empno, upper(t_name), t_age, t_gender, t_age * 1000, t_city);
'column0'
'FennelToIteratorConverter'
'  LcsTableMergeRel(table=[[LOCALDB, M, EMPS]])'
'    FennelCalcRel(expr#0..14=[{inputs}], expr#15=[null], expr#16=[CAST($t15):VARBINARY(512)], expr#17=[IS NULL($t13)], expr#18=[CASE($t17, $t0, $t6)], expr#19=[CAST($t18):INTEGER NOT NULL], expr#20=[UPPER($t1)], expr#21=[CASE($t17, $t20, $t7)], expr#22=[CAST($t21):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], expr#23=[CASE($t17, $t15, $t2)], expr#24=[CASE($t17, $t3, $t9)], expr#25=[UPPER($t4)], expr#26=[CASE($t17, $t4, $t25)], expr#27=[CAST($t26):CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#28=[CASE($t17, $t5, $t11)], expr#29=[1000], expr#30=[*($t5, $t29)], expr#31=[0.25], expr#32=[Reinterpret($t31)], expr#33=[*($t12, $t32)], expr#34=[Reinterpret($t33)], expr#35=[100], expr#36=[*($t30, $t35)], expr#37=[Reinterpret($t34)], expr#38=[CASE($t17, $t36, $t37)], expr#39=[Reinterpret($t38)], expr#40=[Reinterpret($t39)], expr#41=[0], expr#42=[>($t40, $t41)], expr#43=[50], expr#44=[+($t40, $t43)], expr#45=[-($t40, $t43)], expr#46=[CASE($t42, $t44, $t45)], expr#47=[/($t46, $t35)], expr#48=[CAST($t47):INTEGER], expr#49=[IS NULL($t8)], expr#50=[IS NOT NULL($t2)], expr#51=[AND($t49, $t50)], expr#52=[IS NULL($t2)], expr#53=[IS NOT NULL($t8)], expr#54=[AND($t52, $t53)], expr#55=[<>($t8, $t2)], expr#56=[IS NULL($t10)], expr#57=[IS NOT NULL($t25)], expr#58=[AND($t56, $t57)], expr#59=[IS NULL($t25)], expr#60=[IS NOT NULL($t10)], expr#61=[AND($t59, $t60)], expr#62=[<>($t10, $t25)], expr#63=[IS NULL($t12)], expr#64=[IS NOT NULL($t37)], expr#65=[AND($t63, $t64)], expr#66=[IS NULL($t34)], expr#67=[IS NOT NULL($t12)], expr#68=[AND($t66, $t67)], expr#69=[CAST($t37):DOUBLE], expr#70=[1E2], expr#71=[/($t69, $t70)], expr#72=[<>($t12, $t71)], expr#73=[OR($t68, $t72)], expr#74=[OR($t65, $t73)], expr#75=[OR($t62, $t74)], expr#76=[OR($t61, $t75)], expr#77=[OR($t58, $t76)], expr#78=[OR($t55, $t77)], expr#79=[OR($t54, $t78)], expr#80=[OR($t51, $t79)], expr#81=[OR($t17, $t80)], rid=[$t13], descriptor=[$t16], segment=[$t16], EMPNO=[$t19], NAME=[$t22], DEPTNO=[$t23], GENDER=[$t24], CITY=[$t27], AGE=[$t28], SALARY=[$t48], $condition=[$t81])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[8]], joinType=[LEFT])'
'        LcsRowScanRel(table=[[LOCALDB, M, TEMPEMPS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_AGE, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_CITY, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_DEPTNO, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_EMPNO, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_GENDER, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_NAME]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5, 6, 7, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER DEPTNO, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" GENDER, CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CITY, INTEGER AGE, INTEGER SALARY, BIGINT LCS_RID, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, M, EMPS]], projection=[[0, 1, 2, 3, 4, 5, 6, LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$M$EMPS$AGE, SYS$CLUSTERED_INDEX$M$EMPS$CITY, SYS$CLUSTERED_INDEX$M$EMPS$DEPTNO, SYS$CLUSTERED_INDEX$M$EMPS$EMPNO, SYS$CLUSTERED_INDEX$M$EMPS$GENDER, SYS$CLUSTERED_INDEX$M$EMPS$NAME, SYS$CLUSTERED_INDEX$M$EMPS$SALARY]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- no target column list in the insert
0: jdbc:farrago:> explain plan for
. . . . . . . . > merge into emps
. . . . . . . . >     using (select * from tempemps where t_deptno = 100) on t_empno = empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t_deptno, city = upper(t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert
. . . . . . . . >             values(t_empno, upper(t_name), null, t_gender, t_city, t_age,
. . . . . . . . >                 t_age * 1000);
'column0'
'FennelToIteratorConverter'
'  LcsTableMergeRel(table=[[LOCALDB, M, EMPS]])'
'    FennelCalcRel(expr#0..14=[{inputs}], expr#15=[null], expr#16=[CAST($t15):VARBINARY(512)], expr#17=[IS NULL($t13)], expr#18=[CASE($t17, $t0, $t6)], expr#19=[CAST($t18):INTEGER NOT NULL], expr#20=[UPPER($t1)], expr#21=[CASE($t17, $t20, $t7)], expr#22=[CAST($t21):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], expr#23=[CAST($t15):INTEGER], expr#24=[CASE($t17, $t23, $t2)], expr#25=[CASE($t17, $t3, $t9)], expr#26=[UPPER($t4)], expr#27=[CASE($t17, $t4, $t26)], expr#28=[CAST($t27):CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#29=[CASE($t17, $t5, $t11)], expr#30=[1000], expr#31=[*($t5, $t30)], expr#32=[0.25], expr#33=[Reinterpret($t32)], expr#34=[*($t12, $t33)], expr#35=[Reinterpret($t34)], expr#36=[100], expr#37=[*($t31, $t36)], expr#38=[Reinterpret($t35)], expr#39=[CASE($t17, $t37, $t38)], expr#40=[Reinterpret($t39)], expr#41=[Reinterpret($t40)], expr#42=[0], expr#43=[>($t41, $t42)], expr#44=[50], expr#45=[+($t41, $t44)], expr#46=[-($t41, $t44)], expr#47=[CASE($t43, $t45, $t46)], expr#48=[/($t47, $t36)], expr#49=[CAST($t48):INTEGER], expr#50=[IS NULL($t8)], expr#51=[IS NOT NULL($t2)], expr#52=[AND($t50, $t51)], expr#53=[IS NULL($t2)], expr#54=[IS NOT NULL($t8)], expr#55=[AND($t53, $t54)], expr#56=[<>($t8, $t2)], expr#57=[IS NULL($t10)], expr#58=[IS NOT NULL($t26)], expr#59=[AND($t57, $t58)], expr#60=[IS NULL($t26)], expr#61=[IS NOT NULL($t10)], expr#62=[AND($t60, $t61)], expr#63=[<>($t10, $t26)], expr#64=[IS NULL($t12)], expr#65=[IS NOT NULL($t38)], expr#66=[AND($t64, $t65)], expr#67=[IS NULL($t35)], expr#68=[IS NOT NULL($t12)], expr#69=[AND($t67, $t68)], expr#70=[CAST($t38):DOUBLE], expr#71=[1E2], expr#72=[/($t70, $t71)], expr#73=[<>($t12, $t72)], expr#74=[OR($t69, $t73)], expr#75=[OR($t66, $t74)], expr#76=[OR($t63, $t75)], expr#77=[OR($t62, $t76)], expr#78=[OR($t59, $t77)], expr#79=[OR($t56, $t78)], expr#80=[OR($t55, $t79)], expr#81=[OR($t52, $t80)], expr#82=[OR($t17, $t81)], rid=[$t13], descriptor=[$t16], segment=[$t16], EMPNO=[$t19], NAME=[$t22], DEPTNO=[$t24], GENDER=[$t25], CITY=[$t28], AGE=[$t29], SALARY=[$t49], $condition=[$t82])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[8]], joinType=[LEFT])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5]], filterOp=[COMP_EQ], filterOrdinals=[[2]], filterTuple=[[100]], outputRowType=[RecordType(INTEGER T_EMPNO, VARCHAR(25) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T_NAME, INTEGER T_DEPTNO, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T_GENDER, CHAR(35) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T_CITY, INTEGER T_AGE) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, M, TEMPEMPS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_AGE, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_CITY, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_DEPTNO, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_EMPNO, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_GENDER, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_NAME]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5, 6, 7, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER DEPTNO, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" GENDER, CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CITY, INTEGER AGE, INTEGER SALARY, BIGINT LCS_RID, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, M, EMPS]], projection=[[0, 1, 2, 3, 4, 5, 6, LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$M$EMPS$AGE, SYS$CLUSTERED_INDEX$M$EMPS$CITY, SYS$CLUSTERED_INDEX$M$EMPS$DEPTNO, SYS$CLUSTERED_INDEX$M$EMPS$EMPNO, SYS$CLUSTERED_INDEX$M$EMPS$GENDER, SYS$CLUSTERED_INDEX$M$EMPS$NAME, SYS$CLUSTERED_INDEX$M$EMPS$SALARY]])'
0: jdbc:farrago:>                 
0: jdbc:farrago:> -- no target column list in the insert, but the types of the source insert
0: jdbc:farrago:> -- expressions match the target
0: jdbc:farrago:> explain plan for
. . . . . . . . > merge into emps
. . . . . . . . >     using (select * from tempemps where t_deptno = 100) on t_empno = empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t_deptno, city = upper(t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert
. . . . . . . . >             values(t_empno, cast(upper(t_name) as varchar(20)), null, t_gender,
. . . . . . . . >                 cast(t_city as char(30)), t_age, t_age * 1000);
'column0'
'FennelToIteratorConverter'
'  LcsTableMergeRel(table=[[LOCALDB, M, EMPS]])'
'    FennelCalcRel(expr#0..14=[{inputs}], expr#15=[null], expr#16=[CAST($t15):VARBINARY(512)], expr#17=[IS NULL($t13)], expr#18=[CASE($t17, $t0, $t6)], expr#19=[CAST($t18):INTEGER NOT NULL], expr#20=[UPPER($t1)], expr#21=[CAST($t20):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#22=[CASE($t17, $t21, $t7)], expr#23=[CAST($t22):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], expr#24=[CAST($t15):INTEGER], expr#25=[CASE($t17, $t24, $t2)], expr#26=[CASE($t17, $t3, $t9)], expr#27=[CAST($t4):CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#28=[UPPER($t4)], expr#29=[CASE($t17, $t27, $t28)], expr#30=[CAST($t29):CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#31=[CASE($t17, $t5, $t11)], expr#32=[1000], expr#33=[*($t5, $t32)], expr#34=[0.25], expr#35=[Reinterpret($t34)], expr#36=[*($t12, $t35)], expr#37=[Reinterpret($t36)], expr#38=[100], expr#39=[*($t33, $t38)], expr#40=[Reinterpret($t37)], expr#41=[CASE($t17, $t39, $t40)], expr#42=[Reinterpret($t41)], expr#43=[Reinterpret($t42)], expr#44=[0], expr#45=[>($t43, $t44)], expr#46=[50], expr#47=[+($t43, $t46)], expr#48=[-($t43, $t46)], expr#49=[CASE($t45, $t47, $t48)], expr#50=[/($t49, $t38)], expr#51=[CAST($t50):INTEGER], expr#52=[IS NULL($t8)], expr#53=[IS NOT NULL($t2)], expr#54=[AND($t52, $t53)], expr#55=[IS NULL($t2)], expr#56=[IS NOT NULL($t8)], expr#57=[AND($t55, $t56)], expr#58=[<>($t8, $t2)], expr#59=[IS NULL($t10)], expr#60=[IS NOT NULL($t28)], expr#61=[AND($t59, $t60)], expr#62=[IS NULL($t28)], expr#63=[IS NOT NULL($t10)], expr#64=[AND($t62, $t63)], expr#65=[<>($t10, $t28)], expr#66=[IS NULL($t12)], expr#67=[IS NOT NULL($t40)], expr#68=[AND($t66, $t67)], expr#69=[IS NULL($t37)], expr#70=[IS NOT NULL($t12)], expr#71=[AND($t69, $t70)], expr#72=[CAST($t40):DOUBLE], expr#73=[1E2], expr#74=[/($t72, $t73)], expr#75=[<>($t12, $t74)], expr#76=[OR($t71, $t75)], expr#77=[OR($t68, $t76)], expr#78=[OR($t65, $t77)], expr#79=[OR($t64, $t78)], expr#80=[OR($t61, $t79)], expr#81=[OR($t58, $t80)], expr#82=[OR($t57, $t81)], expr#83=[OR($t54, $t82)], expr#84=[OR($t17, $t83)], rid=[$t13], descriptor=[$t16], segment=[$t16], EMPNO=[$t19], NAME=[$t23], DEPTNO=[$t25], GENDER=[$t26], CITY=[$t30], AGE=[$t31], SALARY=[$t51], $condition=[$t84])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[8]], joinType=[LEFT])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5]], filterOp=[COMP_EQ], filterOrdinals=[[2]], filterTuple=[[100]], outputRowType=[RecordType(INTEGER T_EMPNO, VARCHAR(25) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T_NAME, INTEGER T_DEPTNO, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T_GENDER, CHAR(35) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T_CITY, INTEGER T_AGE) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, M, TEMPEMPS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_AGE, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_CITY, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_DEPTNO, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_EMPNO, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_GENDER, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_NAME]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5, 6, 7, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER DEPTNO, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" GENDER, CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CITY, INTEGER AGE, INTEGER SALARY, BIGINT LCS_RID, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, M, EMPS]], projection=[[0, 1, 2, 3, 4, 5, 6, LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$M$EMPS$AGE, SYS$CLUSTERED_INDEX$M$EMPS$CITY, SYS$CLUSTERED_INDEX$M$EMPS$DEPTNO, SYS$CLUSTERED_INDEX$M$EMPS$EMPNO, SYS$CLUSTERED_INDEX$M$EMPS$GENDER, SYS$CLUSTERED_INDEX$M$EMPS$NAME, SYS$CLUSTERED_INDEX$M$EMPS$SALARY]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- no insert substatement
0: jdbc:farrago:> explain plan for
. . . . . . . . > merge into emps
. . . . . . . . >     using (select * from tempemps) on t_empno = empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set name = t_name, city = t_city;
'column0'
'FennelToIteratorConverter'
'  LcsTableMergeRel(table=[[LOCALDB, M, EMPS]])'
'    FennelCalcRel(expr#0..11=[{inputs}], expr#12=[CAST($t10):BIGINT NOT NULL], expr#13=[null], expr#14=[CAST($t13):VARBINARY(512)], expr#15=[CAST($t1):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], expr#16=[CAST($t2):CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#17=[IS NULL($t4)], expr#18=[IS NOT NULL($t1)], expr#19=[AND($t17, $t18)], expr#20=[IS NULL($t1)], expr#21=[IS NOT NULL($t4)], expr#22=[AND($t20, $t21)], expr#23=[<>($t4, $t1)], expr#24=[IS NULL($t7)], expr#25=[IS NOT NULL($t2)], expr#26=[AND($t24, $t25)], expr#27=[IS NULL($t2)], expr#28=[IS NOT NULL($t7)], expr#29=[AND($t27, $t28)], expr#30=[<>($t7, $t2)], expr#31=[OR($t29, $t30)], expr#32=[OR($t26, $t31)], expr#33=[OR($t23, $t32)], expr#34=[OR($t22, $t33)], expr#35=[OR($t19, $t34)], rid=[$t12], descriptor=[$t14], segment=[$t14], EMPNO=[$t3], NAME=[$t15], DEPTNO=[$t5], GENDER=[$t6], CITY=[$t16], AGE=[$t8], SALARY=[$t9], $condition=[$t35])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[8]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, M, TEMPEMPS]], projection=[[0, 1, 4]], clustered indexes=[[SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_CITY, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_EMPNO, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_NAME]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5, 6, 7, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER DEPTNO, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" GENDER, CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CITY, INTEGER AGE, INTEGER SALARY, BIGINT LCS_RID, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, M, EMPS]], projection=[[0, 1, 2, 3, 4, 5, 6, LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$M$EMPS$AGE, SYS$CLUSTERED_INDEX$M$EMPS$CITY, SYS$CLUSTERED_INDEX$M$EMPS$DEPTNO, SYS$CLUSTERED_INDEX$M$EMPS$EMPNO, SYS$CLUSTERED_INDEX$M$EMPS$GENDER, SYS$CLUSTERED_INDEX$M$EMPS$NAME, SYS$CLUSTERED_INDEX$M$EMPS$SALARY]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- no update substatement
0: jdbc:farrago:> explain plan for
. . . . . . . . > merge into emps
. . . . . . . . >     using (select * from tempemps) on t_empno = empno
. . . . . . . . >     when not matched then
. . . . . . . . >         insert values (t_empno, t_name, t_deptno, t_gender, t_city, t_age, 0);
'column0'
'FennelToIteratorConverter'
'  LcsTableMergeRel(table=[[LOCALDB, M, EMPS]])'
'    FennelCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t0):INTEGER NOT NULL], expr#10=[CAST($t1):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], expr#11=[CAST($t4):CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#12=[0], expr#13=[CAST($t12):INTEGER], expr#14=[IS NULL($t7)], $f0=[$t9], $f1=[$t10], $f2=[$t2], $f3=[$t3], $f4=[$t11], $f5=[$t5], $f6=[$t13], $condition=[$t14])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[2]], joinType=[LEFT])'
'        LcsRowScanRel(table=[[LOCALDB, M, TEMPEMPS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_AGE, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_CITY, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_DEPTNO, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_EMPNO, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_GENDER, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_NAME]])'
'        FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, BIGINT LCS_RID, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, M, EMPS]], projection=[[0, LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$M$EMPS$EMPNO]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- no-op updates
0: jdbc:farrago:> explain plan for
. . . . . . . . > merge into emps e
. . . . . . . . >     using tempemps t on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = deptno, city = city,
. . . . . . . . >             salary = salary
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(t.t_name), t.t_age, t.t_gender, t.t_age * 1000,
. . . . . . . . >             t.t_city);
'column0'
'FennelToIteratorConverter'
'  LcsTableMergeRel(table=[[LOCALDB, M, EMPS]])'
'    FennelCalcRel(expr#0..13=[{inputs}], expr#14=[null], expr#15=[CAST($t14):VARBINARY(512)], expr#16=[IS NULL($t12)], expr#17=[CASE($t16, $t0, $t5)], expr#18=[CAST($t17):INTEGER NOT NULL], expr#19=[UPPER($t1)], expr#20=[CASE($t16, $t19, $t6)], expr#21=[CAST($t20):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], expr#22=[CASE($t16, $t14, $t7)], expr#23=[CASE($t16, $t2, $t8)], expr#24=[CASE($t16, $t3, $t9)], expr#25=[CAST($t24):CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#26=[CASE($t16, $t4, $t10)], expr#27=[1000], expr#28=[*($t4, $t27)], expr#29=[CASE($t16, $t28, $t11)], expr#30=[IS NULL($t7)], expr#31=[IS NOT NULL($t7)], expr#32=[AND($t30, $t31)], expr#33=[<>($t7, $t7)], expr#34=[IS NULL($t9)], expr#35=[IS NOT NULL($t9)], expr#36=[AND($t34, $t35)], expr#37=[<>($t9, $t9)], expr#38=[IS NULL($t11)], expr#39=[IS NOT NULL($t11)], expr#40=[AND($t38, $t39)], expr#41=[<>($t11, $t11)], expr#42=[OR($t40, $t41)], expr#43=[OR($t40, $t42)], expr#44=[OR($t37, $t43)], expr#45=[OR($t36, $t44)], expr#46=[OR($t36, $t45)], expr#47=[OR($t33, $t46)], expr#48=[OR($t32, $t47)], expr#49=[OR($t32, $t48)], expr#50=[OR($t16, $t49)], rid=[$t12], descriptor=[$t15], segment=[$t15], EMPNO=[$t18], NAME=[$t21], DEPTNO=[$t22], GENDER=[$t23], CITY=[$t25], AGE=[$t26], SALARY=[$t29], $condition=[$t50])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[8]], joinType=[LEFT])'
'        LcsRowScanRel(table=[[LOCALDB, M, TEMPEMPS]], projection=[[0, 1, 3, 4, 5]], clustered indexes=[[SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_AGE, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_CITY, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_EMPNO, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_GENDER, SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_NAME]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5, 6, 7, 0]], outputRowType=[RecordType(INTEGER NOT NULL EMPNO, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER DEPTNO, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" GENDER, CHAR(30) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CITY, INTEGER AGE, INTEGER SALARY, BIGINT LCS_RID, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, M, EMPS]], projection=[[0, 1, 2, 3, 4, 5, 6, LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$M$EMPS$AGE, SYS$CLUSTERED_INDEX$M$EMPS$CITY, SYS$CLUSTERED_INDEX$M$EMPS$DEPTNO, SYS$CLUSTERED_INDEX$M$EMPS$EMPNO, SYS$CLUSTERED_INDEX$M$EMPS$GENDER, SYS$CLUSTERED_INDEX$M$EMPS$NAME, SYS$CLUSTERED_INDEX$M$EMPS$SALARY]])'
0: jdbc:farrago:> -- note that in this case (no-op update only), the check for non-update filter
0: jdbc:farrago:> -- should be pushed down to the scan since there is no outer join
0: jdbc:farrago:> explain plan for
. . . . . . . . > merge into emps e1
. . . . . . . . >     using (select * from emps) e2 on e1.empno = e2.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set age = e1.age + e1.deptno - e1.deptno;
'column0'
'FennelToIteratorConverter'
'  LcsTableMergeRel(table=[[LOCALDB, M, EMPS]])'
'    FennelCalcRel(expr#0..8=[{inputs}], expr#9=[null], expr#10=[CAST($t9):VARBINARY(512)], expr#11=[+($t6, $t3)], expr#12=[-($t11, $t3)], expr#13=[CAST($t8):BIGINT NOT NULL], rid=[$t13], descriptor=[$t10], segment=[$t10], EMPNO=[$t1], NAME=[$t2], DEPTNO=[$t3], GENDER=[$t4], CITY=[$t5], AGE=[$t12], SALARY=[$t7])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, M, EMPS]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$M$EMPS$EMPNO]])'
'        FennelCalcRel(expr#0..7=[{inputs}], expr#8=[IS NULL($t5)], expr#9=[+($t5, $t2)], expr#10=[-($t9, $t2)], expr#11=[IS NOT NULL($t10)], expr#12=[AND($t8, $t11)], expr#13=[IS NULL($t10)], expr#14=[IS NOT NULL($t5)], expr#15=[AND($t13, $t14)], expr#16=[<>($t5, $t10)], expr#17=[OR($t15, $t16)], expr#18=[OR($t12, $t17)], proj#0..7=[{exprs}], $condition=[$t18])'
'          LcsRowScanRel(table=[[LOCALDB, M, EMPS]], projection=[[0, 1, 2, 3, 4, 5, 6, LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$M$EMPS$AGE, SYS$CLUSTERED_INDEX$M$EMPS$CITY, SYS$CLUSTERED_INDEX$M$EMPS$DEPTNO, SYS$CLUSTERED_INDEX$M$EMPS$EMPNO, SYS$CLUSTERED_INDEX$M$EMPS$GENDER, SYS$CLUSTERED_INDEX$M$EMPS$NAME, SYS$CLUSTERED_INDEX$M$EMPS$SALARY]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > merge into emps e
. . . . . . . . >     using tempemps t on t.t_empno = e.empno and
. . . . . . . . >         e.name = cast('Fred' as varchar(20))
. . . . . . . . >     when matched then
. . . . . . . . >         update set name = cast('FRED' as varchar(20));
'column0'
'FennelToIteratorConverter'
'  LcsTableMergeRel(table=[[LOCALDB, M, EMPS]])'
'    FennelCalcRel(expr#0..8=[{inputs}], expr#9=[CAST($t7):BIGINT NOT NULL], expr#10=[null], expr#11=[CAST($t10):VARBINARY(512)], expr#12=[_ISO-8859-1'FRED'], expr#13=[CAST($t12):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], rid=[$t9], descriptor=[$t11], segment=[$t11], EMPNO=[$t1], NAME=[$t13], DEPTNO=[$t2], GENDER=[$t3], CITY=[$t4], AGE=[$t5], SALARY=[$t6])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[7]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, M, TEMPEMPS]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$M$TEMPEMPS$T_EMPNO]])'
'        FennelCalcRel(expr#0..7=[{inputs}], expr#8=[_ISO-8859-1'Fred'], expr#9=[CAST($t8):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], expr#10=[=($t1, $t9)], expr#11=[IS NULL($t1)], expr#12=[_ISO-8859-1'FRED'], expr#13=[CAST($t12):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], expr#14=[IS NOT NULL($t13)], expr#15=[AND($t11, $t14)], expr#16=[IS NULL($t13)], expr#17=[IS NOT NULL($t1)], expr#18=[AND($t16, $t17)], expr#19=[<>($t1, $t13)], expr#20=[OR($t18, $t19)], expr#21=[OR($t15, $t20)], expr#22=[AND($t10, $t21)], expr#23=[CAST($t0):INTEGER], EMPNO=[$t0], DEPTNO=[$t2], GENDER=[$t3], CITY=[$t4], AGE=[$t5], SALARY=[$t6], LCS_RID=[$t7], CAST($0):INTEGER=[$t23], $condition=[$t22])'
'          LcsRowScanRel(table=[[LOCALDB, M, EMPS]], projection=[[0, 1, 2, 3, 4, 5, 6, LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$M$EMPS$AGE, SYS$CLUSTERED_INDEX$M$EMPS$CITY, SYS$CLUSTERED_INDEX$M$EMPS$DEPTNO, SYS$CLUSTERED_INDEX$M$EMPS$EMPNO, SYS$CLUSTERED_INDEX$M$EMPS$GENDER, SYS$CLUSTERED_INDEX$M$EMPS$NAME, SYS$CLUSTERED_INDEX$M$EMPS$SALARY]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> --------------
0: jdbc:farrago:> -- Error cases
0: jdbc:farrago:> --------------
0: jdbc:farrago:> -- invalid target table
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > merge into emp e
. . . . . . . . >     using tempemps t on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t.t_deptno, city = upper(t.t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(t.t_name), t.t_age, t.t_gender, t.t_age * 1000,
. . . . . . . . >             t.t_city);
Error: From line 2, column 12 to line 2, column 14: Table 'EMP' not found (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- invalid table in using clause
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > merge into emps e
. . . . . . . . >     using tempemp t on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t.t_deptno, city = upper(t.t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(t.t_name), t.t_age, t.t_gender, t.t_age * 1000,
. . . . . . . . >             t.t_city);
Error: From line 3, column 11 to line 3, column 17: Table 'TEMPEMP' not found (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- invalid column reference in on clause
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > merge into emps e
. . . . . . . . >     using tempemps t on t.empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t.t_deptno, city = upper(t.t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(t.t_name), t.t_age, t.t_gender, t.t_age * 1000,
. . . . . . . . >             t.t_city);
Error: From line 3, column 27 to line 3, column 31: Column 'EMPNO' not found in table 'T' (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- invalid column reference in update set clause
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > merge into emps e
. . . . . . . . >     using tempemps t on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set t_deptno = t.t_deptno, city = upper(t.t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(t.t_name), t.t_age, t.t_gender, t.t_age * 1000,
. . . . . . . . >             t.t_city);
Error: From line 5, column 20 to line 5, column 27: Unknown target column 'T_DEPTNO' (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- invalid column reference in update set expr
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > merge into emps e
. . . . . . . . >     using tempemps t on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t.t_deptno, city = upper(e.t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(t.t_name), t.t_age, t.t_gender, t.t_age * 1000,
. . . . . . . . >             t.t_city);
Error: From line 5, column 56 to line 5, column 61: Column 'T_CITY' not found in table 'E' (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- ambiguous column
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > merge into emps e
. . . . . . . . >     using (select s.empno, s.salary, t.* from salarytable s, tempemps t
. . . . . . . . >         where t.t_empno = s.empno) t
. . . . . . . . >     on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t.t_deptno, city = upper(t.t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(t.t_name), t.t_age, t.t_gender, t.salary * .15,
. . . . . . . . >             t.t_city);
Error: From line 8, column 22 to line 8, column 27: Column 'SALARY' is ambiguous (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- invalid column reference in insert target list
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > merge into emps e
. . . . . . . . >     using tempemps t on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t.t_deptno, city = upper(t.t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, t_gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(e.t_name), t.t_age, t.t_gender, t.t_age * 1000,
. . . . . . . . >             t.t_city);
Error: From line 8, column 35 to line 8, column 42: Unknown target column 'T_GENDER' (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- invalid column reference in insert values list
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > merge into emps e
. . . . . . . . >     using tempemps t on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t.t_deptno, city = upper(t.t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(e.t_name), t.t_age, t.t_gender, t.t_age * 1000,
. . . . . . . . >             t.t_city);
Error: At line 9, column 33: Table 'E' not found (state=,code=0)
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > merge into emps e
. . . . . . . . >     using tempemps t on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t.t_deptno, city = upper(t.t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(name), t.t_age, t.t_gender, t.t_age * 1000,
. . . . . . . . >             t.t_city);
Error: From line 9, column 33 to line 9, column 36: Column 'NAME' not found in any table (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- mismatch in number of column in values clause
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > merge into emps e
. . . . . . . . >     using tempemps t on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t.t_deptno, city = upper(t.t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(t.t_name), t.t_age, t.t_gender, t.t_age * 1000);
Error: Number of INSERT target columns (6) does not equal number of source items (5) (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- mismatch in types in values clause
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > merge into emps e
. . . . . . . . >     using tempemps t on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t.t_deptno, city = upper(t.t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(t.t_name), t.t_name, t.t_gender, t.t_age * 1000,
. . . . . . . . >             t.t_city);
Error: From line 8, column 30 to line 8, column 32: Cannot assign to target field 'AGE' of type INTEGER from source field 'T_NAME' of type VARCHAR(25) (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- LucidDb doesn't support UPDATE
0: jdbc:farrago:> update emps set name = 'Foobar';
Error: UPDATE not supported (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- Farrago doesn't support MERGE
0: jdbc:farrago:> alter session implementation set default;
0: jdbc:farrago:> merge into emps e
. . . . . . . . >     using tempemps t on t.t_empno = e.empno
. . . . . . . . >     when matched then
. . . . . . . . >         update set deptno = t.t_deptno, city = upper(t.t_city),
. . . . . . . . >             salary = salary * .25
. . . . . . . . >     when not matched then
. . . . . . . . >         insert (empno, name, age, gender, salary, city)
. . . . . . . . >         values(t.t_empno, upper(t.t_name), t.t_age, t.t_gender, t.t_age * 1000,
. . . . . . . . >             t.t_city);
Error: MERGE not supported (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> !quit
