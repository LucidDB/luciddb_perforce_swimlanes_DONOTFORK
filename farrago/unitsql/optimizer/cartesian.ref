> -- $Id$
> -- Test queries which require Cartesian products
> 
> set schema 'sales';
> 
> -- force usage of Java calculator
> alter system set "calcVirtualMachine" = 'CALCVM_JAVA';
> 
> -- simple cross product
> select emps.name as ename,depts.name as dname 
> from emps,depts
> order by 1,2;
+--------+------------+
| ENAME  |   DNAME    |
+--------+------------+
| Eric   | Accounts   |
| Eric   | Marketing  |
| Eric   | Sales      |
| Fred   | Accounts   |
| Fred   | Marketing  |
| Fred   | Sales      |
| John   | Accounts   |
| John   | Marketing  |
| John   | Sales      |
| Wilma  | Accounts   |
| Wilma  | Marketing  |
| Wilma  | Sales      |
+--------+------------+
> 
> -- cross product requiring a Java plan restart for the right-hand input
> select emps.name as ename,d.dnoplus 
> from emps,(select deptno+1 as dnoplus from depts) d
> order by 1,2;
+--------+----------+
| ENAME  | DNOPLUS  |
+--------+----------+
| Eric   | 11       |
| Eric   | 21       |
| Eric   | 31       |
| Fred   | 11       |
| Fred   | 21       |
| Fred   | 31       |
| John   | 11       |
| John   | 21       |
| John   | 31       |
| Wilma  | 11       |
| Wilma  | 21       |
| Wilma  | 31       |
+--------+----------+
> 
> -- weird cross product used for uncorrelated subqueries
> select depts.name from emps left outer join depts on TRUE 
> order by 1;
+------------+
|    NAME    |
+------------+
| Accounts   |
| Accounts   |
| Accounts   |
| Accounts   |
| Marketing  |
| Marketing  |
| Marketing  |
| Marketing  |
| Sales      |
| Sales      |
| Sales      |
| Sales      |
+------------+
> 
> -- verify plans
> !set outputformat csv
> 
> explain plan for
> select emps.name as ename,depts.name as dname from emps,depts;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[ENAME, DNAME]])'
'    FennelCartesianProductRel(leftouterjoin=[false])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
'      FennelBufferRel(inMemory=[false], multiPass=[true])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> explain plan for
> select emps.name as ename,depts.name as dname from emps,depts
> order by 1,2;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'    FennelRenameRel(fieldNames=[[ENAME, DNAME]])'
'      FennelCartesianProductRel(leftouterjoin=[false])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
'        FennelBufferRel(inMemory=[false], multiPass=[true])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> explain plan for
> select emps.name as ename,d.dnoplus 
> from emps,(select deptno+1 as dnoplus from depts) d;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[ENAME, DNOPLUS]])'
'    FennelCartesianProductRel(leftouterjoin=[false])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
'      FennelBufferRel(inMemory=[false], multiPass=[true])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0=[{inputs}], expr#1=[1], expr#2=[+($t0, $t1)], DNOPLUS=[$t2])'
'            FennelToIteratorConverter'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> explain plan for
> select depts.name from emps left outer join depts on TRUE;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME) NOT NULL])'
'    FennelCartesianProductRel(leftouterjoin=[true])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
'      FennelBufferRel(inMemory=[false], multiPass=[true])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> -- try lcs tables; lcs costing doesn't have a weird fudge factor so there will
> -- be cases where it doesn't make sense to buffer
> create schema lcscartesian;
> set schema 'lcscartesian';
> alter session implementation set jar sys_boot.sys_boot.luciddb_plugin;
> create table lcsemps(
>     empno int, name varchar(12), deptno int, gender char(1), city varchar(12),
>     empid int, age int);
> insert into lcsemps
>     select empno, name, deptno, gender, city, empid, age from sales.emps;
> create table lcsdepts(deptno int, name varchar(12));
> insert into lcsdepts select * from sales.depts;
> 
> !set outputformat table
> -- should not use buffering
> select * from lcsemps e, lcsdepts d order by 1, 2, 3, 4, 5, 6, 7, 8, 9;
+--------+--------+---------+---------+---------------+--------+------+----------+------------+
| EMPNO  |  NAME  | DEPTNO  | GENDER  |     CITY      | EMPID  | AGE  | DEPTNO0  |   NAME0    |
+--------+--------+---------+---------+---------------+--------+------+----------+------------+
| 100    | Fred   | 10      |         |               | 30     | 25   | 10       | Sales      |
| 100    | Fred   | 10      |         |               | 30     | 25   | 20       | Marketing  |
| 100    | Fred   | 10      |         |               | 30     | 25   | 30       | Accounts   |
| 110    | Eric   | 20      | M       | San Francisc  | 3      | 80   | 10       | Sales      |
| 110    | Eric   | 20      | M       | San Francisc  | 3      | 80   | 20       | Marketing  |
| 110    | Eric   | 20      | M       | San Francisc  | 3      | 80   | 30       | Accounts   |
| 110    | John   | 40      | M       | Vancouver     | 2      |      | 10       | Sales      |
| 110    | John   | 40      | M       | Vancouver     | 2      |      | 20       | Marketing  |
| 110    | John   | 40      | M       | Vancouver     | 2      |      | 30       | Accounts   |
| 120    | Wilma  | 20      | F       |               | 1      | 50   | 10       | Sales      |
| 120    | Wilma  | 20      | F       |               | 1      | 50   | 20       | Marketing  |
| 120    | Wilma  | 20      | F       |               | 1      | 50   | 30       | Accounts   |
+--------+--------+---------+---------+---------------+--------+------+----------+------------+
> select e.name, d.deptno from lcsemps e, lcsdepts d order by 1, 2;
+--------+---------+
|  NAME  | DEPTNO  |
+--------+---------+
| Eric   | 10      |
| Eric   | 20      |
| Eric   | 30      |
| Fred   | 10      |
| Fred   | 20      |
| Fred   | 30      |
| John   | 10      |
| John   | 20      |
| John   | 30      |
| Wilma  | 10      |
| Wilma  | 20      |
| Wilma  | 30      |
+--------+---------+
> 
> -- should use buffering
> select e.name, d.*
>     from lcsemps e, (select min(deptno) from lcsdepts) d order by 1;
+--------+---------+
|  NAME  | EXPR$0  |
+--------+---------+
| Eric   | 10      |
| Fred   | 10      |
| John   | 10      |
| Wilma  | 10      |
+--------+---------+
> 
> -- should still use buffering, swapping the join operands
> select e.name, d.*
>     from (select min(deptno) from lcsdepts) d, lcsemps e order by 1;
+--------+---------+
|  NAME  | EXPR$0  |
+--------+---------+
| Eric   | 10      |
| Fred   | 10      |
| John   | 10      |
| Wilma  | 10      |
+--------+---------+
> select d.*, e.name
>     from (select min(deptno) from lcsdepts) d, lcsemps e order by 2;
+---------+--------+
| EXPR$0  |  NAME  |
+---------+--------+
| 10      | Eric   |
| 10      | Fred   |
| 10      | John   |
| 10      | Wilma  |
+---------+--------+
> 
> !set outputformat csv
> -- the following 2 should not use buffering
> explain plan for
> select * from lcsemps e, lcsdepts d order by 1, 2, 3, 4, 5, 6, 7, 8, 9;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0, 1, 2, 3, 4, 5, 6, 7, 8]], discardDuplicates=[false])'
'    FennelCartesianProductRel(leftouterjoin=[false])'
'      LcsRowScanRel(table=[[LOCALDB, LCSCARTESIAN, LCSEMPS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSEMPS$AGE, SYS$CLUSTERED_INDEX$LCSEMPS$CITY, SYS$CLUSTERED_INDEX$LCSEMPS$DEPTNO, SYS$CLUSTERED_INDEX$LCSEMPS$EMPID, SYS$CLUSTERED_INDEX$LCSEMPS$EMPNO, SYS$CLUSTERED_INDEX$LCSEMPS$GENDER, SYS$CLUSTERED_INDEX$LCSEMPS$NAME]])'
'      LcsRowScanRel(table=[[LOCALDB, LCSCARTESIAN, LCSDEPTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSDEPTS$DEPTNO, SYS$CLUSTERED_INDEX$LCSDEPTS$NAME]])'
> 
> explain plan for
> select e.name, d.deptno from lcsemps e, lcsdepts d order by 1, 2;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'    FennelCartesianProductRel(leftouterjoin=[false])'
'      LcsRowScanRel(table=[[LOCALDB, LCSCARTESIAN, LCSEMPS]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSEMPS$NAME]])'
'      LcsRowScanRel(table=[[LOCALDB, LCSCARTESIAN, LCSDEPTS]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSDEPTS$DEPTNO]])'
> 
> -- should use buffering
> explain plan for
> select e.name, d.*
>     from lcsemps e, (select min(deptno) from lcsdepts) d order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelCartesianProductRel(leftouterjoin=[false])'
'      LcsRowScanRel(table=[[LOCALDB, LCSCARTESIAN, LCSEMPS]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSEMPS$NAME]])'
'      FennelBufferRel(inMemory=[false], multiPass=[true])'
'        FennelAggRel(groupCount=[0], EXPR$0=[MIN(0)])'
'          LcsRowScanRel(table=[[LOCALDB, LCSCARTESIAN, LCSDEPTS]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSDEPTS$DEPTNO]])'
> 
> -- should still use buffering, swapping the join operands
> explain plan for
> select e.name, d.*
>     from (select min(deptno) from lcsdepts) d, lcsemps e order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelCartesianProductRel(leftouterjoin=[false])'
'      LcsRowScanRel(table=[[LOCALDB, LCSCARTESIAN, LCSEMPS]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSEMPS$NAME]])'
'      FennelBufferRel(inMemory=[false], multiPass=[true])'
'        FennelAggRel(groupCount=[0], EXPR$0=[MIN(0)])'
'          LcsRowScanRel(table=[[LOCALDB, LCSCARTESIAN, LCSDEPTS]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSDEPTS$DEPTNO]])'
> explain plan for
> select d.*, e.name
>     from (select min(deptno) from lcsdepts) d, lcsemps e order by 2;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[1]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(INTEGER EXPR$0, VARCHAR(12) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME) NOT NULL])'
'      FennelCartesianProductRel(leftouterjoin=[false])'
'        LcsRowScanRel(table=[[LOCALDB, LCSCARTESIAN, LCSEMPS]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSEMPS$NAME]])'
'        FennelBufferRel(inMemory=[false], multiPass=[true])'
'          FennelAggRel(groupCount=[0], EXPR$0=[MIN(0)])'
'            LcsRowScanRel(table=[[LOCALDB, LCSCARTESIAN, LCSDEPTS]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSDEPTS$DEPTNO]])'
> 
> !quit
