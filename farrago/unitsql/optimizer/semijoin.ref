> -- $Id$
> -- Tests semijoin transformations
> 
> create schema sj;
> set schema 'sj';
> 
> -- set session personality to LucidDB so all tables
> -- will be column-store by default
> alter session implementation set jar sys_boot.sys_boot.luciddb_plugin;
> 
> create table t(
>     a int, b char(20), c varchar(20) not null,
>     d varchar(128) not null);
> create index it_d on t(d);
> create index it_bd on t(b, d);
> 
> insert into t values(1, 'abcdef', 'no match', 'this is row 1');
> insert into t values(2, 'abcdef', 'ghijkl', 'this is row 2');
> insert into t values(3, 'abcdef', 'ghijkl', 'this is row 3');
> insert into t values(4, null, 'ghijkl', 'this is row 4');
> insert into t values(5, null, 'ghijkl', 'no match');
> 
> -- although this table has the same number of rows as t, we will force this
> -- to be the dimension table in the semijoin by putting a dummy filter on
> -- the table
> 
> create table smalltable(
>     s1 varchar(128) not null, s2 int, s3 varchar(128) not null,
>         s4 varchar(128) not null);
> insert into smalltable values('this is row 1', 1, 'abcdef', 'ghijkl');
> insert into smalltable values('this is row 2', 2, 'abcdef', 'ghijkl');
> insert into smalltable values('this is row 3', 3, 'abcdef', 'ghijkl');
> insert into smalltable values('this is row 4', 4, 'abcdef', 'ghijkl');
> insert into smalltable values('this is row 5', 5, 'abcdef', 'ghijkl');
> 
> -- Create fake statistics.  The stats do not match the actual data in the
> -- tables and are meant to force the optimizer to choose semijoins
> 
> call sys_boot.mgmt.stat_set_row_count('LOCALDB', 'SJ', 'T', 10000);
> call sys_boot.mgmt.stat_set_row_count('LOCALDB', 'SJ', 'SMALLTABLE', 10);
> 
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'SJ', 'T', 'B', 10, 100, 10, 1, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'SJ', 'T', 'D', 10, 100, 10, 1, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'SJ', 'SMALLTABLE', 'S1', 10, 100, 10, 1,
>     'ABCDEFGHIJKLMNOPQRSTUVWXYZ');
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'SJ', 'SMALLTABLE', 'S3', 10, 100, 10, 1,
>     'ABCDEFGHIJKLMNOPQRSTUVWXYZ');
> 
> -- explain plan tests
> 
> !set outputformat csv
> 
> ----------------------
> -- single column joins
> ----------------------
> 
> explain plan for select *
>     from t inner join smalltable s
>     on t.b = s.s3 and s.s1 = 'this is row 1' 
>     order by a;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 1, 2, 3, 5, 6, 7, 8]], outputRowType=[RecordType(INTEGER A, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL C, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL D, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4) NOT NULL])'
'      LhxJoinRel(leftKeys=[[4]], rightKeys=[[4]], joinType=[INNER])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 1]], outputRowType=[RecordType(INTEGER A, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL C, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL D, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T$A, SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
'            LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'              LcsIndexSearchRel(table=[[LOCALDB, SJ, T]], index=[IT_BD], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                  LhxAggRel(groupCount=[1])'
'                    FennelCalcRel(expr#0=[{inputs}], expr#1=[CAST($t0):CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], S3=[$t1])'
'                      LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S3]], residual columns=[[0]])'
'                        FennelValuesRel(tuples=[[{ '[', 'this is row 1', ']', 'this is row 1' }]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($2):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3, SYS$CLUSTERED_INDEX$SMALLTABLE$S4]], residual columns=[[0]])'
'            FennelValuesRel(tuples=[[{ '[', 'this is row 1', ']', 'this is row 1' }]])'
> 
> explain plan for select *
>     from t inner join smalltable s
>     on t.d = s.s1 where s.s2 > 0 order by a;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    LhxJoinRel(leftKeys=[[3]], rightKeys=[[0]], joinType=[INNER])'
'      LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T$A, SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
'        LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'          LcsIndexSearchRel(table=[[LOCALDB, SJ, T]], index=[IT_D], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'              LhxAggRel(groupCount=[1])'
'                LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2]], residual columns=[[1]])'
'                  FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
'      LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3, SYS$CLUSTERED_INDEX$SMALLTABLE$S4]], residual columns=[[1]])'
'        FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
> 
> -----------------
> -- negative cases
> -----------------
> -- no index available to process join
> explain plan for select *
>     from t inner join smalltable s
>     on t.c = s.s4 where s.s2 > 0;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1, 2, 3, 5, 6, 7, 8]], outputRowType=[RecordType(INTEGER A, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL C, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL D, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4) NOT NULL])'
'    LhxJoinRel(leftKeys=[[4]], rightKeys=[[3]], joinType=[INNER])'
'      FennelCalcRel(expr#0..3=[{inputs}], expr#4=[CAST($t2):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], proj#0..4=[{exprs}])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T$A, SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
'      LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3, SYS$CLUSTERED_INDEX$SMALLTABLE$S4]], residual columns=[[1]])'
'        FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
> 
> -- filter not of the form cola = colb
> explain plan for select *
>     from t inner join smalltable s
>     on t.d = upper(s.s1) where s.s2 > 0;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5, 6, 7]], outputRowType=[RecordType(INTEGER A, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL C, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL D, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4) NOT NULL])'
'    LhxJoinRel(leftKeys=[[3]], rightKeys=[[4]], joinType=[INNER])'
'      LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T$A, SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
'      FennelCalcRel(expr#0..3=[{inputs}], expr#4=[UPPER($t0)], proj#0..4=[{exprs}])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3, SYS$CLUSTERED_INDEX$SMALLTABLE$S4]], residual columns=[[1]])'
'          FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
> 
> -- no filter on dimension table, so not worthwhile to do a semijoin
> explain plan for select *
>     from t inner join smalltable s
>     on t.d = s.s1;
'column0'
'FennelToIteratorConverter'
'  LhxJoinRel(leftKeys=[[3]], rightKeys=[[0]], joinType=[INNER])'
'    LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T$A, SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
'    LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3, SYS$CLUSTERED_INDEX$SMALLTABLE$S4]])'
> 
> -- outer joins -- should not use semijoin
> explain plan for
> select *
> from t left outer join smalltable s
> on t.b = s.s3 and s.s1 = 'this is row 1';
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1, 2, 3, 5, 6, 7, 8]], outputRowType=[RecordType(INTEGER A, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL C, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL D, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" S4) NOT NULL])'
'    LhxJoinRel(leftKeys=[[4]], rightKeys=[[4]], joinType=[LEFT])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3, 1]], outputRowType=[RecordType(INTEGER A, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL C, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL D, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T$A, SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($2):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3, SYS$CLUSTERED_INDEX$SMALLTABLE$S4]], residual columns=[[0]])'
'          FennelValuesRel(tuples=[[{ '[', 'this is row 1', ']', 'this is row 1' }]])'
> explain plan for
> select *
> from t right outer join smalltable s
> on t.b = s.s3 and s.s1 = 'this is row 1';
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[6, 7, 8, 9, 0, 1, 2, 3]], outputRowType=[RecordType(INTEGER A, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" C, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" D, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4) NOT NULL])'
'    LhxJoinRel(leftKeys=[[4, 5]], rightKeys=[[4, 5]], joinType=[LEFT])'
'      FennelCalcRel(expr#0..3=[{inputs}], expr#4=[CAST($t2):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#5=['this is row 1'], expr#6=[=($t0, $t5)], proj#0..4=[{exprs}], =($0, 'this is row 1')=[$t6])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3, SYS$CLUSTERED_INDEX$SMALLTABLE$S4]])'
'      FennelCalcRel(expr#0..3=[{inputs}], expr#4=[CAST($t1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#5=[true], proj#0..5=[{exprs}])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T$A, SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
> explain plan for
> select *
> from t full outer join smalltable s
> on t.b = s.s3 and s.s1 = 'this is row 1';
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[6, 7, 8, 9, 0, 1, 2, 3]], outputRowType=[RecordType(INTEGER A, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" C, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" D, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" S4) NOT NULL])'
'    LhxJoinRel(leftKeys=[[4, 5]], rightKeys=[[4, 5]], joinType=[FULL])'
'      FennelCalcRel(expr#0..3=[{inputs}], expr#4=[CAST($t2):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#5=['this is row 1'], expr#6=[=($t0, $t5)], proj#0..4=[{exprs}], =($0, 'this is row 1')=[$t6])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3, SYS$CLUSTERED_INDEX$SMALLTABLE$S4]])'
'      FennelCalcRel(expr#0..3=[{inputs}], expr#4=[CAST($t1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#5=[true], proj#0..5=[{exprs}])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T$A, SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
> 
> -- this outer join uses HashJoin since join types match
> explain plan for
> select *
> from t full outer join smalltable s
> on t.d = s.s1 where s.s2 > 0
> order by a;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5, 6, 7]], filterOp=[COMP_GT], filterOrdinals=[[5]], filterTuple=[[0]], outputRowType=[RecordType(INTEGER A, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" C, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" D, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" S4) NOT NULL])'
'      LhxJoinRel(leftKeys=[[3]], rightKeys=[[0]], joinType=[FULL])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T$A, SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3, SYS$CLUSTERED_INDEX$SMALLTABLE$S4]])'
> 
> !set outputformat table
> select *
> from t full outer join smalltable s
> on t.d = s.s1 where s.s2 > 0
> order by a;
+----+-----------------------+-----------+----------------+----------------+-----+---------+---------+
| A  |           B           |     C     |       D        |       S1       | S2  |   S3    |   S4    |
+----+-----------------------+-----------+----------------+----------------+-----+---------+---------+
|    |                       |           |                | this is row 5  | 5   | abcdef  | ghijkl  |
| 1  | abcdef                | no match  | this is row 1  | this is row 1  | 1   | abcdef  | ghijkl  |
| 2  | abcdef                | ghijkl    | this is row 2  | this is row 2  | 2   | abcdef  | ghijkl  |
| 3  | abcdef                | ghijkl    | this is row 3  | this is row 3  | 3   | abcdef  | ghijkl  |
| 4  |                       | ghijkl    | this is row 4  | this is row 4  | 4   | abcdef  | ghijkl  |
+----+-----------------------+-----------+----------------+----------------+-----+---------+---------+
> 
> ---------------------
> -- multi-column joins
> ---------------------
> !set outputformat csv
> explain plan for select *
>     from t inner join smalltable s
>     on t.d = s.s1 and t.b = s.s3 where s.s2 > 0 order by a;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 1, 2, 3, 5, 6, 7, 8]], outputRowType=[RecordType(INTEGER A, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL C, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL D, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4) NOT NULL])'
'      LhxJoinRel(leftKeys=[[3, 4]], rightKeys=[[0, 4]], joinType=[INNER])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 1]], outputRowType=[RecordType(INTEGER A, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL C, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL D, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T$A, SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
'            LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'              LcsIndexSearchRel(table=[[LOCALDB, SJ, T]], index=[IT_BD], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'                  LhxAggRel(groupCount=[2])'
'                    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[CAST($t1):CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], S3=[$t2], S1=[$t0])'
'                      LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3]], residual columns=[[1]])'
'                        FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($2):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3, SYS$CLUSTERED_INDEX$SMALLTABLE$S4]], residual columns=[[1]])'
'            FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
> 
> -- same as above except join columns are reversed
> explain plan for select *
>     from t inner join smalltable s
>     on t.b = s.s3 and s.s1 = t.d where s.s2 > 0 order by a;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 1, 2, 3, 5, 6, 7, 8]], outputRowType=[RecordType(INTEGER A, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL C, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL D, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4) NOT NULL])'
'      LhxJoinRel(leftKeys=[[4, 3]], rightKeys=[[4, 0]], joinType=[INNER])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 1]], outputRowType=[RecordType(INTEGER A, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL C, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL D, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T$A, SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
'            LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'              LcsIndexSearchRel(table=[[LOCALDB, SJ, T]], index=[IT_BD], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'                  LhxAggRel(groupCount=[2])'
'                    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[CAST($t1):CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], S3=[$t2], S1=[$t0])'
'                      LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3]], residual columns=[[1]])'
'                        FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($2):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3, SYS$CLUSTERED_INDEX$SMALLTABLE$S4]], residual columns=[[1]])'
'            FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
> 
> -- join on 3 columns but index only on 2 columns
> explain plan for select *
>     from t inner join smalltable s
>     on s.s1 = t.d and s.s3 = t.b and t.c = s.s4 where s.s2 > 0
>     order by a;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 1, 2, 3, 6, 7, 8, 9]], outputRowType=[RecordType(INTEGER A, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL C, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL D, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4) NOT NULL])'
'      LhxJoinRel(leftKeys=[[3, 4, 5]], rightKeys=[[0, 4, 3]], joinType=[INNER])'
'        FennelCalcRel(expr#0..3=[{inputs}], expr#4=[CAST($t1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#5=[CAST($t2):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], proj#0..5=[{exprs}])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T$A, SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
'            LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'              LcsIndexSearchRel(table=[[LOCALDB, SJ, T]], index=[IT_BD], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'                  LhxAggRel(groupCount=[2])'
'                    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[CAST($t1):CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], S3=[$t2], S1=[$t0])'
'                      LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3]], residual columns=[[1]])'
'                        FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($2):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3, SYS$CLUSTERED_INDEX$SMALLTABLE$S4]], residual columns=[[1]])'
'            FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
> 
> -- same query but filters juggled around
> explain plan for select *
>     from t inner join smalltable s
>     on s.s4 = t.c and s.s1 = t.d and s.s3 = t.b where s.s2 > 0
>     order by a;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 1, 2, 3, 6, 7, 8, 9]], outputRowType=[RecordType(INTEGER A, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL C, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL D, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4) NOT NULL])'
'      LhxJoinRel(leftKeys=[[4, 3, 5]], rightKeys=[[3, 0, 4]], joinType=[INNER])'
'        FennelCalcRel(expr#0..3=[{inputs}], expr#4=[CAST($t2):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], expr#5=[CAST($t1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], proj#0..5=[{exprs}])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T$A, SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
'            LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'              LcsIndexSearchRel(table=[[LOCALDB, SJ, T]], index=[IT_BD], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'                  LhxAggRel(groupCount=[2])'
'                    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[CAST($t1):CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], S3=[$t2], S1=[$t0])'
'                      LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3]], residual columns=[[1]])'
'                        FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($2):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3, SYS$CLUSTERED_INDEX$SMALLTABLE$S4]], residual columns=[[1]])'
'            FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
> 
> ---------------------------------------
> -- run queries above that use semijoins
> ---------------------------------------
> 
> !set outputformat table
> 
> select *
>     from t inner join smalltable s
>     on t.b = s.s3 and s.s1 = 'this is row 1' order by a;
+----+-----------------------+-----------+----------------+----------------+-----+---------+---------+
| A  |           B           |     C     |       D        |       S1       | S2  |   S3    |   S4    |
+----+-----------------------+-----------+----------------+----------------+-----+---------+---------+
| 1  | abcdef                | no match  | this is row 1  | this is row 1  | 1   | abcdef  | ghijkl  |
| 2  | abcdef                | ghijkl    | this is row 2  | this is row 1  | 1   | abcdef  | ghijkl  |
| 3  | abcdef                | ghijkl    | this is row 3  | this is row 1  | 1   | abcdef  | ghijkl  |
+----+-----------------------+-----------+----------------+----------------+-----+---------+---------+
> 
> select *
>     from t inner join smalltable s
>     on t.d = s.s1 where s.s2 > 0 order by a;
+----+-----------------------+-----------+----------------+----------------+-----+---------+---------+
| A  |           B           |     C     |       D        |       S1       | S2  |   S3    |   S4    |
+----+-----------------------+-----------+----------------+----------------+-----+---------+---------+
| 1  | abcdef                | no match  | this is row 1  | this is row 1  | 1   | abcdef  | ghijkl  |
| 2  | abcdef                | ghijkl    | this is row 2  | this is row 2  | 2   | abcdef  | ghijkl  |
| 3  | abcdef                | ghijkl    | this is row 3  | this is row 3  | 3   | abcdef  | ghijkl  |
| 4  |                       | ghijkl    | this is row 4  | this is row 4  | 4   | abcdef  | ghijkl  |
+----+-----------------------+-----------+----------------+----------------+-----+---------+---------+
> 
> select *
>     from t inner join smalltable s
>     on t.d = s.s1 and t.b = s.s3 where s.s2 > 0 order by a;
+----+-----------------------+-----------+----------------+----------------+-----+---------+---------+
| A  |           B           |     C     |       D        |       S1       | S2  |   S3    |   S4    |
+----+-----------------------+-----------+----------------+----------------+-----+---------+---------+
| 1  | abcdef                | no match  | this is row 1  | this is row 1  | 1   | abcdef  | ghijkl  |
| 2  | abcdef                | ghijkl    | this is row 2  | this is row 2  | 2   | abcdef  | ghijkl  |
| 3  | abcdef                | ghijkl    | this is row 3  | this is row 3  | 3   | abcdef  | ghijkl  |
+----+-----------------------+-----------+----------------+----------------+-----+---------+---------+
> 
> select *
>     from t inner join smalltable s
>     on t.b = s.s3 and s.s1 = t.d where s.s2 > 0 order by a;
+----+-----------------------+-----------+----------------+----------------+-----+---------+---------+
| A  |           B           |     C     |       D        |       S1       | S2  |   S3    |   S4    |
+----+-----------------------+-----------+----------------+----------------+-----+---------+---------+
| 1  | abcdef                | no match  | this is row 1  | this is row 1  | 1   | abcdef  | ghijkl  |
| 2  | abcdef                | ghijkl    | this is row 2  | this is row 2  | 2   | abcdef  | ghijkl  |
| 3  | abcdef                | ghijkl    | this is row 3  | this is row 3  | 3   | abcdef  | ghijkl  |
+----+-----------------------+-----------+----------------+----------------+-----+---------+---------+
> 
> select *
>     from t inner join smalltable s
>     on s.s1 = t.d and s.s3 = t.b and t.c = s.s4 where s.s2 > 0
>     order by a;
+----+-----------------------+---------+----------------+----------------+-----+---------+---------+
| A  |           B           |    C    |       D        |       S1       | S2  |   S3    |   S4    |
+----+-----------------------+---------+----------------+----------------+-----+---------+---------+
| 2  | abcdef                | ghijkl  | this is row 2  | this is row 2  | 2   | abcdef  | ghijkl  |
| 3  | abcdef                | ghijkl  | this is row 3  | this is row 3  | 3   | abcdef  | ghijkl  |
+----+-----------------------+---------+----------------+----------------+-----+---------+---------+
> 
> select *
>     from t inner join smalltable s
>     on s.s4 = t.c and s.s1 = t.d and s.s3 = t.b where s.s2 > 0
>     order by a;
+----+-----------------------+---------+----------------+----------------+-----+---------+---------+
| A  |           B           |    C    |       D        |       S1       | S2  |   S3    |   S4    |
+----+-----------------------+---------+----------------+----------------+-----+---------+---------+
| 2  | abcdef                | ghijkl  | this is row 2  | this is row 2  | 2   | abcdef  | ghijkl  |
| 3  | abcdef                | ghijkl  | this is row 3  | this is row 3  | 3   | abcdef  | ghijkl  |
+----+-----------------------+---------+----------------+----------------+-----+---------+---------+
> 
> ------------------
> -- n-way semijoins
> ------------------
> 
> create table sales(
>     sid int, product_id int, salesperson int, customer int, quantity int);
> create index i_sales_pid on sales(product_id);
> create index i_sales_sp on sales(salesperson);
> create index i_sales_cust on sales(customer);
> 
> create table product(
>     id int unique not null, name char(20), color char(10), size char(1));
> create table salesperson(id int unique not null, name char(20), age int);
> create table customer(
>     id int unique not null, company char(20), city char(20) not null);
> create table state(city char(20) unique not null, state char(20));
> 
> create index i_product_color on product(color);
> create index i_product_size on product(size);
> create index i_customer_city on customer(city);
> 
> insert into product values(1, 'radio', 'black', 'S');
> insert into product values(2, 'phone', 'white', 'M');
> insert into salesperson values(1, 'XYZ', 30);
> insert into salesperson values(2, 'UVW', 40);
> insert into customer values(1, 'ABC', 'San Mateo');
> insert into customer values(2, 'DEF', 'New York City');
> insert into state values('San Mateo', 'CA');
> insert into state values('New York City', 'New York');
> insert into sales values(1, 1, 1, 1, 10);
> insert into sales values(2, 1, 1, 2, 20);
> insert into sales values(3, 1, 2, 1, 30);
> insert into sales values(4, 1, 2, 2, 40);
> insert into sales values(5, 2, 1, 1, 50);
> insert into sales values(6, 2, 1, 2, 60);
> insert into sales values(7, 2, 2, 1, 70);
> insert into sales values(8, 2, 2, 2, 80);
> 
> -- more faking of stats; note also that the predicates chosen in the
> -- actual queries aren't necessarily selective in reality but the stats
> -- make the optimizer think they are
> 
> call sys_boot.mgmt.stat_set_row_count('LOCALDB', 'SJ', 'SALES', 100000);
> call sys_boot.mgmt.stat_set_row_count('LOCALDB', 'SJ', 'PRODUCT', 20);
> call sys_boot.mgmt.stat_set_row_count('LOCALDB', 'SJ', 'SALESPERSON', 10);
> call sys_boot.mgmt.stat_set_row_count('LOCALDB', 'SJ', 'CUSTOMER', 100);
> call sys_boot.mgmt.stat_set_row_count('LOCALDB', 'SJ', 'STATE', 5);
> 
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'SJ', 'SALES', 'PRODUCT_ID', 20, 100, 20, 0, '0123456789');
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'SJ', 'SALES', 'SALESPERSON', 10, 100, 10, 0, '0123456789');
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'SJ', 'SALES', 'CUSTOMER', 100, 100, 100, 0, '0123456789');
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'SJ', 'PRODUCT', 'ID', 20, 100, 20, 0, '0123456789');
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'SJ', 'SALESPERSON', 'ID', 10, 100, 10, 0, '0123456789');
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'SJ', 'CUSTOMER', 'ID', 100, 100, 100, 0, '0123456789');
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'SJ', 'CUSTOMER', 'CITY', 5, 100, 5, 1, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'SJ', 'STATE', 'CITY', 5, 100, 5, 1, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');
> 
> !set outputformat csv
> 
> explain plan for
>     select sid, p.name, p.color, p.size, s.quantity
>         from sales s, product p
>         where
>             s.product_id = p.id and p.size = 'S'
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 4, 5, 6, 2]], outputRowType=[RecordType(INTEGER SID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER QUANTITY) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[4]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 1, 4]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$PRODUCT_ID, SYS$CLUSTERED_INDEX$SALES$QUANTITY, SYS$CLUSTERED_INDEX$SALES$SID]])'
'          LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_PID], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                    LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'                      LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                        FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$COLOR, SYS$CLUSTERED_INDEX$PRODUCT$ID, SYS$CLUSTERED_INDEX$PRODUCT$NAME, SYS$CLUSTERED_INDEX$PRODUCT$SIZE]])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
> 
> -- push semijoin past filter
> explain plan for
>     select sid, p.name, p.color, p.size, s.quantity
>         from product p, sales s
>         where
>             s.product_id = p.id and p.size = 'S' and sid > 2
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 4, 5, 6, 2]], outputRowType=[RecordType(INTEGER SID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER QUANTITY) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[4]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 1, 4]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$PRODUCT_ID, SYS$CLUSTERED_INDEX$SALES$QUANTITY, SYS$CLUSTERED_INDEX$SALES$SID]], residual columns=[[0]])'
'          LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_PID], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                    LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'                      LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                        FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
'          FennelValuesRel(tuples=[[{ '(', 2, '+', null }]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$COLOR, SYS$CLUSTERED_INDEX$PRODUCT$ID, SYS$CLUSTERED_INDEX$PRODUCT$NAME, SYS$CLUSTERED_INDEX$PRODUCT$SIZE]])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
> 
> explain plan for
>     select sid, p.name, p.color, p.size, s.quantity
>         from product p, sales s
>         where
>             s.product_id = p.id
>             and p.size = 'S' and p.color = 'white'
>             and sid > 2
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 4, 5, 6, 2]], outputRowType=[RecordType(INTEGER SID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER QUANTITY) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[4]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 1, 4]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$PRODUCT_ID, SYS$CLUSTERED_INDEX$SALES$QUANTITY, SYS$CLUSTERED_INDEX$SALES$SID]], residual columns=[[0]])'
'          LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_PID], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                    LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'                      LcsIndexIntersectRel(startRidParamId=[2], rowLimitParamId=[3])'
'                        LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_COLOR], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[2], rowLimitParamId=[3])'
'                          FennelValuesRel(tuples=[[{ '[', 'white     ', ']', 'white     ' }]])'
'                        LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[2], rowLimitParamId=[3])'
'                          FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
'          FennelValuesRel(tuples=[[{ '(', 2, '+', null }]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$COLOR, SYS$CLUSTERED_INDEX$PRODUCT$ID, SYS$CLUSTERED_INDEX$PRODUCT$NAME, SYS$CLUSTERED_INDEX$PRODUCT$SIZE]])'
'            LcsIndexIntersectRel(startRidParamId=[2], rowLimitParamId=[3])'
'              LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_COLOR], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[2], rowLimitParamId=[3])'
'                FennelValuesRel(tuples=[[{ '[', 'white     ', ']', 'white     ' }]])'
'              LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[2], rowLimitParamId=[3])'
'                FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
> 
> -- push semijoin past joins
> explain plan for
>     select sid, p.name, p.color, p.size, sp.name, s.quantity
>         from sales s, product p, salesperson sp
>         where
>             s.product_id = p.id and
>             s.salesperson = sp.id and
>             p.size >= 'M' and sp.age >= 30
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 3, 4, 5, 7, 2]], outputRowType=[RecordType(INTEGER SID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME0, INTEGER QUANTITY) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[2]], joinType=[INNER])'
'        FennelReshapeRel(projection=[[0, 2, 3, 5, 6, 7]], outputRowType=[RecordType(INTEGER SID, INTEGER SALESPERSON, INTEGER QUANTITY, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE) NOT NULL])'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[4]], joinType=[INNER])'
'            LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 1, 2, 4]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$PRODUCT_ID, SYS$CLUSTERED_INDEX$SALES$QUANTITY, SYS$CLUSTERED_INDEX$SALES$SALESPERSON, SYS$CLUSTERED_INDEX$SALES$SID]])'
'              LcsIndexIntersectRel(startRidParamId=[2], rowLimitParamId=[3])'
'                LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[1])'
'                  LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_SP], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                    FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                      LhxAggRel(groupCount=[1])'
'                        FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                          LcsRowScanRel(table=[[LOCALDB, SJ, SALESPERSON]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALESPERSON$AGE, SYS$CLUSTERED_INDEX$SALESPERSON$ID]], residual columns=[[2]])'
'                            FennelValuesRel(tuples=[[{ '[', 30, '+', null }]])'
'                LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[4])'
'                  LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_PID], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                    FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                      LhxAggRel(groupCount=[1])'
'                        FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                          LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'                            LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[5])'
'                              LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                                FennelValuesRel(tuples=[[{ '[', 'M', '+', null }]])'
'            FennelReshapeRel(projection=[[0, 1, 2, 3, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER CAST($0):INTEGER) NOT NULL])'
'              LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$COLOR, SYS$CLUSTERED_INDEX$PRODUCT$ID, SYS$CLUSTERED_INDEX$PRODUCT$NAME, SYS$CLUSTERED_INDEX$PRODUCT$SIZE]])'
'                LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[5])'
'                  LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                    FennelValuesRel(tuples=[[{ '[', 'M', '+', null }]])'
'        FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, SALESPERSON]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALESPERSON$AGE, SYS$CLUSTERED_INDEX$SALESPERSON$ID, SYS$CLUSTERED_INDEX$SALESPERSON$NAME]], residual columns=[[2]])'
'            FennelValuesRel(tuples=[[{ '[', 30, '+', null }]])'
> 
> explain plan for
>     select sid, p.name, p.color, p.size, sp.name, c.company
>         from customer c, salesperson sp, product p, sales s
>         where
>             s.product_id = p.id and
>             s.salesperson = sp.id and 
>             s.customer = c.id and
>             p.size >= 'M' and sp.age >= 30 and c.city >= 'N'
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[4, 1, 2, 3, 7, 0]], outputRowType=[RecordType(INTEGER SID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME0, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COMPANY) NOT NULL])'
'      LhxJoinRel(leftKeys=[[5]], rightKeys=[[2]], joinType=[INNER])'
'        FennelReshapeRel(projection=[[1, 3, 4, 5, 6, 7]], outputRowType=[RecordType(CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COMPANY, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER SID, INTEGER SALESPERSON) NOT NULL])'
'          LhxJoinRel(leftKeys=[[2]], rightKeys=[[5]], joinType=[INNER])'
'            FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COMPANY, INTEGER CAST($0):INTEGER) NOT NULL])'
'              LcsRowScanRel(table=[[LOCALDB, SJ, CUSTOMER]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$CUSTOMER$COMPANY, SYS$CLUSTERED_INDEX$CUSTOMER$ID]])'
'                LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[6])'
'                  LcsIndexSearchRel(table=[[LOCALDB, SJ, CUSTOMER]], index=[I_CUSTOMER_CITY], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                    FennelValuesRel(tuples=[[{ '[', 'N                   ', '+', null }]])'
'            FennelReshapeRel(projection=[[1, 2, 3, 5, 7, 8]], outputRowType=[RecordType(CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER SID, INTEGER SALESPERSON, INTEGER CUSTOMER) NOT NULL])'
'              LhxJoinRel(leftKeys=[[4]], rightKeys=[[1]], joinType=[INNER])'
'                FennelReshapeRel(projection=[[0, 1, 2, 3, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER CAST($0):INTEGER) NOT NULL])'
'                  LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$COLOR, SYS$CLUSTERED_INDEX$PRODUCT$ID, SYS$CLUSTERED_INDEX$PRODUCT$NAME, SYS$CLUSTERED_INDEX$PRODUCT$SIZE]])'
'                    LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[7])'
'                      LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                        FennelValuesRel(tuples=[[{ '[', 'M', '+', null }]])'
'                LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 1, 2, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$CUSTOMER, SYS$CLUSTERED_INDEX$SALES$PRODUCT_ID, SYS$CLUSTERED_INDEX$SALES$SALESPERSON, SYS$CLUSTERED_INDEX$SALES$SID]])'
'                  LcsIndexIntersectRel(startRidParamId=[2], rowLimitParamId=[3])'
'                    LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[1])'
'                      LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_SP], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                        FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                          LhxAggRel(groupCount=[1])'
'                            FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                              LcsRowScanRel(table=[[LOCALDB, SJ, SALESPERSON]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALESPERSON$AGE, SYS$CLUSTERED_INDEX$SALESPERSON$ID]], residual columns=[[2]])'
'                                FennelValuesRel(tuples=[[{ '[', 30, '+', null }]])'
'                    LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[4])'
'                      LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_PID], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                        FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                          LhxAggRel(groupCount=[1])'
'                            FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                              LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'                                LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[7])'
'                                  LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                                    FennelValuesRel(tuples=[[{ '[', 'M', '+', null }]])'
'                    LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[5])'
'                      LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_CUST], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                        FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                          LhxAggRel(groupCount=[1])'
'                            FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                              LcsRowScanRel(table=[[LOCALDB, SJ, CUSTOMER]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$CUSTOMER$ID]])'
'                                LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[6])'
'                                  LcsIndexSearchRel(table=[[LOCALDB, SJ, CUSTOMER]], index=[I_CUSTOMER_CITY], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                                    FennelValuesRel(tuples=[[{ '[', 'N                   ', '+', null }]])'
'        FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, SALESPERSON]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALESPERSON$AGE, SYS$CLUSTERED_INDEX$SALESPERSON$ID, SYS$CLUSTERED_INDEX$SALESPERSON$NAME]], residual columns=[[2]])'
'            FennelValuesRel(tuples=[[{ '[', 30, '+', null }]])'
> 
> -- push semijoin past filter and join
> explain plan for
>     select sid, p.name, p.color, p.size, sp.name, s.quantity
>         from product p, sales s, salesperson sp
>         where
>             s.sid < 3 and
>             s.product_id = p.id and
>             s.salesperson = sp.id and
>             p.size >= 'M' and sp.age >= 30
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 3, 4, 5, 7, 2]], outputRowType=[RecordType(INTEGER SID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME0, INTEGER QUANTITY) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[2]], joinType=[INNER])'
'        FennelReshapeRel(projection=[[0, 2, 3, 5, 6, 7]], outputRowType=[RecordType(INTEGER SID, INTEGER SALESPERSON, INTEGER QUANTITY, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE) NOT NULL])'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[4]], joinType=[INNER])'
'            LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 1, 2, 4]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$PRODUCT_ID, SYS$CLUSTERED_INDEX$SALES$QUANTITY, SYS$CLUSTERED_INDEX$SALES$SALESPERSON, SYS$CLUSTERED_INDEX$SALES$SID]], residual columns=[[0]])'
'              LcsIndexIntersectRel(startRidParamId=[2], rowLimitParamId=[3])'
'                LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[1])'
'                  LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_SP], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                    FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                      LhxAggRel(groupCount=[1])'
'                        FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                          LcsRowScanRel(table=[[LOCALDB, SJ, SALESPERSON]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALESPERSON$AGE, SYS$CLUSTERED_INDEX$SALESPERSON$ID]], residual columns=[[2]])'
'                            FennelValuesRel(tuples=[[{ '[', 30, '+', null }]])'
'                LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[4])'
'                  LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_PID], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                    FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                      LhxAggRel(groupCount=[1])'
'                        FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                          LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'                            LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[5])'
'                              LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                                FennelValuesRel(tuples=[[{ '[', 'M', '+', null }]])'
'              FennelValuesRel(tuples=[[{ '(', null, ')', 3 }]])'
'            FennelReshapeRel(projection=[[0, 1, 2, 3, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER CAST($0):INTEGER) NOT NULL])'
'              LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$COLOR, SYS$CLUSTERED_INDEX$PRODUCT$ID, SYS$CLUSTERED_INDEX$PRODUCT$NAME, SYS$CLUSTERED_INDEX$PRODUCT$SIZE]])'
'                LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[5])'
'                  LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                    FennelValuesRel(tuples=[[{ '[', 'M', '+', null }]])'
'        FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, SALESPERSON]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALESPERSON$AGE, SYS$CLUSTERED_INDEX$SALESPERSON$ID, SYS$CLUSTERED_INDEX$SALESPERSON$NAME]], residual columns=[[2]])'
'            FennelValuesRel(tuples=[[{ '[', 30, '+', null }]])'
> 
> -- chained join
> explain plan for
>     select sid, c.company, c.city, st.state
>         from sales s, state st, customer c
>         where
>             s.customer = c.id and
>             c.city = st.city and st.state = 'New York'
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 3, 4, 5]], outputRowType=[RecordType(INTEGER SID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COMPANY, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL CITY, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" STATE) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[4]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$CUSTOMER, SYS$CLUSTERED_INDEX$SALES$SID]])'
'          LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_CUST], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                    LcsRowScanRel(table=[[LOCALDB, SJ, CUSTOMER]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$CUSTOMER$ID]])'
'                      LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[2])'
'                        LcsIndexSearchRel(table=[[LOCALDB, SJ, CUSTOMER]], index=[I_CUSTOMER_CITY], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                          FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                            LhxAggRel(groupCount=[1])'
'                              LcsRowScanRel(table=[[LOCALDB, SJ, STATE]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$STATE$CITY, SYS$CLUSTERED_INDEX$STATE$STATE]], residual columns=[[1]])'
'                                FennelValuesRel(tuples=[[{ '[', 'New York            ', ']', 'New York            ' }]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 4, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COMPANY, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL CITY, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" STATE, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LhxJoinRel(leftKeys=[[2]], rightKeys=[[0]], joinType=[INNER])'
'            LcsRowScanRel(table=[[LOCALDB, SJ, CUSTOMER]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$CUSTOMER$CITY, SYS$CLUSTERED_INDEX$CUSTOMER$COMPANY, SYS$CLUSTERED_INDEX$CUSTOMER$ID]])'
'              LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[2])'
'                LcsIndexSearchRel(table=[[LOCALDB, SJ, CUSTOMER]], index=[I_CUSTOMER_CITY], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                    LhxAggRel(groupCount=[1])'
'                      LcsRowScanRel(table=[[LOCALDB, SJ, STATE]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$STATE$CITY, SYS$CLUSTERED_INDEX$STATE$STATE]], residual columns=[[1]])'
'                        FennelValuesRel(tuples=[[{ '[', 'New York            ', ']', 'New York            ' }]])'
'            LcsRowScanRel(table=[[LOCALDB, SJ, STATE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$STATE$CITY, SYS$CLUSTERED_INDEX$STATE$STATE]], residual columns=[[1]])'
'              FennelValuesRel(tuples=[[{ '[', 'New York            ', ']', 'New York            ' }]])'
> 
> -- index can be used for both semijoins and table filtering
> 
> explain plan for
>     select sid, p.name, p.color, p.size, s.quantity
>         from sales s, product p
>         where
>             s.product_id = p.id and p.size = 'S' and
>             s.salesperson > 0
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 4, 5, 6, 2]], outputRowType=[RecordType(INTEGER SID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER QUANTITY) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[4]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 1, 4]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$PRODUCT_ID, SYS$CLUSTERED_INDEX$SALES$QUANTITY, SYS$CLUSTERED_INDEX$SALES$SID]])'
'          LcsIndexIntersectRel(startRidParamId=[2], rowLimitParamId=[3])'
'            LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[1])'
'              LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_PID], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                  LhxAggRel(groupCount=[1])'
'                    FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                      LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'                        LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                          FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
'            LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[4])'
'              LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_SP], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$COLOR, SYS$CLUSTERED_INDEX$PRODUCT$ID, SYS$CLUSTERED_INDEX$PRODUCT$NAME, SYS$CLUSTERED_INDEX$PRODUCT$SIZE]])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
> 
> explain plan for
>     select sid, p.name, p.color, p.size, s.quantity
>         from sales s, product p
>         where
>             s.product_id = p.id and p.size = 'S' and
>             s.salesperson = 1
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 4, 5, 6, 2]], outputRowType=[RecordType(INTEGER SID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER QUANTITY) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[4]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 1, 4]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$PRODUCT_ID, SYS$CLUSTERED_INDEX$SALES$QUANTITY, SYS$CLUSTERED_INDEX$SALES$SID]])'
'          LcsIndexIntersectRel(startRidParamId=[2], rowLimitParamId=[3])'
'            LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[1])'
'              LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_PID], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                  LhxAggRel(groupCount=[1])'
'                    FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                      LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'                        LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                          FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_SP], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[2], rowLimitParamId=[3])'
'              FennelValuesRel(tuples=[[{ '[', 1, ']', 1 }]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$COLOR, SYS$CLUSTERED_INDEX$PRODUCT$ID, SYS$CLUSTERED_INDEX$PRODUCT$NAME, SYS$CLUSTERED_INDEX$PRODUCT$SIZE]])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
> 
> explain plan for
>     select sid, p.name, p.color, p.size, s.quantity
>         from sales s, product p
>         where
>             s.product_id = p.id and p.size = 'S' and
>             s.salesperson > 0 and s.customer > 0
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 4, 5, 6, 2]], outputRowType=[RecordType(INTEGER SID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER QUANTITY) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[4]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 1, 4]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$PRODUCT_ID, SYS$CLUSTERED_INDEX$SALES$QUANTITY, SYS$CLUSTERED_INDEX$SALES$SID]])'
'          LcsIndexIntersectRel(startRidParamId=[2], rowLimitParamId=[3])'
'            LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[1])'
'              LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_PID], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                  LhxAggRel(groupCount=[1])'
'                    FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                      LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'                        LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                          FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
'            LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[4])'
'              LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_SP], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
'            LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[5])'
'              LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_CUST], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$COLOR, SYS$CLUSTERED_INDEX$PRODUCT$ID, SYS$CLUSTERED_INDEX$PRODUCT$NAME, SYS$CLUSTERED_INDEX$PRODUCT$SIZE]])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
> 
> -- cartesian product join where the RHS of the cartesian product join contains
> -- a semijoin where the dimension table is processed using index intersection;
> -- this testcase ensures that things behave correctly if an early close is done
> -- on the bitmap intersect
> explain plan for
>     select a, sid, name, color, size, quantity
>         from t left outer join
>         (select * from  sales s, product p
>             where
>                 s.product_id = p.id and p.size = 'S' and p.color = 'black')
>         on true
>     order by a, sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 1, 3, 4, 5, 2]], outputRowType=[RecordType(INTEGER A, INTEGER SID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER QUANTITY) NOT NULL])'
'      FennelCartesianProductRel(leftouterjoin=[true])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T$A]])'
'        FennelReshapeRel(projection=[[0, 2, 4, 5, 6]], outputRowType=[RecordType(INTEGER SID, INTEGER QUANTITY, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE) NOT NULL])'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[4]], joinType=[INNER])'
'            LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 1, 4]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$PRODUCT_ID, SYS$CLUSTERED_INDEX$SALES$QUANTITY, SYS$CLUSTERED_INDEX$SALES$SID]])'
'              LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'                LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_PID], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                    LhxAggRel(groupCount=[1])'
'                      FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                        LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'                          LcsIndexIntersectRel(startRidParamId=[2], rowLimitParamId=[3])'
'                            LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_COLOR], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[2], rowLimitParamId=[3])'
'                              FennelValuesRel(tuples=[[{ '[', 'black     ', ']', 'black     ' }]])'
'                            LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[2], rowLimitParamId=[3])'
'                              FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
'            FennelReshapeRel(projection=[[0, 1, 2, 3, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER CAST($0):INTEGER) NOT NULL])'
'              LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$COLOR, SYS$CLUSTERED_INDEX$PRODUCT$ID, SYS$CLUSTERED_INDEX$PRODUCT$NAME, SYS$CLUSTERED_INDEX$PRODUCT$SIZE]])'
'                LcsIndexIntersectRel(startRidParamId=[2], rowLimitParamId=[3])'
'                  LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_COLOR], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[2], rowLimitParamId=[3])'
'                    FennelValuesRel(tuples=[[{ '[', 'black     ', ']', 'black     ' }]])'
'                  LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[2], rowLimitParamId=[3])'
'                    FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
> 
> -- similar to the above query except the dimension table is processed using
> -- a bitmap merge
> explain plan for
>     select a, sid, name, color, size, quantity
>         from t left outer join
>         (select * from  sales s, product p
>             where
>                 s.product_id = p.id and p.color > 'w')
>         on true
>     order by a, sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 1, 3, 4, 5, 2]], outputRowType=[RecordType(INTEGER A, INTEGER SID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER QUANTITY) NOT NULL])'
'      FennelCartesianProductRel(leftouterjoin=[true])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T$A]])'
'        FennelReshapeRel(projection=[[0, 2, 4, 5, 6]], outputRowType=[RecordType(INTEGER SID, INTEGER QUANTITY, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE) NOT NULL])'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[4]], joinType=[INNER])'
'            LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 1, 4]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$PRODUCT_ID, SYS$CLUSTERED_INDEX$SALES$QUANTITY, SYS$CLUSTERED_INDEX$SALES$SID]])'
'              LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'                LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_PID], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                    LhxAggRel(groupCount=[1])'
'                      FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                        LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'                          LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[2])'
'                            LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_COLOR], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                              FennelValuesRel(tuples=[[{ '(', 'w         ', '+', null }]])'
'            FennelReshapeRel(projection=[[0, 1, 2, 3, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER CAST($0):INTEGER) NOT NULL])'
'              LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$COLOR, SYS$CLUSTERED_INDEX$PRODUCT$ID, SYS$CLUSTERED_INDEX$PRODUCT$NAME, SYS$CLUSTERED_INDEX$PRODUCT$SIZE]])'
'                LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[2])'
'                  LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_COLOR], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                    FennelValuesRel(tuples=[[{ '(', 'w         ', '+', null }]])'
> 
> -- semijoin can't be used here because we don't push semijoins past aggregates
> explain plan for
>     select s.product_id from
>         (select sum(quantity), product_id from sales group by product_id) s,
>         product p
>         where
>             s.product_id = p.id and p.size = 'S'
>         order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER PRODUCT_ID) NOT NULL])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[1]], joinType=[INNER])'
'        FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER $f0) NOT NULL])'
'          LhxAggRel(groupCount=[1], agg#0=[SUM(1)])'
'            FennelRenameRel(fieldNames=[[$f0, $f1]])'
'              LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[1, 4]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$PRODUCT_ID, SYS$CLUSTERED_INDEX$SALES$QUANTITY]])'
'        FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
> 
> -----------------------------
> -- run the n-way join queries
> -----------------------------
> !set outputformat table
> 
> select sid, p.name, p.color, p.size, s.quantity
>     from sales s, product p
>     where
>         s.product_id = p.id and p.size = 'S'
>     order by sid;
+------+-----------------------+-------------+-------+-----------+
| SID  |         NAME          |    COLOR    | SIZE  | QUANTITY  |
+------+-----------------------+-------------+-------+-----------+
| 1    | radio                 | black       | S     | 10        |
| 2    | radio                 | black       | S     | 20        |
| 3    | radio                 | black       | S     | 30        |
| 4    | radio                 | black       | S     | 40        |
+------+-----------------------+-------------+-------+-----------+
> 
> select sid, p.name, p.color, p.size, s.quantity
>     from product p, sales s
>     where
>         s.product_id = p.id and p.size = 'S' and sid > 2
>     order by sid;
+------+-----------------------+-------------+-------+-----------+
| SID  |         NAME          |    COLOR    | SIZE  | QUANTITY  |
+------+-----------------------+-------------+-------+-----------+
| 3    | radio                 | black       | S     | 30        |
| 4    | radio                 | black       | S     | 40        |
+------+-----------------------+-------------+-------+-----------+
> 
> select sid, p.name, p.color, p.size, sp.name, s.quantity
>     from sales s, product p, salesperson sp
>     where
>         s.product_id = p.id and
>         s.salesperson = sp.id and
>         p.size >= 'M' and sp.age >= 30
>     order by sid;
+------+-----------------------+-------------+-------+-----------------------+-----------+
| SID  |         NAME          |    COLOR    | SIZE  |         NAME          | QUANTITY  |
+------+-----------------------+-------------+-------+-----------------------+-----------+
| 1    | radio                 | black       | S     | XYZ                   | 10        |
| 2    | radio                 | black       | S     | XYZ                   | 20        |
| 3    | radio                 | black       | S     | UVW                   | 30        |
| 4    | radio                 | black       | S     | UVW                   | 40        |
| 5    | phone                 | white       | M     | XYZ                   | 50        |
| 6    | phone                 | white       | M     | XYZ                   | 60        |
| 7    | phone                 | white       | M     | UVW                   | 70        |
| 8    | phone                 | white       | M     | UVW                   | 80        |
+------+-----------------------+-------------+-------+-----------------------+-----------+
> 
> select sid, p.name, p.color, p.size, sp.name, c.company
>     from customer c, salesperson sp, product p, sales s
>     where
>         s.product_id = p.id and
>         s.salesperson = sp.id and 
>         s.customer = c.id and
>         p.size >= 'M' and sp.age >= 30 and c.city >= 'N'
>     order by sid;
+------+-----------------------+-------------+-------+-----------------------+-----------------------+
| SID  |         NAME          |    COLOR    | SIZE  |         NAME          |        COMPANY        |
+------+-----------------------+-------------+-------+-----------------------+-----------------------+
| 1    | radio                 | black       | S     | XYZ                   | ABC                   |
| 2    | radio                 | black       | S     | XYZ                   | DEF                   |
| 3    | radio                 | black       | S     | UVW                   | ABC                   |
| 4    | radio                 | black       | S     | UVW                   | DEF                   |
| 5    | phone                 | white       | M     | XYZ                   | ABC                   |
| 6    | phone                 | white       | M     | XYZ                   | DEF                   |
| 7    | phone                 | white       | M     | UVW                   | ABC                   |
| 8    | phone                 | white       | M     | UVW                   | DEF                   |
+------+-----------------------+-------------+-------+-----------------------+-----------------------+
> 
> select sid, p.name, p.color, p.size, sp.name, s.quantity
>     from product p, sales s, salesperson sp
>     where
>         s.sid < 3 and
>         s.product_id = p.id and
>         s.salesperson = sp.id and
>         p.size >= 'M' and sp.age >= 30
>     order by sid;
+------+-----------------------+-------------+-------+-----------------------+-----------+
| SID  |         NAME          |    COLOR    | SIZE  |         NAME          | QUANTITY  |
+------+-----------------------+-------------+-------+-----------------------+-----------+
| 1    | radio                 | black       | S     | XYZ                   | 10        |
| 2    | radio                 | black       | S     | XYZ                   | 20        |
+------+-----------------------+-------------+-------+-----------------------+-----------+
> 
> select sid, c.company, c.city, st.state
>     from sales s, state st, customer c
>     where
>         s.customer = c.id and
>         c.city = st.city and st.state = 'New York'
>         order by sid;
+------+-----------------------+-----------------------+-----------------------+
| SID  |        COMPANY        |         CITY          |         STATE         |
+------+-----------------------+-----------------------+-----------------------+
| 2    | DEF                   | New York City         | New York              |
| 4    | DEF                   | New York City         | New York              |
| 6    | DEF                   | New York City         | New York              |
| 8    | DEF                   | New York City         | New York              |
+------+-----------------------+-----------------------+-----------------------+
> 
> select sid, p.name, p.color, p.size, s.quantity
>     from sales s, product p
>     where
>         s.product_id = p.id and p.size = 'S' and
>         s.salesperson > 0
>     order by sid;
+------+-----------------------+-------------+-------+-----------+
| SID  |         NAME          |    COLOR    | SIZE  | QUANTITY  |
+------+-----------------------+-------------+-------+-----------+
| 1    | radio                 | black       | S     | 10        |
| 2    | radio                 | black       | S     | 20        |
| 3    | radio                 | black       | S     | 30        |
| 4    | radio                 | black       | S     | 40        |
+------+-----------------------+-------------+-------+-----------+
> 
> select sid, p.name, p.color, p.size, s.quantity
>     from sales s, product p
>     where
>         s.product_id = p.id and p.size = 'S' and
>         s.salesperson = 1
>     order by sid;
+------+-----------------------+-------------+-------+-----------+
| SID  |         NAME          |    COLOR    | SIZE  | QUANTITY  |
+------+-----------------------+-------------+-------+-----------+
| 1    | radio                 | black       | S     | 10        |
| 2    | radio                 | black       | S     | 20        |
+------+-----------------------+-------------+-------+-----------+
> 
> select sid, p.name, p.color, p.size, s.quantity
>     from sales s, product p
>     where
>         s.product_id = p.id and p.size = 'S' and
>         s.salesperson > 0 and s.customer > 0
>     order by sid;
+------+-----------------------+-------------+-------+-----------+
| SID  |         NAME          |    COLOR    | SIZE  | QUANTITY  |
+------+-----------------------+-------------+-------+-----------+
| 1    | radio                 | black       | S     | 10        |
| 2    | radio                 | black       | S     | 20        |
| 3    | radio                 | black       | S     | 30        |
| 4    | radio                 | black       | S     | 40        |
+------+-----------------------+-------------+-------+-----------+
> 
> -- run the queries below twice to ensure proper handling when executing a
> -- previously closed stream graph
> select a, sid, name, color, size, quantity
>     from t left outer join
>     (select * from  sales s, product p
>         where
>             s.product_id = p.id and p.size = 'S' and p.color = 'black')
>     on true
> order by a, sid;
+----+------+-----------------------+-------------+-------+-----------+
| A  | SID  |         NAME          |    COLOR    | SIZE  | QUANTITY  |
+----+------+-----------------------+-------------+-------+-----------+
| 1  | 1    | radio                 | black       | S     | 10        |
| 1  | 2    | radio                 | black       | S     | 20        |
| 1  | 3    | radio                 | black       | S     | 30        |
| 1  | 4    | radio                 | black       | S     | 40        |
| 2  | 1    | radio                 | black       | S     | 10        |
| 2  | 2    | radio                 | black       | S     | 20        |
| 2  | 3    | radio                 | black       | S     | 30        |
| 2  | 4    | radio                 | black       | S     | 40        |
| 3  | 1    | radio                 | black       | S     | 10        |
| 3  | 2    | radio                 | black       | S     | 20        |
| 3  | 3    | radio                 | black       | S     | 30        |
| 3  | 4    | radio                 | black       | S     | 40        |
| 4  | 1    | radio                 | black       | S     | 10        |
| 4  | 2    | radio                 | black       | S     | 20        |
| 4  | 3    | radio                 | black       | S     | 30        |
| 4  | 4    | radio                 | black       | S     | 40        |
| 5  | 1    | radio                 | black       | S     | 10        |
| 5  | 2    | radio                 | black       | S     | 20        |
| 5  | 3    | radio                 | black       | S     | 30        |
| 5  | 4    | radio                 | black       | S     | 40        |
+----+------+-----------------------+-------------+-------+-----------+
> select a, sid, name, color, size, quantity
>     from t left outer join
>     (select * from  sales s, product p
>         where
>             s.product_id = p.id and p.size = 'S' and p.color = 'black')
>     on true
> order by a, sid;
+----+------+-----------------------+-------------+-------+-----------+
| A  | SID  |         NAME          |    COLOR    | SIZE  | QUANTITY  |
+----+------+-----------------------+-------------+-------+-----------+
| 1  | 1    | radio                 | black       | S     | 10        |
| 1  | 2    | radio                 | black       | S     | 20        |
| 1  | 3    | radio                 | black       | S     | 30        |
| 1  | 4    | radio                 | black       | S     | 40        |
| 2  | 1    | radio                 | black       | S     | 10        |
| 2  | 2    | radio                 | black       | S     | 20        |
| 2  | 3    | radio                 | black       | S     | 30        |
| 2  | 4    | radio                 | black       | S     | 40        |
| 3  | 1    | radio                 | black       | S     | 10        |
| 3  | 2    | radio                 | black       | S     | 20        |
| 3  | 3    | radio                 | black       | S     | 30        |
| 3  | 4    | radio                 | black       | S     | 40        |
| 4  | 1    | radio                 | black       | S     | 10        |
| 4  | 2    | radio                 | black       | S     | 20        |
| 4  | 3    | radio                 | black       | S     | 30        |
| 4  | 4    | radio                 | black       | S     | 40        |
| 5  | 1    | radio                 | black       | S     | 10        |
| 5  | 2    | radio                 | black       | S     | 20        |
| 5  | 3    | radio                 | black       | S     | 30        |
| 5  | 4    | radio                 | black       | S     | 40        |
+----+------+-----------------------+-------------+-------+-----------+
> 
> select a, sid, name, color, size, quantity
>     from t left outer join
>     (select * from  sales s, product p
>         where
>             s.product_id = p.id and p.color > 'w')
>     on true
> order by a, sid;
+----+------+-----------------------+-------------+-------+-----------+
| A  | SID  |         NAME          |    COLOR    | SIZE  | QUANTITY  |
+----+------+-----------------------+-------------+-------+-----------+
| 1  | 5    | phone                 | white       | M     | 50        |
| 1  | 6    | phone                 | white       | M     | 60        |
| 1  | 7    | phone                 | white       | M     | 70        |
| 1  | 8    | phone                 | white       | M     | 80        |
| 2  | 5    | phone                 | white       | M     | 50        |
| 2  | 6    | phone                 | white       | M     | 60        |
| 2  | 7    | phone                 | white       | M     | 70        |
| 2  | 8    | phone                 | white       | M     | 80        |
| 3  | 5    | phone                 | white       | M     | 50        |
| 3  | 6    | phone                 | white       | M     | 60        |
| 3  | 7    | phone                 | white       | M     | 70        |
| 3  | 8    | phone                 | white       | M     | 80        |
| 4  | 5    | phone                 | white       | M     | 50        |
| 4  | 6    | phone                 | white       | M     | 60        |
| 4  | 7    | phone                 | white       | M     | 70        |
| 4  | 8    | phone                 | white       | M     | 80        |
| 5  | 5    | phone                 | white       | M     | 50        |
| 5  | 6    | phone                 | white       | M     | 60        |
| 5  | 7    | phone                 | white       | M     | 70        |
| 5  | 8    | phone                 | white       | M     | 80        |
+----+------+-----------------------+-------------+-------+-----------+
> select a, sid, name, color, size, quantity
>     from t left outer join
>     (select * from  sales s, product p
>         where
>             s.product_id = p.id and p.color > 'w')
>     on true
> order by a, sid;
+----+------+-----------------------+-------------+-------+-----------+
| A  | SID  |         NAME          |    COLOR    | SIZE  | QUANTITY  |
+----+------+-----------------------+-------------+-------+-----------+
| 1  | 5    | phone                 | white       | M     | 50        |
| 1  | 6    | phone                 | white       | M     | 60        |
| 1  | 7    | phone                 | white       | M     | 70        |
| 1  | 8    | phone                 | white       | M     | 80        |
| 2  | 5    | phone                 | white       | M     | 50        |
| 2  | 6    | phone                 | white       | M     | 60        |
| 2  | 7    | phone                 | white       | M     | 70        |
| 2  | 8    | phone                 | white       | M     | 80        |
| 3  | 5    | phone                 | white       | M     | 50        |
| 3  | 6    | phone                 | white       | M     | 60        |
| 3  | 7    | phone                 | white       | M     | 70        |
| 3  | 8    | phone                 | white       | M     | 80        |
| 4  | 5    | phone                 | white       | M     | 50        |
| 4  | 6    | phone                 | white       | M     | 60        |
| 4  | 7    | phone                 | white       | M     | 70        |
| 4  | 8    | phone                 | white       | M     | 80        |
| 5  | 5    | phone                 | white       | M     | 50        |
| 5  | 6    | phone                 | white       | M     | 60        |
| 5  | 7    | phone                 | white       | M     | 70        |
| 5  | 8    | phone                 | white       | M     | 80        |
+----+------+-----------------------+-------------+-------+-----------+
> 
> --------------------------------------------------------------------------
> -- semijoin used for IN clause; customer column has 100 distinct values so
> -- the semijoin should be worthwhile
> --------------------------------------------------------------------------
> !set outputformat csv
> explain plan for
>     select * from sales where customer in
>         (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
'column0'
'FennelToIteratorConverter'
'  LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$CUSTOMER, SYS$CLUSTERED_INDEX$SALES$PRODUCT_ID, SYS$CLUSTERED_INDEX$SALES$QUANTITY, SYS$CLUSTERED_INDEX$SALES$SALESPERSON, SYS$CLUSTERED_INDEX$SALES$SID]])'
'    LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'      LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_CUST], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'        FennelSortRel(key=[[0]], discardDuplicates=[false])'
'          LhxAggRel(groupCount=[1])'
'            FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ROW_VALUE) NOT NULL])'
'              LhxAggRel(groupCount=[1])'
'                FennelValuesRel(tuples=[[{ 1 }, { 2 }, { 3 }, { 4 }, { 5 }, { 6 }, { 7 }, { 8 }, { 9 }, { 10 }, { 1 }, { 2 }, { 3 }, { 4 }, { 5 }, { 6 }, { 7 }, { 8 }, { 9 }, { 10 }]])'
> explain plan for
>     select * from sales where customer in
>         (select id from customer where id < 10);
'column0'
'FennelToIteratorConverter'
'  LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$CUSTOMER, SYS$CLUSTERED_INDEX$SALES$PRODUCT_ID, SYS$CLUSTERED_INDEX$SALES$QUANTITY, SYS$CLUSTERED_INDEX$SALES$SALESPERSON, SYS$CLUSTERED_INDEX$SALES$SID]])'
'    LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'      LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_CUST], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'        FennelSortRel(key=[[0]], discardDuplicates=[false])'
'          LhxAggRel(groupCount=[1])'
'            FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'              LhxAggRel(groupCount=[1])'
'                LcsRowScanRel(table=[[LOCALDB, SJ, CUSTOMER]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$CUSTOMER$ID]])'
'                  LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[2])'
'                    LcsIndexSearchRel(table=[[LOCALDB, SJ, CUSTOMER]], index=[SYS$CONSTRAINT_INDEX$SYS$UNIQUE_KEY$CUSTOMER$ID], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                      FennelValuesRel(tuples=[[{ '-', null, ')', 10 }]])'
> 
> !set outputformat table
> select * from sales where customer in
>     (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
>     order by sid;
+------+-------------+--------------+-----------+-----------+
| SID  | PRODUCT_ID  | SALESPERSON  | CUSTOMER  | QUANTITY  |
+------+-------------+--------------+-----------+-----------+
| 1    | 1           | 1            | 1         | 10        |
| 2    | 1           | 1            | 2         | 20        |
| 3    | 1           | 2            | 1         | 30        |
| 4    | 1           | 2            | 2         | 40        |
| 5    | 2           | 1            | 1         | 50        |
| 6    | 2           | 1            | 2         | 60        |
| 7    | 2           | 2            | 1         | 70        |
| 8    | 2           | 2            | 2         | 80        |
+------+-------------+--------------+-----------+-----------+
> 
> select * from sales where customer in
>     (select id from customer where id < 10)
>     order by sid;
+------+-------------+--------------+-----------+-----------+
| SID  | PRODUCT_ID  | SALESPERSON  | CUSTOMER  | QUANTITY  |
+------+-------------+--------------+-----------+-----------+
| 1    | 1           | 1            | 1         | 10        |
| 2    | 1           | 1            | 2         | 20        |
| 3    | 1           | 2            | 1         | 30        |
| 4    | 1           | 2            | 2         | 40        |
| 5    | 2           | 1            | 1         | 50        |
| 6    | 2           | 1            | 2         | 60        |
| 7    | 2           | 2            | 1         | 70        |
| 8    | 2           | 2            | 2         | 80        |
+------+-------------+--------------+-----------+-----------+
> 
> --------------------------
> -- test semijoins on views
> --------------------------
> create view vt(vc, vd, vb, vbd) as
>     select upper(c), trim(d), b, b || d from t;
> select * from vt;
+-----------+----------------+-----------------------+------------------------------------+
|    VC     |       VD       |          VB           |                VBD                 |
+-----------+----------------+-----------------------+------------------------------------+
| NO MATCH  | this is row 1  | abcdef                | abcdef              this is row 1  |
| GHIJKL    | this is row 2  | abcdef                | abcdef              this is row 2  |
| GHIJKL    | this is row 3  | abcdef                | abcdef              this is row 3  |
| GHIJKL    | this is row 4  |                       |                                    |
| GHIJKL    | no match       |                       |                                    |
+-----------+----------------+-----------------------+------------------------------------+
> !set outputformat csv
> 
> -- semijoin should be usable in these two cases; for the second and third,
> -- should only use the index on column b
> explain plan for
>     select * from vt, smalltable s
>         where vt.vb = s.s3 and s.s1 = 'this is row 1';
'column0'
'IterCalcRel(expr#0..8=[{inputs}], expr#9=[UPPER($t1)], expr#10=[FLAG(Both)], expr#11=[' '], expr#12=[TRIM($t10, $t11, $t2)], expr#13=[||($t0, $t2)], VC=[$t9], VD=[$t12], VB=[$t0], VBD=[$t13], S1=[$t4], S2=[$t5], S3=[$t6], S4=[$t7])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[3]], rightKeys=[[4]], joinType=[INNER])'
'      FennelReshapeRel(projection=[[0, 1, 2, 0]], outputRowType=[RecordType(CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL C, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL D, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($0):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[[1, 2, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
'          LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, T]], index=[IT_BD], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelCalcRel(expr#0=[{inputs}], expr#1=[CAST($t0):CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], S3=[$t1])'
'                    LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S3]], residual columns=[[0]])'
'                      FennelValuesRel(tuples=[[{ '[', 'this is row 1', ']', 'this is row 1' }]])'
'      FennelReshapeRel(projection=[[0, 1, 2, 3, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($2):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3, SYS$CLUSTERED_INDEX$SMALLTABLE$S4]], residual columns=[[0]])'
'          FennelValuesRel(tuples=[[{ '[', 'this is row 1', ']', 'this is row 1' }]])'
> explain plan for
>     select * from vt, smalltable s
>         where vt.vb = s.s3 and vt.vbd = s.s1 and s.s2 > 0;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[VC, VD, VB, VBD, S1, S2, S3, S4]])'
'    FennelReshapeRel(projection=[[0, 1, 2, 3, 5, 6, 7, 8]], outputRowType=[RecordType(VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL EXPR$0, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL EXPR$1, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(148) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" EXPR$3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4) NOT NULL])'
'      LhxJoinRel(leftKeys=[[4, 3]], rightKeys=[[4, 5]], joinType=[INNER])'
'        FennelCalcRel(expr#0..2=[{inputs}], expr#3=[UPPER($t1)], expr#4=[FLAG(Both)], expr#5=[' '], expr#6=[TRIM($t4, $t5, $t2)], expr#7=[||($t0, $t2)], expr#8=[CAST($t0):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], EXPR$0=[$t3], EXPR$1=[$t6], B=[$t0], EXPR$3=[$t7], CAST($2):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"=[$t8])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[[1, 2, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
'            LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'              LcsIndexSearchRel(table=[[LOCALDB, SJ, T]], index=[IT_BD], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                  LhxAggRel(groupCount=[1])'
'                    FennelCalcRel(expr#0=[{inputs}], expr#1=[CAST($t0):CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], S3=[$t1])'
'                      LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3]], residual columns=[[1]])'
'                        FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 2, 0]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($2):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary", VARCHAR(148) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($0):VARCHAR(148) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3, SYS$CLUSTERED_INDEX$SMALLTABLE$S4]], residual columns=[[1]])'
'            FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
> explain plan for
>     select * from vt, smalltable s
>         where vt.vb = s.s3 and vt.vd = s.s1 and s.s2 > 0;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[VC, VD, VB, VBD, S1, S2, S3, S4]])'
'    FennelReshapeRel(projection=[[0, 1, 2, 3, 5, 6, 7, 8]], outputRowType=[RecordType(VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL EXPR$0, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL EXPR$1, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(148) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" EXPR$3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4) NOT NULL])'
'      LhxJoinRel(leftKeys=[[4, 1]], rightKeys=[[4, 0]], joinType=[INNER])'
'        FennelCalcRel(expr#0..2=[{inputs}], expr#3=[UPPER($t1)], expr#4=[FLAG(Both)], expr#5=[' '], expr#6=[TRIM($t4, $t5, $t2)], expr#7=[||($t0, $t2)], expr#8=[CAST($t0):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], EXPR$0=[$t3], EXPR$1=[$t6], B=[$t0], EXPR$3=[$t7], CAST($2):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"=[$t8])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[[1, 2, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
'            LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'              LcsIndexSearchRel(table=[[LOCALDB, SJ, T]], index=[IT_BD], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                  LhxAggRel(groupCount=[1])'
'                    FennelCalcRel(expr#0=[{inputs}], expr#1=[CAST($t0):CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], S3=[$t1])'
'                      LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3]], residual columns=[[1]])'
'                        FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($2):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3, SYS$CLUSTERED_INDEX$SMALLTABLE$S4]], residual columns=[[1]])'
'            FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
> 
> -- but not in these cases
> explain plan for
>     select * from vt, smalltable s where vt.vd = s.s1 and s.s2 > 0;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[VC, VD, VB, VBD, S1, S2, S3, S4]])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'      FennelCalcRel(expr#0..2=[{inputs}], expr#3=[UPPER($t1)], expr#4=[FLAG(Both)], expr#5=[' '], expr#6=[TRIM($t4, $t5, $t2)], expr#7=[||($t0, $t2)], EXPR$0=[$t3], EXPR$1=[$t6], B=[$t0], EXPR$3=[$t7])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[[1, 2, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
'      LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3, SYS$CLUSTERED_INDEX$SMALLTABLE$S4]], residual columns=[[1]])'
'        FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
> explain plan for
>     select * from vt, smalltable s
>         where vt.vbd = s.s3 and s.s1 = 'this is row 1';
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[VC, VD, VB, VBD, S1, S2, S3, S4]])'
'    FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5, 6, 7]], outputRowType=[RecordType(VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL EXPR$0, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL EXPR$1, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(148) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" EXPR$3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4) NOT NULL])'
'      LhxJoinRel(leftKeys=[[3]], rightKeys=[[4]], joinType=[INNER])'
'        FennelCalcRel(expr#0..2=[{inputs}], expr#3=[UPPER($t1)], expr#4=[FLAG(Both)], expr#5=[' '], expr#6=[TRIM($t4, $t5, $t2)], expr#7=[||($t0, $t2)], EXPR$0=[$t3], EXPR$1=[$t6], B=[$t0], EXPR$3=[$t7])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[[1, 2, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, INTEGER S2, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4, VARCHAR(148) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($2):VARCHAR(148) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3, SYS$CLUSTERED_INDEX$SMALLTABLE$S4]], residual columns=[[0]])'
'            FennelValuesRel(tuples=[[{ '[', 'this is row 1', ']', 'this is row 1' }]])'
> 
> -- run the queries corresponding to the cases where semijoins can be used
> !set outputformat table
> select * from vt, smalltable s
>     where vt.vb = s.s3 and s.s1 = 'this is row 1' order by vc;
+-----------+----------------+-----------------------+------------------------------------+----------------+-----+---------+---------+
|    VC     |       VD       |          VB           |                VBD                 |       S1       | S2  |   S3    |   S4    |
+-----------+----------------+-----------------------+------------------------------------+----------------+-----+---------+---------+
| GHIJKL    | this is row 2  | abcdef                | abcdef              this is row 2  | this is row 1  | 1   | abcdef  | ghijkl  |
| GHIJKL    | this is row 3  | abcdef                | abcdef              this is row 3  | this is row 1  | 1   | abcdef  | ghijkl  |
| NO MATCH  | this is row 1  | abcdef                | abcdef              this is row 1  | this is row 1  | 1   | abcdef  | ghijkl  |
+-----------+----------------+-----------------------+------------------------------------+----------------+-----+---------+---------+
> select * from vt, smalltable s
>     where vt.vb = s.s3 and vt.vbd = s.s1 and s.s2 > 0 order by vc;
+-----+-----+-----+------+-----+-----+-----+-----+
| VC  | VD  | VB  | VBD  | S1  | S2  | S3  | S4  |
+-----+-----+-----+------+-----+-----+-----+-----+
+-----+-----+-----+------+-----+-----+-----+-----+
> select * from vt, smalltable s
>     where vt.vb = s.s3 and vt.vd = s.s1 and s.s2 > 0 order by vc;
+-----------+----------------+-----------------------+------------------------------------+----------------+-----+---------+---------+
|    VC     |       VD       |          VB           |                VBD                 |       S1       | S2  |   S3    |   S4    |
+-----------+----------------+-----------------------+------------------------------------+----------------+-----+---------+---------+
| GHIJKL    | this is row 2  | abcdef                | abcdef              this is row 2  | this is row 2  | 2   | abcdef  | ghijkl  |
| GHIJKL    | this is row 3  | abcdef                | abcdef              this is row 3  | this is row 3  | 3   | abcdef  | ghijkl  |
| NO MATCH  | this is row 1  | abcdef                | abcdef              this is row 1  | this is row 1  | 1   | abcdef  | ghijkl  |
+-----------+----------------+-----------------------+------------------------------------+----------------+-----+---------+---------+
> 
> -------------------------------------------------------
> -- cases where join with dimension table can be removed
> -------------------------------------------------------
> !set outputformat csv
> explain plan for
>     select sid, p.id, s.quantity
>         from sales s, product p
>         where
>             s.product_id = p.id and p.size = 'S'
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelCalcRel(expr#0..2=[{inputs}], expr#3=[CAST($t1):INTEGER NOT NULL], SID=[$t0], ID=[$t3], QUANTITY=[$t2])'
'      LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 1, 4]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$PRODUCT_ID, SYS$CLUSTERED_INDEX$SALES$QUANTITY, SYS$CLUSTERED_INDEX$SALES$SID]])'
'        LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'          LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_PID], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'              LhxAggRel(groupCount=[1])'
'                FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                  LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'                    LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                      FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
> explain plan for
>     select sid
>         from product p, sales s
>         where
>             s.product_id = p.id and p.size = 'S' and sid > 2
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$SID]], residual columns=[[0]])'
'      LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'        LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_PID], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'          FennelSortRel(key=[[0]], discardDuplicates=[false])'
'            LhxAggRel(groupCount=[1])'
'              FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'                  LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                    FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
'      FennelValuesRel(tuples=[[{ '(', 2, '+', null }]])'
> explain plan for
>     select sid, p.id as pid, sp.id spid, s.quantity
>         from sales s, product p, salesperson sp
>         where
>             p.id = s.product_id and
>             s.salesperson = sp.id and
>             p.size = 'M' and sp.age = 30
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelCalcRel(expr#0..3=[{inputs}], expr#4=[CAST($t1):INTEGER NOT NULL], expr#5=[CAST($t2):INTEGER NOT NULL], SID=[$t0], PID=[$t4], SPID=[$t5], QUANTITY=[$t3])'
'      LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 1, 2, 4]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$PRODUCT_ID, SYS$CLUSTERED_INDEX$SALES$QUANTITY, SYS$CLUSTERED_INDEX$SALES$SALESPERSON, SYS$CLUSTERED_INDEX$SALES$SID]])'
'        LcsIndexIntersectRel(startRidParamId=[2], rowLimitParamId=[3])'
'          LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[1])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_SP], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                    LcsRowScanRel(table=[[LOCALDB, SJ, SALESPERSON]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALESPERSON$AGE, SYS$CLUSTERED_INDEX$SALESPERSON$ID]], residual columns=[[2]])'
'                      FennelValuesRel(tuples=[[{ '[', 30, ']', 30 }]])'
'          LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[4])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_PID], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                    LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'                      LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                        FennelValuesRel(tuples=[[{ '[', 'M', ']', 'M' }]])'
> explain plan for
>     select sid
>         from customer c, salesperson sp, product p, sales s
>         where
>             s.product_id = p.id and
>             s.salesperson = sp.id and 
>             s.customer = c.id and
>             p.size = 'S' and sp.age = 40 and c.city >= 'N'
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$SID]])'
'      LcsIndexIntersectRel(startRidParamId=[2], rowLimitParamId=[3])'
'        LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[1])'
'          LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_SP], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'              LhxAggRel(groupCount=[1])'
'                FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                  LcsRowScanRel(table=[[LOCALDB, SJ, SALESPERSON]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALESPERSON$AGE, SYS$CLUSTERED_INDEX$SALESPERSON$ID]], residual columns=[[2]])'
'                    FennelValuesRel(tuples=[[{ '[', 40, ']', 40 }]])'
'        LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[4])'
'          LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_PID], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'              LhxAggRel(groupCount=[1])'
'                FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                  LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'                    LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                      FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
'        LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[5])'
'          LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_CUST], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'              LhxAggRel(groupCount=[1])'
'                FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                  LcsRowScanRel(table=[[LOCALDB, SJ, CUSTOMER]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$CUSTOMER$ID]])'
'                    LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[6])'
'                      LcsIndexSearchRel(table=[[LOCALDB, SJ, CUSTOMER]], index=[I_CUSTOMER_CITY], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                        FennelValuesRel(tuples=[[{ '[', 'N                   ', '+', null }]])'
> explain plan for
>     select sid, s.quantity
>         from product p, sales s, salesperson sp
>         where
>             s.sid < 3 and
>             s.product_id = p.id and
>             s.salesperson = sp.id and
>             p.size >= 'M' and sp.age >= 30
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 4]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$QUANTITY, SYS$CLUSTERED_INDEX$SALES$SID]], residual columns=[[0]])'
'      LcsIndexIntersectRel(startRidParamId=[2], rowLimitParamId=[3])'
'        LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[1])'
'          LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_SP], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'              LhxAggRel(groupCount=[1])'
'                FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                  LcsRowScanRel(table=[[LOCALDB, SJ, SALESPERSON]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALESPERSON$AGE, SYS$CLUSTERED_INDEX$SALESPERSON$ID]], residual columns=[[2]])'
'                    FennelValuesRel(tuples=[[{ '[', 30, '+', null }]])'
'        LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[4])'
'          LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_PID], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'              LhxAggRel(groupCount=[1])'
'                FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                  LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'                    LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[5])'
'                      LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                        FennelValuesRel(tuples=[[{ '[', 'M', '+', null }]])'
'      FennelValuesRel(tuples=[[{ '(', null, ')', 3 }]])'
> explain plan for
>     select sid, c.id
>         from sales s, state st, customer c
>         where
>             s.customer = c.id and
>             c.city = st.city and st.state = 'New York'
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[CAST($t1):INTEGER NOT NULL], SID=[$t0], ID=[$t2])'
'      LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$CUSTOMER, SYS$CLUSTERED_INDEX$SALES$SID]])'
'        LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'          LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_CUST], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'              LhxAggRel(groupCount=[1])'
'                FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                  LcsRowScanRel(table=[[LOCALDB, SJ, CUSTOMER]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$CUSTOMER$ID]])'
'                    LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[2])'
'                      LcsIndexSearchRel(table=[[LOCALDB, SJ, CUSTOMER]], index=[I_CUSTOMER_CITY], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                        FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                          LhxAggRel(groupCount=[1])'
'                            LcsRowScanRel(table=[[LOCALDB, SJ, STATE]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$STATE$CITY, SYS$CLUSTERED_INDEX$STATE$STATE]], residual columns=[[1]])'
'                              FennelValuesRel(tuples=[[{ '[', 'New York            ', ']', 'New York            ' }]])'
> -- shuffle the order of the tables in the from clause
> explain plan for
>     select sid, c.id
>         from customer c, sales s, state st
>         where
>             s.customer = c.id and
>             c.city = st.city and st.state = 'New York'
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[CAST($t1):INTEGER NOT NULL], SID=[$t0], ID=[$t2])'
'      LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$CUSTOMER, SYS$CLUSTERED_INDEX$SALES$SID]])'
'        LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'          LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_CUST], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'              LhxAggRel(groupCount=[1])'
'                FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                  LcsRowScanRel(table=[[LOCALDB, SJ, CUSTOMER]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$CUSTOMER$ID]])'
'                    LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[2])'
'                      LcsIndexSearchRel(table=[[LOCALDB, SJ, CUSTOMER]], index=[I_CUSTOMER_CITY], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                        FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                          LhxAggRel(groupCount=[1])'
'                            LcsRowScanRel(table=[[LOCALDB, SJ, STATE]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$STATE$CITY, SYS$CLUSTERED_INDEX$STATE$STATE]], residual columns=[[1]])'
'                              FennelValuesRel(tuples=[[{ '[', 'New York            ', ']', 'New York            ' }]])'
> 
> -- product can be removed because its join key with t can be obtained from
> -- sales
> explain plan for
>     select sid, s.quantity, t.c
>         from sales s, product p, t
>         where
>             s.product_id = p.id and p.size = 'S' and
>             p.id = t.a
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[2, 3, 1]], outputRowType=[RecordType(INTEGER SID, INTEGER QUANTITY, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL C) NOT NULL])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[3]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$T$A, SYS$CLUSTERED_INDEX$T$C]])'
'        FennelCalcRel(expr#0..2=[{inputs}], expr#3=[CAST($t1):INTEGER NOT NULL], expr#4=[CAST($t3):INTEGER], SID=[$t0], QUANTITY=[$t2], ID=[$t3], CAST($2):INTEGER=[$t4])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 1, 4]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$PRODUCT_ID, SYS$CLUSTERED_INDEX$SALES$QUANTITY, SYS$CLUSTERED_INDEX$SALES$SID]])'
'            LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'              LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_PID], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                  LhxAggRel(groupCount=[1])'
'                    FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                      LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'                        LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                          FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
> 
> -- run the queries
> !set outputformat table
> select sid, p.id, s.quantity
>     from sales s, product p
>     where
>         s.product_id = p.id and p.size = 'S'
>     order by sid;
+------+-----+-----------+
| SID  | ID  | QUANTITY  |
+------+-----+-----------+
| 1    | 1   | 10        |
| 2    | 1   | 20        |
| 3    | 1   | 30        |
| 4    | 1   | 40        |
+------+-----+-----------+
> select sid
>     from product p, sales s
>     where
>         s.product_id = p.id and p.size = 'S' and sid > 2
>     order by sid;
+------+
| SID  |
+------+
| 3    |
| 4    |
+------+
> select sid, p.id as pid, sp.id spid, s.quantity
>     from sales s, product p, salesperson sp
>     where
>         p.id = s.product_id and
>         s.salesperson = sp.id and
>         p.size = 'M' and sp.age = 30
>     order by sid;
+------+------+-------+-----------+
| SID  | PID  | SPID  | QUANTITY  |
+------+------+-------+-----------+
| 5    | 2    | 1     | 50        |
| 6    | 2    | 1     | 60        |
+------+------+-------+-----------+
> select sid
>     from customer c, salesperson sp, product p, sales s
>     where
>         s.product_id = p.id and
>         s.salesperson = sp.id and 
>         s.customer = c.id and
>         p.size = 'S' and sp.age = 40 and c.city >= 'N'
>     order by sid;
+------+
| SID  |
+------+
| 3    |
| 4    |
+------+
> select sid, s.quantity
>     from product p, sales s, salesperson sp
>     where
>         s.sid < 3 and
>         s.product_id = p.id and
>         s.salesperson = sp.id and
>         p.size >= 'M' and sp.age >= 30
>     order by sid;
+------+-----------+
| SID  | QUANTITY  |
+------+-----------+
| 1    | 10        |
| 2    | 20        |
+------+-----------+
> select sid, c.id
>     from sales s, state st, customer c
>     where
>         s.customer = c.id and
>         c.city = st.city and st.state = 'New York'
>     order by sid;
+------+-----+
| SID  | ID  |
+------+-----+
| 2    | 2   |
| 4    | 2   |
| 6    | 2   |
| 8    | 2   |
+------+-----+
> select sid, c.id
>     from customer c, sales s, state st
>     where
>         s.customer = c.id and
>         c.city = st.city and st.state = 'New York'
>     order by sid;
+------+-----+
| SID  | ID  |
+------+-----+
| 2    | 2   |
| 4    | 2   |
| 6    | 2   |
| 8    | 2   |
+------+-----+
> select sid, s.quantity, t.c
>     from sales s, product p, t
>     where
>         s.product_id = p.id and p.size = 'S' and
>         p.id = t.a
>     order by sid;
+------+-----------+-----------+
| SID  | QUANTITY  |     C     |
+------+-----------+-----------+
| 1    | 10        | no match  |
| 2    | 20        | no match  |
| 3    | 30        | no match  |
| 4    | 40        | no match  |
+------+-----------+-----------+
> 
> -----------------------------------------
> -- cases where the join cannot be removed
> -----------------------------------------
> !set outputformat csv
> 
> -- extra join filters
> explain plan for select t.*
>     from t inner join smalltable s
>     on s.s1 = t.d and s.s3 = t.b and t.c = s.s4 where s.s2 > 0
>     order by a;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER A, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL C, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL D) NOT NULL])'
'      LhxJoinRel(leftKeys=[[3, 4, 5]], rightKeys=[[0, 3, 2]], joinType=[INNER])'
'        FennelCalcRel(expr#0..3=[{inputs}], expr#4=[CAST($t1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], expr#5=[CAST($t2):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], proj#0..5=[{exprs}])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T$A, SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
'            LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'              LcsIndexSearchRel(table=[[LOCALDB, SJ, T]], index=[IT_BD], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'                  LhxAggRel(groupCount=[2])'
'                    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[CAST($t1):CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], S3=[$t2], S1=[$t0])'
'                      LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3]], residual columns=[[1]])'
'                        FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 1]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S1, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S4, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[[0, 2, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S2, SYS$CLUSTERED_INDEX$SMALLTABLE$S3, SYS$CLUSTERED_INDEX$SMALLTABLE$S4]], residual columns=[[1]])'
'            FennelValuesRel(tuples=[[{ '(', 0, '+', null }]])'
> 
> -- semijoin keys not unique
> explain plan for select t.*
>     from t inner join smalltable s
>     on t.b = s.s3 and s.s1 = 'this is row 1' 
>     order by a;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER A, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL C, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL D) NOT NULL])'
'      LhxJoinRel(leftKeys=[[4]], rightKeys=[[1]], joinType=[INNER])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 1]], outputRowType=[RecordType(INTEGER A, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" B, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL C, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL D, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T$A, SYS$CLUSTERED_INDEX$T$B, SYS$CLUSTERED_INDEX$T$C, SYS$CLUSTERED_INDEX$T$D]])'
'            LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'              LcsIndexSearchRel(table=[[LOCALDB, SJ, T]], index=[IT_BD], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                  LhxAggRel(groupCount=[1])'
'                    FennelCalcRel(expr#0=[{inputs}], expr#1=[CAST($t0):CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], S3=[$t1])'
'                      LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S3]], residual columns=[[0]])'
'                        FennelValuesRel(tuples=[[{ '[', 'this is row 1', ']', 'this is row 1' }]])'
'        FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL S3, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($0):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, SMALLTABLE]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$SMALLTABLE$S1, SYS$CLUSTERED_INDEX$SMALLTABLE$S3]], residual columns=[[0]])'
'            FennelValuesRel(tuples=[[{ '[', 'this is row 1', ']', 'this is row 1' }]])'
> 
> -- references to non-semijoin key column in projection list
> explain plan for
>     select *
>         from sales s, product p
>         where
>             s.product_id = p.id and p.size = 'S'
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5, 6, 7, 8]], outputRowType=[RecordType(INTEGER SID, INTEGER PRODUCT_ID, INTEGER SALESPERSON, INTEGER CUSTOMER, INTEGER QUANTITY, INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[4]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$CUSTOMER, SYS$CLUSTERED_INDEX$SALES$PRODUCT_ID, SYS$CLUSTERED_INDEX$SALES$QUANTITY, SYS$CLUSTERED_INDEX$SALES$SALESPERSON, SYS$CLUSTERED_INDEX$SALES$SID]])'
'          LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_PID], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                    LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'                      LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                        FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
'        FennelReshapeRel(projection=[[0, 1, 2, 3, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" COLOR, CHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" SIZE, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$COLOR, SYS$CLUSTERED_INDEX$PRODUCT$ID, SYS$CLUSTERED_INDEX$PRODUCT$NAME, SYS$CLUSTERED_INDEX$PRODUCT$SIZE]])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
> explain plan for
>     select sid, p.name, s.quantity
>         from sales s, product p
>         where
>             s.product_id = p.id and p.size = 'S'
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 4, 2]], outputRowType=[RecordType(INTEGER SID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, INTEGER QUANTITY) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[2]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 1, 4]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$PRODUCT_ID, SYS$CLUSTERED_INDEX$SALES$QUANTITY, SYS$CLUSTERED_INDEX$SALES$SID]])'
'          LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_PID], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                    LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID]])'
'                      LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                        FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
'        FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, PRODUCT]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$PRODUCT$ID, SYS$CLUSTERED_INDEX$PRODUCT$NAME]])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, PRODUCT]], index=[I_PRODUCT_SIZE], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelValuesRel(tuples=[[{ '[', 'S', ']', 'S' }]])'
> 
> -- state can be removed because city can be retrieved from customer; note that
> -- we can't remove customer instead of state because if we were to retrieve
> -- city from state instead of customer, we'd also need the city column from
> -- customer to join with state, resulting in neither join being removed
> explain plan for
>     select sid, st.city
>         from sales s, state st, customer c
>         where
>             s.customer = c.id and
>             c.city = st.city and st.state = 'New York'
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 3]], outputRowType=[RecordType(INTEGER SID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL CITY) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[2]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$CUSTOMER, SYS$CLUSTERED_INDEX$SALES$SID]])'
'          LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_CUST], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                    LcsRowScanRel(table=[[LOCALDB, SJ, CUSTOMER]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$CUSTOMER$ID]])'
'                      LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[2])'
'                        LcsIndexSearchRel(table=[[LOCALDB, SJ, CUSTOMER]], index=[I_CUSTOMER_CITY], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                          FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                            LhxAggRel(groupCount=[1])'
'                              LcsRowScanRel(table=[[LOCALDB, SJ, STATE]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$STATE$CITY, SYS$CLUSTERED_INDEX$STATE$STATE]], residual columns=[[1]])'
'                                FennelValuesRel(tuples=[[{ '[', 'New York            ', ']', 'New York            ' }]])'
'        FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL CITY, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, SJ, CUSTOMER]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$CUSTOMER$CITY, SYS$CLUSTERED_INDEX$CUSTOMER$ID]])'
'            LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[2])'
'              LcsIndexSearchRel(table=[[LOCALDB, SJ, CUSTOMER]], index=[I_CUSTOMER_CITY], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                  LhxAggRel(groupCount=[1])'
'                    LcsRowScanRel(table=[[LOCALDB, SJ, STATE]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$STATE$CITY, SYS$CLUSTERED_INDEX$STATE$STATE]], residual columns=[[1]])'
'                      FennelValuesRel(tuples=[[{ '[', 'New York            ', ']', 'New York            ' }]])'
> 
> -- neither customer or state can be removed because state is referenced in the
> -- projection list; therefore customer needs to be joined with state in order
> -- to retrieve the state column
> explain plan for
>     select sid, st.state
>         from sales s, state st, customer c
>         where
>             s.customer = c.id and
>             c.city = st.city and st.state = 'New York'
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0, 3]], outputRowType=[RecordType(INTEGER SID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" STATE) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[2]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$CUSTOMER, SYS$CLUSTERED_INDEX$SALES$SID]])'
'          LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'            LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_CUST], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                    LcsRowScanRel(table=[[LOCALDB, SJ, CUSTOMER]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$CUSTOMER$ID]])'
'                      LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[2])'
'                        LcsIndexSearchRel(table=[[LOCALDB, SJ, CUSTOMER]], index=[I_CUSTOMER_CITY], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                          FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                            LhxAggRel(groupCount=[1])'
'                              LcsRowScanRel(table=[[LOCALDB, SJ, STATE]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$STATE$CITY, SYS$CLUSTERED_INDEX$STATE$STATE]], residual columns=[[1]])'
'                                FennelValuesRel(tuples=[[{ '[', 'New York            ', ']', 'New York            ' }]])'
'        FennelReshapeRel(projection=[[0, 3, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" STATE, INTEGER CAST($0):INTEGER) NOT NULL])'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'            LcsRowScanRel(table=[[LOCALDB, SJ, CUSTOMER]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$CUSTOMER$CITY, SYS$CLUSTERED_INDEX$CUSTOMER$ID]])'
'              LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[2])'
'                LcsIndexSearchRel(table=[[LOCALDB, SJ, CUSTOMER]], index=[I_CUSTOMER_CITY], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                    LhxAggRel(groupCount=[1])'
'                      LcsRowScanRel(table=[[LOCALDB, SJ, STATE]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$STATE$CITY, SYS$CLUSTERED_INDEX$STATE$STATE]], residual columns=[[1]])'
'                        FennelValuesRel(tuples=[[{ '[', 'New York            ', ']', 'New York            ' }]])'
'            LcsRowScanRel(table=[[LOCALDB, SJ, STATE]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$STATE$CITY, SYS$CLUSTERED_INDEX$STATE$STATE]], residual columns=[[1]])'
'              FennelValuesRel(tuples=[[{ '[', 'New York            ', ']', 'New York            ' }]])'
> 
> -- although customer doesn't need to be joined with either state or sales
> -- because of semijoins with those two tables, it needs to be joined with t;
> -- so its join can't be removed
> explain plan for
>     select sid
>         from sales s, state st, customer c, t
>         where
>             s.customer = c.id and
>             c.city = st.city and st.state = 'New York' and
>             c.city = t.c
>         order by sid;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER SID) NOT NULL])'
'      LhxJoinRel(leftKeys=[[2]], rightKeys=[[0]], joinType=[INNER])'
'        FennelCalcRel(expr#0..4=[{inputs}], expr#5=[CAST($t3):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], SID=[$t0], CITY=[$t3], CAST($1):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL=[$t5])'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[2]], joinType=[INNER])'
'            LcsRowScanRel(table=[[LOCALDB, SJ, SALES]], projection=[[0, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$SALES$CUSTOMER, SYS$CLUSTERED_INDEX$SALES$SID]])'
'              LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'                LcsIndexSearchRel(table=[[LOCALDB, SJ, SALES]], index=[I_SALES_CUST], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                    LhxAggRel(groupCount=[1])'
'                      FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ID) NOT NULL])'
'                        LcsRowScanRel(table=[[LOCALDB, SJ, CUSTOMER]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$CUSTOMER$ID]])'
'                          LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[2])'
'                            LcsIndexSearchRel(table=[[LOCALDB, SJ, CUSTOMER]], index=[I_CUSTOMER_CITY], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                                LhxAggRel(groupCount=[1])'
'                                  LcsRowScanRel(table=[[LOCALDB, SJ, STATE]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$STATE$CITY, SYS$CLUSTERED_INDEX$STATE$STATE]], residual columns=[[1]])'
'                                    FennelValuesRel(tuples=[[{ '[', 'New York            ', ']', 'New York            ' }]])'
'            FennelReshapeRel(projection=[[0, 1, 0]], outputRowType=[RecordType(INTEGER NOT NULL ID, CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL CITY, INTEGER CAST($0):INTEGER) NOT NULL])'
'              LcsRowScanRel(table=[[LOCALDB, SJ, CUSTOMER]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$CUSTOMER$CITY, SYS$CLUSTERED_INDEX$CUSTOMER$ID]])'
'                LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[2])'
'                  LcsIndexSearchRel(table=[[LOCALDB, SJ, CUSTOMER]], index=[I_CUSTOMER_CITY], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                    FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                      LhxAggRel(groupCount=[1])'
'                        LcsRowScanRel(table=[[LOCALDB, SJ, STATE]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$STATE$CITY, SYS$CLUSTERED_INDEX$STATE$STATE]], residual columns=[[1]])'
'                          FennelValuesRel(tuples=[[{ '[', 'New York            ', ']', 'New York            ' }]])'
'        LcsRowScanRel(table=[[LOCALDB, SJ, T]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$T$C]])'
> 
> !set outputformat table
> select t.*
>     from t inner join smalltable s
>     on s.s1 = t.d and s.s3 = t.b and t.c = s.s4 where s.s2 > 0
>     order by a;
+----+-----------------------+---------+----------------+
| A  |           B           |    C    |       D        |
+----+-----------------------+---------+----------------+
| 2  | abcdef                | ghijkl  | this is row 2  |
| 3  | abcdef                | ghijkl  | this is row 3  |
+----+-----------------------+---------+----------------+
> select t.*
>     from t inner join smalltable s
>     on t.b = s.s3 and s.s1 = 'this is row 1' 
>     order by a;
+----+-----------------------+-----------+----------------+
| A  |           B           |     C     |       D        |
+----+-----------------------+-----------+----------------+
| 1  | abcdef                | no match  | this is row 1  |
| 2  | abcdef                | ghijkl    | this is row 2  |
| 3  | abcdef                | ghijkl    | this is row 3  |
+----+-----------------------+-----------+----------------+
> select *
>     from sales s, product p
>     where
>         s.product_id = p.id and p.size = 'S'
>     order by sid;
+------+-------------+--------------+-----------+-----------+-----+-----------------------+-------------+-------+
| SID  | PRODUCT_ID  | SALESPERSON  | CUSTOMER  | QUANTITY  | ID  |         NAME          |    COLOR    | SIZE  |
+------+-------------+--------------+-----------+-----------+-----+-----------------------+-------------+-------+
| 1    | 1           | 1            | 1         | 10        | 1   | radio                 | black       | S     |
| 2    | 1           | 1            | 2         | 20        | 1   | radio                 | black       | S     |
| 3    | 1           | 2            | 1         | 30        | 1   | radio                 | black       | S     |
| 4    | 1           | 2            | 2         | 40        | 1   | radio                 | black       | S     |
+------+-------------+--------------+-----------+-----------+-----+-----------------------+-------------+-------+
> select sid, p.name, s.quantity
>     from sales s, product p
>     where
>         s.product_id = p.id and p.size = 'S'
>     order by sid;
+------+-----------------------+-----------+
| SID  |         NAME          | QUANTITY  |
+------+-----------------------+-----------+
| 1    | radio                 | 10        |
| 2    | radio                 | 20        |
| 3    | radio                 | 30        |
| 4    | radio                 | 40        |
+------+-----------------------+-----------+
> select sid, st.city
>     from sales s, state st, customer c
>     where
>         s.customer = c.id and
>         c.city = st.city and st.state = 'New York'
>     order by sid;
+------+-----------------------+
| SID  |         CITY          |
+------+-----------------------+
| 2    | New York City         |
| 4    | New York City         |
| 6    | New York City         |
| 8    | New York City         |
+------+-----------------------+
> select sid, st.state
>     from sales s, state st, customer c
>     where
>         s.customer = c.id and
>         c.city = st.city and st.state = 'New York'
>     order by sid;
+------+-----------------------+
| SID  |         STATE         |
+------+-----------------------+
| 2    | New York              |
| 4    | New York              |
| 6    | New York              |
| 8    | New York              |
+------+-----------------------+
> select sid
>     from sales s, state st, customer c, t
>     where
>         s.customer = c.id and
>         c.city = st.city and st.state = 'New York' and
>         c.city = t.c
>     order by sid;
+------+
| SID  |
+------+
+------+
> 
> !quit
