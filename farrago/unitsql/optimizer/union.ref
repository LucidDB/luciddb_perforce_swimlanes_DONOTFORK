> -- $Id$
> -- Test UNION queries
> 
> set schema 'sales';
> 
> -- force usage of Java implementation
> alter system set "calcVirtualMachine" = 'CALCVM_JAVA';
> 
> -- test UNION without duplicates
> select * from 
> (select name from emps union select name from depts)
>  order by 1;
+------------+
|    NAME    |
+------------+
| Accounts   |
| Eric       |
| Fred       |
| John       |
| Marketing  |
| Sales      |
| Wilma      |
+------------+
> 
> -- test UNION ALL without duplicates
> select * from 
> (select name from emps union all select name from depts)
>  order by 1;
+------------+
|    NAME    |
+------------+
| Accounts   |
| Eric       |
| Fred       |
| John       |
| Marketing  |
| Sales      |
| Wilma      |
+------------+
> 
> -- test UNION with duplicates
> select * from 
> (select name from depts union select name from depts)
>  order by 1;
+------------+
|    NAME    |
+------------+
| Accounts   |
| Marketing  |
| Sales      |
+------------+
> 
> -- test UNION ALL with duplicates
> select * from 
> (select name from depts union all select name from depts)
>  order by 1;
+------------+
|    NAME    |
+------------+
| Accounts   |
| Accounts   |
| Marketing  |
| Marketing  |
| Sales      |
| Sales      |
+------------+
> 
> -- make sure the time function returns the same value; note that this test
> -- isn't repeated for Fennel calc below because Fennel calc doesn't guarantee
> -- that time functions return the same value if invoked multiple times within a
> -- statement
> select count(*) from
>     (select current_timestamp from emps union
>         select current_timestamp from depts);
+---------+
| EXPR$0  |
+---------+
| 1       |
+---------+
> 
> -- verify plans
> !set outputformat csv
> 
> explain plan for
> select * from 
> (select name from emps union select name from depts)
>  order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    LhxAggRel(groupCount=[1])'
'      IteratorToFennelConverter'
'        IterConcatenateRel(all=[true])'
'          FennelToIteratorConverter'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
'          FennelToIteratorConverter'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> explain plan for
> select * from 
> (select name from emps union select name from depts);
'column0'
'FennelToIteratorConverter'
'  LhxAggRel(groupCount=[1])'
'    IteratorToFennelConverter'
'      IterConcatenateRel(all=[true])'
'        FennelToIteratorConverter'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
'        FennelToIteratorConverter'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> explain plan for
> select * from 
> (select name from emps union all select name from depts)
>  order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    IteratorToFennelConverter'
'      IterConcatenateRel(all=[true])'
'        FennelToIteratorConverter'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
'        FennelToIteratorConverter'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> explain plan for
> select * from 
> (select name from emps union all select name from depts);
'column0'
'IterConcatenateRel(all=[true])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> -- repeat everything, this time with Fennel implementation
> alter system set "calcVirtualMachine" = 'CALCVM_FENNEL';
> 
> !set outputformat table
> 
> -- test UNION without duplicates
> select * from 
> (select name from emps union select name from depts)
>  order by 1;
+------------+
|    NAME    |
+------------+
| Accounts   |
| Eric       |
| Fred       |
| John       |
| Marketing  |
| Sales      |
| Wilma      |
+------------+
> 
> -- test UNION ALL without duplicates
> select * from 
> (select name from emps union all select name from depts)
>  order by 1;
+------------+
|    NAME    |
+------------+
| Accounts   |
| Eric       |
| Fred       |
| John       |
| Marketing  |
| Sales      |
| Wilma      |
+------------+
> 
> -- test UNION with duplicates
> select * from 
> (select name from depts union select name from depts)
>  order by 1;
+------------+
|    NAME    |
+------------+
| Accounts   |
| Marketing  |
| Sales      |
+------------+
> 
> -- test UNION ALL with duplicates
> select * from 
> (select name from depts union all select name from depts)
>  order by 1;
+------------+
|    NAME    |
+------------+
| Accounts   |
| Accounts   |
| Marketing  |
| Marketing  |
| Sales      |
| Sales      |
+------------+
> 
> -- verify plans
> !set outputformat csv
> 
> explain plan for
> select * from 
> (select name from emps union select name from depts)
>  order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    LhxAggRel(groupCount=[1])'
'      FennelMergeRel'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> explain plan for
> select * from 
> (select name from emps union select name from depts);
'column0'
'FennelToIteratorConverter'
'  LhxAggRel(groupCount=[1])'
'    FennelMergeRel'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> explain plan for
> select * from 
> (select name from emps union all select name from depts)
>  order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelMergeRel'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> explain plan for
> select * from 
> (select name from emps union all select name from depts);
'column0'
'FennelToIteratorConverter'
'  FennelMergeRel'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> explain plan for
> insert into depts(name)
> select name from emps union all select name from depts;
'column0'
'FennelToIteratorConverter'
'  FtrsTableModificationRel(table=[[LOCALDB, SALES, DEPTS]], operation=[INSERT], updateColumnList=[[]], flattened=[true])'
'    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[CAST($t0):INTEGER NOT NULL], DEPTNO=[$t2], NAME=[$t1])'
'      FennelMergeRel'
'        FennelCalcRel(expr#0=[{inputs}], expr#1=[null], DEPTNO=[$t1], NAME=[$t0])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
'        FennelCalcRel(expr#0=[{inputs}], expr#1=[null], DEPTNO=[$t1], NAME=[$t0])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> 
> !quit
