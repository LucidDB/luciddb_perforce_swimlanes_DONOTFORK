> -- $Id$
> -- Test pushdown of projections.  This test primarily tests projections 
> -- involving views.  Other tests do a fairly good job testing projections
> -- on base tables.
> 
> create schema pp;
> set schema 'pp';
> 
> -- force usage of Fennel calculator
> alter system set "calcVirtualMachine" = 'CALCVM_FENNEL';
> 
> --------------------------------------------------------------------------
> -- test a few queries on FTRS first, but the bulk of the tests are against
> -- LCS
> --------------------------------------------------------------------------
> create view vemps(eno, name, deptno, doubleage)
>     as select empno, upper(name), deptno, age * 2 from sales.emps;
> create view vdepts(name, deptno)
>     as select upper(name), deptno from sales.depts;
> 
> !set outputformat csv
> explain plan for
>     select ve.name, ve.doubleage, vd.name
>         from vemps ve, vdepts vd
>         where ve.deptno = vd.deptno;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 2, 3]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, INTEGER DOUBLEAGE, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME0) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'      FennelCalcRel(expr#0..2=[{inputs}], expr#3=[UPPER($t0)], expr#4=[2], expr#5=[*($t2, $t4)], NAME=[$t3], DEPTNO=[$t1], DOUBLEAGE=[$t5])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2, 6]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])'
'      FennelRenameRel(fieldNames=[[NAME, DEPTNO]])'
'        FennelCalcRel(expr#0..1=[{inputs}], expr#2=[UPPER($t1)], EXPR$0=[$t2], DEPTNO=[$t0])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], preserveOrder=[false])'
> explain plan for
>     select lower(ve.name), ve.doubleage/2
>         from vemps ve, vdepts vd
>         where ve.deptno = vd.deptno;
'column0'
'FennelToIteratorConverter'
'  FennelCalcRel(expr#0..3=[{inputs}], expr#4=[LOWER($t0)], expr#5=[2], expr#6=[/($t2, $t5)], EXPR$0=[$t4], EXPR$1=[$t6])'
'    FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], uniqueKey=[true], preserveOrder=[false], outer=[false], inputKeyProj=[[1]], inputJoinProj=[[0, 1, 2]], inputDirectiveProj=[[]])'
'      FennelCalcRel(expr#0..2=[{inputs}], expr#3=[UPPER($t0)], expr#4=[2], expr#5=[*($t2, $t4)], NAME=[$t3], DEPTNO=[$t1], DOUBLEAGE=[$t5])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2, 6]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])'
> explain plan for
>     select count(*) from vemps;
'column0'
'FennelToIteratorConverter'
'  FennelAggRel(groupCount=[0], EXPR$0=[COUNT()])'
'    FennelCalcRel(expr#0=[{inputs}], expr#1=[true], $f0=[$t1])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
>         
> !set outputformat table
> select ve.name, ve.doubleage, vd.name
>     from vemps ve, vdepts vd
>     where ve.deptno = vd.deptno order by 1;
+--------+------------+------------+
|  NAME  | DOUBLEAGE  |    NAME    |
+--------+------------+------------+
| ERIC   | 160        | MARKETING  |
| FRED   | 50         | SALES      |
| WILMA  | 100        | MARKETING  |
+--------+------------+------------+
> select lower(ve.name), ve.doubleage/2
>     from vemps ve, vdepts vd
>     where ve.deptno = vd.deptno order by 1;
+---------+---------+
| EXPR$0  | EXPR$1  |
+---------+---------+
| eric    | 80      |
| fred    | 25      |
| wilma   | 50      |
+---------+---------+
> select count(*) from vemps;
+---------+
| EXPR$0  |
+---------+
| 4       |
+---------+
> 
> --------------------------------------------------------------------
> -- run a query through Volcano to exercise the rules more thoroughly
> --------------------------------------------------------------------
> alter session implementation add jar sys_boot.sys_boot.volcano_plugin;
> !set outputformat csv
> explain plan for
>     select lower(ve.name), ve.doubleage/2
>         from vemps ve, vdepts vd
>         where ve.deptno = vd.deptno;
'column0'
'FennelToIteratorConverter'
'  FennelCalcRel(expr#0..3=[{inputs}], expr#4=[LOWER($t0)], expr#5=[2], expr#6=[/($t2, $t5)], EXPR$0=[$t4], EXPR$1=[$t6])'
'    FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$DEPTS], uniqueKey=[true], preserveOrder=[false], outer=[false], inputKeyProj=[[1]], inputJoinProj=[[0, 1, 2]], inputDirectiveProj=[[]])'
'      FennelCalcRel(expr#0..2=[{inputs}], expr#3=[UPPER($t0)], expr#4=[2], expr#5=[*($t2, $t4)], NAME=[$t3], DEPTNO=[$t1], DOUBLEAGE=[$t5])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2, 6]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])'
> 
> drop view vemps;
> drop view vdepts;
> 
> -----------
> -- now, LCS
> -----------
> alter session implementation set jar sys_boot.sys_boot.luciddb_plugin;
> 
> create table lcsemps(
>     empno int, name varchar(12), deptno int, gender char(1), city varchar(12),
>     empid int, age int);
> insert into lcsemps
>     select empno, name, deptno, gender, city, empid, age from sales.emps;
> create table lcsdepts(deptno int, name varchar(12));
> insert into lcsdepts select * from sales.depts;
> 
> create view vemps(eno, name, deptno, doubleage)
>     as select empno, upper(name), deptno, age * 2 from lcsemps;
> create view vdepts(name, deptno)
>     as select upper(name), deptno from lcsdepts;
> create view vuemps(eno, name, deptno, age) as
>     select * from vemps union all
>         select empno, name, deptno, age from sales.emps;
> create view vunion(id, name, number) as
>     select 'emps', name, eno from vemps union all
>     select 'depts', name, deptno from vdepts;
> 
> explain plan for
>     select ve.name, ve.doubleage, vd.name
>         from vemps ve, vdepts vd
>         where ve.deptno = vd.deptno;
'column0'
'FennelToIteratorConverter'
'  FennelCalcRel(expr#0..4=[{inputs}], expr#5=[UPPER($t0)], expr#6=[2], expr#7=[*($t2, $t6)], expr#8=[UPPER($t4)], NAME=[$t5], DOUBLEAGE=[$t7], NAME0=[$t8])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'      LcsRowScanRel(table=[[LOCALDB, PP, LCSEMPS]], projection=[[1, 2, 6]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSEMPS$AGE, SYS$CLUSTERED_INDEX$LCSEMPS$DEPTNO, SYS$CLUSTERED_INDEX$LCSEMPS$NAME]])'
'      LcsRowScanRel(table=[[LOCALDB, PP, LCSDEPTS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSDEPTS$DEPTNO, SYS$CLUSTERED_INDEX$LCSDEPTS$NAME]])'
> explain plan for
>     select lower(ve.name), ve.doubleage/2
>         from vemps ve, vdepts vd
>         where ve.deptno = vd.deptno;
'column0'
'FennelToIteratorConverter'
'  FennelCalcRel(expr#0..3=[{inputs}], expr#4=[UPPER($t0)], expr#5=[LOWER($t4)], expr#6=[2], expr#7=[*($t2, $t6)], expr#8=[CAST($t7):DOUBLE], expr#9=[CAST($t6):DOUBLE NOT NULL], expr#10=[/($t8, $t9)], expr#11=[1E6], expr#12=[*($t10, $t11)], expr#13=[CAST($t12):BIGINT], expr#14=[Reinterpret($t13)], EXPR$0=[$t5], EXPR$1=[$t14])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'      LcsRowScanRel(table=[[LOCALDB, PP, LCSEMPS]], projection=[[1, 2, 6]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSEMPS$AGE, SYS$CLUSTERED_INDEX$LCSEMPS$DEPTNO, SYS$CLUSTERED_INDEX$LCSEMPS$NAME]])'
'      LcsRowScanRel(table=[[LOCALDB, PP, LCSDEPTS]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSDEPTS$DEPTNO]])'
> explain plan for
>     select name from vuemps where eno = 110;
'column0'
'FennelToIteratorConverter'
'  FennelMergeRel'
'    FennelCalcRel(expr#0=[{inputs}], expr#1=[UPPER($t0)], expr#2=[CAST($t1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], NAME=[$t2])'
'      LcsRowScanRel(table=[[LOCALDB, PP, LCSEMPS]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSEMPS$EMPNO, SYS$CLUSTERED_INDEX$LCSEMPS$NAME]], residual columns=[[0]])'
'        FennelValuesRel(tuples=[[{ '[', 110, ']', 110 }]])'
'    FennelReshapeRel(projection=[[1]], filterOp=[COMP_EQ], filterOrdinals=[[0]], filterTuple=[[110]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME) NOT NULL])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1]], index=[EMPS_UX], preserveOrder=[false])'
> explain plan for select id, lcs_rid(name) from vunion;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[ID, EXPR$1]])'
'    FennelMergeRel'
'      FennelCalcRel(expr#0=[{inputs}], expr#1=['emps'], expr#2=[CAST($t1):VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], EXPR$0=[$t2], LCS_RID=[$t0])'
'        LcsRowScanRel(table=[[LOCALDB, PP, LCSEMPS]], projection=[[LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSEMPS$AGE]])'
'      FennelCalcRel(expr#0=[{inputs}], expr#1=['depts'], expr#2=[CAST($t1):VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], EXPR$0=[$t2], LCS_RID=[$t0])'
'        LcsRowScanRel(table=[[LOCALDB, PP, LCSDEPTS]], projection=[[LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSDEPTS$DEPTNO]])'
> explain plan for select id, lcs_rid(name) from vunion where number in (20, 120);
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[ID, EXPR$1]])'
'    FennelMergeRel'
'      FennelCalcRel(expr#0=[{inputs}], expr#1=['emps'], expr#2=[CAST($t1):VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], EXPR$0=[$t2], LCS_RID=[$t0])'
'        LcsRowScanRel(table=[[LOCALDB, PP, LCSEMPS]], projection=[[LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSEMPS$EMPNO]], residual columns=[[0]])'
'          FennelValuesRel(tuples=[[{ '[', 20, ']', 20 }, { '[', 120, ']', 120 }]])'
'      FennelCalcRel(expr#0=[{inputs}], expr#1=['depts'], expr#2=[CAST($t1):VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], EXPR$0=[$t2], LCS_RID=[$t0])'
'        LcsRowScanRel(table=[[LOCALDB, PP, LCSDEPTS]], projection=[[LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSDEPTS$DEPTNO]], residual columns=[[0]])'
'          FennelValuesRel(tuples=[[{ '[', 20, ']', 20 }, { '[', 120, ']', 120 }]])'
> explain plan for select count(*) from vuemps;
'column0'
'FennelToIteratorConverter'
'  FennelAggRel(groupCount=[0], EXPR$0=[COUNT()])'
'    FennelCalcRel(expr#0=[{inputs}], expr#1=[true], $f0=[$t1])'
'      FennelMergeRel'
'        FennelRenameRel(fieldNames=[[ENO]])'
'          LcsRowScanRel(table=[[LOCALDB, PP, LCSEMPS]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSEMPS$EMPNO]])'
'        FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(INTEGER ENO) NOT NULL])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
> explain plan for select count(*) from vunion;
'column0'
'FennelToIteratorConverter'
'  FennelAggRel(groupCount=[0], EXPR$0=[COUNT()])'
'    FennelCalcRel(expr#0=[{inputs}], expr#1=[true], $f0=[$t1])'
'      FennelMergeRel'
'        FennelCalcRel(expr#0=[{inputs}], expr#1=['emps'], expr#2=[CAST($t1):VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], EXPR$0=[$t2])'
'          LcsRowScanRel(table=[[LOCALDB, PP, LCSEMPS]], projection=[[LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSEMPS$AGE]])'
'        FennelCalcRel(expr#0=[{inputs}], expr#1=['depts'], expr#2=[CAST($t1):VARCHAR(5) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], EXPR$0=[$t2])'
'          LcsRowScanRel(table=[[LOCALDB, PP, LCSDEPTS]], projection=[[LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSDEPTS$DEPTNO]])'
>         
> !set outputformat table
> select ve.name, ve.doubleage, vd.name
>     from vemps ve, vdepts vd
>     where ve.deptno = vd.deptno order by 1;
+--------+------------+------------+
|  NAME  | DOUBLEAGE  |    NAME    |
+--------+------------+------------+
| ERIC   | 160        | MARKETING  |
| FRED   | 50         | SALES      |
| WILMA  | 100        | MARKETING  |
+--------+------------+------------+
> select lower(ve.name), ve.doubleage
>     from vemps ve, vdepts vd
>     where ve.deptno = vd.deptno order by 1;
+---------+------------+
| EXPR$0  | DOUBLEAGE  |
+---------+------------+
| eric    | 160        |
| fred    | 50         |
| wilma   | 100        |
+---------+------------+
> select name from vuemps where eno = 110 order by 1;
+-------+
| NAME  |
+-------+
| ERIC  |
| Eric  |
| JOHN  |
| John  |
+-------+
> select id, lcs_rid(name) from vunion order by 1, 2;
+--------+---------+
|   ID   | EXPR$1  |
+--------+---------+
| depts  | 0       |
| depts  | 1       |
| depts  | 2       |
| emps   | 0       |
| emps   | 1       |
| emps   | 2       |
| emps   | 3       |
+--------+---------+
> select id, lcs_rid(name) from vunion where number in (20, 120) order by 1;
+--------+---------+
|   ID   | EXPR$1  |
+--------+---------+
| depts  | 1       |
| emps   | 2       |
+--------+---------+
> select count(*) from vuemps;
+---------+
| EXPR$0  |
+---------+
| 8       |
+---------+
> select count(*) from vunion;
+---------+
| EXPR$0  |
+---------+
| 7       |
+---------+
> 
> create table t1(t1a int, t1b int, t1c int);
> create table t2(t2a int, t2b int, t2c int, t2d int);
> create table t3(t3a int, t3b int, t3c int, t3d int, t3e int);
> insert into t1 values(1, 11, 12);
> insert into t1 values(2, 21, 22);
> insert into t1 values(3, 31, 32);
> insert into t1 values(4, 41, 42);
> insert into t1 values(5, 51, 52);
> insert into t2 values(1, 101, 102, 103);
> insert into t2 values(2, 201, 202, 203);
> insert into t2 values(3, 301, 302, 303);
> insert into t2 values(4, 401, 402, 403);
> insert into t2 values(5, 501, 502, 503);
> insert into t3 values(1, 1001, 1002, 1003, 1004);
> insert into t3 values(2, 2001, 2002, 2003, 2004);
> insert into t3 values(3, 3001, 3002, 3003, 3004);
> insert into t3 values(4, 4001, 4002, 4003, 4004);
> insert into t3 values(5, 5001, 5002, 5003, 5004);
> create view vjoin(vja, vjb, vjc) as
>     select t1.t1b - 10, t2.t2c - 100, t3.t3d - 1000
>         from t1, t2, t3 where t1.t1a = t2.t2a and t2.t2a = t3.t3a;
> 
> select * from vjoin order by vja;
+------+------+-------+
| VJA  | VJB  |  VJC  |
+------+------+-------+
| 1    | 2    | 3     |
| 11   | 102  | 1003  |
| 21   | 202  | 2003  |
| 31   | 302  | 3003  |
| 41   | 402  | 4003  |
+------+------+-------+
> select vjc/1000, vja/10, vjb/100 from vjoin order by 1;
+-----------+-----------+-----------+
|  EXPR$0   |  EXPR$1   |  EXPR$2   |
+-----------+-----------+-----------+
| 0.003000  | 0.100000  | 0.020000  |
| 1.003000  | 1.100000  | 1.020000  |
| 2.003000  | 2.100000  | 2.020000  |
| 3.003000  | 3.100000  | 3.020000  |
| 4.003000  | 4.100000  | 4.020000  |
+-----------+-----------+-----------+
> select count(*) from vjoin;
+---------+
| EXPR$0  |
+---------+
| 5       |
+---------+
> select lcs_rid(vja) from vjoin order by 1;
+---------+
| EXPR$0  |
+---------+
| 0       |
| 1       |
| 2       |
| 3       |
| 4       |
+---------+
> select 2*vjb, lcs_rid(vja) from vjoin order by 2;
+---------+---------+
| EXPR$0  | EXPR$1  |
+---------+---------+
| 4       | 0       |
| 204     | 1       |
| 404     | 2       |
| 604     | 3       |
| 804     | 4       |
+---------+---------+
> 
> !set outputformat csv
> explain plan for select * from vjoin order by vja;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelCalcRel(expr#0..4=[{inputs}], expr#5=[10], expr#6=[-($t0, $t5)], expr#7=[100], expr#8=[-($t2, $t7)], expr#9=[1000], expr#10=[-($t4, $t9)], VJA=[$t6], VJB=[$t8], VJC=[$t10])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'        FennelReshapeRel(projection=[[1, 2, 3]], outputRowType=[RecordType(INTEGER T1B, INTEGER T2A, INTEGER T2C) NOT NULL])'
'          LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'            LcsRowScanRel(table=[[LOCALDB, PP, T1]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$T1A, SYS$CLUSTERED_INDEX$T1$T1B]])'
'            LcsRowScanRel(table=[[LOCALDB, PP, T2]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$T2$T2A, SYS$CLUSTERED_INDEX$T2$T2C]])'
'        LcsRowScanRel(table=[[LOCALDB, PP, T3]], projection=[[0, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$T3$T3A, SYS$CLUSTERED_INDEX$T3$T3D]])'
> explain plan for select vjc/1000, vja/10, vjb/100 from vjoin order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelCalcRel(expr#0..4=[{inputs}], expr#5=[1000], expr#6=[-($t4, $t5)], expr#7=[CAST($t6):DOUBLE], expr#8=[CAST($t5):DOUBLE NOT NULL], expr#9=[/($t7, $t8)], expr#10=[1E6], expr#11=[*($t9, $t10)], expr#12=[CAST($t11):BIGINT], expr#13=[Reinterpret($t12)], expr#14=[10], expr#15=[-($t0, $t14)], expr#16=[CAST($t15):DOUBLE], expr#17=[CAST($t14):DOUBLE NOT NULL], expr#18=[/($t16, $t17)], expr#19=[*($t18, $t10)], expr#20=[CAST($t19):BIGINT], expr#21=[Reinterpret($t20)], expr#22=[100], expr#23=[-($t2, $t22)], expr#24=[CAST($t23):DOUBLE], expr#25=[CAST($t22):DOUBLE NOT NULL], expr#26=[/($t24, $t25)], expr#27=[*($t26, $t10)], expr#28=[CAST($t27):BIGINT], expr#29=[Reinterpret($t28)], EXPR$0=[$t13], EXPR$1=[$t21], EXPR$2=[$t29])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'        FennelReshapeRel(projection=[[1, 2, 3]], outputRowType=[RecordType(INTEGER T1B, INTEGER T2A, INTEGER T2C) NOT NULL])'
'          LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'            LcsRowScanRel(table=[[LOCALDB, PP, T1]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$T1A, SYS$CLUSTERED_INDEX$T1$T1B]])'
'            LcsRowScanRel(table=[[LOCALDB, PP, T2]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$T2$T2A, SYS$CLUSTERED_INDEX$T2$T2C]])'
'        LcsRowScanRel(table=[[LOCALDB, PP, T3]], projection=[[0, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$T3$T3A, SYS$CLUSTERED_INDEX$T3$T3D]])'
> explain plan for select count(*) from vjoin;
'column0'
'FennelToIteratorConverter'
'  FennelAggRel(groupCount=[0], EXPR$0=[COUNT()])'
'    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t2])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'        FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER T2A) NOT NULL])'
'          LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'            LcsRowScanRel(table=[[LOCALDB, PP, T1]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$T1A]])'
'            LcsRowScanRel(table=[[LOCALDB, PP, T2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T2$T2A]])'
'        LcsRowScanRel(table=[[LOCALDB, PP, T3]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T3$T3A]])'
> explain plan for select lcs_rid(vja) from vjoin order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(BIGINT EXPR$0) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'        FennelReshapeRel(projection=[[1, 2]], outputRowType=[RecordType(BIGINT LCS_RID, INTEGER T2A) NOT NULL])'
'          LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'            LcsRowScanRel(table=[[LOCALDB, PP, T1]], projection=[[0, LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$T1A]])'
'            LcsRowScanRel(table=[[LOCALDB, PP, T2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T2$T2A]])'
'        LcsRowScanRel(table=[[LOCALDB, PP, T3]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T3$T3A]])'
> explain plan for select 2*vjb, lcs_rid(vja) from vjoin order by 2;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[1]], discardDuplicates=[false])'
'    FennelCalcRel(expr#0..3=[{inputs}], expr#4=[2], expr#5=[100], expr#6=[-($t2, $t5)], expr#7=[*($t4, $t6)], EXPR$0=[$t7], EXPR$1=[$t0])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'        FennelReshapeRel(projection=[[1, 2, 3]], outputRowType=[RecordType(BIGINT LCS_RID, INTEGER T2A, INTEGER T2C) NOT NULL])'
'          LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'            LcsRowScanRel(table=[[LOCALDB, PP, T1]], projection=[[0, LCS_RID]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$T1A]])'
'            LcsRowScanRel(table=[[LOCALDB, PP, T2]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$T2$T2A, SYS$CLUSTERED_INDEX$T2$T2C]])'
'        LcsRowScanRel(table=[[LOCALDB, PP, T3]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T3$T3A]])'
> 
> -- negative case -- can't push project past a distinct union
> create view vudemps(eno, name, deptno, age) as
>     select * from vemps union
>         select empno, name, deptno, age from sales.emps;
> explain plan for select count(*) from vudemps;
'column0'
'FennelToIteratorConverter'
'  FennelAggRel(groupCount=[0], EXPR$0=[COUNT()])'
'    FennelCalcRel(expr#0..3=[{inputs}], expr#4=[true], $f0=[$t4])'
'      LhxAggRel(groupCount=[4])'
'        FennelMergeRel'
'          FennelCalcRel(expr#0..3=[{inputs}], expr#4=[UPPER($t1)], expr#5=[2], expr#6=[*($t3, $t5)], expr#7=[CAST($t4):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], ENO=[$t0], NAME=[$t7], DEPTNO=[$t2], DOUBLEAGE=[$t6])'
'            LcsRowScanRel(table=[[LOCALDB, PP, LCSEMPS]], projection=[[0, 1, 2, 6]], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSEMPS$AGE, SYS$CLUSTERED_INDEX$LCSEMPS$DEPTNO, SYS$CLUSTERED_INDEX$LCSEMPS$EMPNO, SYS$CLUSTERED_INDEX$LCSEMPS$NAME]])'
'          FennelReshapeRel(projection=[[0, 1, 2, 3]], outputRowType=[RecordType(INTEGER ENO, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NAME, INTEGER DEPTNO, INTEGER DOUBLEAGE) NOT NULL])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1, 2, 6]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$EMPS], preserveOrder=[false])'
> !set outputformat table
> select count(*) from vudemps;
+---------+
| EXPR$0  |
+---------+
| 8       |
+---------+
> 
> !quit
