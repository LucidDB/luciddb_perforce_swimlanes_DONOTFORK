0: jdbc:farrago:> -- $Id$
0: jdbc:farrago:> -- Test aggregate queries
0: jdbc:farrago:> 
0: jdbc:farrago:> set schema 'sales';
0: jdbc:farrago:> 
0: jdbc:farrago:> -- force usage of Fennel calculator
0: jdbc:farrago:> alter system set "calcVirtualMachine" = 'CALCVM_FENNEL';
0: jdbc:farrago:> 
0: jdbc:farrago:> --------------------------
0: jdbc:farrago:> -- Test Sort Aggreagtes --
0: jdbc:farrago:> --------------------------
0: jdbc:farrago:> alter session implementation set default;
0: jdbc:farrago:> !set outputformat table
0: jdbc:farrago:> 
0: jdbc:farrago:> select count(*) from depts;
+---------+
| EXPR$0  |
+---------+
| 3       |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select count(city) from emps;
+---------+
| EXPR$0  |
+---------+
| 2       |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select count(city) from emps where empno > 100000;
+---------+
| EXPR$0  |
+---------+
| 0       |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select sum(deptno) from depts;
+---------+
| EXPR$0  |
+---------+
| 60      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select sum(deptno) from depts where deptno > 100000;
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select max(deptno) from depts;
+---------+
| EXPR$0  |
+---------+
| 30      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select min(deptno) from depts;
+---------+
| EXPR$0  |
+---------+
| 10      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select avg(deptno) from depts;
+---------+
| EXPR$0  |
+---------+
| 20      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select min(TRUE) from emps group by deptno;
+---------+
| EXPR$0  |
+---------+
| true    |
| true    |
| true    |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select max(FALSE) from depts;
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> ------------
0: jdbc:farrago:> -- group bys
0: jdbc:farrago:> ------------
0: jdbc:farrago:> 
0: jdbc:farrago:> select deptno, count(*) from emps group by deptno;
+---------+---------+
| DEPTNO  | EXPR$1  |
+---------+---------+
| 10      | 1       |
| 20      | 2       |
| 40      | 1       |
+---------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- Issue the same statement again to make sure SortedAggStream
0: jdbc:farrago:> -- is in good state when reopened
0: jdbc:farrago:> select deptno, count(*) from emps group by deptno;
+---------+---------+
| DEPTNO  | EXPR$1  |
+---------+---------+
| 10      | 1       |
| 20      | 2       |
| 40      | 1       |
+---------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select d.name, count(*) from emps e, depts d
. . . . . . . . >     where d.deptno = e.deptno group by d.name;
+------------+---------+
|    NAME    | EXPR$1  |
+------------+---------+
| Marketing  | 2       |
| Sales      | 1       |
+------------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- Test group by key where key value could be NULL
0: jdbc:farrago:> select deptno, gender, min(age), max(age) from emps
. . . . . . . . >     group by deptno, gender;
+---------+---------+---------+---------+
| DEPTNO  | GENDER  | EXPR$2  | EXPR$3  |
+---------+---------+---------+---------+
| 10      |         | 25      | 25      |
| 20      | F       | 50      | 50      |
| 20      | M       | 80      | 80      |
| 40      | M       |         |         |
+---------+---------+---------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select sum(age) from emps group by deptno;
+---------+
| EXPR$0  |
+---------+
| 25      |
| 130     |
|         |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- Test where input stream is empty
0: jdbc:farrago:> select deptno, count(*) from emps where deptno < 0 group by deptno;
+---------+---------+
| DEPTNO  | EXPR$1  |
+---------+---------+
+---------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> -- verify plans
0: jdbc:farrago:> !set outputformat csv
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select count(*) from depts;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[EXPR$0]])'
'    FennelAggRel(groupCount=[0], agg#0=[COUNT()])'
'      FennelCalcRel(expr#0=[{inputs}], expr#1=[true], $f0=[$t1])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select count(city) from emps;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[EXPR$0]])'
'    FennelAggRel(groupCount=[0], agg#0=[COUNT(0)])'
'      FennelRenameRel(fieldNames=[[$f0]])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[4]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select sum(deptno) from depts;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[EXPR$0]])'
'    FennelAggRel(groupCount=[0], agg#0=[SUM(0)])'
'      FennelRenameRel(fieldNames=[[$f0]])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select max(deptno) from depts;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[EXPR$0]])'
'    FennelAggRel(groupCount=[0], agg#0=[MAX(0)])'
'      FennelRenameRel(fieldNames=[[$f0]])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select min(deptno) from depts;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[EXPR$0]])'
'    FennelAggRel(groupCount=[0], agg#0=[MIN(0)])'
'      FennelRenameRel(fieldNames=[[$f0]])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select avg(deptno) from depts;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[EXPR$0]])'
'    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[/($t0, $t1)], expr#3=[CAST($t2):INTEGER], $f0=[$t3])'
'      FennelAggRel(groupCount=[0], agg#0=[SUM(0)], agg#1=[COUNT(0)])'
'        FennelRenameRel(fieldNames=[[$f0]])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[0]], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select deptno,max(name) from sales.emps group by deptno;
'column0'
'ProjectRel(DEPTNO=[$0], EXPR$1=[$1])'
'  AggregateRel(groupCount=[1], agg#0=[MAX(1)])'
'    ProjectRel($f0=[$2], $f1=[$1])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -----------------------------
0: jdbc:farrago:> -- verify plans for group bys
0: jdbc:farrago:> -----------------------------
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for 
. . . . . . . . > select deptno, count(*) from emps group by deptno;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[DEPTNO, EXPR$1]])'
'    FennelAggRel(groupCount=[1], agg#0=[COUNT()])'
'      FennelSortRel(key=[[0]], discardDuplicates=[false])'
'        FennelRenameRel(fieldNames=[[$f0]])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select d.name, count(*) from emps e, depts d
. . . . . . . . >     where d.deptno = e.deptno group by d.name;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[NAME, EXPR$1]])'
'    FennelAggRel(groupCount=[1], agg#0=[COUNT()])'
'      FennelSortRel(key=[[0]], discardDuplicates=[false])'
'        FennelCalcRel(expr#0..2=[{inputs}], expr#3=[=($t1, $t0)], $f0=[$t2], $condition=[$t3])'
'          FennelCartesianProductRel(leftouterjoin=[false])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'            FennelBufferRel(inMemory=[false], multiPass=[true])'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select deptno, gender, min(age), max(age) from emps
. . . . . . . . >     group by deptno, gender;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[DEPTNO, GENDER, EXPR$2, EXPR$3]])'
'    FennelAggRel(groupCount=[2], agg#0=[MIN(2)], agg#1=[MAX(2)])'
'      FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'        FennelRenameRel(fieldNames=[[$f0, $f1, $f2]])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2, 3, 6]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select sum(age) from emps group by deptno;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER EXPR$0) NOT NULL])'
'    FennelAggRel(groupCount=[1], agg#0=[SUM(1)])'
'      FennelSortRel(key=[[0]], discardDuplicates=[false])'
'        FennelRenameRel(fieldNames=[[$f0, $f1]])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2, 6]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> --------------------------
0: jdbc:farrago:> -- Test Hash Aggreagtes --
0: jdbc:farrago:> --------------------------
0: jdbc:farrago:> alter system set "calcVirtualMachine" = 'CALCVM_JAVA';
0: jdbc:farrago:> call sys_boot.mgmt.flush_code_cache();
0: jdbc:farrago:> alter system set "calcVirtualMachine" = 'CALCVM_FENNEL';
0: jdbc:farrago:> alter session implementation set jar sys_boot.sys_boot.luciddb_plugin;
0: jdbc:farrago:> !set outputformat table
0: jdbc:farrago:> 
0: jdbc:farrago:> ------------
0: jdbc:farrago:> -- group bys
0: jdbc:farrago:> ------------
0: jdbc:farrago:> 
0: jdbc:farrago:> select deptno, count(*) from emps group by deptno order by 1;
+---------+---------+
| DEPTNO  | EXPR$1  |
+---------+---------+
| 10      | 1       |
| 20      | 2       |
| 40      | 1       |
+---------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- Issue the same statement again to make sure SortedAggStream
0: jdbc:farrago:> -- is in good state when reopened
0: jdbc:farrago:> select deptno, count(*) from emps group by deptno order by 1;
+---------+---------+
| DEPTNO  | EXPR$1  |
+---------+---------+
| 10      | 1       |
| 20      | 2       |
| 40      | 1       |
+---------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select d.name, count(*) from emps e, depts d
. . . . . . . . >     where d.deptno = e.deptno group by d.name order by 1;
+------------+---------+
|    NAME    | EXPR$1  |
+------------+---------+
| Marketing  | 2       |
| Sales      | 1       |
+------------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- Test group by key where key value could be NULL
0: jdbc:farrago:> select deptno, gender, min(age), max(age) from emps
. . . . . . . . >     group by deptno, gender order by 1,2;
+---------+---------+---------+---------+
| DEPTNO  | GENDER  | EXPR$2  | EXPR$3  |
+---------+---------+---------+---------+
| 10      |         | 25      | 25      |
| 20      | F       | 50      | 50      |
| 20      | M       | 80      | 80      |
| 40      | M       |         |         |
+---------+---------+---------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select sum(age) from emps group by deptno order by 1;
+---------+
| EXPR$0  |
+---------+
|         |
| 25      |
| 130     |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- Test where input stream is empty
0: jdbc:farrago:> select deptno, count(*) from emps where deptno < 0 group by deptno
. . . . . . . . > order by 1;
+---------+---------+
| DEPTNO  | EXPR$1  |
+---------+---------+
+---------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- LDB-135 - exercise the case where the buffer space for the aggregate 
0: jdbc:farrago:> -- result increases, requiring a new slot to be created for an existing tuple
0: jdbc:farrago:> create table test(num integer, name varchar(20));
0: jdbc:farrago:> insert into test values(0,'B');
0: jdbc:farrago:> insert into test values(1,'D');
0: jdbc:farrago:> insert into test values(0,'AAA');
0: jdbc:farrago:> 
0: jdbc:farrago:> create table test2(dname varchar(20), num integer);
0: jdbc:farrago:> insert into test2 values('dept1', 0);
0: jdbc:farrago:> insert into test2 values('dept2', 1);
0: jdbc:farrago:> 
0: jdbc:farrago:> select test2.dname, min(test.name) from test,test2
. . . . . . . . >     where test.num = test2.num group by dname;
+--------+---------+
| DNAME  | EXPR$1  |
+--------+---------+
| dept1  | AAA     |
| dept2  | D       |
+--------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> drop table test;
0: jdbc:farrago:> drop table test2;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- verify plans
0: jdbc:farrago:> !set outputformat csv
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select deptno,max(name) from sales.emps group by deptno;
'column0'
'ProjectRel(DEPTNO=[$0], EXPR$1=[$1])'
'  AggregateRel(groupCount=[1], agg#0=[MAX(1)])'
'    ProjectRel($f0=[$2], $f1=[$1])'
'      TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -----------------------------
0: jdbc:farrago:> -- verify plans for group bys
0: jdbc:farrago:> -----------------------------
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for 
. . . . . . . . > select deptno, count(*) from emps group by deptno;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[DEPTNO, EXPR$1]])'
'    LhxAggRel(groupCount=[1], agg#0=[COUNT()])'
'      FennelRenameRel(fieldNames=[[$f0]])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select d.name, count(*) from emps e, depts d
. . . . . . . . >     where d.deptno = e.deptno group by d.name;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[NAME, EXPR$1]])'
'    LhxAggRel(groupCount=[1], agg#0=[COUNT()])'
'      FennelReshapeRel(projection=[[2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0) NOT NULL])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2]], index=[EMPS_UX], preserveOrder=[false])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select deptno, gender, min(age), max(age) from emps
. . . . . . . . >     group by deptno, gender;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[DEPTNO, GENDER, EXPR$2, EXPR$3]])'
'    LhxAggRel(groupCount=[2], agg#0=[MIN(2)], agg#1=[MAX(2)])'
'      FennelRenameRel(fieldNames=[[$f0, $f1, $f2]])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2, 3, 6]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select sum(age) from emps group by deptno;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(INTEGER EXPR$0) NOT NULL])'
'    LhxAggRel(groupCount=[1], agg#0=[SUM(1)])'
'      FennelRenameRel(fieldNames=[[$f0, $f1]])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2, 6]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> ---------------------------------------------
0: jdbc:farrago:> -- more aggregate queries, with subqueries --
0: jdbc:farrago:> ---------------------------------------------
0: jdbc:farrago:> 
0: jdbc:farrago:> alter system set "calcVirtualMachine" = 'CALCVM_JAVA';
0: jdbc:farrago:> alter session implementation set jar sys_boot.sys_boot.luciddb_plugin;
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name 
. . . . . . . . > from emps 
. . . . . . . . > group by name 
. . . . . . . . > having emps.name in ('ab', 'cd');
'column0'
'ProjectRel(NAME=[$0])'
'  FilterRel(condition=[OR(=($0, _ISO-8859-1'ab'), =($0, _ISO-8859-1'cd'))])'
'    AggregateRel(groupCount=[1])'
'      ProjectRel($f0=[$1])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name 
. . . . . . . . > from emps 
. . . . . . . . > group by name 
. . . . . . . . > having emps.name in ('ab', 'cd');
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[NAME]])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0=[{inputs}], expr#1=[_ISO-8859-1'ab'], expr#2=[=($t0, $t1)], expr#3=[_ISO-8859-1'cd'], expr#4=[=($t0, $t3)], expr#5=[OR($t2, $t4)], $f0=[$t0], $condition=[$t5])'
'        FennelToIteratorConverter'
'          LhxAggRel(groupCount=[1])'
'            FennelRenameRel(fieldNames=[[$f0]])'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name 
. . . . . . . . > from emps 
. . . . . . . . > group by name 
. . . . . . . . > having name in ('ab', 'cd');
'column0'
'ProjectRel(NAME=[$0])'
'  FilterRel(condition=[OR(=($0, _ISO-8859-1'ab'), =($0, _ISO-8859-1'cd'))])'
'    AggregateRel(groupCount=[1])'
'      ProjectRel($f0=[$1])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name 
. . . . . . . . > from emps 
. . . . . . . . > group by name 
. . . . . . . . > having name in ('ab', 'cd');
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[NAME]])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0=[{inputs}], expr#1=[_ISO-8859-1'ab'], expr#2=[=($t0, $t1)], expr#3=[_ISO-8859-1'cd'], expr#4=[=($t0, $t3)], expr#5=[OR($t2, $t4)], $f0=[$t0], $condition=[$t5])'
'        FennelToIteratorConverter'
'          LhxAggRel(groupCount=[1])'
'            FennelRenameRel(fieldNames=[[$f0]])'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select name from 
. . . . . . . . > emps group by empno, name 
. . . . . . . . > having (emps.name, emps.empno) in (('ab', 10), ('cd', 20));
'column0'
'ProjectRel(NAME=[$1])'
'  FilterRel(condition=[OR(AND(=($1, _ISO-8859-1'ab'), =($0, 10)), AND(=($1, _ISO-8859-1'cd'), =($0, 20)))])'
'    AggregateRel(groupCount=[2])'
'      ProjectRel($f0=[$0], $f1=[$1])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name from 
. . . . . . . . > emps group by empno, name 
. . . . . . . . > having (emps.name, emps.empno) in (('ab', 10), ('cd', 20));
'column0'
'IterCalcRel(expr#0..1=[{inputs}], expr#2=[_ISO-8859-1'ab'], expr#3=[=($t1, $t2)], expr#4=[10], expr#5=[=($t0, $t4)], expr#6=[AND($t3, $t5)], expr#7=[_ISO-8859-1'cd'], expr#8=[=($t1, $t7)], expr#9=[20], expr#10=[=($t0, $t9)], expr#11=[AND($t8, $t10)], expr#12=[OR($t6, $t11)], NAME=[$t1], $condition=[$t12])'
'  FennelToIteratorConverter'
'    LhxAggRel(groupCount=[2])'
'      FennelRenameRel(fieldNames=[[$f0, $f1]])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0, 1]], index=[EMPS_UX], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- this is not sql 2003 standard
0: jdbc:farrago:> -- see sql2003 part2,  7.9
0: jdbc:farrago:> -- error expected: can't find emps in subquery
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select count(*)
. . . . . . . . > from emps
. . . . . . . . > where exists (select count(*) from depts group by emps.empno);
Error: From line 4, column 51 to line 4, column 54: Table 'EMPS' not found (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select count(*)
. . . . . . . . > from emps
. . . . . . . . > group by name
. . . . . . . . > having min(emps.name)='ab';
'column0'
'ProjectRel(EXPR$0=[$1])'
'  FilterRel(condition=[=($2, _ISO-8859-1'ab')])'
'    AggregateRel(groupCount=[1], agg#0=[COUNT()], agg#1=[MIN(0)])'
'      ProjectRel($f0=[$1])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select count(*)
. . . . . . . . > from emps
. . . . . . . . > group by name
. . . . . . . . > having min(emps.name)='ab';
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1]], filterOp=[COMP_EQ], filterOrdinals=[[2]], filterTuple=[[_ISO-8859-1'ab']], outputRowType=[RecordType(BIGINT NOT NULL EXPR$0) NOT NULL])'
'    LhxAggRel(groupCount=[1], agg#0=[COUNT()], agg#1=[MIN(0)])'
'      FennelRenameRel(fieldNames=[[$f0]])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select count(*)
. . . . . . . . > from emps
. . . . . . . . > group by name
. . . . . . . . > having emps.name=(select max(name) from depts);
'column0'
'ProjectRel(EXPR$0=[$1])'
'  FilterRel(condition=[=($0, $2)])'
'    JoinRel(condition=[true], joinType=[left])'
'      AggregateRel(groupCount=[1], agg#0=[COUNT()])'
'        ProjectRel($f0=[$1])'
'          TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      ProjectRel(EXPR$0=[$0])'
'        AggregateRel(groupCount=[0], agg#0=[MAX(0)])'
'          ProjectRel($f0=[$1])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select count(*)
. . . . . . . . > from emps
. . . . . . . . > group by name
. . . . . . . . > having emps.name=(select max(name) from depts);
'column0'
'IterCalcRel(expr#0..2=[{inputs}], expr#3=[=($t0, $t2)], EXPR$0=[$t1], $condition=[$t3])'
'  FennelToIteratorConverter'
'    FennelCartesianProductRel(leftouterjoin=[true])'
'      LhxAggRel(groupCount=[1], agg#0=[COUNT()])'
'        FennelRenameRel(fieldNames=[[$f0]])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
'      FennelBufferRel(inMemory=[false], multiPass=[true])'
'        FennelRenameRel(fieldNames=[[EXPR$0]])'
'          FennelAggRel(groupCount=[0], agg#0=[MAX(0)])'
'            FennelRenameRel(fieldNames=[[$f0]])'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select count(*)
. . . . . . . . > from emps
. . . . . . . . > group by name
. . . . . . . . > having min(emps.name)=(select max(name) from depts);
'column0'
'ProjectRel(EXPR$0=[$1])'
'  FilterRel(condition=[=($2, $3)])'
'    JoinRel(condition=[true], joinType=[left])'
'      AggregateRel(groupCount=[1], agg#0=[COUNT()], agg#1=[MIN(0)])'
'        ProjectRel($f0=[$1])'
'          TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      ProjectRel(EXPR$0=[$0])'
'        AggregateRel(groupCount=[0], agg#0=[MAX(0)])'
'          ProjectRel($f0=[$1])'
'            TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select count(*)
. . . . . . . . > from emps
. . . . . . . . > group by name
. . . . . . . . > having min(emps.name)=(select max(name) from depts);
'column0'
'IterCalcRel(expr#0..2=[{inputs}], expr#3=[=($t1, $t2)], EXPR$0=[$t0], $condition=[$t3])'
'  FennelToIteratorConverter'
'    FennelCartesianProductRel(leftouterjoin=[true])'
'      FennelReshapeRel(projection=[[1, 2]], outputRowType=[RecordType(BIGINT NOT NULL $f1, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" $f2) NOT NULL])'
'        LhxAggRel(groupCount=[1], agg#0=[COUNT()], agg#1=[MIN(0)])'
'          FennelRenameRel(fieldNames=[[$f0]])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
'      FennelBufferRel(inMemory=[false], multiPass=[true])'
'        FennelRenameRel(fieldNames=[[EXPR$0]])'
'          FennelAggRel(groupCount=[0], agg#0=[MAX(0)])'
'            FennelRenameRel(fieldNames=[[$f0]])'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select count(*)
. . . . . . . . > from emps
. . . . . . . . > group by name
. . . . . . . . > having emps.name in (select name from depts);
'column0'
'ProjectRel(EXPR$0=[$1])'
'  JoinRel(condition=[=($0, $2)], joinType=[inner])'
'    AggregateRel(groupCount=[1], agg#0=[COUNT()])'
'      ProjectRel($f0=[$1])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'    AggregateRel(groupCount=[1])'
'      ProjectRel(NAME=[$1])'
'        TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select count(*)
. . . . . . . . > from emps
. . . . . . . . > group by name
. . . . . . . . > having emps.name in (select name from depts);
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(BIGINT NOT NULL EXPR$0) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[RIGHTSEMI])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], agg#0=[COUNT()])'
'        FennelRenameRel(fieldNames=[[$f0]])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select count(*)
. . . . . . . . > from emps
. . . . . . . . > group by name, empno
. . . . . . . . > having emps.name in (select name from depts);
'column0'
'ProjectRel(EXPR$0=[$2])'
'  JoinRel(condition=[=($0, $3)], joinType=[inner])'
'    AggregateRel(groupCount=[2], agg#0=[COUNT()])'
'      ProjectRel($f0=[$1], $f1=[$0])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'    AggregateRel(groupCount=[1])'
'      ProjectRel(NAME=[$1])'
'        TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select count(*)
. . . . . . . . > from emps
. . . . . . . . > group by name, empno
. . . . . . . . > having emps.name in (select name from depts);
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(BIGINT NOT NULL EXPR$0) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[RIGHTSEMI])'
'      FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
'      FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0, BIGINT NOT NULL $f2) NOT NULL])'
'        LhxAggRel(groupCount=[2], agg#0=[COUNT()])'
'          FennelRenameRel(fieldNames=[[$f0, $f1]])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 0]], index=[EMPS_UX], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select count(*)
. . . . . . . . > from emps
. . . . . . . . > group by name
. . . . . . . . > having min(emps.name) in (select name from depts);
'column0'
'ProjectRel(EXPR$0=[$1])'
'  JoinRel(condition=[=($2, $3)], joinType=[inner])'
'    AggregateRel(groupCount=[1], agg#0=[COUNT()], agg#1=[MIN(0)])'
'      ProjectRel($f0=[$1])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'    AggregateRel(groupCount=[1])'
'      ProjectRel(NAME=[$1])'
'        TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select count(*)
. . . . . . . . > from emps
. . . . . . . . > group by name
. . . . . . . . > having min(emps.name) in (select name from depts);
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(BIGINT NOT NULL EXPR$0) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[RIGHTSEMI])'
'      FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($0):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
'      FennelReshapeRel(projection=[[1, 2]], outputRowType=[RecordType(BIGINT NOT NULL $f1, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" $f2) NOT NULL])'
'        LhxAggRel(groupCount=[1], agg#0=[COUNT()], agg#1=[MIN(0)])'
'          FennelRenameRel(fieldNames=[[$f0]])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should print out better error message
0: jdbc:farrago:> -- "emps.deptno is not grouped"
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select count(*)
. . . . . . . . > from emps
. . . . . . . . > group by name
. . . . . . . . > having emps.name in 
. . . . . . . . >     (select name from depts where depts.deptno = emps.deptno);
Error: java.lang.AssertionError: Internal error: Identifier 'EMPS.DEPTNO' is not a group expr (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select count(*)
. . . . . . . . > from emps
. . . . . . . . > group by name
. . . . . . . . > having emps.name in 
. . . . . . . . >     (select name from depts where depts.name = emps.name);
'column0'
'ProjectRel(EXPR$0=[$1])'
'  CorrelatorRel(condition=[=($0, $2)], joinType=[inner], correlations=[[var0=offset0]])'
'    AggregateRel(groupCount=[1], agg#0=[COUNT()])'
'      ProjectRel($f0=[$1])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'    AggregateRel(groupCount=[1])'
'      ProjectRel(NAME=[$1])'
'        FilterRel(condition=[=($1, $cor0.NAME)])'
'          TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select count(*)
. . . . . . . . > from emps
. . . . . . . . > group by name
. . . . . . . . > having emps.name in 
. . . . . . . . >     (select name from depts where depts.name = emps.name);
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(BIGINT NOT NULL EXPR$0) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0, 1]], rightKeys=[[0, 0]], joinType=[RIGHTSEMI])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
'        LhxAggRel(groupCount=[1])'
'          FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0) NOT NULL])'
'            LhxAggRel(groupCount=[1], agg#0=[COUNT()])'
'              FennelRenameRel(fieldNames=[[$f0]])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], agg#0=[COUNT()])'
'        FennelRenameRel(fieldNames=[[$f0]])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for
. . . . . . . . > select count(*)
. . . . . . . . > from emps
. . . . . . . . > group by name
. . . . . . . . > having min(emps.deptno) in 
. . . . . . . . >     (select deptno from depts where depts.name = emps.name);
'column0'
'ProjectRel(EXPR$0=[$1])'
'  CorrelatorRel(condition=[=($2, $3)], joinType=[inner], correlations=[[var0=offset0]])'
'    AggregateRel(groupCount=[1], agg#0=[COUNT()], agg#1=[MIN(1)])'
'      ProjectRel($f0=[$1], $f1=[$2])'
'        TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'    AggregateRel(groupCount=[1])'
'      ProjectRel(DEPTNO=[$0])'
'        FilterRel(condition=[=($1, $cor0.NAME)])'
'          TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select count(*)
. . . . . . . . > from emps
. . . . . . . . > group by name
. . . . . . . . > having min(emps.deptno) in 
. . . . . . . . >     (select deptno from depts where depts.name = emps.name);
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1]], outputRowType=[RecordType(BIGINT NOT NULL EXPR$0) NOT NULL])'
'    LhxJoinRel(leftKeys=[[2, 0]], rightKeys=[[2, 1]], joinType=[LEFTSEMI])'
'      LhxAggRel(groupCount=[1], agg#0=[COUNT()], agg#1=[MIN(1)])'
'        FennelRenameRel(fieldNames=[[$f0, $f1]])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])'
'      FennelReshapeRel(projection=[[0, 2, 0]], outputRowType=[RecordType(INTEGER NOT NULL DEPTNO, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0, INTEGER CAST($0):INTEGER) NOT NULL])'
'        LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
'          LhxAggRel(groupCount=[1])'
'            FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0) NOT NULL])'
'              LhxAggRel(groupCount=[1], agg#0=[COUNT()], agg#1=[MIN(1)])'
'                FennelRenameRel(fieldNames=[[$f0, $f1]])'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 2]], index=[EMPS_UX], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan without implementation for 
. . . . . . . . > select *
. . . . . . . . > from (
. . . . . . . . > select count(*), name
. . . . . . . . > from emps e
. . . . . . . . > group by name
. . . . . . . . > ) v
. . . . . . . . > where exists (select * from depts where depts.name = v.name);
'column0'
'ProjectRel(EXPR$0=[$0], NAME=[$1])'
'  FilterRel(condition=[IS TRUE($2)])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset1]])'
'      ProjectRel(EXPR$0=[$1], NAME=[$0])'
'        AggregateRel(groupCount=[1], agg#0=[COUNT()])'
'          ProjectRel($f0=[$1])'
'            TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'        ProjectRel($f0=[true])'
'          ProjectRel(DEPTNO=[$0], NAME=[$1])'
'            FilterRel(condition=[=($1, $cor0.NAME)])'
'              TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select *
. . . . . . . . > from (
. . . . . . . . > select count(*), name
. . . . . . . . > from emps e
. . . . . . . . > group by name
. . . . . . . . > ) v
. . . . . . . . > where exists (select * from depts where depts.name = v.name);
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1, 0]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(BIGINT NOT NULL EXPR$0, VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL NAME) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      LhxAggRel(groupCount=[1], agg#0=[COUNT()])'
'        FennelRenameRel(fieldNames=[[$f0]])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'            FennelToIteratorConverter'
'              LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0) NOT NULL])'
'                    LhxAggRel(groupCount=[1], agg#0=[COUNT()])'
'                      FennelRenameRel(fieldNames=[[$f0]])'
'                        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- fixed with hack to look up group expr projected from agg
0: jdbc:farrago:> explain plan without implementation for 
. . . . . . . . > select count(*) 
. . . . . . . . > from emps 
. . . . . . . . > group by name 
. . . . . . . . > having exists (select * from depts where depts.name = emps.name);
'column0'
'ProjectRel(EXPR$0=[$1])'
'  FilterRel(condition=[IS TRUE($2)])'
'    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset0]])'
'      AggregateRel(groupCount=[1], agg#0=[COUNT()])'
'        ProjectRel($f0=[$1])'
'          TableAccessRel(table=[[LOCALDB, SALES, EMPS]])'
'      AggregateRel(groupCount=[0], agg#0=[MIN(0)])'
'        ProjectRel($f0=[true])'
'          ProjectRel(DEPTNO=[$0], NAME=[$1])'
'            FilterRel(condition=[=($1, $cor0.NAME)])'
'              TableAccessRel(table=[[LOCALDB, SALES, DEPTS]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select count(*) 
. . . . . . . . > from emps 
. . . . . . . . > group by name 
. . . . . . . . > having exists (select * from depts where depts.name = emps.name);
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[true]], outputRowType=[RecordType(BIGINT NOT NULL EXPR$0) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[LEFT])'
'      LhxAggRel(groupCount=[1], agg#0=[COUNT()])'
'        FennelRenameRel(fieldNames=[[$f0]])'
'          FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
'      LhxAggRel(groupCount=[1], agg#0=[MIN(1)])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0..1=[{inputs}], expr#2=[true], $f0=[$t1], $f0=[$t2])'
'            FennelToIteratorConverter'
'              LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[[1]], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL $f0) NOT NULL])'
'                    LhxAggRel(groupCount=[1], agg#0=[COUNT()])'
'                      FennelRenameRel(fieldNames=[[$f0]])'
'                        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- this will fail in parsing
0: jdbc:farrago:> explain plan for
. . . . . . . . > select count(*)
. . . . . . . . > from emps 
. . . . . . . . > group by name 
. . . . . . . . > having exists (select * from depts where depts.deptno = max(emps.deptno));
Error: From line 5, column 57 to line 5, column 72: Aggregate expression is illegal in WHERE clause (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- LER 2746 cast(agg() as datatype) triggers an error
0: jdbc:farrago:> explain plan for
. . . . . . . . > select cast(sum(empno) as decimal(10, 2)) from emps;
'column0'
'IterCalcRel(expr#0=[{inputs}], expr#1=[100], expr#2=[*($t0, $t1)], expr#3=[true], expr#4=[Reinterpret($t2, $t3)], EXPR$0=[$t4])'
'  FennelToIteratorConverter'
'    FennelAggRel(groupCount=[0], agg#0=[SUM(0)])'
'      FennelRenameRel(fieldNames=[[$f0]])'
'        FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[0]], index=[EMPS_UX], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- End agg.sql
0: jdbc:farrago:> 
0: jdbc:farrago:> !quit
