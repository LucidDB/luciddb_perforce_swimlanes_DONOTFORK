> -- $Id$
> -- Tests for ConvertMultiJoinRule and OptimizeJoinRule
> 
> create schema jo;
> set schema 'jo';
> 
> -- set session personality to LucidDB so all tables
> -- will be column-store by default and LucidDB-specific optimization rules
> -- are picked up
> alter session implementation set jar sys_boot.sys_boot.luciddb_plugin;
> 
> create table f(f int, f_d1 int, f_d2 int, f_d3 int);
> create table d1(d1 int, d1_f int, d1_d2 int, d1_d3 int);
> create table d2(d2 int, d2_f int, d2_d1 int, d2_d3 int);
> create table d3(d3 int, d3_f int, d3_d1 int, d3_d2 int);
> 
> create index if_d1 on f(f_d1);
> create index if_d2 on f(f_d2);
> create index if_d3 on f(f_d3);
> create index id1_f on d1(d1_f);
> create index id1_d2 on d1(d1_d2);
> create index id1_d3 on d1(d1_d3);
> create index id2_f on d2(d2_f);
> create index id2_d1 on d2(d2_d1);
> create index id2_d3 on d2(d2_d3);
> create index id3_f on d3(d3_f);
> create index id3_d1 on d3(d3_d1);
> create index id3_d2 on d3(d3_d2);
> 
> insert into f values(0, 0, 0, 0);
> insert into d1 values(1, 0, 1, 1);
> insert into d2 values(2, 0, 1, 2);
> insert into d3 values(3, 0, 1, 2);
> 
> -- fake stats
> call sys_boot.mgmt.stat_set_row_count('LOCALDB', 'JO', 'F', 10000000);
> call sys_boot.mgmt.stat_set_row_count('LOCALDB', 'JO', 'D1', 100000);
> call sys_boot.mgmt.stat_set_row_count('LOCALDB', 'JO', 'D2', 1000);
> call sys_boot.mgmt.stat_set_row_count('LOCALDB', 'JO', 'D3', 10);
> 
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'JO', 'F', 'F_D1', 100000, 100, 100000, 0, '0123456789');
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'JO', 'F', 'F_D2', 1000, 100, 1000, 0, '0123456789');
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'JO', 'F', 'F_D3', 10, 100, 10, 0, '0123456789');
> 
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'JO', 'D1', 'D1_F', 100000, 100, 100000, 0, '0123456789');
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'JO', 'D1', 'D1_D2', 1000, 100, 1000, 0, '0123456789');
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'JO', 'D1', 'D1_D3', 10, 100, 10, 0, '0123456789');
> 
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'JO', 'D2', 'D2_F', 1000, 100, 1000, 0, '0123456789');
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'JO', 'D2', 'D2_D1', 1000, 100, 1000, 0, '0123456789');
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'JO', 'D2', 'D2_D3', 10, 100, 10, 0, '0123456789');
> 
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'JO', 'D3', 'D3_F', 10, 100, 10, 0, '0123456789');
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'JO', 'D3', 'D3_D1', 10, 100, 10, 0, '0123456789');
> call sys_boot.mgmt.stat_set_column_histogram(
>     'LOCALDB', 'JO', 'D3', 'D3_D2', 10, 100, 10, 0, '0123456789');
> 
> !set outputformat csv
> 
> --------------------------------------------------------------------
> -- Test different combinations of patterns into ConvertMultiJoinRule
> --------------------------------------------------------------------
> 
> -- MJ/MJ
> explain plan for select f, d1, d2, d3
>     from (select * from f, d1 where f.f_d1 = d1.d1_f and d1.d1 >= 0) j1,
>         (select * from d2, d3 where d2.d2_d3 = d3.d3_d2 and d3.d3 >= 0) j2
>     where j1.f_d2 = j2.d2_f and j2.d2 >= 0;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1, 0, 2, 4]], outputRowType=[RecordType(INTEGER F, INTEGER D1, INTEGER D2, INTEGER D3) NOT NULL])'
'    LhxJoinRel(leftKeys=[[3]], rightKeys=[[1]], joinType=[INNER])'
'      FennelReshapeRel(projection=[[0, 2, 4, 5]], outputRowType=[RecordType(INTEGER D1, INTEGER F, INTEGER D2, INTEGER D2_D3) NOT NULL])'
'        LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'          LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1, SYS$CLUSTERED_INDEX$D1$D1_F]], residual columns=[[0]])'
'            FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
'          FennelReshapeRel(projection=[[0, 1, 3, 5]], outputRowType=[RecordType(INTEGER F, INTEGER F_D1, INTEGER D2, INTEGER D2_D3) NOT NULL])'
'            LhxJoinRel(leftKeys=[[2]], rightKeys=[[1]], joinType=[INNER])'
'              LcsRowScanRel(table=[[LOCALDB, JO, F]], projection=[[0, 1, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$F$F, SYS$CLUSTERED_INDEX$F$F_D1, SYS$CLUSTERED_INDEX$F$F_D2]])'
'                LcsIndexIntersectRel(startRidParamId=[3], rowLimitParamId=[4])'
'                  LcsIndexMergeRel(consumerSridParamId=[3], segmentLimitParamId=[4], ridLimitParamId=[1])'
'                    LcsIndexSearchRel(table=[[LOCALDB, JO, F]], index=[IF_D2], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                      FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                        LhxAggRel(groupCount=[1])'
'                          FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D2_F=[$t0], $condition=[$t1])'
'                            LcsRowScanRel(table=[[LOCALDB, JO, D2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D2$D2, SYS$CLUSTERED_INDEX$D2$D2_F]], residual columns=[[0]])'
'                              LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[2])'
'                                LcsIndexSearchRel(table=[[LOCALDB, JO, D2]], index=[ID2_D3], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                                  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                                    LhxAggRel(groupCount=[1])'
'                                      FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D3_D2=[$t0], $condition=[$t1])'
'                                        LcsRowScanRel(table=[[LOCALDB, JO, D3]], projection=[[3]], clustered indexes=[[SYS$CLUSTERED_INDEX$D3$D3, SYS$CLUSTERED_INDEX$D3$D3_D2]], residual columns=[[0]])'
'                                          FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
'                              FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
'                  LcsIndexMergeRel(consumerSridParamId=[3], segmentLimitParamId=[4], ridLimitParamId=[5])'
'                    LcsIndexSearchRel(table=[[LOCALDB, JO, F]], index=[IF_D1], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                      FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                        LhxAggRel(groupCount=[1])'
'                          FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D1_F=[$t0], $condition=[$t1])'
'                            LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1, SYS$CLUSTERED_INDEX$D1$D1_F]], residual columns=[[0]])'
'                              FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
'              LcsRowScanRel(table=[[LOCALDB, JO, D2]], projection=[[0, 1, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$D2$D2, SYS$CLUSTERED_INDEX$D2$D2_D3, SYS$CLUSTERED_INDEX$D2$D2_F]], residual columns=[[0]])'
'                LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[2])'
'                  LcsIndexSearchRel(table=[[LOCALDB, JO, D2]], index=[ID2_D3], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                    FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                      LhxAggRel(groupCount=[1])'
'                        FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D3_D2=[$t0], $condition=[$t1])'
'                          LcsRowScanRel(table=[[LOCALDB, JO, D3]], projection=[[3]], clustered indexes=[[SYS$CLUSTERED_INDEX$D3$D3, SYS$CLUSTERED_INDEX$D3$D3_D2]], residual columns=[[0]])'
'                            FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
'                FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
'      LcsRowScanRel(table=[[LOCALDB, JO, D3]], projection=[[0, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$D3$D3, SYS$CLUSTERED_INDEX$D3$D3_D2]], residual columns=[[0]])'
'        FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
> 
> -- MJ/RS
> explain plan for select f, d1, d2
>     from (select * from f, d1 where f.f_d1 = d1.d1_f and d1.d1 >= 0) j, d2
>     where j.f_d2 = d2.d2_f and d2.d2 >= 0;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1, 0, 3]], outputRowType=[RecordType(INTEGER F, INTEGER D1, INTEGER D2) NOT NULL])'
'    LhxJoinRel(leftKeys=[[2]], rightKeys=[[1]], joinType=[INNER])'
'      FennelReshapeRel(projection=[[0, 2, 4]], outputRowType=[RecordType(INTEGER D1, INTEGER F, INTEGER F_D2) NOT NULL])'
'        LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'          LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1, SYS$CLUSTERED_INDEX$D1$D1_F]], residual columns=[[0]])'
'            FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
'          LcsRowScanRel(table=[[LOCALDB, JO, F]], projection=[[0, 1, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$F$F, SYS$CLUSTERED_INDEX$F$F_D1, SYS$CLUSTERED_INDEX$F$F_D2]])'
'            LcsIndexIntersectRel(startRidParamId=[2], rowLimitParamId=[3])'
'              LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[1])'
'                LcsIndexSearchRel(table=[[LOCALDB, JO, F]], index=[IF_D2], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                    LhxAggRel(groupCount=[1])'
'                      FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D2_F=[$t0], $condition=[$t1])'
'                        LcsRowScanRel(table=[[LOCALDB, JO, D2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D2$D2, SYS$CLUSTERED_INDEX$D2$D2_F]], residual columns=[[0]])'
'                          FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
'              LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[4])'
'                LcsIndexSearchRel(table=[[LOCALDB, JO, F]], index=[IF_D1], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                    LhxAggRel(groupCount=[1])'
'                      FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D1_F=[$t0], $condition=[$t1])'
'                        LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1, SYS$CLUSTERED_INDEX$D1$D1_F]], residual columns=[[0]])'
'                          FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
'      LcsRowScanRel(table=[[LOCALDB, JO, D2]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D2$D2, SYS$CLUSTERED_INDEX$D2$D2_F]], residual columns=[[0]])'
'        FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
> 
> -- MJ/FRS
> explain plan for select f, d1, d2
>     from (select * from f, d1 where f.f_d1 = d1.d1_f and d1.d1 >= 0) j, d2
>     where j.f_d2 = d2.d2_f and d2.d2 + 0 = 2;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1, 0, 3]], outputRowType=[RecordType(INTEGER F, INTEGER D1, INTEGER D2) NOT NULL])'
'    LhxJoinRel(leftKeys=[[2]], rightKeys=[[1]], joinType=[INNER])'
'      FennelReshapeRel(projection=[[0, 2, 4]], outputRowType=[RecordType(INTEGER D1, INTEGER F, INTEGER F_D2) NOT NULL])'
'        LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'          LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1, SYS$CLUSTERED_INDEX$D1$D1_F]], residual columns=[[0]])'
'            FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
'          LcsRowScanRel(table=[[LOCALDB, JO, F]], projection=[[0, 1, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$F$F, SYS$CLUSTERED_INDEX$F$F_D1, SYS$CLUSTERED_INDEX$F$F_D2]])'
'            LcsIndexIntersectRel(startRidParamId=[2], rowLimitParamId=[3])'
'              LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[1])'
'                LcsIndexSearchRel(table=[[LOCALDB, JO, F]], index=[IF_D2], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                    LhxAggRel(groupCount=[1])'
'                      FennelCalcRel(expr#0..1=[{inputs}], expr#2=[0], expr#3=[+($t0, $t2)], expr#4=[2], expr#5=[=($t3, $t4)], expr#6=[IS NOT NULL($t1)], expr#7=[AND($t5, $t6)], D2_F=[$t1], $condition=[$t7])'
'                        LcsRowScanRel(table=[[LOCALDB, JO, D2]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D2$D2, SYS$CLUSTERED_INDEX$D2$D2_F]])'
'              LcsIndexMergeRel(consumerSridParamId=[2], segmentLimitParamId=[3], ridLimitParamId=[4])'
'                LcsIndexSearchRel(table=[[LOCALDB, JO, F]], index=[IF_D1], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                    LhxAggRel(groupCount=[1])'
'                      FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D1_F=[$t0], $condition=[$t1])'
'                        LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1, SYS$CLUSTERED_INDEX$D1$D1_F]], residual columns=[[0]])'
'                          FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
'      FennelCalcRel(expr#0..1=[{inputs}], expr#2=[0], expr#3=[+($t0, $t2)], expr#4=[2], expr#5=[=($t3, $t4)], proj#0..1=[{exprs}], $condition=[$t5])'
'        LcsRowScanRel(table=[[LOCALDB, JO, D2]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D2$D2, SYS$CLUSTERED_INDEX$D2$D2_F]])'
> 
> -- RS/MJ
> explain plan for select f, d1, d2
>     from f, (select * from d1, d2 where d1.d1_d2 = d2.d2_d1 and d2.d2 >= 0) j
>     where f.f_d1 = j.d1_f and j.d1 >= 0;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 2, 4]], outputRowType=[RecordType(INTEGER F, INTEGER D1, INTEGER D2) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'      LcsRowScanRel(table=[[LOCALDB, JO, F]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$F$F, SYS$CLUSTERED_INDEX$F$F_D1]])'
'        LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'          LcsIndexSearchRel(table=[[LOCALDB, JO, F]], index=[IF_D1], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'              LhxAggRel(groupCount=[1])'
'                FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D1_F=[$t0], $condition=[$t1])'
'                  LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1, SYS$CLUSTERED_INDEX$D1$D1_F]], residual columns=[[0]])'
'                    LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[2])'
'                      LcsIndexSearchRel(table=[[LOCALDB, JO, D1]], index=[ID1_D2], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                        FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                          LhxAggRel(groupCount=[1])'
'                            FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D2_D1=[$t0], $condition=[$t1])'
'                              LcsRowScanRel(table=[[LOCALDB, JO, D2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$D2$D2, SYS$CLUSTERED_INDEX$D2$D2_D1]], residual columns=[[0]])'
'                                FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
'                    FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
'      FennelReshapeRel(projection=[[0, 1, 3]], outputRowType=[RecordType(INTEGER D1, INTEGER D1_F, INTEGER D2) NOT NULL])'
'        LhxJoinRel(leftKeys=[[2]], rightKeys=[[1]], joinType=[INNER])'
'          LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[0, 1, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1, SYS$CLUSTERED_INDEX$D1$D1_D2, SYS$CLUSTERED_INDEX$D1$D1_F]], residual columns=[[0]])'
'            LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[2])'
'              LcsIndexSearchRel(table=[[LOCALDB, JO, D1]], index=[ID1_D2], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                  LhxAggRel(groupCount=[1])'
'                    FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D2_D1=[$t0], $condition=[$t1])'
'                      LcsRowScanRel(table=[[LOCALDB, JO, D2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$D2$D2, SYS$CLUSTERED_INDEX$D2$D2_D1]], residual columns=[[0]])'
'                        FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
'            FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
'          LcsRowScanRel(table=[[LOCALDB, JO, D2]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$D2$D2, SYS$CLUSTERED_INDEX$D2$D2_D1]], residual columns=[[0]])'
'            FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
> 
> -- RS/RS
> explain plan for select f, d1 from f, d1 where f.f_d1 = d1.d1_f and d1.d1 >= 0;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER F, INTEGER D1) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'      LcsRowScanRel(table=[[LOCALDB, JO, F]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$F$F, SYS$CLUSTERED_INDEX$F$F_D1]])'
'        LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'          LcsIndexSearchRel(table=[[LOCALDB, JO, F]], index=[IF_D1], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'              LhxAggRel(groupCount=[1])'
'                FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D1_F=[$t0], $condition=[$t1])'
'                  LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1, SYS$CLUSTERED_INDEX$D1$D1_F]], residual columns=[[0]])'
'                    FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
'      LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1, SYS$CLUSTERED_INDEX$D1$D1_F]], residual columns=[[0]])'
'        FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
> 
> -- RS/FRS
> explain plan for select f, d2 from f, d2
>     where f.f_d2 = d2.d2_f and d2.d2 + 0 = 2;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER F, INTEGER D2) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'      LcsRowScanRel(table=[[LOCALDB, JO, F]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$F$F, SYS$CLUSTERED_INDEX$F$F_D2]])'
'        LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'          LcsIndexSearchRel(table=[[LOCALDB, JO, F]], index=[IF_D2], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'              LhxAggRel(groupCount=[1])'
'                FennelCalcRel(expr#0..1=[{inputs}], expr#2=[0], expr#3=[+($t0, $t2)], expr#4=[2], expr#5=[=($t3, $t4)], expr#6=[IS NOT NULL($t1)], expr#7=[AND($t5, $t6)], D2_F=[$t1], $condition=[$t7])'
'                  LcsRowScanRel(table=[[LOCALDB, JO, D2]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D2$D2, SYS$CLUSTERED_INDEX$D2$D2_F]])'
'      FennelCalcRel(expr#0..1=[{inputs}], expr#2=[0], expr#3=[+($t0, $t2)], expr#4=[2], expr#5=[=($t3, $t4)], proj#0..1=[{exprs}], $condition=[$t5])'
'        LcsRowScanRel(table=[[LOCALDB, JO, D2]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D2$D2, SYS$CLUSTERED_INDEX$D2$D2_F]])'
> 
> -- FRS/MJ
> explain plan for select f, d1, d3
>     from f, (select * from d1, d3 where d1.d1_d3 = d3.d3_d1 and d3.d3 >= 0) j
>     where f.f_d1 = j.d1_f and j.d1 + 0 = 1;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 2, 4]], outputRowType=[RecordType(INTEGER F, INTEGER D1, INTEGER D3) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'      LcsRowScanRel(table=[[LOCALDB, JO, F]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$F$F, SYS$CLUSTERED_INDEX$F$F_D1]])'
'        LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'          LcsIndexSearchRel(table=[[LOCALDB, JO, F]], index=[IF_D1], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'              LhxAggRel(groupCount=[1])'
'                FennelCalcRel(expr#0..1=[{inputs}], expr#2=[0], expr#3=[+($t0, $t2)], expr#4=[1], expr#5=[=($t3, $t4)], expr#6=[IS NOT NULL($t1)], expr#7=[AND($t5, $t6)], D1_F=[$t1], $condition=[$t7])'
'                  LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1, SYS$CLUSTERED_INDEX$D1$D1_F]])'
'                    LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[2])'
'                      LcsIndexSearchRel(table=[[LOCALDB, JO, D1]], index=[ID1_D3], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                        FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                          LhxAggRel(groupCount=[1])'
'                            FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D3_D1=[$t0], $condition=[$t1])'
'                              LcsRowScanRel(table=[[LOCALDB, JO, D3]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$D3$D3, SYS$CLUSTERED_INDEX$D3$D3_D1]], residual columns=[[0]])'
'                                FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
'      FennelReshapeRel(projection=[[0, 1, 3]], outputRowType=[RecordType(INTEGER D1, INTEGER D1_F, INTEGER D3) NOT NULL])'
'        LhxJoinRel(leftKeys=[[2]], rightKeys=[[1]], joinType=[INNER])'
'          FennelCalcRel(expr#0..2=[{inputs}], expr#3=[0], expr#4=[+($t0, $t3)], expr#5=[1], expr#6=[=($t4, $t5)], proj#0..2=[{exprs}], $condition=[$t6])'
'            LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[0, 1, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1, SYS$CLUSTERED_INDEX$D1$D1_D3, SYS$CLUSTERED_INDEX$D1$D1_F]])'
'              LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[2])'
'                LcsIndexSearchRel(table=[[LOCALDB, JO, D1]], index=[ID1_D3], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                    LhxAggRel(groupCount=[1])'
'                      FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D3_D1=[$t0], $condition=[$t1])'
'                        LcsRowScanRel(table=[[LOCALDB, JO, D3]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$D3$D3, SYS$CLUSTERED_INDEX$D3$D3_D1]], residual columns=[[0]])'
'                          FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
'          LcsRowScanRel(table=[[LOCALDB, JO, D3]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$D3$D3, SYS$CLUSTERED_INDEX$D3$D3_D1]], residual columns=[[0]])'
'            FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
> 
> -- FRS/RS
> explain plan for select f, d1 from f, d1
>     where f.f_d1 = d1.d1_f and f.f + 0 = 0 and d1.d1 >= 0;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER F, INTEGER D1) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'      FennelCalcRel(expr#0..1=[{inputs}], expr#2=[0], expr#3=[+($t0, $t2)], expr#4=[=($t3, $t2)], proj#0..1=[{exprs}], $condition=[$t4])'
'        LcsRowScanRel(table=[[LOCALDB, JO, F]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$F$F, SYS$CLUSTERED_INDEX$F$F_D1]])'
'          LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'            LcsIndexSearchRel(table=[[LOCALDB, JO, F]], index=[IF_D1], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D1_F=[$t0], $condition=[$t1])'
'                    LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1, SYS$CLUSTERED_INDEX$D1$D1_F]], residual columns=[[0]])'
'                      FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
'      LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1, SYS$CLUSTERED_INDEX$D1$D1_F]], residual columns=[[0]])'
'        FennelValuesRel(tuples=[[{ '[', 0, '+', null }]])'
> 
> -- FRS/FRS
> explain plan for select f, d2 from f, d2
>     where f.f_d2 = d2.d2_f and f.f + 0 = 0 and d2.d2 + 0 = 2;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER F, INTEGER D2) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'      FennelCalcRel(expr#0..1=[{inputs}], expr#2=[0], expr#3=[+($t0, $t2)], expr#4=[=($t3, $t2)], proj#0..1=[{exprs}], $condition=[$t4])'
'        LcsRowScanRel(table=[[LOCALDB, JO, F]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$F$F, SYS$CLUSTERED_INDEX$F$F_D2]])'
'          LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'            LcsIndexSearchRel(table=[[LOCALDB, JO, F]], index=[IF_D2], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelCalcRel(expr#0..1=[{inputs}], expr#2=[0], expr#3=[+($t0, $t2)], expr#4=[2], expr#5=[=($t3, $t4)], expr#6=[IS NOT NULL($t1)], expr#7=[AND($t5, $t6)], D2_F=[$t1], $condition=[$t7])'
'                    LcsRowScanRel(table=[[LOCALDB, JO, D2]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D2$D2, SYS$CLUSTERED_INDEX$D2$D2_F]])'
'      FennelCalcRel(expr#0..1=[{inputs}], expr#2=[0], expr#3=[+($t0, $t2)], expr#4=[2], expr#5=[=($t3, $t4)], proj#0..1=[{exprs}], $condition=[$t5])'
'        LcsRowScanRel(table=[[LOCALDB, JO, D2]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D2$D2, SYS$CLUSTERED_INDEX$D2$D2_F]])'
> 
> ------------------------------------------------------
> -- different join combinations, including corner cases
> ------------------------------------------------------
> -- no join filters
> explain plan for select f, d1, d2, d3 
>     from f, d1, d2, d3;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 3, 2, 1]], outputRowType=[RecordType(INTEGER F, INTEGER D1, INTEGER D2, INTEGER D3) NOT NULL])'
'    FennelCalcRel(expr#0..3=[{inputs}], F=[$t1], D3=[$t2], D2=[$t3], D1=[$t0])'
'      FennelCartesianProductRel(leftouterjoin=[false])'
'        LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1]])'
'        FennelBufferRel(inMemory=[false], multiPass=[true])'
'          FennelCalcRel(expr#0..2=[{inputs}], F=[$t1], D3=[$t2], D2=[$t0])'
'            FennelCartesianProductRel(leftouterjoin=[false])'
'              LcsRowScanRel(table=[[LOCALDB, JO, D2]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$D2$D2]])'
'              FennelBufferRel(inMemory=[false], multiPass=[true])'
'                FennelCartesianProductRel(leftouterjoin=[false])'
'                  LcsRowScanRel(table=[[LOCALDB, JO, F]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$F$F]])'
'                  LcsRowScanRel(table=[[LOCALDB, JO, D3]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$D3$D3]])'
> 
> -- non-comparsion expression
> explain plan for select f, d1 from f, d1
>     where f.f_d1 = d1.d1_f or f.f_d2 = d1.d1_f;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 3]], outputRowType=[RecordType(INTEGER F, INTEGER D1) NOT NULL])'
'    FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[2, 1]], joinKeyParamIds=[[2, 1]])'
'      LcsRowScanRel(table=[[LOCALDB, JO, F]], projection=[[0, 1, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$F$F, SYS$CLUSTERED_INDEX$F$F_D1, SYS$CLUSTERED_INDEX$F$F_D2]])'
'      FennelCalcRel(expr#0..3=[{inputs}], expr#4=[=($t2, $t1)], expr#5=[=($t3, $t1)], expr#6=[OR($t4, $t5)], proj#0..1=[{exprs}], $condition=[$t6])'
'        FennelReshapeRel(projection=[[0, 1]], dynamicParameters=[[1, 2]], paramCompareOffsets=[[-1, -1]], outputRowType=[RecordType(INTEGER D1, INTEGER D1_F, INTEGER F_D1, INTEGER F_D2) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1, SYS$CLUSTERED_INDEX$D1$D1_F]])'
> 
> -- filter involving > 2 tables
> explain plan for select f, d1, d2 from f, d1, d2
>     where f.f_d1 + d1.d1_f = d2.d2_f;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 4, 2]], outputRowType=[RecordType(INTEGER F, INTEGER D1, INTEGER D2) NOT NULL])'
'    FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1, 3]], joinKeyParamIds=[[1, 2]])'
'      FennelCartesianProductRel(leftouterjoin=[false])'
'        LcsRowScanRel(table=[[LOCALDB, JO, F]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$F$F, SYS$CLUSTERED_INDEX$F$F_D1]])'
'        LcsRowScanRel(table=[[LOCALDB, JO, D2]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D2$D2, SYS$CLUSTERED_INDEX$D2$D2_F]])'
'      FennelCalcRel(expr#0..3=[{inputs}], expr#4=[+($t2, $t1)], expr#5=[=($t4, $t3)], proj#0..1=[{exprs}], $condition=[$t5])'
'        FennelReshapeRel(projection=[[0, 1]], dynamicParameters=[[1, 2]], paramCompareOffsets=[[-1, -1]], outputRowType=[RecordType(INTEGER D1, INTEGER D1_F, INTEGER F_D1, INTEGER D2_F) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1, SYS$CLUSTERED_INDEX$D1$D1_F]])'
> 
> -- filter with 2 tables but both on one side of the comparison operator
> explain plan for select f, d1 from f, d1
>     where f.f_d1 + d1.d1_f = 0;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER F, INTEGER D1) NOT NULL])'
'    FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1]], joinKeyParamIds=[[1]])'
'      LcsRowScanRel(table=[[LOCALDB, JO, F]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$F$F, SYS$CLUSTERED_INDEX$F$F_D1]])'
'      FennelCalcRel(expr#0..2=[{inputs}], expr#3=[+($t2, $t1)], expr#4=[0], expr#5=[=($t3, $t4)], proj#0..1=[{exprs}], $condition=[$t5])'
'        FennelReshapeRel(projection=[[0, 1]], dynamicParameters=[[1]], paramCompareOffsets=[[-1]], outputRowType=[RecordType(INTEGER D1, INTEGER D1_F, INTEGER F_D1) NOT NULL])'
'          LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1, SYS$CLUSTERED_INDEX$D1$D1_F]])'
> 
> -- non-equality operator
> explain plan for select f, d1 from f, d1
>     where f.f_d1 >= d1.d1_f;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(INTEGER F, INTEGER D1) NOT NULL])'
'    FennelNestedLoopJoinRel(joinType=[INNER], leftJoinKeys=[[1]], joinKeyParamIds=[[1]])'
'      LcsRowScanRel(table=[[LOCALDB, JO, F]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$F$F, SYS$CLUSTERED_INDEX$F$F_D1]])'
'      FennelTempIdxSearchRel(indexKeys=[[1]], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], searchKeyParamIds=[[1]], keyOffsets=[[1]], rootPageIdParamId=[2])'
'        FennelValuesRel(tuples=[[{ '(', null, ']', null }]])'
'      FennelIdxWriteRel(discardDuplicates=[false], monotonicInserts=[true], rootPageIdParamId=[2], indexCols=[[1]])'
'        FennelSortRel(key=[[1]], discardDuplicates=[false])'
'          LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1, SYS$CLUSTERED_INDEX$D1$D1_F]])'
> 
> -- all possible join combinations
> explain plan for select f, d1, d2, d3
>     from d3, d1, d2, f
>     where
>         d1.d1_f = 1 and d2.d2_f = 2 and d3.d3_f = 3 and
>         f.f_d1 = d1.d1_f and f.f_d2 = d2.d2_f and f.f_d3 = d3.d3_f and
>         d1.d1_d2 = d2.d2_d1 and d1.d1_d3 = d3.d3_d1 and
>         d2.d2_d3 = d3.d3_d2;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[6, 2, 4, 0]], outputRowType=[RecordType(INTEGER F, INTEGER D1, INTEGER D2, INTEGER D3) NOT NULL])'
'    LhxJoinRel(leftKeys=[[3, 5, 1]], rightKeys=[[1, 2, 3]], joinType=[INNER])'
'      FennelReshapeRel(projection=[[0, 1, 3, 4, 6, 7]], outputRowType=[RecordType(INTEGER D3, INTEGER D3_F, INTEGER D1, INTEGER D1_F, INTEGER D2, INTEGER D2_F) NOT NULL])'
'        LhxJoinRel(leftKeys=[[5, 2]], rightKeys=[[2, 3]], joinType=[INNER])'
'          FennelReshapeRel(projection=[[0, 1, 3, 4, 5, 6]], outputRowType=[RecordType(INTEGER D3, INTEGER D3_F, INTEGER D3_D2, INTEGER D1, INTEGER D1_F, INTEGER D1_D2) NOT NULL])'
'            LhxJoinRel(leftKeys=[[2]], rightKeys=[[3]], joinType=[INNER])'
'              LcsRowScanRel(table=[[LOCALDB, JO, D3]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$D3$D3, SYS$CLUSTERED_INDEX$D3$D3_D1, SYS$CLUSTERED_INDEX$D3$D3_D2, SYS$CLUSTERED_INDEX$D3$D3_F]])'
'                LcsIndexSearchRel(table=[[LOCALDB, JO, D3]], index=[ID3_F], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                  FennelValuesRel(tuples=[[{ '[', 3, ']', 3 }]])'
'              LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1, SYS$CLUSTERED_INDEX$D1$D1_D2, SYS$CLUSTERED_INDEX$D1$D1_D3, SYS$CLUSTERED_INDEX$D1$D1_F]])'
'                LcsIndexIntersectRel(startRidParamId=[3], rowLimitParamId=[4])'
'                  LcsIndexMergeRel(consumerSridParamId=[3], segmentLimitParamId=[4], ridLimitParamId=[2])'
'                    LcsIndexSearchRel(table=[[LOCALDB, JO, D1]], index=[ID1_D3], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                      FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                        LhxAggRel(groupCount=[1])'
'                          FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D3_D1=[$t0], $condition=[$t1])'
'                            LcsRowScanRel(table=[[LOCALDB, JO, D3]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$D3$D3_D1]])'
'                              LcsIndexSearchRel(table=[[LOCALDB, JO, D3]], index=[ID3_F], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                                FennelValuesRel(tuples=[[{ '[', 3, ']', 3 }]])'
'                  LcsIndexMergeRel(consumerSridParamId=[3], segmentLimitParamId=[4], ridLimitParamId=[5])'
'                    LcsIndexSearchRel(table=[[LOCALDB, JO, D1]], index=[ID1_D2], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                      FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                        LhxAggRel(groupCount=[1])'
'                          FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D2_D1=[$t0], $condition=[$t1])'
'                            LcsRowScanRel(table=[[LOCALDB, JO, D2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$D2$D2_D1]])'
'                              LcsIndexIntersectRel(startRidParamId=[11], rowLimitParamId=[12])'
'                                LcsIndexMergeRel(consumerSridParamId=[11], segmentLimitParamId=[12], ridLimitParamId=[1])'
'                                  LcsIndexSearchRel(table=[[LOCALDB, JO, D2]], index=[ID2_D3], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                                    FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                                      LhxAggRel(groupCount=[1])'
'                                        FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D3_D2=[$t0], $condition=[$t1])'
'                                          LcsRowScanRel(table=[[LOCALDB, JO, D3]], projection=[[3]], clustered indexes=[[SYS$CLUSTERED_INDEX$D3$D3_D2]])'
'                                            LcsIndexSearchRel(table=[[LOCALDB, JO, D3]], index=[ID3_F], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                                              FennelValuesRel(tuples=[[{ '[', 3, ']', 3 }]])'
'                                LcsIndexSearchRel(table=[[LOCALDB, JO, D2]], index=[ID2_F], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[11], rowLimitParamId=[12])'
'                                  FennelValuesRel(tuples=[[{ '[', 2, ']', 2 }]])'
'                  LcsIndexSearchRel(table=[[LOCALDB, JO, D1]], index=[ID1_F], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[3], rowLimitParamId=[4])'
'                    FennelValuesRel(tuples=[[{ '[', 1, ']', 1 }]])'
'          LcsRowScanRel(table=[[LOCALDB, JO, D2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$D2$D2, SYS$CLUSTERED_INDEX$D2$D2_D1, SYS$CLUSTERED_INDEX$D2$D2_D3, SYS$CLUSTERED_INDEX$D2$D2_F]])'
'            LcsIndexIntersectRel(startRidParamId=[11], rowLimitParamId=[12])'
'              LcsIndexMergeRel(consumerSridParamId=[11], segmentLimitParamId=[12], ridLimitParamId=[1])'
'                LcsIndexSearchRel(table=[[LOCALDB, JO, D2]], index=[ID2_D3], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                    LhxAggRel(groupCount=[1])'
'                      FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D3_D2=[$t0], $condition=[$t1])'
'                        LcsRowScanRel(table=[[LOCALDB, JO, D3]], projection=[[3]], clustered indexes=[[SYS$CLUSTERED_INDEX$D3$D3_D2]])'
'                          LcsIndexSearchRel(table=[[LOCALDB, JO, D3]], index=[ID3_F], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                            FennelValuesRel(tuples=[[{ '[', 3, ']', 3 }]])'
'              LcsIndexSearchRel(table=[[LOCALDB, JO, D2]], index=[ID2_F], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[11], rowLimitParamId=[12])'
'                FennelValuesRel(tuples=[[{ '[', 2, ']', 2 }]])'
'      LcsRowScanRel(table=[[LOCALDB, JO, F]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$F$F, SYS$CLUSTERED_INDEX$F$F_D1, SYS$CLUSTERED_INDEX$F$F_D2, SYS$CLUSTERED_INDEX$F$F_D3]])'
'        LcsIndexIntersectRel(startRidParamId=[7], rowLimitParamId=[8])'
'          LcsIndexMergeRel(consumerSridParamId=[7], segmentLimitParamId=[8], ridLimitParamId=[6])'
'            LcsIndexSearchRel(table=[[LOCALDB, JO, F]], index=[IF_D3], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D3_F=[$t0], $condition=[$t1])'
'                    LcsRowScanRel(table=[[LOCALDB, JO, D3]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D3$D3_F]])'
'                      LcsIndexSearchRel(table=[[LOCALDB, JO, D3]], index=[ID3_F], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                        FennelValuesRel(tuples=[[{ '[', 3, ']', 3 }]])'
'          LcsIndexMergeRel(consumerSridParamId=[7], segmentLimitParamId=[8], ridLimitParamId=[9])'
'            LcsIndexSearchRel(table=[[LOCALDB, JO, F]], index=[IF_D2], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D2_F=[$t0], $condition=[$t1])'
'                    LcsRowScanRel(table=[[LOCALDB, JO, D2]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D2$D2_F]])'
'                      LcsIndexIntersectRel(startRidParamId=[11], rowLimitParamId=[12])'
'                        LcsIndexMergeRel(consumerSridParamId=[11], segmentLimitParamId=[12], ridLimitParamId=[1])'
'                          LcsIndexSearchRel(table=[[LOCALDB, JO, D2]], index=[ID2_D3], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                              LhxAggRel(groupCount=[1])'
'                                FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D3_D2=[$t0], $condition=[$t1])'
'                                  LcsRowScanRel(table=[[LOCALDB, JO, D3]], projection=[[3]], clustered indexes=[[SYS$CLUSTERED_INDEX$D3$D3_D2]])'
'                                    LcsIndexSearchRel(table=[[LOCALDB, JO, D3]], index=[ID3_F], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                                      FennelValuesRel(tuples=[[{ '[', 3, ']', 3 }]])'
'                        LcsIndexSearchRel(table=[[LOCALDB, JO, D2]], index=[ID2_F], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[11], rowLimitParamId=[12])'
'                          FennelValuesRel(tuples=[[{ '[', 2, ']', 2 }]])'
'          LcsIndexMergeRel(consumerSridParamId=[7], segmentLimitParamId=[8], ridLimitParamId=[10])'
'            LcsIndexSearchRel(table=[[LOCALDB, JO, F]], index=[IF_D1], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'              FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                LhxAggRel(groupCount=[1])'
'                  FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D1_F=[$t0], $condition=[$t1])'
'                    LcsRowScanRel(table=[[LOCALDB, JO, D1]], projection=[[1]], clustered indexes=[[SYS$CLUSTERED_INDEX$D1$D1_F]])'
'                      LcsIndexIntersectRel(startRidParamId=[3], rowLimitParamId=[4])'
'                        LcsIndexMergeRel(consumerSridParamId=[3], segmentLimitParamId=[4], ridLimitParamId=[2])'
'                          LcsIndexSearchRel(table=[[LOCALDB, JO, D1]], index=[ID1_D3], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                              LhxAggRel(groupCount=[1])'
'                                FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D3_D1=[$t0], $condition=[$t1])'
'                                  LcsRowScanRel(table=[[LOCALDB, JO, D3]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$D3$D3_D1]])'
'                                    LcsIndexSearchRel(table=[[LOCALDB, JO, D3]], index=[ID3_F], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                                      FennelValuesRel(tuples=[[{ '[', 3, ']', 3 }]])'
'                        LcsIndexMergeRel(consumerSridParamId=[3], segmentLimitParamId=[4], ridLimitParamId=[5])'
'                          LcsIndexSearchRel(table=[[LOCALDB, JO, D1]], index=[ID1_D2], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                            FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                              LhxAggRel(groupCount=[1])'
'                                FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D2_D1=[$t0], $condition=[$t1])'
'                                  LcsRowScanRel(table=[[LOCALDB, JO, D2]], projection=[[2]], clustered indexes=[[SYS$CLUSTERED_INDEX$D2$D2_D1]])'
'                                    LcsIndexIntersectRel(startRidParamId=[11], rowLimitParamId=[12])'
'                                      LcsIndexMergeRel(consumerSridParamId=[11], segmentLimitParamId=[12], ridLimitParamId=[1])'
'                                        LcsIndexSearchRel(table=[[LOCALDB, JO, D2]], index=[ID2_D3], projection=[*], inputKeyProj=[*], inputDirectiveProj=[[]], startRidParamId=[0], rowLimitParamId=[0])'
'                                          FennelSortRel(key=[[0]], discardDuplicates=[false])'
'                                            LhxAggRel(groupCount=[1])'
'                                              FennelCalcRel(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], D3_D2=[$t0], $condition=[$t1])'
'                                                LcsRowScanRel(table=[[LOCALDB, JO, D3]], projection=[[3]], clustered indexes=[[SYS$CLUSTERED_INDEX$D3$D3_D2]])'
'                                                  LcsIndexSearchRel(table=[[LOCALDB, JO, D3]], index=[ID3_F], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'                                                    FennelValuesRel(tuples=[[{ '[', 3, ']', 3 }]])'
'                                      LcsIndexSearchRel(table=[[LOCALDB, JO, D2]], index=[ID2_F], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[11], rowLimitParamId=[12])'
'                                        FennelValuesRel(tuples=[[{ '[', 2, ']', 2 }]])'
'                        LcsIndexSearchRel(table=[[LOCALDB, JO, D1]], index=[ID1_F], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[3], rowLimitParamId=[4])'
'                          FennelValuesRel(tuples=[[{ '[', 1, ']', 1 }]])'
> 
> ------------------------
> -- run the queries above
> ------------------------
> !set outputformat table
> 
> select f, d1, d2, d3
>     from (select * from f, d1 where f.f_d1 = d1.d1_f and d1.d1 >= 0) j1,
>         (select * from d2, d3 where d2.d2_d3 = d3.d3_d2 and d3.d3 >= 0) j2
>     where j1.f_d2 = j2.d2_f and j2.d2 >= 0;
+----+-----+-----+-----+
| F  | D1  | D2  | D3  |
+----+-----+-----+-----+
| 0  | 1   | 2   | 3   |
+----+-----+-----+-----+
> 
> select f, d1, d2
>     from (select * from f, d1 where f.f_d1 = d1.d1_f and d1.d1 >= 0) j, d2
>     where j.f_d2 = d2.d2_f and d2.d2 >= 0;
+----+-----+-----+
| F  | D1  | D2  |
+----+-----+-----+
| 0  | 1   | 2   |
+----+-----+-----+
> 
> select f, d1, d2
>     from (select * from f, d1 where f.f_d1 = d1.d1_f and d1.d1 >= 0) j, d2
>     where j.f_d2 = d2.d2_f and d2.d2 + 0 = 2;
+----+-----+-----+
| F  | D1  | D2  |
+----+-----+-----+
| 0  | 1   | 2   |
+----+-----+-----+
> 
> select f, d1, d2
>     from f, (select * from d1, d2 where d1.d1_d2 = d2.d2_d1 and d2.d2 >= 0) j
>     where f.f_d1 = j.d1_f and j.d1 >= 0;
+----+-----+-----+
| F  | D1  | D2  |
+----+-----+-----+
| 0  | 1   | 2   |
+----+-----+-----+
> 
> select f, d1 from f, d1 where f.f_d1 = d1.d1_f and d1.d1 >= 0;
+----+-----+
| F  | D1  |
+----+-----+
| 0  | 1   |
+----+-----+
> 
> select f, d2 from f, d2
>     where f.f_d2 = d2.d2_f and d2.d2 + 0 = 2;
+----+-----+
| F  | D2  |
+----+-----+
| 0  | 2   |
+----+-----+
> 
> select f, d1, d3
>     from f, (select * from d1, d3 where d1.d1_d3 = d3.d3_d1 and d3.d3 >= 0) j
>     where f.f_d1 = j.d1_f and j.d1 + 0 = 1;
+----+-----+-----+
| F  | D1  | D3  |
+----+-----+-----+
| 0  | 1   | 3   |
+----+-----+-----+
> 
> select f, d1 from f, d1
>     where f.f_d1 = d1.d1_f and f.f + 0 = 0 and d1.d1 >= 0;
+----+-----+
| F  | D1  |
+----+-----+
| 0  | 1   |
+----+-----+
> 
> select f, d2 from f, d2
>     where f.f_d2 = d2.d2_f and f.f + 0 = 0 and d2.d2 + 0 = 2;
+----+-----+
| F  | D2  |
+----+-----+
| 0  | 2   |
+----+-----+
> 
> select f, d1, d2, d3 
>     from f, d1, d2, d3;
+----+-----+-----+-----+
| F  | D1  | D2  | D3  |
+----+-----+-----+-----+
| 0  | 1   | 2   | 3   |
+----+-----+-----+-----+
> 
> select f, d1 from f, d1
>     where f.f_d1 = d1.d1_f or f.f_d2 = d1.d1_f;
+----+-----+
| F  | D1  |
+----+-----+
| 0  | 1   |
+----+-----+
> 
> select f, d1, d2 from f, d1, d2
>     where f.f_d1 + d1.d1_f = d2.d2_f;
+----+-----+-----+
| F  | D1  | D2  |
+----+-----+-----+
| 0  | 1   | 2   |
+----+-----+-----+
> 
> select f, d1 from f, d1
>     where f.f_d1 + d1.d1_f = 0;
+----+-----+
| F  | D1  |
+----+-----+
| 0  | 1   |
+----+-----+
> 
> select f, d1 from f, d1
>     where f.f_d1 >= d1.d1_f;
+----+-----+
| F  | D1  |
+----+-----+
| 0  | 1   |
+----+-----+
> 
> select f, d1, d2, d3
>     from f, d1, d2, d3
>     where
>         f.f_d1 = d1.d1_f and f.f_d2 = d2.d2_f and f.f_d3 = d3.d3_f and
>         d1.d1_d2 = d2.d2_d1 and d1.d1_d3 = d3.d3_d1 and
>         d2.d2_d3 = d3.d3_d2;
+----+-----+-----+-----+
| F  | D1  | D2  | D3  |
+----+-----+-----+-----+
| 0  | 1   | 2   | 3   |
+----+-----+-----+-----+
> 
> ------------
> -- Misc Bugs
> ------------
> -- LDB-65 -- need to handle self-joins
> -- no need for any actual data, as the bug appears during optimization time
> create table EMP (
>   EMPNO numeric(5,0),
>   FNAME varchar(20),
>   LNAME varchar(20),
>   SEX char(1),
>   DEPTNO integer,
>   MANAGER numeric(5,0),
>   LOCID CHAR(2),
>   SAL integer,
>   COMMISSION integer,
>   HOBBY varchar(20)
> );
> 
> create table DEPT (
>   DEPTNO integer,
>   DNAME varchar(20),
>   LOCID CHAR(2)
> );
> 
> create table LOCATION(
>   LOCID char(2),
>   STREET varchar(50),
>   CITY varchar(20),
>   STATE char(2),
>   ZIP numeric(5,0)
> );
> 
> !set outputformat csv
> 
> explain plan for
> select EMP.LNAME, DEPT.DNAME
>     from EMP, DEPT, LOCATION EL
>     where EL.LOCID = EMP.LOCID and EL.LOCID=DEPT.LOCID;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" LNAME, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" DNAME) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'      FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" LNAME, CHAR(2) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" LOCID0) NOT NULL])'
'        LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'          LcsRowScanRel(table=[[LOCALDB, JO, EMP]], projection=[[2, 6]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMP$LNAME, SYS$CLUSTERED_INDEX$EMP$LOCID]])'
'          LcsRowScanRel(table=[[LOCALDB, JO, LOCATION]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$LOCATION$LOCID]])'
'      LcsRowScanRel(table=[[LOCALDB, JO, DEPT]], projection=[[1, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPT$DNAME, SYS$CLUSTERED_INDEX$DEPT$LOCID]])'
> 
> explain plan for
> select EMP.LNAME, DEPT.DNAME
>     from EMP, DEPT, LOCATION EL, LOCATION DL
>     where EL.LOCID = EMP.LOCID and DL.LOCID=DEPT.LOCID;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1]], outputRowType=[RecordType(VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" LNAME, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" DNAME) NOT NULL])'
'    LhxJoinRel(leftKeys=[[2]], rightKeys=[[0]], joinType=[INNER])'
'      FennelRenameRel(fieldNames=[[LNAME, DNAME, LOCID1]])'
'        FennelCartesianProductRel(leftouterjoin=[false])'
'          FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" LNAME) NOT NULL])'
'            LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'              LcsRowScanRel(table=[[LOCALDB, JO, EMP]], projection=[[2, 6]], clustered indexes=[[SYS$CLUSTERED_INDEX$EMP$LNAME, SYS$CLUSTERED_INDEX$EMP$LOCID]])'
'              LcsRowScanRel(table=[[LOCALDB, JO, LOCATION]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$LOCATION$LOCID]])'
'          LcsRowScanRel(table=[[LOCALDB, JO, DEPT]], projection=[[1, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$DEPT$DNAME, SYS$CLUSTERED_INDEX$DEPT$LOCID]])'
'      LcsRowScanRel(table=[[LOCALDB, JO, LOCATION]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$LOCATION$LOCID]])'
> 
> -- tables needed for complex select below; taken from pge query 1
> 
> create table CUST_SERV_ACCT(CUST_SERV_ACCT_KEY DECIMAL(10,0),
>  CU_ID DECIMAL(10,0),
>  CU_TYP_IND CHAR(1),
>  CUOR_CUST_NM VARCHAR(50),
>  ORGDTL_STR_ID_TXT VARCHAR(10),
>  ORGDTL_NM VARCHAR(50),
>  ORGDTL_DBA_NM VARCHAR(18),
>  CUIN_LST_NM VARCHAR(25),
>  CUIN_FST_NM VARCHAR(25),
>  CUIN_MID_INIT_TXT CHAR(1),
>  CA_ID DECIMAL(10,0),
>  MAIL_ADDR_ID DECIMAL(10,0),
>  SITE_ID DECIMAL(10,0),
>  SERV_ADDR VARCHAR(40),
>  MNCPLT_NM VARCHAR(25),
>  ST_CD CHAR(2),
>  ZIP_CD_NUM CHAR(5),
>  CO_CD CHAR(3),
>  GEOG_KEY DECIMAL(10,0),
>  SITUSE_CD CHAR(2),
>  SAA_ID DECIMAL(10,0),
>  SAA_SEQ_NUM DECIMAL(5,0),
>  SRVPLN_KEY DECIMAL(10,0),
>  CYC_FREQY_CD CHAR(2),
>  ACYC_NUM CHAR(2),
>  CNTLUT_NUM DECIMAL(10,0),
>  IS_DWLGS_VAL DECIMAL(5,0),
>  SERV_SIC_CD CHAR(4),
>  BU_CD CHAR(3),
>  UTIL_TYP_CD CHAR(2),
>  SAA_SPLINSTL_INDCR CHAR(1),
>  SAA_CLRG_ACCT_ID DECIMAL(10,0),
>  SAA_ST_TX_EXM_INDC CHAR(1),
>  IS_SERV_INSTLD_DT TIMESTAMP,
>  RCD_EFF_DT TIMESTAMP,
>  RCD_END_DT TIMESTAMP,
>  PROC_BAT_ID DECIMAL(10,0)) 
> ;
> create table GEOG(GEOG_KEY DECIMAL(10,0),
>  DPT_CD CHAR(3),
>  RVTWN_CD CHAR(3),
>  RVTWN_DESC VARCHAR(30),
>  GEOG_CNTY_CD CHAR(2),
>  GEOG_CNTY_DESC VARCHAR(30),
>  ST_CD CHAR(2),
>  ST_DESC VARCHAR(30),
>  PROC_BATCH_ID VARCHAR(10)) 
> ;
> create table REVN_DTL_RAND(CUST_SERV_ACCT_KEY DECIMAL(10,0),
>  GEOG_KEY DECIMAL(10,0),
>  SRVPLN_KEY DECIMAL(10,0),
>  REVN_YR_MO DECIMAL(6,0),
>  USG_VAL DOUBLE,
>  USG_BILL_THERM DOUBLE,
>  USG_BILL_KWH DOUBLE,
>  USGC_BILL_KW_VAL DOUBLE,
>  RSD_SVC_BILG_AMT DOUBLE,
>  RSD_ST_SLSTX_AMT DOUBLE,
>  RSD_TRSPT_CHRG_AMT DOUBLE,
>  RSD_BALG_CHRG_AMT DOUBLE,
>  RSD_TOP_SRCHRG_AMT DOUBLE,
>  RSD_CCOGA_AMT DOUBLE,
>  RSD_CCOGC_AMT DOUBLE,
>  RSD_CUST_CHRG_AMT DOUBLE,
>  RSD_DMND_CHRG_AMT DOUBLE,
>  RSD_CU_CNT DECIMAL(5,0),
>  SAS_FNL_BIL_INDCR CHAR(1),
>  SAS_TYP_CD CHAR(1),
>  USG_DAYS_NUM DECIMAL(5,0),
>  USG_STRT_DT TIMESTAMP,
>  USG_END_DT TIMESTAMP,
>  CISPD_DT TIMESTAMP,
>  PROC_BAT_ID DECIMAL(10,0)) 
> ;
> create table REVN_PRD(REVN_YR_MO DECIMAL(6,0),
>  REVN_YR_MO_DESC VARCHAR(14),
>  REVN_MO DECIMAL(2,0),
>  REVN_MO_DESC VARCHAR(9),
>  REVN_YR DECIMAL(4,0),
>  REVN_QTR CHAR(1),
>  REVN_QTR_YR CHAR(7),
>  REVN_QTR_YR_DESC VARCHAR(20),
>  USER_ID CHAR(4)) 
> ;
> create table SERV_PLAN(SRVPLN_KEY DECIMAL(10,0),
>  SRVPLN_ID DECIMAL(10,0),
>  SRVPLN_NM VARCHAR(25),
>  SPO_ID DECIMAL(10,0),
>  SPO_NM VARCHAR(25),
>  BU_CD CHAR(3),
>  BU_DESC VARCHAR(30),
>  RC_CD CHAR(2),
>  RC_DESC VARCHAR(30),
>  PROC_BAT_ID DECIMAL(10,0)) 
> ;
> 
> -- this query exercises the case where merge projections are required as
> -- joins are being converted to MultiJoinRels and projections are pulled up;
> -- the resulting query plan should NOT contain cartesian product joins
> explain plan for
> SELECT DISTINCT AL1.CUST_SERV_ACCT_KEY
>    FROM
>     CUST_SERV_ACCT AL1,
>     GEOG AL2,
>     SERV_PLAN AL3,
>     REVN_PRD AL4,
>     REVN_DTL_RAND AL5
>    WHERE AL5.REVN_YR_MO=AL4.REVN_YR_MO
>     AND AL2.GEOG_KEY=AL5.GEOG_KEY
>     AND AL3.SRVPLN_KEY=AL5.SRVPLN_KEY
>     AND AL1.CUST_SERV_ACCT_KEY=AL5.CUST_SERV_ACCT_KEY
>     AND AL5.SAS_FNL_BIL_INDCR='Y' AND AL4.REVN_YR=1995;
'column0'
'FennelToIteratorConverter'
'  LhxAggRel(groupCount=[1])'
'    FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(DECIMAL(10, 0) CUST_SERV_ACCT_KEY) NOT NULL])'
'      LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'        FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(DECIMAL(10, 0) CUST_SERV_ACCT_KEY, DECIMAL(6, 0) REVN_YR_MO) NOT NULL])'
'          LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'            FennelReshapeRel(projection=[[0, 2, 3]], outputRowType=[RecordType(DECIMAL(10, 0) CUST_SERV_ACCT_KEY, DECIMAL(10, 0) SRVPLN_KEY, DECIMAL(6, 0) REVN_YR_MO) NOT NULL])'
'              LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'                FennelReshapeRel(projection=[[0, 2, 3, 4]], outputRowType=[RecordType(DECIMAL(10, 0) CUST_SERV_ACCT_KEY, DECIMAL(10, 0) GEOG_KEY, DECIMAL(10, 0) SRVPLN_KEY, DECIMAL(6, 0) REVN_YR_MO) NOT NULL])'
'                  LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                    LcsRowScanRel(table=[[LOCALDB, JO, CUST_SERV_ACCT]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$CUST_SERV_ACCT$CUST_SERV_ACCT_KEY]])'
'                    LcsRowScanRel(table=[[LOCALDB, JO, REVN_DTL_RAND]], projection=[[0, 1, 2, 3]], clustered indexes=[[SYS$CLUSTERED_INDEX$REVN_DTL_RAND$CUST_SERV_ACCT_KEY, SYS$CLUSTERED_INDEX$REVN_DTL_RAND$GEOG_KEY, SYS$CLUSTERED_INDEX$REVN_DTL_RAND$REVN_YR_MO, SYS$CLUSTERED_INDEX$REVN_DTL_RAND$SAS_FNL_BIL_INDCR, SYS$CLUSTERED_INDEX$REVN_DTL_RAND$SRVPLN_KEY]], residual columns=[[18]])'
'                      FennelValuesRel(tuples=[[{ '[', 'Y', ']', 'Y' }]])'
'                LcsRowScanRel(table=[[LOCALDB, JO, GEOG]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$GEOG$GEOG_KEY]])'
'            LcsRowScanRel(table=[[LOCALDB, JO, SERV_PLAN]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$SERV_PLAN$SRVPLN_KEY]])'
'        LcsRowScanRel(table=[[LOCALDB, JO, REVN_PRD]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$REVN_PRD$REVN_YR, SYS$CLUSTERED_INDEX$REVN_PRD$REVN_YR_MO]], residual columns=[[4]])'
'          FennelValuesRel(tuples=[[{ '[', 1995, ']', 1995 }]])'
> 
> -- this query exercises ensuring that all projections are merged before
> -- converting joins to MultiJoinRels; the resulting query plan
> -- should NOT contain cartesian product joins
> explain plan for
> SELECT AL1.CU_ID, AL4.REVN_YR_MO, SUM(AL5.USG_VAL),
>  SUM(AL5.USG_BILL_THERM), SUM(AL5.USGC_BILL_KW_VAL),
>  SUM(AL5.RSD_SVC_BILG_AMT), AL5.RSD_CU_CNT
> FROM
>  CUST_SERV_ACCT AL1,
>  GEOG AL2,
>  SERV_PLAN AL3,
>  REVN_PRD AL4,
>  REVN_DTL_RAND AL5
> WHERE (AL5.REVN_YR_MO=AL4.REVN_YR_MO
>  AND AL2.GEOG_KEY=AL5.GEOG_KEY AND AL3.SRVPLN_KEY=AL5.SRVPLN_KEY
>  AND AL1.CUST_SERV_ACCT_KEY=AL5.CUST_SERV_ACCT_KEY)
>  AND (AL2.ST_CD='IN' AND AL2.GEOG_CNTY_DESC='LAPORTE'
>  AND AL4.REVN_YR=1995 AND AL3.SRVPLN_NM LIKE '%DUSK%'
>  AND AL3.SPO_NM LIKE '%SODIUM%'
>  AND AL3.RC_DESC='RESIDENTIAL - GENERAL SERVICE')
> GROUP BY AL1.CU_ID, AL4.REVN_YR_MO, AL5.RSD_CU_CNT;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1, 3, 4, 5, 6, 2]], outputRowType=[RecordType(DECIMAL(10, 0) CU_ID, DECIMAL(6, 0) REVN_YR_MO, DOUBLE EXPR$2, DOUBLE EXPR$3, DOUBLE EXPR$4, DOUBLE EXPR$5, DECIMAL(5, 0) RSD_CU_CNT) NOT NULL])'
'    LhxAggRel(groupCount=[3], EXPR$2=[SUM(3)], EXPR$3=[SUM(4)], EXPR$4=[SUM(5)], EXPR$5=[SUM(6)])'
'      FennelReshapeRel(projection=[[0, 7, 6, 2, 3, 4, 5]], outputRowType=[RecordType(DECIMAL(10, 0) CU_ID, DECIMAL(6, 0) REVN_YR_MO, DECIMAL(5, 0) RSD_CU_CNT, DOUBLE USG_VAL, DOUBLE USG_BILL_THERM, DOUBLE USGC_BILL_KW_VAL, DOUBLE RSD_SVC_BILG_AMT) NOT NULL])'
'        LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'          FennelReshapeRel(projection=[[0, 2, 3, 4, 5, 6, 7]], outputRowType=[RecordType(DECIMAL(10, 0) CU_ID, DECIMAL(6, 0) REVN_YR_MO, DOUBLE USG_VAL, DOUBLE USG_BILL_THERM, DOUBLE USGC_BILL_KW_VAL, DOUBLE RSD_SVC_BILG_AMT, DECIMAL(5, 0) RSD_CU_CNT) NOT NULL])'
'            LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'              FennelReshapeRel(projection=[[0, 2, 3, 4, 5, 6, 7, 8]], outputRowType=[RecordType(DECIMAL(10, 0) CU_ID, DECIMAL(10, 0) SRVPLN_KEY, DECIMAL(6, 0) REVN_YR_MO, DOUBLE USG_VAL, DOUBLE USG_BILL_THERM, DOUBLE USGC_BILL_KW_VAL, DOUBLE RSD_SVC_BILG_AMT, DECIMAL(5, 0) RSD_CU_CNT) NOT NULL])'
'                LhxJoinRel(leftKeys=[[1]], rightKeys=[[0]], joinType=[INNER])'
'                  FennelReshapeRel(projection=[[1, 3, 4, 5, 6, 7, 8, 9, 10]], outputRowType=[RecordType(DECIMAL(10, 0) CU_ID, DECIMAL(10, 0) GEOG_KEY, DECIMAL(10, 0) SRVPLN_KEY, DECIMAL(6, 0) REVN_YR_MO, DOUBLE USG_VAL, DOUBLE USG_BILL_THERM, DOUBLE USGC_BILL_KW_VAL, DOUBLE RSD_SVC_BILG_AMT, DECIMAL(5, 0) RSD_CU_CNT) NOT NULL])'
'                    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'                      LcsRowScanRel(table=[[LOCALDB, JO, CUST_SERV_ACCT]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$CUST_SERV_ACCT$CUST_SERV_ACCT_KEY, SYS$CLUSTERED_INDEX$CUST_SERV_ACCT$CU_ID]])'
'                      LcsRowScanRel(table=[[LOCALDB, JO, REVN_DTL_RAND]], projection=[[0, 1, 2, 3, 4, 5, 7, 8, 17]], clustered indexes=[[SYS$CLUSTERED_INDEX$REVN_DTL_RAND$CUST_SERV_ACCT_KEY, SYS$CLUSTERED_INDEX$REVN_DTL_RAND$GEOG_KEY, SYS$CLUSTERED_INDEX$REVN_DTL_RAND$REVN_YR_MO, SYS$CLUSTERED_INDEX$REVN_DTL_RAND$RSD_CU_CNT, SYS$CLUSTERED_INDEX$REVN_DTL_RAND$RSD_SVC_BILG_AMT, SYS$CLUSTERED_INDEX$REVN_DTL_RAND$SRVPLN_KEY, SYS$CLUSTERED_INDEX$REVN_DTL_RAND$USGC_BILL_KW_VAL, SYS$CLUSTERED_INDEX$REVN_DTL_RAND$USG_BILL_THERM, SYS$CLUSTERED_INDEX$REVN_DTL_RAND$USG_VAL]])'
'                  LcsRowScanRel(table=[[LOCALDB, JO, GEOG]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$GEOG$GEOG_CNTY_DESC, SYS$CLUSTERED_INDEX$GEOG$GEOG_KEY, SYS$CLUSTERED_INDEX$GEOG$ST_CD]], residual columns=[[5, 6]])'
'                    FennelValuesRel(tuples=[[{ '[', 'LAPORTE', ']', 'LAPORTE' }]])'
'                    FennelValuesRel(tuples=[[{ '[', 'IN', ']', 'IN' }]])'
'              FennelCalcRel(expr#0..2=[{inputs}], expr#3=['%DUSK%'], expr#4=[LIKE($t1, $t3)], expr#5=['%SODIUM%'], expr#6=[LIKE($t2, $t5)], expr#7=[AND($t4, $t6)], SRVPLN_KEY=[$t0], $condition=[$t7])'
'                LcsRowScanRel(table=[[LOCALDB, JO, SERV_PLAN]], projection=[[0, 2, 4]], clustered indexes=[[SYS$CLUSTERED_INDEX$SERV_PLAN$RC_DESC, SYS$CLUSTERED_INDEX$SERV_PLAN$SPO_NM, SYS$CLUSTERED_INDEX$SERV_PLAN$SRVPLN_KEY, SYS$CLUSTERED_INDEX$SERV_PLAN$SRVPLN_NM]], residual columns=[[8]])'
'                  FennelValuesRel(tuples=[[{ '[', 'RESIDENTIAL - GENERAL SERVICE', ']', 'RESIDENTIAL - GENERAL SERVICE' }]])'
'          LcsRowScanRel(table=[[LOCALDB, JO, REVN_PRD]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$REVN_PRD$REVN_YR, SYS$CLUSTERED_INDEX$REVN_PRD$REVN_YR_MO]], residual columns=[[4]])'
'            FennelValuesRel(tuples=[[{ '[', 1995, ']', 1995 }]])'
> 
> 
> -- LER-3639 -- Projects should not be pulled up in this case because the
> -- projection expression is used as a join key.  If this query is not properly
> -- optimized, a cartesian join is incorrectly chosen.
> create table t1(t1a char(10));
> create table t2(t2a char(10));
> create table t3(t3a char(10));
> call sys_boot.mgmt.stat_set_row_count('LOCALDB', 'JO', 'T1', 4841);
> call sys_boot.mgmt.stat_set_row_count('LOCALDB', 'JO', 'T2', 25199);
> call sys_boot.mgmt.stat_set_row_count('LOCALDB', 'JO', 'T3', 25199);
> explain plan for
> select * from (select t1a||t2a as a from t1, t2 where t1a = t2a) as x, t3
> where t3a = a;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 2]], outputRowType=[RecordType(CHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" A, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T3A) NOT NULL])'
'    LhxJoinRel(leftKeys=[[1]], rightKeys=[[1]], joinType=[INNER])'
'      FennelCalcRel(expr#0..1=[{inputs}], expr#2=[||($t1, $t0)], expr#3=[CAST($t2):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], A=[$t2], CAST($0):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"=[$t3])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'          LcsRowScanRel(table=[[LOCALDB, JO, T2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T2$T2A]])'
'          LcsRowScanRel(table=[[LOCALDB, JO, T1]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$T1A]])'
'      FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T3A, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($0):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, JO, T3]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T3$T3A]])'
> 
> -- same query as above except without the subquery in the from clause
> explain plan for
> select * from t1, t2, t3 where t1a = t2a and t1a||t2a = t3a;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[1, 0, 3]], outputRowType=[RecordType(CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T1A, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T2A, CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T3A) NOT NULL])'
'    LhxJoinRel(leftKeys=[[2]], rightKeys=[[1]], joinType=[INNER])'
'      FennelCalcRel(expr#0..1=[{inputs}], expr#2=[||($t1, $t0)], expr#3=[CAST($t2):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], proj#0..1=[{exprs}], CAST(||($1, $0)):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"=[$t3])'
'        LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'          LcsRowScanRel(table=[[LOCALDB, JO, T2]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T2$T2A]])'
'          LcsRowScanRel(table=[[LOCALDB, JO, T1]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$T1A]])'
'      FennelReshapeRel(projection=[[0, 0]], outputRowType=[RecordType(CHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" T3A, VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" CAST($0):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary") NOT NULL])'
'        LcsRowScanRel(table=[[LOCALDB, JO, T3]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T3$T3A]])'
> 
> !quit
