> -- $Id$
> -- Test internal rid function
> 
> create schema rid;
> set schema 'rid';
> 
> -- lcs_rid not available outside of LucidDb personality
> create table dummy(a int) server sys_column_store_data_server;
> select lcs_rid(a) from dummy;
Error: From line 1, column 8 to line 1, column 17: No match found for function signature LCS_RID(<NUMERIC>) (state=,code=0)
> 
> alter session implementation set jar sys_boot.sys_boot.luciddb_plugin;
> create table tencols(c0 int, c1 int, c2 int, c3 int, c4 int, c5 int, c6 int,
>             c7 int, c8 int, c9 int)
>     server sys_column_store_data_server
>     create clustered index i_c6_c7_c8_c9 on tencols(c6, c7, c8, c9)
>     create clustered index i_c3_c4_c5 on tencols(c3, c4, c5)
>     create clustered index i_c1_c2 on tencols(c1, c2)
>     create clustered index i_c0 on tencols(c0);
> create index itencols on tencols(c9);
> insert into tencols values(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
> insert into tencols values(10, 11, 12, 13, 14, 15, 16, 17, 18, 19);
> insert into tencols values(20, 21, 22, 23, 24, 25, 26, 27, 28, 29);
> insert into tencols values(30, 31, 32, 33, 34, 35, 36, 37, 38, 39);
> insert into tencols values(40, 41, 42, 43, 44, 45, 46, 47, 48, 49);
> analyze table tencols compute statistics for all columns;
> 
> -- basic selects
> select * from tencols order by c0;
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| C0  | C1  | C2  | C3  | C4  | C5  | C6  | C7  | C8  | C9  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| 0   | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   | 9   |
| 10  | 11  | 12  | 13  | 14  | 15  | 16  | 17  | 18  | 19  |
| 20  | 21  | 22  | 23  | 24  | 25  | 26  | 27  | 28  | 29  |
| 30  | 31  | 32  | 33  | 34  | 35  | 36  | 37  | 38  | 39  |
| 40  | 41  | 42  | 43  | 44  | 45  | 46  | 47  | 48  | 49  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
> select count(*) from tencols;
+---------+
| EXPR$0  |
+---------+
| 5       |
+---------+
> select lcs_rid(c0) from tencols order by 1;
+---------+
| EXPR$0  |
+---------+
| 0       |
| 1       |
| 2       |
| 3       |
| 4       |
+---------+
> select *, lcs_rid(c5) from tencols order by 10;
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+----------+
| C0  | C1  | C2  | C3  | C4  | C5  | C6  | C7  | C8  | C9  | EXPR$10  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+----------+
| 0   | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   | 9   | 0        |
| 10  | 11  | 12  | 13  | 14  | 15  | 16  | 17  | 18  | 19  | 1        |
| 20  | 21  | 22  | 23  | 24  | 25  | 26  | 27  | 28  | 29  | 2        |
| 30  | 31  | 32  | 33  | 34  | 35  | 36  | 37  | 38  | 39  | 3        |
| 40  | 41  | 42  | 43  | 44  | 45  | 46  | 47  | 48  | 49  | 4        |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+----------+
> select c3, c2, lcs_rid(c8), c9, c0 from tencols order by 3;
+-----+-----+---------+-----+-----+
| C3  | C2  | EXPR$2  | C9  | C0  |
+-----+-----+---------+-----+-----+
| 3   | 2   | 0       | 9   | 0   |
| 13  | 12  | 1       | 19  | 10  |
| 23  | 22  | 2       | 29  | 20  |
| 33  | 32  | 3       | 39  | 30  |
| 43  | 42  | 4       | 49  | 40  |
+-----+-----+---------+-----+-----+
> select lcs_rid(c0 + c1) from tencols order by 1;
+---------+
| EXPR$0  |
+---------+
| 0       |
| 1       |
| 2       |
| 3       |
| 4       |
+---------+
> select 2 * lcs_rid(c0) from tencols;
+---------+
| EXPR$0  |
+---------+
| 0       |
| 2       |
| 4       |
| 6       |
| 8       |
+---------+
> select abs(c0 - c9), lcs_rid(c1) from tencols order by 2;
+---------+---------+
| EXPR$0  | EXPR$1  |
+---------+---------+
| 9       | 0       |
| 9       | 1       |
| 9       | 2       |
| 9       | 3       |
| 9       | 4       |
+---------+---------+
> 
> -- select rid multiple times
> select lcs_rid(c0), lcs_rid(c1), lcs_rid(c2) from tencols order by 1;
+---------+---------+---------+
| EXPR$0  | EXPR$1  | EXPR$2  |
+---------+---------+---------+
| 0       | 0       | 0       |
| 1       | 1       | 1       |
| 2       | 2       | 2       |
| 3       | 3       | 3       |
| 4       | 4       | 4       |
+---------+---------+---------+
> 
> -- select with where clause
> select c9, c5, lcs_rid(c1), c2 from tencols where c0 = 0;
+-----+-----+---------+-----+
| C9  | C5  | EXPR$2  | C2  |
+-----+-----+---------+-----+
| 9   | 5   | 0       | 2   |
+-----+-----+---------+-----+
> select *, lcs_rid(c0) from tencols where c1 = 11;
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+----------+
| C0  | C1  | C2  | C3  | C4  | C5  | C6  | C7  | C8  | C9  | EXPR$10  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+----------+
| 10  | 11  | 12  | 13  | 14  | 15  | 16  | 17  | 18  | 19  | 1        |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+----------+
> 
> -- filter on rid
> select c0 from tencols where lcs_rid(c1) > 2 order by c0;
+-----+
| C0  |
+-----+
| 30  |
| 40  |
+-----+
> select c0, c9, lcs_rid(c3) from tencols where c9 > 9 and lcs_rid(c1) = 3;
+-----+-----+---------+
| C0  | C9  | EXPR$2  |
+-----+-----+---------+
| 30  | 39  | 3       |
+-----+-----+---------+
> select c0, c6, lcs_rid(c7) from tencols where c6 = 26 and lcs_rid(c8) = 2;
+-----+-----+---------+
| C0  | C6  | EXPR$2  |
+-----+-----+---------+
| 20  | 26  | 2       |
+-----+-----+---------+
> select * from tencols where lcs_rid(c0) = 0;
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| C0  | C1  | C2  | C3  | C4  | C5  | C6  | C7  | C8  | C9  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| 0   | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   | 9   |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
> select count(*) from tencols where lcs_rid(c0) < 3;
+---------+
| EXPR$0  |
+---------+
| 3       |
+---------+
> -- these return no rows
> select c0, c6, lcs_rid(c7) from tencols where c6 = 26 and lcs_rid(c8) = 3;
+-----+-----+---------+
| C0  | C6  | EXPR$2  |
+-----+-----+---------+
+-----+-----+---------+
> select c0, c6, lcs_rid(c7) from tencols where c9 = 49 and lcs_rid(c8) = 3;
+-----+-----+---------+
| C0  | C6  | EXPR$2  |
+-----+-----+---------+
+-----+-----+---------+
> 
> -- join
> select t2.c8, t1.c5, lcs_rid(t1.c0), t1.c2, lcs_rid(t2.c4)
>     from tencols t1, tencols t2 where t1.c0 = t2.c0
>     order by 3;
+-----+-----+---------+-----+---------+
| C8  | C5  | EXPR$2  | C2  | EXPR$4  |
+-----+-----+---------+-----+---------+
| 8   | 5   | 0       | 2   | 0       |
| 18  | 15  | 1       | 12  | 1       |
| 28  | 25  | 2       | 22  | 2       |
| 38  | 35  | 3       | 32  | 3       |
| 48  | 45  | 4       | 42  | 4       |
+-----+-----+---------+-----+---------+
> select *, lcs_rid(t1.c0), lcs_rid(t2.c0)
>     from tencols t1, tencols t2 where t1.c0 = t2.c0
>     order by 1;
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+------+------+------+------+----------+----------+
| C0  | C1  | C2  | C3  | C4  | C5  | C6  | C7  | C8  | C9  | C00  | C10  | C20  | C30  | C40  | C50  | C60  | C70  | C80  | C90  | EXPR$20  | EXPR$21  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+------+------+------+------+----------+----------+
| 0   | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   | 9   | 0    | 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    | 9    | 0        | 0        |
| 10  | 11  | 12  | 13  | 14  | 15  | 16  | 17  | 18  | 19  | 10   | 11   | 12   | 13   | 14   | 15   | 16   | 17   | 18   | 19   | 1        | 1        |
| 20  | 21  | 22  | 23  | 24  | 25  | 26  | 27  | 28  | 29  | 20   | 21   | 22   | 23   | 24   | 25   | 26   | 27   | 28   | 29   | 2        | 2        |
| 30  | 31  | 32  | 33  | 34  | 35  | 36  | 37  | 38  | 39  | 30   | 31   | 32   | 33   | 34   | 35   | 36   | 37   | 38   | 39   | 3        | 3        |
| 40  | 41  | 42  | 43  | 44  | 45  | 46  | 47  | 48  | 49  | 40   | 41   | 42   | 43   | 44   | 45   | 46   | 47   | 48   | 49   | 4        | 4        |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+------+------+------+------+----------+----------+
> select *, lcs_rid(t1.c0), lcs_rid(t2.c0) 
>     from tencols t1 left outer join tencols t2 on t1.c0 = t2.c0
>     order by 1;
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+------+------+------+------+----------+----------+
| C0  | C1  | C2  | C3  | C4  | C5  | C6  | C7  | C8  | C9  | C00  | C10  | C20  | C30  | C40  | C50  | C60  | C70  | C80  | C90  | EXPR$20  | EXPR$21  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+------+------+------+------+----------+----------+
| 0   | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   | 9   | 0    | 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    | 9    | 0        | 0        |
| 10  | 11  | 12  | 13  | 14  | 15  | 16  | 17  | 18  | 19  | 10   | 11   | 12   | 13   | 14   | 15   | 16   | 17   | 18   | 19   | 1        | 1        |
| 20  | 21  | 22  | 23  | 24  | 25  | 26  | 27  | 28  | 29  | 20   | 21   | 22   | 23   | 24   | 25   | 26   | 27   | 28   | 29   | 2        | 2        |
| 30  | 31  | 32  | 33  | 34  | 35  | 36  | 37  | 38  | 39  | 30   | 31   | 32   | 33   | 34   | 35   | 36   | 37   | 38   | 39   | 3        | 3        |
| 40  | 41  | 42  | 43  | 44  | 45  | 46  | 47  | 48  | 49  | 40   | 41   | 42   | 43   | 44   | 45   | 46   | 47   | 48   | 49   | 4        | 4        |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+------+------+------+------+------+------+------+------+------+----------+----------+
> select t2.c8, t1.c5, lcs_rid(t1.c0), t1.c2, lcs_rid(t2.c4)
>     from tencols t1, tencols t2 where lcs_rid(t1.c0) = lcs_rid(t2.c0)
>     order by 3;
+-----+-----+---------+-----+---------+
| C8  | C5  | EXPR$2  | C2  | EXPR$4  |
+-----+-----+---------+-----+---------+
| 8   | 5   | 0       | 2   | 0       |
| 18  | 15  | 1       | 12  | 1       |
| 28  | 25  | 2       | 22  | 2       |
| 38  | 35  | 3       | 32  | 3       |
| 48  | 45  | 4       | 42  | 4       |
+-----+-----+---------+-----+---------+
> select lcs_rid(t1.c0) from tencols t1, tencols t2 order by 1;
+---------+
| EXPR$0  |
+---------+
| 0       |
| 0       |
| 0       |
| 0       |
| 0       |
| 1       |
| 1       |
| 1       |
| 1       |
| 1       |
| 2       |
| 2       |
| 2       |
| 2       |
| 2       |
| 3       |
| 3       |
| 3       |
| 3       |
| 3       |
| 4       |
| 4       |
| 4       |
| 4       |
| 4       |
+---------+
> -- use rids in a join where nothing is projected from one side of the join
> -- and that input into the join has only 1 field
> select lcs_rid(t.c0), c0 from tencols t, (values(1)) order by 2; 
+---------+-----+
| EXPR$0  | C0  |
+---------+-----+
| 0       | 0   |
| 1       | 10  |
| 2       | 20  |
| 3       | 30  |
| 4       | 40  |
+---------+-----+
> select lcs_rid(t.c0), c0 from (values(1)), tencols t order by 2; 
+---------+-----+
| EXPR$0  | C0  |
+---------+-----+
| 0       | 0   |
| 1       | 10  |
| 2       | 20  |
| 3       | 30  |
| 4       | 40  |
+---------+-----+
> 
> -- no-op selects
> select lcs_rid(c0), lcs_rid(c1)+1 from tencols where 1 = 0;
+---------+---------+
| EXPR$0  | EXPR$1  |
+---------+---------+
+---------+---------+
> select lcs_rid(t1.c0)*lcs_rid(t2.c1) from tencols t1, tencols t2
>     where 1 = 0 and t1.c2 = t2.c2;
+---------+
| EXPR$0  |
+---------+
+---------+
> 
> --------------
> -- Error cases
> --------------
> -- no argument
> select lcs_rid() from tencols;
Error: From line 1, column 8 to line 1, column 16: Invalid number of arguments to function 'LCS_RID'. Was expecting 1 arguments (state=,code=0)
> -- non-column argument
> select lcs_rid(0) from tencols;
Error: java.lang.AssertionError: Internal error: cannot implement LCS_RID($t1) (state=,code=0)
> -- non-existent column
> select lcs_rid(c10) from tencols;
Error: From line 1, column 16 to line 1, column 18: Column 'C10' not found in any table (state=,code=0)
> -- reference > 1 table
> select lcs_rid(t1.c0 + t2.c1) from tencols t1, tencols t2;
Error: java.lang.AssertionError: Internal error: cannot implement LCS_RID($t2) (state=,code=0)
> -- non-column argument in where clause
> select c0 from tencols where lcs_rid(0) = 0;
Error: java.lang.AssertionError: Internal error: cannot implement LCS_RID($t1) (state=,code=0)
> 
> -----------------
> -- explain output
> -----------------
> !set outputformat csv
> explain plan for select count(*) from tencols;
'column0'
'FennelToIteratorConverter'
'  FennelAggRel(groupCount=[0], EXPR$0=[COUNT()])'
'    FennelCalcRel(expr#0=[{inputs}], expr#1=[true], $f0=[$t1])'
'      LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[LCS_RID]], clustered indexes=[[I_C0]])'
> explain plan for select lcs_rid(c0) from tencols order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelRenameRel(fieldNames=[[EXPR$0]])'
'      LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[LCS_RID]], clustered indexes=[[I_C0]])'
> explain plan for select *, lcs_rid(c5) from tencols order by 10;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[9]], discardDuplicates=[false])'
'    FennelRenameRel(fieldNames=[[C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, EXPR$10]])'
'      LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, LCS_RID]], clustered indexes=[[I_C0, I_C1_C2, I_C3_C4_C5, I_C6_C7_C8_C9]])'
> explain plan for select c3, c2, lcs_rid(c8), c9, c0 from tencols order by 3;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[2]], discardDuplicates=[false])'
'    FennelRenameRel(fieldNames=[[C3, C2, EXPR$2, C9, C0]])'
'      LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[3, 2, LCS_RID, 9, 0]], clustered indexes=[[I_C0, I_C1_C2, I_C3_C4_C5, I_C6_C7_C8_C9]])'
> explain plan for select lcs_rid(c0 + c1) from tencols order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelRenameRel(fieldNames=[[EXPR$0]])'
'      LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[LCS_RID]], clustered indexes=[[I_C0]])'
> explain plan for select 2 * lcs_rid(c0) from tencols;
'column0'
'IterCalcRel(expr#0=[{inputs}], expr#1=[2], expr#2=[*($t1, $t0)], EXPR$0=[$t2])'
'  FennelToIteratorConverter'
'    LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[LCS_RID]], clustered indexes=[[I_C0]])'
> explain plan for select abs(c0 - c9), lcs_rid(c1) from tencols order by 2;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[1]], discardDuplicates=[false])'
'    FennelCalcRel(expr#0..2=[{inputs}], expr#3=[-($t0, $t1)], expr#4=[ABS($t3)], EXPR$0=[$t4], EXPR$1=[$t2])'
'      LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[0, 9, LCS_RID]], clustered indexes=[[I_C0, I_C6_C7_C8_C9]])'
> explain plan for select lcs_rid(c0), lcs_rid(c1), lcs_rid(c2) from tencols
>     order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelRenameRel(fieldNames=[[EXPR$0, EXPR$1, EXPR$2]])'
'      LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[LCS_RID, LCS_RID, LCS_RID]], clustered indexes=[[I_C0]])'
> explain plan for select c9, c5, lcs_rid(c1), c2 from tencols where c0 = 0;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[C9, C5, EXPR$2, C2]])'
'    LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[9, 5, LCS_RID, 2]], clustered indexes=[[I_C0, I_C1_C2, I_C3_C4_C5, I_C6_C7_C8_C9]], residual columns=[[0]])'
'      FennelValuesRel(tuples=[[{ '[', 0, ']', 0 }]])'
> explain plan for select *, lcs_rid(c0) from tencols where c1 = 11;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, EXPR$10]])'
'    LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, LCS_RID]], clustered indexes=[[I_C1_C2, I_C0, I_C3_C4_C5, I_C6_C7_C8_C9]], residual columns=[[1]])'
'      FennelValuesRel(tuples=[[{ '[', 11, ']', 11 }]])'
> explain plan for select c0 from tencols where lcs_rid(c1) > 2 order by c0;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0]], filterOp=[COMP_GT], filterOrdinals=[[1]], filterTuple=[[2]], outputRowType=[RecordType(INTEGER C0) NOT NULL])'
'      LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[0, LCS_RID]], clustered indexes=[[I_C0]])'
> explain plan for select c0, c9, lcs_rid(c3) from tencols
>     where c9 > 9 and lcs_rid(c1) = 3;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1, 2]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[3]], outputRowType=[RecordType(INTEGER C0, INTEGER C9, BIGINT EXPR$2) NOT NULL])'
'    LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[0, 9, LCS_RID, LCS_RID]], clustered indexes=[[I_C6_C7_C8_C9, I_C0]], residual columns=[[9]])'
'      FennelValuesRel(tuples=[[{ '(', 9, '+', null }]])'
> explain plan for select c0, c6, lcs_rid(c7) from tencols
>     where c6 = 26 and lcs_rid(c8) = 2;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1, 2]], filterOp=[COMP_EQ], filterOrdinals=[[3]], filterTuple=[[2]], outputRowType=[RecordType(INTEGER C0, INTEGER C6, BIGINT EXPR$2) NOT NULL])'
'    LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[0, 6, LCS_RID, LCS_RID]], clustered indexes=[[I_C6_C7_C8_C9, I_C0]], residual columns=[[6]])'
'      FennelValuesRel(tuples=[[{ '[', 26, ']', 26 }]])'
> explain plan for select * from tencols where lcs_rid(c0) = 0;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], filterOp=[COMP_EQ], filterOrdinals=[[10]], filterTuple=[[0]], outputRowType=[RecordType(INTEGER C0, INTEGER C1, INTEGER C2, INTEGER C3, INTEGER C4, INTEGER C5, INTEGER C6, INTEGER C7, INTEGER C8, INTEGER C9) NOT NULL])'
'    LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, LCS_RID]], clustered indexes=[[I_C0, I_C1_C2, I_C3_C4_C5, I_C6_C7_C8_C9]])'
> explain plan for select count(*) from tencols where lcs_rid(c0) < 3;
'column0'
'FennelToIteratorConverter'
'  FennelAggRel(groupCount=[0], EXPR$0=[COUNT()])'
'    FennelCalcRel(expr#0=[{inputs}], expr#1=[true], expr#2=[3], expr#3=[<($t0, $t2)], $f0=[$t1], $condition=[$t3])'
'      LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[LCS_RID]], clustered indexes=[[I_C0]])'
> explain plan for select t2.c8, t1.c5, lcs_rid(t1.c0), t1.c2, lcs_rid(t2.c4)
>     from tencols t1, tencols t2 where t1.c0 = t2.c0
>     order by 3;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[2]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[5, 2, 3, 1, 6]], outputRowType=[RecordType(INTEGER C8, INTEGER C5, BIGINT EXPR$2, INTEGER C2, BIGINT EXPR$4) NOT NULL])'
'      LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'        LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[0, 2, 5, LCS_RID]], clustered indexes=[[I_C0, I_C1_C2, I_C3_C4_C5]])'
'        LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[0, 8, LCS_RID]], clustered indexes=[[I_C0, I_C6_C7_C8_C9]])'
> explain plan for select t2.c8, t1.c5, lcs_rid(t1.c0), t1.c2, lcs_rid(t2.c4)
>     from tencols t1, tencols t2 where lcs_rid(t1.c0) = lcs_rid(t2.c0)
>     order by 3;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[2]], discardDuplicates=[false])'
'    FennelRenameRel(fieldNames=[[C8, C5, EXPR$2, C2, EXPR$4]])'
'      LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[8, 5, LCS_RID, 2, LCS_RID]], clustered indexes=[[I_C1_C2, I_C3_C4_C5, I_C6_C7_C8_C9]])'
> explain plan for select lcs_rid(t1.c0) from tencols t1, tencols t2 order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[0]], outputRowType=[RecordType(BIGINT EXPR$0) NOT NULL])'
'      FennelCartesianProductRel(leftouterjoin=[false])'
'        LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[LCS_RID]], clustered indexes=[[I_C0]])'
'        LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[0]], clustered indexes=[[I_C0]])'
> explain plan for
>     select lcs_rid(t.c0), c0 from tencols t, (values(1)) order by 2;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[1]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(BIGINT EXPR$0, INTEGER C0) NOT NULL])'
'      FennelCartesianProductRel(leftouterjoin=[false])'
'        LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[0, LCS_RID]], clustered indexes=[[I_C0]])'
'        FennelValuesRel(tuples=[[{ 1 }]])'
> explain plan for
>     select lcs_rid(t.c0), c0 from (values(1)), tencols t order by 2;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[1]], discardDuplicates=[false])'
'    FennelReshapeRel(projection=[[1, 0]], outputRowType=[RecordType(BIGINT EXPR$0, INTEGER C0) NOT NULL])'
'      FennelCartesianProductRel(leftouterjoin=[false])'
'        LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[0, LCS_RID]], clustered indexes=[[I_C0]])'
'        FennelValuesRel(tuples=[[{ 1 }]])'
> explain plan for
>     select lcs_rid(c0), lcs_rid(c1)+1 from tencols where 1 = 0;
'column0'
'IterCalcRel(expr#0..9=[{inputs}], expr#10=[null], expr#11=[CAST($t10):BIGINT], expr#12=[1], expr#13=[+($t11, $t12)], EXPR$0=[$t11], EXPR$1=[$t13])'
'  FennelToIteratorConverter'
'    FennelValuesRel(tuples=[[]])'
> explain plan for
>     select lcs_rid(t1.c0)*lcs_rid(t2.c1) from tencols t1, tencols t2
>         where 1 = 0 and t1.c2 = t2.c2;
'column0'
'IterCalcRel(expr#0..3=[{inputs}], expr#4=[*($t3, $t1)], EXPR$0=[$t4])'
'  FennelToIteratorConverter'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], joinType=[INNER])'
'      LcsRowScanRel(table=[[LOCALDB, RID, TENCOLS]], projection=[[2, LCS_RID]], clustered indexes=[[I_C1_C2]])'
'      FennelCalcRel(expr#0..9=[{inputs}], expr#10=[null], expr#11=[CAST($t10):BIGINT], C2=[$t2], LCS_RID=[$t11])'
'        FennelValuesRel(tuples=[[]])'
> 
> !quit
