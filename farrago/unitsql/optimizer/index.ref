0: jdbc:farrago:> -- $Id: //open/dt/dev/farrago/unitsql/optimizer/index.sql#2 $
0: jdbc:farrago:> -- Test queries which make use of indexes
0: jdbc:farrago:> 
0: jdbc:farrago:> set schema 'sales';
0: jdbc:farrago:> 
0: jdbc:farrago:> -- force usage of Java calculator
0: jdbc:farrago:> alter system set "calcVirtualMachine" = 'CALCVM_JAVA';
0: jdbc:farrago:> 
0: jdbc:farrago:> -- search unique clustered index
0: jdbc:farrago:> select name from depts where deptno=20;
+------------+
|    NAME    |
+------------+
| Marketing  |
+------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- search unique clustered index with a prefix key
0: jdbc:farrago:> select name from emps where deptno=20 order by 1;
+--------+
|  NAME  |
+--------+
| Eric   |
| Wilma  |
+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- search unique clustered index with a prefix key and a non-indexable condition
0: jdbc:farrago:> select name from emps where deptno=20 and gender='M';
+-------+
| NAME  |
+-------+
| Eric  |
+-------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- search unique unclustered index
0: jdbc:farrago:> select name from emps where empid=3;
+-------+
| NAME  |
+-------+
| Eric  |
+-------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- project columns covered by clustered index
0: jdbc:farrago:> select gender from emps order by 1;
+---------+
| GENDER  |
+---------+
|         |
| F       |
| M       |
| M       |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- project columns covered by an unclustered index
0: jdbc:farrago:> select name from emps order by 1;
+--------+
|  NAME  |
+--------+
| Eric   |
| Fred   |
| John   |
| Wilma  |
+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- sort multiple columns covered by an unclustered index
0: jdbc:farrago:> select name,gender,deptno,empno from emps order by 3,4;
+--------+---------+---------+--------+
|  NAME  | GENDER  | DEPTNO  | EMPNO  |
+--------+---------+---------+--------+
| Fred   |         | 10      | 100    |
| Eric   | M       | 20      | 110    |
| Wilma  | F       | 20      | 120    |
| John   | M       | 40      | 110    |
+--------+---------+---------+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- unique inner join via clustered index
0: jdbc:farrago:> select depts.name as dname,emps.name as ename
. . . . . . . . > from emps inner join depts
. . . . . . . . > on emps.deptno=depts.deptno
. . . . . . . . > order by 1,2;
+------------+--------+
|   DNAME    | ENAME  |
+------------+--------+
| Marketing  | Eric   |
| Marketing  | Wilma  |
| Sales      | Fred   |
+------------+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- unique left outer join via clustered index
0: jdbc:farrago:> select depts.name as dname,emps.name as ename
. . . . . . . . > from emps left outer join depts
. . . . . . . . > on emps.deptno=depts.deptno
. . . . . . . . > order by 1,2;
+------------+--------+
|   DNAME    | ENAME  |
+------------+--------+
|            | John   |
| Marketing  | Eric   |
| Marketing  | Wilma  |
| Sales      | Fred   |
+------------+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- left outer join via clustered index prefix
0: jdbc:farrago:> select emps.name as ename,depts.name as dname
. . . . . . . . > from depts left outer join emps
. . . . . . . . > on depts.deptno=emps.deptno
. . . . . . . . > order by 2,1;
+--------+------------+
| ENAME  |   DNAME    |
+--------+------------+
|        | Accounts   |
| Eric   | Marketing  |
| Wilma  | Marketing  |
| Fred   | Sales      |
+--------+------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- inner join via unclustered index
0: jdbc:farrago:> select emps.name as ename,depts.name as dname
. . . . . . . . > from depts inner join emps
. . . . . . . . > on depts.deptno=emps.empid
. . . . . . . . > order by 2,1;
+--------+-----------+
| ENAME  |   DNAME   |
+--------+-----------+
| Fred   | Accounts  |
+--------+-----------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- left outer join via unclustered index
0: jdbc:farrago:> select emps.name as ename,depts.name as dname
. . . . . . . . > from depts left outer join emps
. . . . . . . . > on depts.deptno=emps.empid
. . . . . . . . > order by 2,1;
+--------+------------+
| ENAME  |   DNAME    |
+--------+------------+
| Fred   | Accounts   |
|        | Marketing  |
|        | Sales      |
+--------+------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- inner join on nullable key
0: jdbc:farrago:> select e.name as ename,e.age,depts.name as dname
. . . . . . . . > from
. . . . . . . . > (select name,age - 20 as age from emps) e
. . . . . . . . > inner join depts on e.age = depts.deptno;
+--------+------+-----------+
| ENAME  | AGE  |   DNAME   |
+--------+------+-----------+
| Wilma  | 30   | Accounts  |
+--------+------+-----------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- outer join on nullable key
0: jdbc:farrago:> select e.name as ename,e.age,depts.name as dname
. . . . . . . . > from
. . . . . . . . > (select name,age - 20 as age from emps) e
. . . . . . . . > left outer join depts on e.age = depts.deptno;
+--------+------+-----------+
| ENAME  | AGE  |   DNAME   |
+--------+------+-----------+
| Fred   | 5    |           |
| Eric   | 60   |           |
| Wilma  | 30   | Accounts  |
| John   |      |           |
+--------+------+-----------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- index join which requires swapped join inputs
0: jdbc:farrago:> select 
. . . . . . . . >     depts.name as dname,e.name as ename
. . . . . . . . > from 
. . . . . . . . >     depts 
. . . . . . . . > inner join 
. . . . . . . . >     (select name,age - 20 as age from emps) e
. . . . . . . . > on 
. . . . . . . . >     e.age=depts.deptno
. . . . . . . . > order by 1,2;
+-----------+--------+
|   DNAME   | ENAME  |
+-----------+--------+
| Accounts  | Wilma  |
+-----------+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- csv format is nicest for query plans
0: jdbc:farrago:> !set outputformat csv
0: jdbc:farrago:> 
0: jdbc:farrago:> -- Note that we explain some queries both with and without order by;
0: jdbc:farrago:> -- with to make sure what we executed above was using the correct plan
0: jdbc:farrago:> -- without to make sure that the order by doesn't affect other
0: jdbc:farrago:> -- aspects of optimization.
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name from depts where deptno=20;
'column0'
'IterCalcRel(expr#0..1=[{inputs}], NAME=[$t1])'
'  FennelToIteratorConverter'
'    FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], uniqueKey=[true], preserveOrder=[false], outer=[false], inputKeyProj=[*], inputJoinProj=[[]])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0=[{inputs}], expr#1=[20], $0=[$t1])'
'          IterOneRowRel'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name from emps where deptno=20 order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0..9=[{inputs}], NAME=[$t1])'
'        FennelToIteratorConverter'
'          FtrsIndexSearchRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], uniqueKey=[false], preserveOrder=[false], outer=[false], inputKeyProj=[*], inputJoinProj=[[]])'
'            IteratorToFennelConverter'
'              IterCalcRel(expr#0=[{inputs}], expr#1=[20], $0=[$t1])'
'                IterOneRowRel'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name from emps where deptno=20 and gender='M';
'column0'
'IterCalcRel(expr#0..9=[{inputs}], expr#10=[_ISO-8859-1'M'], expr#11=[=($t3, $t10)], NAME=[$t1], $condition=[$t11])'
'  FennelToIteratorConverter'
'    FtrsIndexSearchRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], uniqueKey=[false], preserveOrder=[false], outer=[false], inputKeyProj=[*], inputJoinProj=[[]])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0=[{inputs}], expr#1=[20], $0=[$t1])'
'          IterOneRowRel'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name from emps where empid=3;
'column0'
'IterCalcRel(expr#0..9=[{inputs}], NAME=[$t1])'
'  FennelToIteratorConverter'
'    FtrsIndexSearchRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], uniqueKey=[true], preserveOrder=[false], outer=[false], inputKeyProj=[*], inputJoinProj=[[]])'
'      FtrsIndexSearchRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2, 0]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$UNIQUE_KEY$EMPID], uniqueKey=[true], preserveOrder=[false], outer=[false], inputKeyProj=[*], inputJoinProj=[[]])'
'        IteratorToFennelConverter'
'          IterCalcRel(expr#0=[{inputs}], expr#1=[3], $0=[$t1])'
'            IterOneRowRel'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select gender from emps;
'column0'
'FennelToIteratorConverter'
'  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[3]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select gender from emps order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[3]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name from emps;
'column0'
'FennelToIteratorConverter'
'  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name from emps order by 1;
'column0'
'FennelToIteratorConverter'
'  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1]], index=[EMPS_UX], preserveOrder=[true])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name,gender,deptno,empno from emps order by 3,4;
'column0'
'FennelToIteratorConverter'
'  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[[1, 3, 2, 0]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[true])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select depts.name as dname,emps.name as ename
. . . . . . . . > from emps inner join depts
. . . . . . . . > on emps.deptno=depts.deptno
. . . . . . . . > order by 1,2;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0..11=[{inputs}], DNAME=[$t11], ENAME=[$t1])'
'        FennelToIteratorConverter'
'          FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], uniqueKey=[true], preserveOrder=[false], outer=[false], inputKeyProj=[[2]], inputJoinProj=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select depts.name as dname,emps.name as ename
. . . . . . . . > from emps left outer join depts
. . . . . . . . > on emps.deptno=depts.deptno
. . . . . . . . > order by 1,2;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0..11=[{inputs}], DNAME=[$t11], ENAME=[$t1])'
'        FennelToIteratorConverter'
'          FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], uniqueKey=[true], preserveOrder=[false], outer=[true], inputKeyProj=[[2]], inputJoinProj=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select emps.name as ename,depts.name as dname
. . . . . . . . > from depts left outer join emps
. . . . . . . . > on depts.deptno=emps.deptno
. . . . . . . . > order by 2,1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[1, 0]], discardDuplicates=[false])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0..11=[{inputs}], ENAME=[$t3], DNAME=[$t1])'
'        FennelToIteratorConverter'
'          FtrsIndexSearchRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], uniqueKey=[false], preserveOrder=[false], outer=[true], inputKeyProj=[[0]], inputJoinProj=[[0, 1]])'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select emps.name as ename,depts.name as dname
. . . . . . . . > from depts inner join emps
. . . . . . . . > on depts.deptno=emps.empid
. . . . . . . . > order by 2,1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[1, 0]], discardDuplicates=[false])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0..11=[{inputs}], ENAME=[$t3], DNAME=[$t1])'
'        FennelToIteratorConverter'
'          FtrsIndexSearchRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], uniqueKey=[true], preserveOrder=[false], outer=[false], inputKeyProj=[[2, 3]], inputJoinProj=[[0, 1]])'
'            FtrsIndexSearchRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2, 0]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$UNIQUE_KEY$EMPID], uniqueKey=[true], preserveOrder=[false], outer=[false], inputKeyProj=[[0]], inputJoinProj=[[0, 1]])'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select emps.name as ename,depts.name as dname
. . . . . . . . > from depts left outer join emps
. . . . . . . . > on depts.deptno=emps.empid
. . . . . . . . > order by 2,1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[1, 0]], discardDuplicates=[false])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0..11=[{inputs}], ENAME=[$t3], DNAME=[$t1])'
'        FennelToIteratorConverter'
'          FtrsIndexSearchRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], uniqueKey=[true], preserveOrder=[false], outer=[true], inputKeyProj=[[2, 3]], inputJoinProj=[[0, 1]])'
'            FtrsIndexSearchRel(table=[[LOCALDB, SALES, EMPS]], projection=[[2, 0]], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$UNIQUE_KEY$EMPID], uniqueKey=[true], preserveOrder=[false], outer=[true], inputKeyProj=[[0]], inputJoinProj=[[0, 1]])'
'              FtrsIndexScanRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select e.name as ename,e.age,depts.name as dname
. . . . . . . . > from
. . . . . . . . > (select name,age - 20 as age from emps) e
. . . . . . . . > inner join depts on e.age = depts.deptno;
'column0'
'IterCalcRel(expr#0..3=[{inputs}], proj#0..1=[{exprs}], DNAME=[$t3])'
'  FennelToIteratorConverter'
'    FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], uniqueKey=[true], preserveOrder=[false], outer=[false], inputKeyProj=[[2]], inputJoinProj=[[0, 1]])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..9=[{inputs}], expr#10=[20], expr#11=[-($t6, $t10)], expr#12=[IS NOT NULL($t11)], expr#13=[CAST($t11):INTEGER NOT NULL], NAME=[$t1], AGE=[$t11], DEPTNO=[$t13], $condition=[$t12])'
'          FennelToIteratorConverter'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select e.name as ename,e.age,depts.name as dname
. . . . . . . . > from
. . . . . . . . > (select name,age - 20 as age from emps) e
. . . . . . . . > left outer join depts on e.age = depts.deptno;
'column0'
'IterCalcRel(expr#0..3=[{inputs}], proj#0..1=[{exprs}], DNAME=[$t3])'
'  FennelToIteratorConverter'
'    FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], uniqueKey=[true], preserveOrder=[false], outer=[true], inputKeyProj=[[1]], inputJoinProj=[[0, 1]])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0..9=[{inputs}], expr#10=[20], expr#11=[-($t6, $t10)], NAME=[$t1], AGE=[$t11])'
'          FennelToIteratorConverter'
'            FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select 
. . . . . . . . >     depts.name as dname,e.name as ename
. . . . . . . . > from 
. . . . . . . . >     depts 
. . . . . . . . > inner join 
. . . . . . . . >     (select name,age - 20 as age from emps) e
. . . . . . . . > on 
. . . . . . . . >     e.age=depts.deptno
. . . . . . . . > order by 1,2;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0, 1]], discardDuplicates=[false])'
'    IteratorToFennelConverter'
'      IterCalcRel(expr#0..3=[{inputs}], DNAME=[$t3], ENAME=[$t0])'
'        FennelToIteratorConverter'
'          FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], uniqueKey=[true], preserveOrder=[false], outer=[false], inputKeyProj=[[2]], inputJoinProj=[[0, 1]])'
'            IteratorToFennelConverter'
'              IterCalcRel(expr#0..9=[{inputs}], expr#10=[20], expr#11=[-($t6, $t10)], expr#12=[IS NOT NULL($t11)], expr#13=[CAST($t11):INTEGER NOT NULL], NAME=[$t1], AGE=[$t11], DEPTNO=[$t13], $condition=[$t12])'
'                FennelToIteratorConverter'
'                  FtrsIndexScanRel(table=[[LOCALDB, SALES, EMPS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$EMPS$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- can only explain plan for dynamic parameter search
0: jdbc:farrago:> explain plan for
. . . . . . . . > select name from depts where deptno=?;
'column0'
'IterCalcRel(expr#0..1=[{inputs}], NAME=[$t1])'
'  FennelToIteratorConverter'
'    FtrsIndexSearchRel(table=[[LOCALDB, SALES, DEPTS]], projection=[*], index=[SYS$CONSTRAINT_INDEX$DEPTS$SYS$PRIMARY_KEY], uniqueKey=[true], preserveOrder=[false], outer=[false], inputKeyProj=[*], inputJoinProj=[[]])'
'      IteratorToFennelConverter'
'        IterCalcRel(expr#0=[{inputs}], expr#1=[?0], expr#2=[IS NOT NULL($t1)], expr#3=[CAST($t1):INTEGER NOT NULL], $0=[$t3], $condition=[$t2])'
'          IterOneRowRel'
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> !quit
