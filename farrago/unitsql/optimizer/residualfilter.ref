> -- $Id$
> 
> ----------------------------------------
> -- Sql level test for Residual Filtering
> ----------------------------------------
> 
> alter session implementation set jar sys_boot.sys_boot.luciddb_plugin;
> 
> create schema res;
> 
> set schema 'res';
> 
> create table t1 (a int, b double, c int);
> 
> create index t1_b on t1(b);
> 
> insert into t1 values (1, 2, 3);
> insert into t1 values (2, 3, 4);
> insert into t1 values (3, 4, 5);
> insert into t1 values (4, 5, 6);
> insert into t1 values (5, 6, 7);
> insert into t1 values (6, 7, 8);
> insert into t1 values (7, 8, 9);
> insert into t1 values (8, 9, 10);
> insert into t1 values (9, 10, 11);
> insert into t1 values (10, 11, 12);
> insert into t1 values (11, 12, 13);
> insert into t1 values (12, 13, 14);
> insert into t1 values (13, 14, 15);
> insert into t1 values (14, 15, 16);
> insert into t1 values (15, 16, 17);
> insert into t1 values (16, 17, 18);
> insert into t1 values (17, 18, 19);
> insert into t1 values (18, 19, 20);
> insert into t1 values (19, 20, 21);
> insert into t1 values (20, 21, 22);
> insert into t1 values (21, 22, 23);
> insert into t1 values (22, 23, 24);
> insert into t1 values (23, 24, 25);
> insert into t1 values (24, 25, 26);
> insert into t1 values (25, 26, 27);
> insert into t1 values (26, 27, 28);
> insert into t1 values (27, 28, 29);
> insert into t1 values (28, 29, 30);
> insert into t1 values (29, 30, 31);
> insert into t1 values (30, 31, 32);
> insert into t1 values (31, 32, 33);
> 
> !set outputformat csv
> 
> -- full scan 
> 
> explain plan for select a from t1 where c <= 12 order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$C]], residual columns=[[2]])'
'      FennelValuesRel(tuples=[[{ '(', null, ']', 12 }]])'
> 
> explain plan for select a from t1 where c <= 12 and c > 7 or 
> c in (3,4,5,6,7) order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$C]], residual columns=[[2]])'
'      FennelValuesRel(tuples=[[{ '[', 3, ']', 3 }, { '[', 4, ']', 4 }, { '[', 5, ']', 5 }, { '[', 6, ']', 6 }, { '[', 7, ']', 12 }]])'
> 
> explain plan for select a from t1 where (c <= 12 and c > 7 or 
> c in (3,4,5,6,7)) and a > 5 order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$C]], residual columns=[[0, 2]])'
'      FennelValuesRel(tuples=[[{ '(', 5, '+', null }]])'
'      FennelValuesRel(tuples=[[{ '[', 3, ']', 3 }, { '[', 4, ']', 4 }, { '[', 5, ']', 5 }, { '[', 6, ']', 6 }, { '[', 7, ']', 12 }]])'
> 
> explain plan for select a from t1 where a > 5 order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A]], residual columns=[[0]])'
'      FennelValuesRel(tuples=[[{ '(', 5, '+', null }]])'
> 
> explain plan for select a from t1 where 
> (c <= 12 and c > 7 or c in (3,4,5,6,7)) and 
> (a > 5 and a <= 6 or a in (7,8,9,10,11)) order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$C]], residual columns=[[0, 2]])'
'      FennelValuesRel(tuples=[[{ '(', 5, ']', 6 }, { '[', 7, ']', 7 }, { '[', 8, ']', 8 }, { '[', 9, ']', 9 }, { '[', 10, ']', 10 }, { '[', 11, ']', 11 }]])'
'      FennelValuesRel(tuples=[[{ '[', 3, ']', 3 }, { '[', 4, ']', 4 }, { '[', 5, ']', 5 }, { '[', 6, ']', 6 }, { '[', 7, ']', 12 }]])'
> 
> 
> -- index scan
> 
> explain plan for select a from t1 where b >= 11 order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A]])'
'      LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'        LcsIndexSearchRel(table=[[LOCALDB, RES, T1]], index=[T1_B], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'          FennelValuesRel(tuples=[[{ '[', 11, '+', null }]])'
> 
> explain plan for select a from t1 where b >= 7 and c <= 12 order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$C]], residual columns=[[2]])'
'      LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'        LcsIndexSearchRel(table=[[LOCALDB, RES, T1]], index=[T1_B], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'          FennelValuesRel(tuples=[[{ '[', 7, '+', null }]])'
'      FennelValuesRel(tuples=[[{ '(', null, ']', 12 }]])'
> 
> explain plan for select a from t1 where 
> (c <= 12 and c > 7 or c in (7,8,9,10,11)) and b >= 7 order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$C]], residual columns=[[2]])'
'      LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'        LcsIndexSearchRel(table=[[LOCALDB, RES, T1]], index=[T1_B], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'          FennelValuesRel(tuples=[[{ '[', 7, '+', null }]])'
'      FennelValuesRel(tuples=[[{ '[', 7, ']', 12 }]])'
> 
> explain plan for select a from t1 where 
> (c <= 10 and c > 5 or c in (7,8,9,10,11)) and a > 5 and b <= 7 
> order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$C]], residual columns=[[0, 2]])'
'      LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'        LcsIndexSearchRel(table=[[LOCALDB, RES, T1]], index=[T1_B], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'          FennelValuesRel(tuples=[[{ '(', null, ']', 7 }]])'
'      FennelValuesRel(tuples=[[{ '(', 5, '+', null }]])'
'      FennelValuesRel(tuples=[[{ '(', 5, ']', 10 }, { '[', 11, ']', 11 }]])'
> 
> explain plan for select a from t1 where a > 5 and b < 11 order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A]], residual columns=[[0]])'
'      LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'        LcsIndexSearchRel(table=[[LOCALDB, RES, T1]], index=[T1_B], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'          FennelValuesRel(tuples=[[{ '(', null, ')', 11 }]])'
'      FennelValuesRel(tuples=[[{ '(', 5, '+', null }]])'
> 
> explain plan for select a from t1 where 
> (c <= 12 and c > 7 or c in (3,4,5,6,7)) and 
> (a > 5 and a <= 6 or a in (7,8,9,10,11)) and 
> (b in (6,7,8,9,10,11)) order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$C]], residual columns=[[0, 2]])'
'      LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'        LcsIndexSearchRel(table=[[LOCALDB, RES, T1]], index=[T1_B], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'          FennelValuesRel(tuples=[[{ '[', 6, ']', 6 }, { '[', 7, ']', 7 }, { '[', 8, ']', 8 }, { '[', 9, ']', 9 }, { '[', 10, ']', 10 }, { '[', 11, ']', 11 }]])'
'      FennelValuesRel(tuples=[[{ '(', 5, ']', 6 }, { '[', 7, ']', 7 }, { '[', 8, ']', 8 }, { '[', 9, ']', 9 }, { '[', 10, ']', 10 }, { '[', 11, ']', 11 }]])'
'      FennelValuesRel(tuples=[[{ '[', 3, ']', 3 }, { '[', 4, ']', 4 }, { '[', 5, ']', 5 }, { '[', 6, ']', 6 }, { '[', 7, ']', 12 }]])'
> 
> 
> -- full scan and non-sargable predicates
> 
> explain plan for select a from t1 where 
> c <= 12 and b + 1 >= 2 order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[1], expr#3=[+($t1, $t2)], expr#4=[2], expr#5=[>=($t3, $t4)], A=[$t0], $condition=[$t5])'
'      LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$B, SYS$CLUSTERED_INDEX$T1$C]], residual columns=[[2]])'
'        FennelValuesRel(tuples=[[{ '(', null, ']', 12 }]])'
> 
> explain plan for select a from t1 where 
> (c <= 12 and c > 7 or c in (3,4,5,6,7)) 
> and c + 1 >= 2 order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[1], expr#3=[+($t1, $t2)], expr#4=[2], expr#5=[>=($t3, $t4)], A=[$t0], $condition=[$t5])'
'      LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$C]], residual columns=[[2]])'
'        FennelValuesRel(tuples=[[{ '[', 3, ']', 3 }, { '[', 4, ']', 4 }, { '[', 5, ']', 5 }, { '[', 6, ']', 6 }, { '[', 7, ']', 12 }]])'
> 
> explain plan for select a from t1 where 
> (c <= 12 and c > 7 or c in (3,4,5,6,7) and c*2 < 44) 
> and a > 5 order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[12], expr#3=[<=($t1, $t2)], expr#4=[7], expr#5=[>($t1, $t4)], expr#6=[AND($t3, $t5)], expr#7=[3], expr#8=[=($t1, $t7)], expr#9=[4], expr#10=[=($t1, $t9)], expr#11=[OR($t8, $t10)], expr#12=[5], expr#13=[=($t1, $t12)], expr#14=[OR($t11, $t13)], expr#15=[6], expr#16=[=($t1, $t15)], expr#17=[OR($t14, $t16)], expr#18=[=($t1, $t4)], expr#19=[OR($t17, $t18)], expr#20=[2], expr#21=[*($t1, $t20)], expr#22=[44], expr#23=[<($t21, $t22)], expr#24=[AND($t19, $t23)], expr#25=[OR($t6, $t24)], A=[$t0], $condition=[$t25])'
'      LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$C]], residual columns=[[0]])'
'        FennelValuesRel(tuples=[[{ '(', 5, '+', null }]])'
> 
> explain plan for select a from t1 where a > 5 and c/2 > 2 order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[2], expr#3=[CAST($t1):DOUBLE], expr#4=[CAST($t2):DOUBLE NOT NULL], expr#5=[/($t3, $t4)], expr#6=[1E6], expr#7=[*($t5, $t6)], expr#8=[CAST($t7):BIGINT], expr#9=[Reinterpret($t8)], expr#10=[Reinterpret($t9)], expr#11=[1000000], expr#12=[*($t2, $t11)], expr#13=[>($t10, $t12)], A=[$t0], $condition=[$t13])'
'      LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$C]], residual columns=[[0]])'
'        FennelValuesRel(tuples=[[{ '(', 5, '+', null }]])'
> 
> explain plan for select a from t1 where 
> (c <= 12 and c > 7 and c - 1 < 102 or c in (3,4,5,6,7)) and 
> (a > 5 and a <= 6  and a+1 > 0 or a in (7,8,9,10,11)) 
> order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[12], expr#3=[<=($t1, $t2)], expr#4=[7], expr#5=[>($t1, $t4)], expr#6=[AND($t3, $t5)], expr#7=[1], expr#8=[-($t1, $t7)], expr#9=[102], expr#10=[<($t8, $t9)], expr#11=[AND($t6, $t10)], expr#12=[3], expr#13=[=($t1, $t12)], expr#14=[4], expr#15=[=($t1, $t14)], expr#16=[OR($t13, $t15)], expr#17=[5], expr#18=[=($t1, $t17)], expr#19=[OR($t16, $t18)], expr#20=[6], expr#21=[=($t1, $t20)], expr#22=[OR($t19, $t21)], expr#23=[=($t1, $t4)], expr#24=[OR($t22, $t23)], expr#25=[OR($t11, $t24)], expr#26=[>($t0, $t17)], expr#27=[<=($t0, $t20)], expr#28=[AND($t26, $t27)], expr#29=[+($t0, $t7)], expr#30=[0], expr#31=[>($t29, $t30)], expr#32=[AND($t28, $t31)], expr#33=[=($t0, $t4)], expr#34=[8], expr#35=[=($t0, $t34)], expr#36=[OR($t33, $t35)], expr#37=[9], expr#38=[=($t0, $t37)], expr#39=[OR($t36, $t38)], expr#40=[10], expr#41=[=($t0, $t40)], expr#42=[OR($t39, $t41)], expr#43=[11], expr#44=[=($t0, $t43)], expr#45=[OR($t42, $t44)], expr#46=[OR($t32, $t45)], expr#47=[AND($t25, $t46)], A=[$t0], $condition=[$t47])'
'      LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$C]])'
> 
> 
> -- index scan and non-sargable predicates
> 
> explain plan for select a from t1 where b >= 11 and c+1 >= 11 order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[1], expr#3=[+($t1, $t2)], expr#4=[11], expr#5=[>=($t3, $t4)], A=[$t0], $condition=[$t5])'
'      LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$C]])'
'        LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'          LcsIndexSearchRel(table=[[LOCALDB, RES, T1]], index=[T1_B], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'            FennelValuesRel(tuples=[[{ '[', 11, '+', null }]])'
> 
> explain plan for select a from t1 where b >= 7 and c <= 12 and 
> a*2 >= 2 order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelCalcRel(expr#0=[{inputs}], expr#1=[2], expr#2=[*($t0, $t1)], expr#3=[>=($t2, $t1)], A=[$t0], $condition=[$t3])'
'      LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$C]], residual columns=[[2]])'
'        LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'          LcsIndexSearchRel(table=[[LOCALDB, RES, T1]], index=[T1_B], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'            FennelValuesRel(tuples=[[{ '[', 7, '+', null }]])'
'        FennelValuesRel(tuples=[[{ '(', null, ']', 12 }]])'
> 
> explain plan for select a from t1 where 
> (c <= 12 and c > 7 and c+1 in (4,5,6,7,8) or c in (3,4,5,6,7)) 
> and b <= 7 order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[12], expr#3=[<=($t1, $t2)], expr#4=[7], expr#5=[>($t1, $t4)], expr#6=[AND($t3, $t5)], expr#7=[1], expr#8=[+($t1, $t7)], expr#9=[4], expr#10=[=($t8, $t9)], expr#11=[5], expr#12=[=($t8, $t11)], expr#13=[OR($t10, $t12)], expr#14=[6], expr#15=[=($t8, $t14)], expr#16=[OR($t13, $t15)], expr#17=[=($t8, $t4)], expr#18=[OR($t16, $t17)], expr#19=[8], expr#20=[=($t8, $t19)], expr#21=[OR($t18, $t20)], expr#22=[AND($t6, $t21)], expr#23=[3], expr#24=[=($t1, $t23)], expr#25=[=($t1, $t9)], expr#26=[OR($t24, $t25)], expr#27=[=($t1, $t11)], expr#28=[OR($t26, $t27)], expr#29=[=($t1, $t14)], expr#30=[OR($t28, $t29)], expr#31=[=($t1, $t4)], expr#32=[OR($t30, $t31)], expr#33=[OR($t22, $t32)], A=[$t0], $condition=[$t33])'
'      LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0, 2]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$C]])'
'        LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'          LcsIndexSearchRel(table=[[LOCALDB, RES, T1]], index=[T1_B], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'            FennelValuesRel(tuples=[[{ '(', null, ']', 7 }]])'
> 
> explain plan for select a from t1 where 
> (c <= 12 and c > 7 or c in (3,4,5,6,7)) 
> and a > 5 and b <= 7 and b+1 <= 8 order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelCalcRel(expr#0..1=[{inputs}], expr#2=[1], expr#3=[+($t1, $t2)], expr#4=[8], expr#5=[<=($t3, $t4)], A=[$t0], $condition=[$t5])'
'      LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[[0, 1]], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$B, SYS$CLUSTERED_INDEX$T1$C]], residual columns=[[0, 2]])'
'        LcsIndexMergeRel(consumerSridParamId=[0], segmentLimitParamId=[0], ridLimitParamId=[1])'
'          LcsIndexSearchRel(table=[[LOCALDB, RES, T1]], index=[T1_B], projection=[*], inputKeyProj=[[1, 3]], inputDirectiveProj=[[0, 2]], startRidParamId=[0], rowLimitParamId=[0])'
'            FennelValuesRel(tuples=[[{ '(', null, ']', 7 }]])'
'        FennelValuesRel(tuples=[[{ '(', 5, '+', null }]])'
'        FennelValuesRel(tuples=[[{ '[', 3, ']', 3 }, { '[', 4, ']', 4 }, { '[', 5, ']', 5 }, { '[', 6, ']', 6 }, { '[', 7, ']', 12 }]])'
> 
> explain plan for select a from t1 where a > 5 and b < 11 or 
> c + 1 = 8 order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelCalcRel(expr#0..2=[{inputs}], expr#3=[5], expr#4=[>($t0, $t3)], expr#5=[11], expr#6=[<($t1, $t5)], expr#7=[AND($t4, $t6)], expr#8=[1], expr#9=[+($t2, $t8)], expr#10=[8], expr#11=[=($t9, $t10)], expr#12=[OR($t7, $t11)], A=[$t0], $condition=[$t12])'
'      LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$B, SYS$CLUSTERED_INDEX$T1$C]])'
> 
> explain plan for select a from t1 where 
> (c <= 12 and c > 7 or c in (3,4,5,6,7)) and 
> (a > 5 and a <= 6 or a in (7,8,9,10,11)) and 
> (b in (6,7,8,9,10,11)) or c > 2 order by 1;
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0]], discardDuplicates=[false])'
'    FennelCalcRel(expr#0..2=[{inputs}], expr#3=[12], expr#4=[<=($t2, $t3)], expr#5=[7], expr#6=[>($t2, $t5)], expr#7=[AND($t4, $t6)], expr#8=[3], expr#9=[=($t2, $t8)], expr#10=[4], expr#11=[=($t2, $t10)], expr#12=[OR($t9, $t11)], expr#13=[5], expr#14=[=($t2, $t13)], expr#15=[OR($t12, $t14)], expr#16=[6], expr#17=[=($t2, $t16)], expr#18=[OR($t15, $t17)], expr#19=[=($t2, $t5)], expr#20=[OR($t18, $t19)], expr#21=[OR($t7, $t20)], expr#22=[>($t0, $t13)], expr#23=[<=($t0, $t16)], expr#24=[AND($t22, $t23)], expr#25=[=($t0, $t5)], expr#26=[8], expr#27=[=($t0, $t26)], expr#28=[OR($t25, $t27)], expr#29=[9], expr#30=[=($t0, $t29)], expr#31=[OR($t28, $t30)], expr#32=[10], expr#33=[=($t0, $t32)], expr#34=[OR($t31, $t33)], expr#35=[11], expr#36=[=($t0, $t35)], expr#37=[OR($t34, $t36)], expr#38=[OR($t24, $t37)], expr#39=[AND($t21, $t38)], expr#40=[=($t1, $t16)], expr#41=[=($t1, $t5)], expr#42=[OR($t40, $t41)], expr#43=[=($t1, $t26)], expr#44=[OR($t42, $t43)], expr#45=[=($t1, $t29)], expr#46=[OR($t44, $t45)], expr#47=[=($t1, $t32)], expr#48=[OR($t46, $t47)], expr#49=[=($t1, $t35)], expr#50=[OR($t48, $t49)], expr#51=[AND($t39, $t50)], expr#52=[2], expr#53=[>($t2, $t52)], expr#54=[OR($t51, $t53)], A=[$t0], $condition=[$t54])'
'      LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$B, SYS$CLUSTERED_INDEX$T1$C]])'
> 
> !set outputformat table
> 
> -- full scan 
> 
> select a from t1 where c <= 12 order by 1;
+-----+
|  A  |
+-----+
| 1   |
| 2   |
| 3   |
| 4   |
| 5   |
| 6   |
| 7   |
| 8   |
| 9   |
| 10  |
+-----+
> 
> select a from t1 where c <= 12 and c > 7 or 
> c in (3,4,5,6,7) order by 1;
+-----+
|  A  |
+-----+
| 1   |
| 2   |
| 3   |
| 4   |
| 5   |
| 6   |
| 7   |
| 8   |
| 9   |
| 10  |
+-----+
> 
> select a from t1 where (c <= 12 and c > 7 or c in (3,4,5,6,7)) 
> and a > 5 order by 1;
+-----+
|  A  |
+-----+
| 6   |
| 7   |
| 8   |
| 9   |
| 10  |
+-----+
> 
> select a from t1 where a > 5 order by 1;
+-----+
|  A  |
+-----+
| 6   |
| 7   |
| 8   |
| 9   |
| 10  |
| 11  |
| 12  |
| 13  |
| 14  |
| 15  |
| 16  |
| 17  |
| 18  |
| 19  |
| 20  |
| 21  |
| 22  |
| 23  |
| 24  |
| 25  |
| 26  |
| 27  |
| 28  |
| 29  |
| 30  |
| 31  |
+-----+
> 
> select a from t1 where (c <= 12 and c > 7 or c in (3,4,5,6,7)) 
> and (a > 5 and a <= 6 or a in (7,8,9,10,11)) order by 1;
+-----+
|  A  |
+-----+
| 6   |
| 7   |
| 8   |
| 9   |
| 10  |
+-----+
> 
> 
> -- index scan
> 
> select a from t1 where b >= 11 order by 1;
+-----+
|  A  |
+-----+
| 10  |
| 11  |
| 12  |
| 13  |
| 14  |
| 15  |
| 16  |
| 17  |
| 18  |
| 19  |
| 20  |
| 21  |
| 22  |
| 23  |
| 24  |
| 25  |
| 26  |
| 27  |
| 28  |
| 29  |
| 30  |
| 31  |
+-----+
> 
> select a from t1 where b >= 7 and c <= 12 order by 1;
+-----+
|  A  |
+-----+
| 6   |
| 7   |
| 8   |
| 9   |
| 10  |
+-----+
> 
> select a from t1 where (c <= 12 and c > 7 or c in (7,8,9,10,11)) 
> and b >= 7 order by 1;
+-----+
|  A  |
+-----+
| 6   |
| 7   |
| 8   |
| 9   |
| 10  |
+-----+
> 
> select a from t1 where (c <= 10 and c > 5 or c in (7,8,9,10,11)) and 
> a > 5 and b <= 7 order by 1;
+----+
| A  |
+----+
| 6  |
+----+
> 
> select a from t1 where a > 5 and b < 11 order by 1;
+----+
| A  |
+----+
| 6  |
| 7  |
| 8  |
| 9  |
+----+
> 
> select a from t1 where (c <= 12 and c > 7 or c in (3,4,5,6,7)) and 
> (a > 5 and a <= 6 or a in (7,8,9,10,11)) and 
> (b in (6,7,8,9,10,11)) order by 1;
+-----+
|  A  |
+-----+
| 6   |
| 7   |
| 8   |
| 9   |
| 10  |
+-----+
> 
> 
> -- full scan and non-sargable predicates
> 
> select a from t1 where c <= 12 and b + 1 >= 2 order by 1;
+-----+
|  A  |
+-----+
| 1   |
| 2   |
| 3   |
| 4   |
| 5   |
| 6   |
| 7   |
| 8   |
| 9   |
| 10  |
+-----+
> 
> select a from t1 where (c <= 12 and c > 7 or c in (3,4,5,6,7)) 
> and c + 1 >= 2 order by 1;
+-----+
|  A  |
+-----+
| 1   |
| 2   |
| 3   |
| 4   |
| 5   |
| 6   |
| 7   |
| 8   |
| 9   |
| 10  |
+-----+
> 
> select a from t1 where (c <= 12 and c > 7 or c in (3,4,5,6,7) 
> and c*2 < 44) and a > 5 order by 1;
+-----+
|  A  |
+-----+
| 6   |
| 7   |
| 8   |
| 9   |
| 10  |
+-----+
> 
> select a from t1 where a > 5 and c/2 > 2 order by 1;
+-----+
|  A  |
+-----+
| 6   |
| 7   |
| 8   |
| 9   |
| 10  |
| 11  |
| 12  |
| 13  |
| 14  |
| 15  |
| 16  |
| 17  |
| 18  |
| 19  |
| 20  |
| 21  |
| 22  |
| 23  |
| 24  |
| 25  |
| 26  |
| 27  |
| 28  |
| 29  |
| 30  |
| 31  |
+-----+
> 
> select a from t1 where (c <= 12 and c > 7 and c - 1 < 102 
> or c in (3,4,5,6,7)) and (a > 5 and a <= 6  and a+1 > 0 
> or a in (7,8,9,10,11)) order by 1;
+-----+
|  A  |
+-----+
| 6   |
| 7   |
| 8   |
| 9   |
| 10  |
+-----+
> 
> 
> -- index scan and non-sargable predicates
> 
> select a from t1 where b >= 11 and c+1 >= 11 order by 1;
+-----+
|  A  |
+-----+
| 10  |
| 11  |
| 12  |
| 13  |
| 14  |
| 15  |
| 16  |
| 17  |
| 18  |
| 19  |
| 20  |
| 21  |
| 22  |
| 23  |
| 24  |
| 25  |
| 26  |
| 27  |
| 28  |
| 29  |
| 30  |
| 31  |
+-----+
> 
> select a from t1 where b >= 7 and c <= 12 and a*2 >= 2 order by 1;
+-----+
|  A  |
+-----+
| 6   |
| 7   |
| 8   |
| 9   |
| 10  |
+-----+
> 
> select a from t1 where (c <= 12 and c > 7 and c+1 in (4,5,6,7,8) 
> or c in (3,4,5,6,7)) and b <= 7 order by 1;
+----+
| A  |
+----+
| 1  |
| 2  |
| 3  |
| 4  |
| 5  |
+----+
> 
> select a from t1 where (c <= 12 and c > 7 or c in (3,4,5,6,7)) and 
> a > 5 and b <= 7 and b+1 <= 8 order by 1;
+----+
| A  |
+----+
| 6  |
+----+
> 
> select a from t1 where a > 5 and b < 11 or c + 1 = 8 order by 1;
+----+
| A  |
+----+
| 5  |
| 6  |
| 7  |
| 8  |
| 9  |
+----+
> 
> select a from t1 where (c <= 12 and c > 7 or c in (3,4,5,6,7)) and 
> (a > 5 and a <= 6 or a in (7,8,9,10,11)) and (b in (6,7,8,9,10,11)) 
> or c > 2 order by 1;
+-----+
|  A  |
+-----+
| 1   |
| 2   |
| 3   |
| 4   |
| 5   |
| 6   |
| 7   |
| 8   |
| 9   |
| 10  |
| 11  |
| 12  |
| 13  |
| 14  |
| 15  |
| 16  |
| 17  |
| 18  |
| 19  |
| 20  |
| 21  |
| 22  |
| 23  |
| 24  |
| 25  |
| 26  |
| 27  |
| 28  |
| 29  |
| 30  |
| 31  |
+-----+
> 
> --
> -- rerun the above query to test close
> --
> select a from t1 where (c <= 12 and c > 7 or c in (3,4,5,6,7)) and 
> (a > 5 and a <= 6 or a in (7,8,9,10,11)) and (b in (6,7,8,9,10,11)) 
> or c > 2 order by 1;
+-----+
|  A  |
+-----+
| 1   |
| 2   |
| 3   |
| 4   |
| 5   |
| 6   |
| 7   |
| 8   |
| 9   |
| 10  |
| 11  |
| 12  |
| 13  |
| 14  |
| 15  |
| 16  |
| 17  |
| 18  |
| 19  |
| 20  |
| 21  |
| 22  |
| 23  |
| 24  |
| 25  |
| 26  |
| 27  |
| 28  |
| 29  |
| 30  |
| 31  |
+-----+
> 
> 
> --
> -- Test VARCHAR with NULL
> --
> 
> create table lcsemps(city varchar(20));
> 
> -- verify creation of system-defined clustered index
> !indexes LCSEMPS
+------------+--------------+-------------+-------------+------------------+-----------------------------------+-------+-------------------+--------------+---------------+--------------+--------+-------------------+
| TABLE_CAT  | TABLE_SCHEM  | TABLE_NAME  | NON_UNIQUE  | INDEX_QUALIFIER  |            INDEX_NAME             | TYPE  | ORDINAL_POSITION  | COLUMN_NAME  | ASC_ORD_DESC  | CARDINALITY  | PAGES  | FILTER_CONDITION  |
+------------+--------------+-------------+-------------+------------------+-----------------------------------+-------+-------------------+--------------+---------------+--------------+--------+-------------------+
| LOCALDB    | RES          | LCSEMPS     | false       |                  |                                   | 0     | 0                 |              |               | 0            | 0      |                   |
| LOCALDB    | RES          | LCSEMPS     | false       | LOCALDB          | SYS$DELETION_INDEX$LCSEMPS        | 3     |                   |              | A             | 0            | 0      |                   |
| LOCALDB    | RES          | LCSEMPS     | true        | LOCALDB          | SYS$CLUSTERED_INDEX$LCSEMPS$CITY  | 1     | 1                 | CITY         | A             | 0            | 0      |                   |
+------------+--------------+-------------+-------------+------------------+-----------------------------------+-------+-------------------+--------------+---------------+--------------+--------+-------------------+
> 
> -- Plans with NULL in the populating stream
> insert into lcsemps select city from sales.emps;
> insert into lcsemps values(NULL);
> insert into lcsemps values(NULL);
> insert into lcsemps values('');
> insert into lcsemps values('Pescadero');
> -- insert duplicate values to force a compressed batch
> insert into lcsemps select city from sales.emps;
> insert into lcsemps select city from sales.emps;
> 
> explain plan for select * from lcsemps where city = 'Pescadero' 
> or city = '' order by 1;
+-----------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                       column0                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                           |
|   FennelSortRel(key=[[0]], discardDuplicates=[false])                                                                                               |
|     LcsRowScanRel(table=[[LOCALDB, RES, LCSEMPS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSEMPS$CITY]], residual columns=[[0]])  |
|       FennelValuesRel(tuples=[[{ '[', '', ']', '' }, { '[', 'Pescadero', ']', 'Pescadero' }]])                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+
> 
> explain plan for select * from lcsemps where city = 'Pescadero' 
> or city is null order by 1;
+-----------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                       column0                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                           |
|   FennelSortRel(key=[[0]], discardDuplicates=[false])                                                                                               |
|     LcsRowScanRel(table=[[LOCALDB, RES, LCSEMPS]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$LCSEMPS$CITY]], residual columns=[[0]])  |
|       FennelValuesRel(tuples=[[{ '[', null, ']', null }, { '[', 'Pescadero', ']', 'Pescadero' }]])                                                  |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+
> 
> select * from lcsemps where city = 'Pescadero' or 
> city = '' order by 1;
+------------+
|    CITY    |
+------------+
|            |
| Pescadero  |
+------------+
> 
> select * from lcsemps where city = 'Pescadero' or 
> city is null order by 1;
+------------+
|    CITY    |
+------------+
|            |
|            |
|            |
|            |
|            |
|            |
|            |
|            |
| Pescadero  |
+------------+
> 
> -- Run analyze stats and make sure filters with lower selectivity are evaluated
> -- first
> analyze table t1 compute statistics for all columns;
> 
> explain plan for select * from t1 where a > 10 and c = 20;
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                           column0                                                                                           |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                   |
|   LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$B, SYS$CLUSTERED_INDEX$T1$C]], residual columns=[[2, 0]])  |
|     FennelValuesRel(tuples=[[{ '[', 20, ']', 20 }]])                                                                                                                                        |
|     FennelValuesRel(tuples=[[{ '(', 10, '+', null }]])                                                                                                                                      |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
> explain plan for select * from t1 where c = 20 and a > 10;
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                           column0                                                                                           |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                   |
|   LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$B, SYS$CLUSTERED_INDEX$T1$C]], residual columns=[[2, 0]])  |
|     FennelValuesRel(tuples=[[{ '[', 20, ']', 20 }]])                                                                                                                                        |
|     FennelValuesRel(tuples=[[{ '(', 10, '+', null }]])                                                                                                                                      |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
> 
> explain plan for select * from t1 where (a > 1 and a < 30) and c in (5, 10);
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                           column0                                                                                           |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                   |
|   LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$B, SYS$CLUSTERED_INDEX$T1$C]], residual columns=[[2, 0]])  |
|     FennelValuesRel(tuples=[[{ '[', 5, ']', 5 }, { '[', 10, ']', 10 }]])                                                                                                                    |
|     FennelValuesRel(tuples=[[{ '(', 1, ')', 30 }]])                                                                                                                                         |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
> explain plan for select * from t1 where (c > 1 and c < 30) and a in (5, 10);
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                           column0                                                                                           |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FennelToIteratorConverter                                                                                                                                                                   |
|   LcsRowScanRel(table=[[LOCALDB, RES, T1]], projection=[*], clustered indexes=[[SYS$CLUSTERED_INDEX$T1$A, SYS$CLUSTERED_INDEX$T1$B, SYS$CLUSTERED_INDEX$T1$C]], residual columns=[[0, 2]])  |
|     FennelValuesRel(tuples=[[{ '[', 5, ']', 5 }, { '[', 10, ']', 10 }]])                                                                                                                    |
|     FennelValuesRel(tuples=[[{ '(', 1, ')', 30 }]])                                                                                                                                         |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
> 
> !quit
