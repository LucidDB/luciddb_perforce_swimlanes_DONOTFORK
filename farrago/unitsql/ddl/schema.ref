0: jdbc:farrago:> -- $Id: //open/dt/dev/farrago/unitsql/ddl/schema.sql#1 $
0: jdbc:farrago:> -- Test DDL on schemas
0: jdbc:farrago:> 
0: jdbc:farrago:> create schema s;
0: jdbc:farrago:> 
0: jdbc:farrago:> create table s.t(i int not null primary key);
0: jdbc:farrago:> 
0: jdbc:farrago:> !metadata getSchemas
+----------------+----------------+
|  TABLE_SCHEM   | TABLE_CATALOG  |
+----------------+----------------+
| JDBC_METADATA  | SYS_BOOT       |
| S              | LOCALDB        |
| SALES          | LOCALDB        |
+----------------+----------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail
0: jdbc:farrago:> drop schema s restrict;
Error: Schema LOCALDB.S can only be dropped with CASCADE because other objects still reference it (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> !metadata getSchemas
+----------------+----------------+
|  TABLE_SCHEM   | TABLE_CATALOG  |
+----------------+----------------+
| JDBC_METADATA  | SYS_BOOT       |
| S              | LOCALDB        |
| SALES          | LOCALDB        |
+----------------+----------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail
0: jdbc:farrago:> drop schema s;
Error: Schema LOCALDB.S can only be dropped with CASCADE because other objects still reference it (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> !metadata getSchemas
+----------------+----------------+
|  TABLE_SCHEM   | TABLE_CATALOG  |
+----------------+----------------+
| JDBC_METADATA  | SYS_BOOT       |
| S              | LOCALDB        |
| SALES          | LOCALDB        |
+----------------+----------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should succeed
0: jdbc:farrago:> drop schema s cascade;
0: jdbc:farrago:> 
0: jdbc:farrago:> !metadata getSchemas
+----------------+----------------+
|  TABLE_SCHEM   | TABLE_CATALOG  |
+----------------+----------------+
| JDBC_METADATA  | SYS_BOOT       |
| SALES          | LOCALDB        |
+----------------+----------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail with duplicate name
0: jdbc:farrago:> create schema sales;
Error: Schema SALES already exists within Catalog LOCALDB;
duplicate name encountered near line 1, column 15 (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> -- see what happens when we drop the current schema
0: jdbc:farrago:> create schema n;
0: jdbc:farrago:> 
0: jdbc:farrago:> set schema n;
0: jdbc:farrago:> 
0: jdbc:farrago:> create table nt(i int not null primary key);
0: jdbc:farrago:> 
0: jdbc:farrago:> drop schema n cascade;
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from nt;
Error: At line 1, column 15: Table 'NT' not found (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> create table nt2(i int not null primary key);
Error: Reference to unknown Schema LOCALDB.N;
encountered near line 1, column 14 (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test an easy compound schema definition
0: jdbc:farrago:> create schema nice
. . . . . . . . >     create table t(i int not null primary key)
. . . . . . . . >     create view v as select * from t
. . . . . . . . > ;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test a difficult compound schema definition
0: jdbc:farrago:> create schema nasty
. . . . . . . . >     create view v as select * from t
. . . . . . . . >     create table t(i int not null primary key)
. . . . . . . . > ;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test an impossible compound schema definition
0: jdbc:farrago:> create schema wicked
. . . . . . . . >     create view v1 as select * from v2
. . . . . . . . >     create view v2 as select * from v1
. . . . . . . . > ;
Error: Schema definition contains view cycle (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test usage of a non-reserved keyword (DATA) as an identifier
0: jdbc:farrago:> create table nice.strange(data int not null primary key);
0: jdbc:farrago:> 
0: jdbc:farrago:> insert into nice.strange(data) values (5);
0: jdbc:farrago:> 
0: jdbc:farrago:> select data from nice.strange;
+-------+
| DATA  |
+-------+
| 5     |
+-------+
0: jdbc:farrago:> 
0: jdbc:farrago:> !quit
