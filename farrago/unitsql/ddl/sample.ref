0: jdbc:farrago:> -- $Id$
0: jdbc:farrago:> -- Test DDL on samples
0: jdbc:farrago:> 
0: jdbc:farrago:> !set outputformat csv
0: jdbc:farrago:> 
0: jdbc:farrago:> create schema sample;
0: jdbc:farrago:> set schema 'sample';
0: jdbc:farrago:> 
0: jdbc:farrago:> -- create two tables and one view to be samples
0: jdbc:farrago:> 
0: jdbc:farrago:> create table s1 (i int not null primary key, j int, k int);
0: jdbc:farrago:> 
0: jdbc:farrago:> insert into s1 (i, j, k)
. . . . . . . . > values (1, 1, 3),
. . . . . . . . >        (3, 1, 5);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- columns are in different order, different types, and a superset
0: jdbc:farrago:> create table s2 (j double, k int, m varchar(10), i integer not null primary key);
0: jdbc:farrago:> 
0: jdbc:farrago:> insert into s2 (i, j, k, m)
. . . . . . . . > values (3, 2.4, 3, 'unused'),
. . . . . . . . >        (6, 3.8, 6, null);
0: jdbc:farrago:> 
0: jdbc:farrago:> create view v1 as
. . . . . . . . > select * from s1 where i > 1;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- create a table which has two samples
0: jdbc:farrago:> create table t (i int not null primary key, j int, k int)
. . . . . . . . > sample (s1 as sample1, s2 as sample2)
. . . . . . . . > description 'table with a sample';
0: jdbc:farrago:> 
0: jdbc:farrago:> -- expect datasets called 'SAMPLE1' and 'SAMPLE2'
0: jdbc:farrago:> select "name" from sys_fem."SQL2003"."SampleDataset" order by 1;
'name'
'SAMPLE1'
'SAMPLE2'
0: jdbc:farrago:> 
0: jdbc:farrago:> insert into t (i, j, k)
. . . . . . . . > values (1, 2, 3),
. . . . . . . . >        (2, 4, 5),
. . . . . . . . >        (3, 4, 5);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- todo: add samples to an existing table:
0: jdbc:farrago:> --alter table t add sample ...;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- todo: remove samples from existing table:
0: jdbc:farrago:> --alter table t drop sample ...;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- todo: create view with samples:
0: jdbc:farrago:> --create view v sample (...) as ...;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- fully-qualified sample
0: jdbc:farrago:> create table t2 (i int primary key, j int)
. . . . . . . . > sample (sample.s1 as sample1);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- fails: non-existent sample
0: jdbc:farrago:> create table t3 (i int primary key, j int)
. . . . . . . . > sample (nonexistent.s1 as sample1);
Error: DDL validation error near line 2, column 27: Reference to unknown table "S1" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- todo: fails: sample names must be unique
0: jdbc:farrago:> --create table t4 (i int primary key, j int)
0: jdbc:farrago:> --sample (s1 as sample1, s1 as sample1);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- can use the same sample more than once
0: jdbc:farrago:> create table t5 (i int primary key, j int)
. . . . . . . . > sample (s1 as sample1, s1 as sample2)
. . . . . . . . > description 'table with a sample';
0: jdbc:farrago:> 
0: jdbc:farrago:> -- samples must have the same columns with the same types
0: jdbc:farrago:> 
0: jdbc:farrago:> -- todo: fails: missing column m
0: jdbc:farrago:> --create table t6 (i int primary key, j int, m int)
0: jdbc:farrago:> --sample (s1 as sample1);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- todo: fails: j is different type
0: jdbc:farrago:> --create table t7 (i int primary key, j varchar(10), k int)
0: jdbc:farrago:> --sample (s1 as sample1);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- succeeds: spurious columns are ok
0: jdbc:farrago:> create table t8 (i int primary key, j int)
. . . . . . . . > sample (s1 as sample1);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- succeeds: reordered columns
0: jdbc:farrago:> create table t9 (i int primary key, k int, j int)
. . . . . . . . > sample (s1 as sample1);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- todo: fails: sample has weaker constraints
0: jdbc:farrago:> --create table t10 (i int not null primary key, j int, k int not null)
0: jdbc:farrago:> --sample (s1 as sample1);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- Invocation ---------------------------------
0: jdbc:farrago:> 
0: jdbc:farrago:> -- this plan should use s1
0: jdbc:farrago:> explain plan for select i, j from t tablesample substitute('SAMPLE1');
'column0'
'FennelToIteratorConverter'
'  FtrsIndexScanRel(table=[[LOCALDB, SAMPLE, S1]], projection=[[0, 1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$S1], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- non-existent sample, plan should use t
0: jdbc:farrago:> explain plan for select i, j from t tablesample substitute('SAMPLE9');
'column0'
'FennelToIteratorConverter'
'  FtrsIndexScanRel(table=[[LOCALDB, SAMPLE, T]], projection=[[0, 1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$T], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- this plan should use s2. some casting/reordering required
0: jdbc:farrago:> explain plan for select i, j from t tablesample substitute('SAMPLE2');
'column0'
'IterCalcRel(expr#0..1=[{inputs}], expr#2=[CAST($t0):INTEGER], I=[$t1], J=[$t2])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SAMPLE, S2]], projection=[[0, 3]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$S2], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- samples applied in union
0: jdbc:farrago:> explain plan for
. . . . . . . . > select * from (
. . . . . . . . >   select i, j from t tablesample substitute('SAMPLE1')
. . . . . . . . >   union all
. . . . . . . . >   select i, k from t tablesample substitute('SAMPLE2'));
'column0'
'IterConcatenateRel(all=[true])'
'  FennelToIteratorConverter'
'    FtrsIndexScanRel(table=[[LOCALDB, SAMPLE, S1]], projection=[[0, 1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$S1], preserveOrder=[false])'
'  FennelToIteratorConverter'
'    FennelRenameRel(fieldNames=[[I, J]])'
'      FtrsIndexScanRel(table=[[LOCALDB, SAMPLE, S2]], projection=[[3, 1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$S2], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- sample applied to query, overridden by sample applied to table
0: jdbc:farrago:> explain plan for
. . . . . . . . > select * from (
. . . . . . . . >   select i, j from t
. . . . . . . . >   union
. . . . . . . . >   select i, j from t tablesample substitute('SAMPLE1')
. . . . . . . . > ) tablesample substitute('SAMPLE2');
'column0'
'FennelToIteratorConverter'
'  FennelSortRel(key=[[0, 1]], discardDuplicates=[true])'
'    FennelMergeRel'
'      FennelCalcRel(expr#0..1=[{inputs}], expr#2=[CAST($t0):INTEGER], I=[$t1], J=[$t2])'
'        FtrsIndexScanRel(table=[[LOCALDB, SAMPLE, S2]], projection=[[0, 3]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$S2], preserveOrder=[false])'
'      FtrsIndexScanRel(table=[[LOCALDB, SAMPLE, S1]], projection=[[0, 1]], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$S1], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- sample which is a view
0: jdbc:farrago:> create table t11 (i int primary key, j int, k int)
. . . . . . . . > sample (v1 AS "SampleV", s1 as sample1);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should generate a plan onto 's1 where i > 1 and j < 2'
0: jdbc:farrago:> explain plan for
. . . . . . . . > select * from t11 tablesample substitute('SampleV')
. . . . . . . . > where j < 2;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 1, 2]], filterOp=[COMP_LT], filterOrdinals=[[1]], filterTuple=[[2]], outputRowType=[RecordType(INTEGER NOT NULL I, INTEGER J, INTEGER K) NOT NULL])'
'    FtrsIndexSearchRel(table=[[LOCALDB, SAMPLE, S1]], projection=[*], index=[SYS$CONSTRAINT_INDEX$SYS$PRIMARY_KEY$S1], uniqueKey=[false], preserveOrder=[false], outer=[false], inputKeyProj=[[1, 3]], inputJoinProj=[[]], inputDirectiveProj=[[0, 2]])'
'      FennelValuesRel(tuples=[[{ '(', 1, '+', null }]])'
0: jdbc:farrago:> 
0: jdbc:farrago:> -- end sample.sql
0: jdbc:farrago:> 
0: jdbc:farrago:> !quit
