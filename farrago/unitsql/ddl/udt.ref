0: jdbc:farrago:> -- $Id: //open/dt/dev/farrago/unitsql/ddl/udt.sql#14 $
0: jdbc:farrago:> -- Test DDL for user-defined types
0: jdbc:farrago:> 
0: jdbc:farrago:> create schema udttest;
0: jdbc:farrago:> 
0: jdbc:farrago:> set schema 'udttest';
0: jdbc:farrago:> 
0: jdbc:farrago:> set path 'udttest';
0: jdbc:farrago:> 
0: jdbc:farrago:> -- basic structured type
0: jdbc:farrago:> create type rectilinear_coord as (
. . . . . . . . >     x double,
. . . . . . . . >     y double
. . . . . . . . > ) final;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- decimal type
0: jdbc:farrago:> create type rectilinear_coord_dec as (
. . . . . . . . >     x decimal(10,4),
. . . . . . . . >     y decimal(9,3)
. . . . . . . . > ) final;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- structured type with default values
0: jdbc:farrago:> create type rectilinear_coord0 as (
. . . . . . . . >     x double default 0,
. . . . . . . . >     y double default 0
. . . . . . . . > ) final;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- structured type with a single user-defined constructor
0: jdbc:farrago:> create type rectilinear_coord_non0 as (
. . . . . . . . >     x double default 100.0,
. . . . . . . . >     y double default 100.0
. . . . . . . . > ) final
. . . . . . . . > constructor method rectilinear_coord_non0(x_init double,y_init double) 
. . . . . . . . > returns rectilinear_coord_non0 
. . . . . . . . > self as result
. . . . . . . . > contains sql
. . . . . . . . > ;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  constructor declared but not yet defined
0: jdbc:farrago:> values rectilinear_coord_non0(8,8);
Error: Method RECTILINEAR_COORD_NON0(<NUMERIC>, <NUMERIC>) has been declared but not yet defined (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  method name mismatch
0: jdbc:farrago:> create specific method rectilinear_coord_nonzero
. . . . . . . . > for rectilinear_coord_non0
. . . . . . . . > begin
. . . . . . . . >     set self.x = z_init; set self.y = y_init; return self
. . . . . . . . > ; end;
Error: DDL validation error near line 1, column 24: Reference to unknown routine "RECTILINEAR_COORD_NONZERO" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  unknown param ref
0: jdbc:farrago:> create specific method rectilinear_coord_non0
. . . . . . . . > for rectilinear_coord_non0
. . . . . . . . > begin
. . . . . . . . >     set self.x = z_init; set self.y = y_init; return self
. . . . . . . . > ; end;
Error: From line 1, column 1 to line 1, column 8: Unknown identifier 'Z_INIT' (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  unknown target ref
0: jdbc:farrago:> create specific method rectilinear_coord_non0
. . . . . . . . > for rectilinear_coord_non0
. . . . . . . . > begin
. . . . . . . . >     set self.z = x_init; set self.y = y_init; return self
. . . . . . . . > ; end;
Error: Unknown target field "Z" in constructor assignment (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  bad type assignment
0: jdbc:farrago:> create specific method rectilinear_coord_non0
. . . . . . . . > for rectilinear_coord_non0
. . . . . . . . > begin
. . . . . . . . >     set self.x = cast(x_init as varchar(20)); set self.y = y_init; return self
. . . . . . . . > ; end;
Error: Result expression type VARCHAR(20) cannot be assigned to declared type DOUBLE of structured type attribute "X" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should succeed
0: jdbc:farrago:> create specific method rectilinear_coord_non0
. . . . . . . . > for rectilinear_coord_non0
. . . . . . . . > begin
. . . . . . . . >     set self.x = x_init; set self.y = y_init; return self
. . . . . . . . > ; end;
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> -- decimal type with constructor
0: jdbc:farrago:> create type rectilinear_coord_non0_dec as (
. . . . . . . . >     x decimal(10,4) default 100.12345,
. . . . . . . . >     y decimal(9, 3) default 100.1234
. . . . . . . . > ) final
. . . . . . . . > constructor method rectilinear_coord_non0_dec
. . . . . . . . >     (x_init decimal(10,4),y_init double) 
. . . . . . . . > returns rectilinear_coord_non0_dec 
. . . . . . . . > self as result
. . . . . . . . > contains sql
. . . . . . . . > ;
0: jdbc:farrago:> 
0: jdbc:farrago:> create specific method rectilinear_coord_non0_dec
. . . . . . . . > for rectilinear_coord_non0_dec
. . . . . . . . > begin
. . . . . . . . >     set self.x = x_init; set self.y = cast(y_init as decimal(9, 3))
. . . . . . . . > ; return self; end;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- structured type with overloaded constructors
0: jdbc:farrago:> create type rectilinear_coord_overloaded as (
. . . . . . . . >     x double default 50.0,
. . . . . . . . >     y double default 50.0
. . . . . . . . > ) final
. . . . . . . . > constructor method rectilinear_coord_overloaded()
. . . . . . . . > returns rectilinear_coord_overloaded
. . . . . . . . > self as result
. . . . . . . . > contains sql
. . . . . . . . > specific rectilinear_coord_overload0,
. . . . . . . . > constructor method rectilinear_coord_overloaded(x_init double) 
. . . . . . . . > returns rectilinear_coord_overloaded
. . . . . . . . > self as result
. . . . . . . . > contains sql
. . . . . . . . > specific rectilinear_coord_overload1,
. . . . . . . . > constructor method rectilinear_coord_overloaded(x_init double,y_init double) 
. . . . . . . . > returns rectilinear_coord_overloaded
. . . . . . . . > self as result
. . . . . . . . > contains sql
. . . . . . . . > specific rectilinear_coord_overload2
. . . . . . . . > ;
0: jdbc:farrago:> 
0: jdbc:farrago:> create specific method rectilinear_coord_overload0
. . . . . . . . > for rectilinear_coord_overloaded
. . . . . . . . > begin
. . . . . . . . >     set self.x = 100.0; set self.y = 100.0; return self; end;
0: jdbc:farrago:> 
0: jdbc:farrago:> create specific method rectilinear_coord_overload1
. . . . . . . . > for rectilinear_coord_overloaded
. . . . . . . . > begin
. . . . . . . . >     set self.x = x_init; return self; end;
0: jdbc:farrago:> 
0: jdbc:farrago:> create specific method rectilinear_coord_overload2
. . . . . . . . > for rectilinear_coord_overloaded
. . . . . . . . > begin
. . . . . . . . >     set self.x = x_init; set self.y = y_init; return self; end;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- structured type nesting
0: jdbc:farrago:> create type circle as (
. . . . . . . . >     center rectilinear_coord0,
. . . . . . . . >     radius double default 1
. . . . . . . . > ) final;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- explicit instantiability declaration
0: jdbc:farrago:> create type ellipse as (
. . . . . . . . >     major_axis double,
. . . . . . . . >     minor_axis double
. . . . . . . . > ) final instantiable;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  constructor name must match type name
0: jdbc:farrago:> create type bad_constructor_name as (
. . . . . . . . >     x double,
. . . . . . . . >     y double
. . . . . . . . > ) final
. . . . . . . . > constructor method bad_constructor_nombre(x_init double,y_init double) 
. . . . . . . . > returns bad_constructor_name
. . . . . . . . > self as result
. . . . . . . . > contains sql
. . . . . . . . > ;
Error: DDL validation error near line 5, column 20: Name of constructor routine "UDTTEST"."BAD_CONSTRUCTOR_NOMBRE" must match name of structured object type "UDTTEST"."BAD_CONSTRUCTOR_NAME" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  constructor language must be SQL for now
0: jdbc:farrago:> create type bad_constructor_language as (
. . . . . . . . >     x double,
. . . . . . . . >     y double
. . . . . . . . > ) final
. . . . . . . . > constructor method bad_constructor_language(x_init double,y_init double) 
. . . . . . . . > returns bad_constructor_language
. . . . . . . . > self as result
. . . . . . . . > language java
. . . . . . . . > contains sql
. . . . . . . . > ;
Error: java.lang.UnsupportedOperationException: class java.lang.String: constructor methods with language JAVA (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  constructor must return self type 
0: jdbc:farrago:> create type bad_constructor_type as (
. . . . . . . . >     x double,
. . . . . . . . >     y double
. . . . . . . . > ) final
. . . . . . . . > constructor method bad_constructor_type(x_init double,y_init double) 
. . . . . . . . > returns int
. . . . . . . . > self as result
. . . . . . . . > contains sql
. . . . . . . . > ;
Error: DDL validation error near line 5, column 20: Return type of constructor routine "UDTTEST"."BAD_CONSTRUCTOR_TYPE" must be type being constructed (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  conflicting constructor methods
0: jdbc:farrago:> create type duplicate_constructor as (
. . . . . . . . >     x double,
. . . . . . . . >     y double
. . . . . . . . > ) final
. . . . . . . . > constructor method duplicate_constructor(x_init double,y_init double) 
. . . . . . . . > returns duplicate_constructor
. . . . . . . . > self as result
. . . . . . . . > contains sql
. . . . . . . . > specific duplicate_constructor1,
. . . . . . . . > constructor method duplicate_constructor(x_init double,y_init double) 
. . . . . . . . > returns duplicate_constructor
. . . . . . . . > self as result
. . . . . . . . > contains sql
. . . . . . . . > specific duplicate_constructor2
. . . . . . . . > ;
Error: DDL validation error near line 10, column 20: Invocation name and parameter type signature of routine "UDTTEST"."DUPLICATE_CONSTRUCTOR2" conflicts with another routine (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  must specify finality
0: jdbc:farrago:> create type square as (
. . . . . . . . >     side_length double
. . . . . . . . > );
Error: DDL validation error near line 2, column 17: Must define structured object type "UDTTEST"."SQUARE" as FINAL (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  can never specify FINAL+NOT INSTANTIABLE for anything
0: jdbc:farrago:> create type square as (
. . . . . . . . >     side_length double
. . . . . . . . > ) final not instantiable;
Error: DDL validation error near line 2, column 17: Cannot define structured object type "UDTTEST"."SQUARE" as both FINAL and NOT INSTANTIABLE (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  can't specify INSTANTIABLE+NOT FINAL for structured type...yet!
0: jdbc:farrago:> create type square as (
. . . . . . . . >     side_length double
. . . . . . . . > ) instantiable not final;
Error: DDL validation error near line 2, column 17: Must define structured object type "UDTTEST"."SQUARE" as FINAL (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  can't specify NOT FINAL for structured type...yet!
0: jdbc:farrago:> create type square as (
. . . . . . . . >     side_length double
. . . . . . . . > ) not final;
Error: DDL validation error near line 2, column 17: Must define structured object type "UDTTEST"."SQUARE" as FINAL (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  can't specify NOT FINAL+NOT INSTANTIABLE for 
0: jdbc:farrago:> -- structured type...yet!
0: jdbc:farrago:> create type square as (
. . . . . . . . >     side_length double
. . . . . . . . > ) not final not instantiable;
Error: DDL validation error near line 2, column 17: Must define structured object type "UDTTEST"."SQUARE" as FINAL (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  at least one attribute required
0: jdbc:farrago:> create type no_attributes as () final;
Error: org.eigenbase.sql.parser.SqlParseException: Encountered ")" at line 1, column 31.
Was expecting one of:
    <IDENTIFIER> ...
    <QUOTED_IDENTIFIER> ... (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  unknown attribute type
0: jdbc:farrago:> create type bad_attrtype as (
. . . . . . . . >     x foobar
. . . . . . . . > ) final;
Error: DDL validation error near line 2, column 5: Reference to unknown datatype "FOOBAR" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  constraints not allowed on attributes
0: jdbc:farrago:> create type bad_constraint as (
. . . . . . . . >     x int not null
. . . . . . . . > ) final;
Error: org.eigenbase.sql.parser.SqlParseException: Encountered "not" at line 2, column 11.
Was expecting one of:
    "CHARACTER" ...
    "COLLATE" ...
    "DEFAULT" ...
    "MULTISET" ...
    "(" ...
    ")" ...
    "," ... (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  default value type mismatch
0: jdbc:farrago:> create type bad_default as (
. . . . . . . . >     x double default 'zero'
. . . . . . . . > ) final;
Error: DDL validation error near line 2, column 5: Type mismatch in DEFAULT clause for structured type attribute "X";
column type family is NUMERIC but default value type family is CHARACTER (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  self-referencing nested type
0: jdbc:farrago:> create type linked_list_node as (
. . . . . . . . >     x int,
. . . . . . . . >     next linked_list_node
. . . . . . . . > ) final;
Error: Object definition contains recursive cycle (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  mutual nesting
0: jdbc:farrago:> create schema cardiopulmonary
. . . . . . . . > create type heart as (
. . . . . . . . >     partner lung
. . . . . . . . > ) final
. . . . . . . . > create type lung as (
. . . . . . . . >     partner heart
. . . . . . . . > ) final
. . . . . . . . > ;
Error: Object definition contains recursive cycle (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  can't specify UDT for distinct type
0: jdbc:farrago:> create type oval as ellipse final;
Error: DDL validation error near line 1, column 21: Must define representation for distinct datatype "UDTTEST"."OVAL" as a predefined type (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test out-of-order definitions
0: jdbc:farrago:> create schema musculoskeletal
. . . . . . . . > create type muscle as (
. . . . . . . . >     s skeleton
. . . . . . . . > ) final
. . . . . . . . > create type skeleton as (
. . . . . . . . >     x double
. . . . . . . . > ) final
. . . . . . . . > ;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test path resolution and explicit qualification
0: jdbc:farrago:> 
0: jdbc:farrago:> create type tire as (
. . . . . . . . >     inner_radius double,
. . . . . . . . >     outer_radius double,
. . . . . . . . >     tread double
. . . . . . . . > ) final;
0: jdbc:farrago:> 
0: jdbc:farrago:> create schema spare_types
. . . . . . . . > create type tire as (
. . . . . . . . >     radius double,
. . . . . . . . >     tread double
. . . . . . . . > ) final
. . . . . . . . > create type toothbrush as (
. . . . . . . . >     firmness double,
. . . . . . . . >     length double,
. . . . . . . . >     head_angle double,
. . . . . . . . >     electric boolean
. . . . . . . . > ) final
. . . . . . . . > ;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test explicit qualification
0: jdbc:farrago:> create type toiletries as (
. . . . . . . . >     tb spare_types.toothbrush,
. . . . . . . . >     c udttest.circle
. . . . . . . . > ) final;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  wrong schema
0: jdbc:farrago:> create type bad_schema as (
. . . . . . . . >     tb udttest.toothbrush
. . . . . . . . > ) final;
Error: DDL validation error near line 2, column 5: Reference to unknown user-defined type "TOOTHBRUSH" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test UDF's which operate on UDT's
0: jdbc:farrago:> 
0: jdbc:farrago:> create function slope(c rectilinear_coord_non0)
. . . . . . . . > returns double
. . . . . . . . > contains sql
. . . . . . . . > deterministic
. . . . . . . . > return c.y/c.x;
0: jdbc:farrago:> 
0: jdbc:farrago:> create function slope_dec(c rectilinear_coord_non0_dec)
. . . . . . . . > returns decimal(10, 4)
. . . . . . . . > contains sql
. . . . . . . . > deterministic
. . . . . . . . > return c.y/c.x;
0: jdbc:farrago:> 
0: jdbc:farrago:> create function make_coord(x double,y double)
. . . . . . . . > returns rectilinear_coord_non0
. . . . . . . . > contains sql
. . . . . . . . > deterministic
. . . . . . . . > return new rectilinear_coord_non0(x,y);
0: jdbc:farrago:> 
0: jdbc:farrago:> create function transpose(c rectilinear_coord_non0)
. . . . . . . . > returns rectilinear_coord_non0
. . . . . . . . > contains sql
. . . . . . . . > deterministic
. . . . . . . . > return new rectilinear_coord_non0(c.y,c.x);
0: jdbc:farrago:> 
0: jdbc:farrago:> values slope(new rectilinear_coord_non0(5,20));
+---------+
| EXPR$0  |
+---------+
| 4.0     |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values slope_dec(new rectilinear_coord_non0_dec(5.0,20.0));
+---------+
| EXPR$0  |
+---------+
| 4.0000  |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select t.c.x, t.c.y from (select make_coord(7,9) as c from (values(0))) t;
+------+------+
|  X   |  Y   |
+------+------+
| 7.0  | 9.0  |
+------+------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select t.c.x, t.c.y from 
. . . . . . . . > (select transpose(new rectilinear_coord_non0(7,9)) as c from (values(0))) t;
+------+------+
|  X   |  Y   |
+------+------+
| 9.0  | 7.0  |
+------+------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test implicit path lookup
0: jdbc:farrago:> 
0: jdbc:farrago:> set path 'spare_types';
0: jdbc:farrago:> 
0: jdbc:farrago:> create type washroom as (
. . . . . . . . >     tb toothbrush
. . . . . . . . > ) final;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  not on path
0: jdbc:farrago:> create type line_segment as (
. . . . . . . . >     endpoint1 rectilinear_coord,
. . . . . . . . >     endpoint2 rectilinear_coord
. . . . . . . . > ) final;
Error: DDL validation error near line 2, column 5: Reference to unknown datatype "RECTILINEAR_COORD" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test tables which store typed columns
0: jdbc:farrago:> -- (put udt columns first to test offset flattening)
0: jdbc:farrago:> set path 'udttest';
0: jdbc:farrago:> 
0: jdbc:farrago:> create table stored_coord_list(
. . . . . . . . >     coord1 rectilinear_coord0 not null,
. . . . . . . . >     coord2 rectilinear_coord0,
. . . . . . . . >     pair_id int not null primary key
. . . . . . . . > );
0: jdbc:farrago:> 
0: jdbc:farrago:> -- verify that table may have same name as type
0: jdbc:farrago:> create table rectilinear_coord0(i int not null primary key);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test views which access typed columns
0: jdbc:farrago:> create view viewed_coord_list as
. . . . . . . . > select scl.pair_id, scl.coord1, scl.coord2.y
. . . . . . . . > from stored_coord_list scl;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test default constructor (null default value)
0: jdbc:farrago:> select t.p.x
. . . . . . . . > from (select new rectilinear_coord() as p from (values(0))) as t;
+----+
| X  |
+----+
|    |
+----+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test default constructor (non-null default value)
0: jdbc:farrago:> select t.p.x
. . . . . . . . > from (select new rectilinear_coord0() as p from (values(0))) as t;
+------+
|  X   |
+------+
| 0.0  |
+------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test default constructor for type that also has user-defined constructor
0: jdbc:farrago:> select t.p.x
. . . . . . . . > from (select new rectilinear_coord_non0() as p from (values(0))) as t;
+--------+
|   X    |
+--------+
| 100.0  |
+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test user-defined constructor
0: jdbc:farrago:> select t.p.x, t.p.y
. . . . . . . . > from (select new rectilinear_coord_non0(20,30) as p from (values(0))) as t;
+-------+-------+
|   X   |   Y   |
+-------+-------+
| 20.0  | 30.0  |
+-------+-------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test overloaded default constructor
0: jdbc:farrago:> select t.p.x, t.p.y
. . . . . . . . > from (select new rectilinear_coord_overloaded() as p from (values(0))) as t;
+--------+--------+
|   X    |   Y    |
+--------+--------+
| 100.0  | 100.0  |
+--------+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test overloaded 1-arg constructor
0: jdbc:farrago:> select t.p.x, t.p.y
. . . . . . . . > from (select new rectilinear_coord_overloaded(10) as p from (values(0))) as t;
+-------+-------+
|   X   |   Y   |
+-------+-------+
| 10.0  | 50.0  |
+-------+-------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test overloaded 2-arg constructor
0: jdbc:farrago:> select t.p.x, t.p.y
. . . . . . . . > from (select new rectilinear_coord_overloaded(10,10) as p from (values(0))) t;
+-------+-------+
|   X   |   Y   |
+-------+-------+
| 10.0  | 10.0  |
+-------+-------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- NOTE:  center is null because circle doesn't define its default value
0: jdbc:farrago:> select t.c.radius, t.c.center.y
. . . . . . . . > from (select new circle() as c from (values(0))) as t;
+---------+----+
| RADIUS  | Y  |
+---------+----+
| 1.0     |    |
+---------+----+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test storage
0: jdbc:farrago:> 
0: jdbc:farrago:> insert into stored_coord_list 
. . . . . . . . > values(new rectilinear_coord0(), new rectilinear_coord0(), 1);
0: jdbc:farrago:> 
0: jdbc:farrago:> insert into stored_coord_list 
. . . . . . . . > values(new rectilinear_coord0(), new rectilinear_coord0(), 2);
0: jdbc:farrago:> 
0: jdbc:farrago:> insert into stored_coord_list 
. . . . . . . . > values(new rectilinear_coord0(), null, 3);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- FIXME: query which returns structured type doesn't always work
0: jdbc:farrago:> -- select * from stored_coord_list order by pair_id;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail due to NOT NULL constraint
0: jdbc:farrago:> insert into stored_coord_list 
. . . . . . . . > values(null, null, 4);
Error: could not calculate results for the following row:
[ NULL, NULL, NULL, NULL, NULL, NULL, 4 ]
Messages:
[0]:PC=2 Code=22004 (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> select t.pair_id, t.coord1.x, t.coord2.y 
. . . . . . . . > from stored_coord_list t
. . . . . . . . > order by pair_id;
+----------+------+------+
| PAIR_ID  |  X   |  Y   |
+----------+------+------+
| 1        | 0.0  | 0.0  |
| 2        | 0.0  | 0.0  |
| 3        | 0.0  |      |
+----------+------+------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select t.pair_id
. . . . . . . . > from stored_coord_list t
. . . . . . . . > where t.coord2 is null
. . . . . . . . > order by pair_id;
+----------+
| PAIR_ID  |
+----------+
| 3        |
+----------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select t.pair_id
. . . . . . . . > from stored_coord_list t
. . . . . . . . > where t.coord2 is not null
. . . . . . . . > order by pair_id;
+----------+
| PAIR_ID  |
+----------+
| 1        |
| 2        |
+----------+
0: jdbc:farrago:> 
0: jdbc:farrago:> update stored_coord_list set pair_id=-pair_id;
0: jdbc:farrago:> 
0: jdbc:farrago:> select t.pair_id, t.coord1.x, t.coord2.y 
. . . . . . . . > from stored_coord_list t
. . . . . . . . > order by pair_id;
+----------+------+------+
| PAIR_ID  |  X   |  Y   |
+----------+------+------+
| -3       | 0.0  |      |
| -2       | 0.0  | 0.0  |
| -1       | 0.0  | 0.0  |
+----------+------+------+
0: jdbc:farrago:> 
0: jdbc:farrago:> delete from stored_coord_list t where t.coord1.x=0 and t.pair_id=-1;
0: jdbc:farrago:> 
0: jdbc:farrago:> select t.pair_id, t.coord1.x, t.coord2.y 
. . . . . . . . > from stored_coord_list t
. . . . . . . . > order by pair_id;
+----------+------+------+
| PAIR_ID  |  X   |  Y   |
+----------+------+------+
| -3       | 0.0  |      |
| -2       | 0.0  | 0.0  |
+----------+------+------+
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test user-defined orderings
0: jdbc:farrago:> 
0: jdbc:farrago:> create type playing_card as (
. . . . . . . . >     card_suit char(1),
. . . . . . . . >     card_rank integer
. . . . . . . . > ) final
. . . . . . . . > constructor method playing_card(
. . . . . . . . >     card_suit_init char(1),card_rank_init integer)
. . . . . . . . > returns playing_card
. . . . . . . . > self as result
. . . . . . . . > contains sql
. . . . . . . . > specific playing_card
. . . . . . . . > ;
0: jdbc:farrago:> 
0: jdbc:farrago:> create specific method playing_card
. . . . . . . . > for playing_card
. . . . . . . . > begin
. . . . . . . . >     set self.card_suit = card_suit_init; set 
. . . . . . . . >     self.card_rank = card_rank_init; return self
. . . . . . . . > ; end;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- TODO jvs 22-Mar-2005:  once validator stops spewing for this
0: jdbc:farrago:> -- should fail: no user-defined ordering available
0: jdbc:farrago:> -- values playing_card('H',11) = playing_card('H',11);
0: jdbc:farrago:> 
0: jdbc:farrago:> create ordering for playing_card
. . . . . . . . > equals only by state;
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) = new playing_card('H',11);
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) <> new playing_card('H',11);
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) = new playing_card('D',11);
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) <> new playing_card('D',11);
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- TODO jvs 22-Mar-2005:  once validator stops spewing for this
0: jdbc:farrago:> -- should fail: equals only
0: jdbc:farrago:> -- values new playing_card('H',11) > new playing_card('D',11);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  already defined
0: jdbc:farrago:> create ordering for playing_card
. . . . . . . . > equals only by state;
Error: DDL validation error near line 1, column 21: User-defined ordering already declared for structured object type "UDTTEST"."PLAYING_CARD" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> drop ordering for playing_card;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  already gone
0: jdbc:farrago:> drop ordering for playing_card;
Error: org.eigenbase.sql.parser.SqlParseException: No user-defined ordering declared for structured object type "UDTTEST"."PLAYING_CARD" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- define a suit-independent ordering (like in war)
0: jdbc:farrago:> create function map_card_to_card_rank(c playing_card)
. . . . . . . . > returns integer
. . . . . . . . > specific map_card_to_card_rank
. . . . . . . . > contains sql
. . . . . . . . > deterministic
. . . . . . . . > return c.card_rank;
0: jdbc:farrago:> 
0: jdbc:farrago:> create ordering for playing_card
. . . . . . . . > order full by map
. . . . . . . . > with specific function map_card_to_card_rank;
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) = new playing_card('D',11);
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) <> new playing_card('D',11);
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) > new playing_card('D',11);
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) < new playing_card('D',11);
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) >= new playing_card('D',11);
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) <= new playing_card('D',11);
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) = new playing_card('H',10);
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) <> new playing_card('H',10);
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) > new playing_card('H',10);
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) < new playing_card('H',10);
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) >= new playing_card('H',10);
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) <= new playing_card('H',10);
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> drop ordering for playing_card;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- define an ordering with spades as trump suit
0: jdbc:farrago:> create function compare_cards_spades_trump(c1 playing_card,c2 playing_card)
. . . . . . . . > returns integer
. . . . . . . . > specific compare_cards_spades_trump
. . . . . . . . > contains sql
. . . . . . . . > deterministic
. . . . . . . . > return case 
. . . . . . . . > when c1.card_suit='S' and c2.card_suit<>'S' then 1
. . . . . . . . > when c2.card_suit='S' and c1.card_suit<>'S' then -1
. . . . . . . . > when c1.card_rank > c2.card_rank then 1
. . . . . . . . > when c1.card_rank < c2.card_rank then -1
. . . . . . . . > else 0
. . . . . . . . > end;
0: jdbc:farrago:> 
0: jdbc:farrago:> create ordering for playing_card
. . . . . . . . > order full by relative
. . . . . . . . > with specific function compare_cards_spades_trump;
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) = new playing_card('D',11);
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) <> new playing_card('D',11);
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) > new playing_card('D',11);
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) < new playing_card('D',11);
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) >= new playing_card('D',11);
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) <= new playing_card('D',11);
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) = new playing_card('S',10);
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) <> new playing_card('S',10);
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) > new playing_card('S',10);
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) < new playing_card('S',10);
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) >= new playing_card('S',10);
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> values new playing_card('H',11) <= new playing_card('S',10);
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> drop ordering for playing_card;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test some negative cases for ordering function mismatch
0: jdbc:farrago:> 
0: jdbc:farrago:> create function compare_cards_bad_arity()
. . . . . . . . > returns integer
. . . . . . . . > specific compare_cards_bad_arity
. . . . . . . . > contains sql
. . . . . . . . > deterministic
. . . . . . . . > return 0;
0: jdbc:farrago:> 
0: jdbc:farrago:> create function compare_cards_bad_map_nondeterministic(c playing_card)
. . . . . . . . > returns integer
. . . . . . . . > specific compare_cards_bad_map_nondeterministic
. . . . . . . . > contains sql
. . . . . . . . > not deterministic
. . . . . . . . > return 0;
0: jdbc:farrago:> 
0: jdbc:farrago:> create function compare_cards_bad_relative_nondeterministic(
. . . . . . . . >     c1 playing_card, c2 playing_card)
. . . . . . . . > returns integer
. . . . . . . . > specific compare_cards_bad_relative_nondeterministic
. . . . . . . . > contains sql
. . . . . . . . > not deterministic
. . . . . . . . > return 0;
0: jdbc:farrago:> 
0: jdbc:farrago:> create function compare_cards_bad_map_read_write(c playing_card)
. . . . . . . . > returns integer
. . . . . . . . > specific compare_cards_bad_map_read_write
. . . . . . . . > modifies sql data
. . . . . . . . > deterministic
. . . . . . . . > return 0;
0: jdbc:farrago:> 
0: jdbc:farrago:> create function compare_cards_bad_relative_read_write(
. . . . . . . . >     c1 playing_card, c2 playing_card)
. . . . . . . . > returns integer
. . . . . . . . > specific compare_cards_bad_relative_read_write
. . . . . . . . > modifies sql data
. . . . . . . . > deterministic
. . . . . . . . > return 0;
0: jdbc:farrago:> 
0: jdbc:farrago:> create function compare_cards_bad_map_return(c playing_card)
. . . . . . . . > returns playing_card
. . . . . . . . > specific compare_cards_bad_map_return
. . . . . . . . > contains sql
. . . . . . . . > deterministic
. . . . . . . . > return new playing_card('C',2);
0: jdbc:farrago:> 
0: jdbc:farrago:> create function compare_cards_bad_relative_return(
. . . . . . . . >     c1 playing_card, c2 playing_card)
. . . . . . . . > returns double
. . . . . . . . > specific compare_cards_bad_relative_return
. . . . . . . . > contains sql
. . . . . . . . > deterministic
. . . . . . . . > return 0;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail
0: jdbc:farrago:> create ordering for playing_card
. . . . . . . . > order full by map
. . . . . . . . > with specific function compare_cards_bad_arity;
Error: DDL validation error near line 1, column 21: Exactly one parameter required for routine "UDTTEST"."COMPARE_CARDS_BAD_ARITY" used as RELATIVE ordering for structured object type "UDTTEST"."PLAYING_CARD" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail
0: jdbc:farrago:> create ordering for playing_card
. . . . . . . . > order full by relative
. . . . . . . . > with specific function compare_cards_bad_arity;
Error: DDL validation error near line 1, column 21: Exactly two parameters required for routine "UDTTEST"."COMPARE_CARDS_BAD_ARITY" used as RELATIVE ordering for structured object type "UDTTEST"."PLAYING_CARD" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail
0: jdbc:farrago:> create ordering for playing_card
. . . . . . . . > order full by map
. . . . . . . . > with specific function compare_cards_bad_map_nondeterministic;
Error: DDL validation error near line 1, column 21: DETERMINISTIC must be specified for routine "UDTTEST"."COMPARE_CARDS_BAD_MAP_NONDETERMINISTIC" used as ordering for structured object type "UDTTEST"."PLAYING_CARD" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail
0: jdbc:farrago:> create ordering for playing_card
. . . . . . . . > order full by relative
. . . . . . . . > with specific function compare_cards_bad_relative_nondeterministic;
Error: DDL validation error near line 1, column 21: DETERMINISTIC must be specified for routine "UDTTEST"."COMPARE_CARDS_BAD_RELATIVE_NONDETERMINISTIC" used as ordering for structured object type "UDTTEST"."PLAYING_CARD" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail
0: jdbc:farrago:> create ordering for playing_card
. . . . . . . . > order full by map
. . . . . . . . > with specific function compare_cards_bad_map_read_write;
Error: DDL validation error near line 1, column 21: MODIFIES SQL DATA may not be specified for routine "UDTTEST"."COMPARE_CARDS_BAD_MAP_READ_WRITE" used as ordering for structured object type "UDTTEST"."PLAYING_CARD" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail
0: jdbc:farrago:> create ordering for playing_card
. . . . . . . . > order full by relative
. . . . . . . . > with specific function compare_cards_bad_relative_read_write;
Error: DDL validation error near line 1, column 21: MODIFIES SQL DATA may not be specified for routine "UDTTEST"."COMPARE_CARDS_BAD_RELATIVE_READ_WRITE" used as ordering for structured object type "UDTTEST"."PLAYING_CARD" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail
0: jdbc:farrago:> create ordering for playing_card
. . . . . . . . > order full by map
. . . . . . . . > with specific function compare_cards_bad_map_return;
Error: DDL validation error near line 1, column 21: Predefined type required for result of routine "UDTTEST"."COMPARE_CARDS_BAD_MAP_RETURN" used as MAP ordering for structured object type "UDTTEST"."PLAYING_CARD" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail
0: jdbc:farrago:> create ordering for playing_card
. . . . . . . . > order full by relative
. . . . . . . . > with specific function compare_cards_bad_relative_return;
Error: DDL validation error near line 1, column 21: INTEGER required for result of routine "UDTTEST"."COMPARE_CARDS_BAD_RELATIVE_RETURN" used as RELATIVE ordering for structured object type "UDTTEST"."PLAYING_CARD" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> -- verify dependencies
0: jdbc:farrago:> 
0: jdbc:farrago:> create table card_deck(
. . . . . . . . >     card_position int not null primary key,
. . . . . . . . >     card playing_card not null);
0: jdbc:farrago:> 
0: jdbc:farrago:> create view card_view
. . . . . . . . > as select card from card_deck;
0: jdbc:farrago:> 
0: jdbc:farrago:> create ordering for playing_card
. . . . . . . . > order full by relative
. . . . . . . . > with specific function compare_cards_spades_trump;
0: jdbc:farrago:> 
0: jdbc:farrago:> create view high_card_view
. . . . . . . . > as select card from card_deck where card > new playing_card('S',10);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail
0: jdbc:farrago:> drop function compare_cards_spades_trump;
Error: Dropping routine "UDTTEST"."COMPARE_CARDS_SPADES_TRUMP" requires CASCADE because other objects still reference it (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail
0: jdbc:farrago:> drop type playing_card;
Error: Dropping structured object type "UDTTEST"."PLAYING_CARD" requires CASCADE because other objects still reference it (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail
0: jdbc:farrago:> drop ordering for playing_card;
Error: Dropping user-defined ordering "PLAYING_CARD" requires CASCADE because other objects still reference it (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> drop view high_card_view;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- now should succeed
0: jdbc:farrago:> drop ordering for playing_card;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- explicitly drop objects that reference playing_card
0: jdbc:farrago:> drop table card_deck cascade;
0: jdbc:farrago:> drop function map_card_to_card_rank;
0: jdbc:farrago:> drop function compare_cards_spades_trump;
0: jdbc:farrago:> drop function compare_cards_bad_map_nondeterministic;
0: jdbc:farrago:> drop function compare_cards_bad_relative_nondeterministic;
0: jdbc:farrago:> drop function compare_cards_bad_map_read_write;
0: jdbc:farrago:> drop function compare_cards_bad_relative_read_write;
0: jdbc:farrago:> drop function compare_cards_bad_map_return;
0: jdbc:farrago:> drop function compare_cards_bad_relative_return;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- now should succeed
0: jdbc:farrago:> drop type playing_card;
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> -- basic distinct types
0: jdbc:farrago:> create type dollar_currency as double;
0: jdbc:farrago:> create type euro_currency as double;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  can't specify NOT INSTANTIABLE for distinct type
0: jdbc:farrago:> create type simolean_currency as double not instantiable;
Error: DDL validation error near line 1, column 34: Cannot define distinct datatype "UDTTEST"."SIMOLEAN_CURRENCY" as both FINAL and NOT INSTANTIABLE (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  can't specify NOT FINAL for distinct type
0: jdbc:farrago:> create type simolean_currency as double not final;
Error: DDL validation error near line 1, column 34: Must define distinct datatype "UDTTEST"."SIMOLEAN_CURRENCY" as FINAL (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should succeed
0: jdbc:farrago:> create type simolean_currency as double final;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- table with distinct types
0: jdbc:farrago:> create table sears_catalog(
. . . . . . . . >     item_name varchar(128) not null primary key,
. . . . . . . . >     dollar_price dollar_currency not null,
. . . . . . . . >     euro_price euro_currency not null);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- TODO:  enable the rest of this once cast to UDT is working
0: jdbc:farrago:> -- insert into sears_catalog values
0: jdbc:farrago:> -- ('Jeans',cast(29.99 as dollar_currency),cast(15.99 as euro_currency)),
0: jdbc:farrago:> -- ('Thimble',cast(3.0 as dollar_currency),cast(2.0 as euro_currency));
0: jdbc:farrago:> 
0: jdbc:farrago:> -- select item_name,cast(euro_price as double) as item_price
0: jdbc:farrago:> -- from sears_catalog
0: jdbc:farrago:> -- order by item_price;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- create function convert_dollar_to_euro(d dollar_currency)
0: jdbc:farrago:> -- returns euro_currency
0: jdbc:farrago:> -- contains sql
0: jdbc:farrago:> -- deterministic
0: jdbc:farrago:> -- return cast(cast(d as double)/2 as euro_currency);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- select item_name,
0: jdbc:farrago:> -- cast(euro_price as double) 
0: jdbc:farrago:> --   - cast(convert_dollar_to_euro(dollar_price) as double)
0: jdbc:farrago:> --   as euro_diff
0: jdbc:farrago:> -- from sears_catalog
0: jdbc:farrago:> -- order by item_name;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- create ordering for dollar_currency
0: jdbc:farrago:> -- equals only by state;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- select item_name from sears_catalog 
0: jdbc:farrago:> -- where dollar_price > cast(10 as dollar_currency);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- In Europe, today is Opposite Day.
0: jdbc:farrago:> -- create function negate_euro(e euro_currency)
0: jdbc:farrago:> -- returns double
0: jdbc:farrago:> -- specific negate_euro
0: jdbc:farrago:> -- contains sql
0: jdbc:farrago:> -- deterministic
0: jdbc:farrago:> -- return -cast(e as double);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- create ordering for euro_currency
0: jdbc:farrago:> -- order full by map
0: jdbc:farrago:> -- with specific function negate_euro;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- select item_name from sears_catalog
0: jdbc:farrago:> -- where euro_price > cast(10 as euro_currency);
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test internals of flattening
0: jdbc:farrago:> 
0: jdbc:farrago:> !set outputformat csv
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select scl.pair_id, scl.coord1.y, scl.coord2.x
. . . . . . . . > from stored_coord_list scl;
'column0'
'FennelToIteratorConverter'
'  FennelRenameRel(fieldNames=[[PAIR_ID, Y, X]])'
'    FtrsIndexScanRel(table=[[LOCALDB, UDTTEST, STORED_COORD_LIST]], projection=[[6, 2, 4]], index=[SYS$CONSTRAINT_INDEX$STORED_COORD_LIST$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for
. . . . . . . . > select v.pair_id, v.coord1.x, v.coord1.y, v.y as y2 
. . . . . . . . > from viewed_coord_list v;
'column0'
'IterCalcRel(expr#0..4=[{inputs}], PAIR_ID=[$t0], X=[$t2], Y=[$t3], Y2=[$t4])'
'  FennelToIteratorConverter'
'    FennelRenameRel(fieldNames=[[PAIR_ID, COORD1, COORD1, COORD1, Y]])'
'      FtrsIndexScanRel(table=[[LOCALDB, UDTTEST, STORED_COORD_LIST]], projection=[[6, 0, 1, 2, 5]], index=[SYS$CONSTRAINT_INDEX$STORED_COORD_LIST$SYS$PRIMARY_KEY], preserveOrder=[false])'
0: jdbc:farrago:> 
0: jdbc:farrago:> !quit
