> -- $Id$
> 
> create schema sequence_ddl_test;
> set schema 'sequence_ddl_test';
> 
> -- double not allowed
> create table t(
>     d double generated always as identity primary key);
Error: org.eigenbase.sql.parser.SqlParseException: Exact numeric type required for sequence in definition of D (state=,code=0)
> 
> -- scale must be zero
> create table t(
>     d decimal(10,1) generated always as identity primary key);
Error: org.eigenbase.sql.parser.SqlParseException: Scale must be zero in definition of D (state=,code=0)
> 
> -- parameters must be in range
> create table t(
>     t tinyint generated always as identity
>         (maxvalue 200) primary key);
Error: org.eigenbase.sql.parser.SqlParseException: Value '200' is out of range for parameter of type TINYINT (state=,code=0)
> 
> -- increment cannot be zero
> create table t(
>     s smallint generated always as identity
>         (increment by 0) primary key);
Error: org.eigenbase.sql.parser.SqlParseException: Increment is required to be nonzero in definition of S (state=,code=0)
> 
> -- max must be greater than min
> create table t(
>     i int generated always as identity
>         (minvalue 500 maxvalue 100) primary key);
Error: org.eigenbase.sql.parser.SqlParseException: Sequence min value 500 cannot be greater than max value 100 (state=,code=0)
> 
> -- start value must be between min and max
> create table t(
>     i int generated always as identity
>         (minvalue 100 maxvalue 500 start with 1000) primary key);
Error: org.eigenbase.sql.parser.SqlParseException: Sequence start 1000 is required to be between min value 100 and max value 500 (state=,code=0)
> 
> -- tables contain at most one identity column
> create table t(
>     i int generated always as identity
>         (minvalue 100 maxvalue 500) primary key,
>     j int generated always as identity);
Error: Cannot specify more than one identity column in definition of table "SEQUENCE_DDL_TEST"."T" (state=,code=0)
> 
> -- out of range
> create table t(
>     b bigint generated always as identity
>         (minvalue 12345678900987654321) primary key,
>     j int);
Error: From line 3, column 19 to line 3, column 38: Numeric literal '12345678900987654321' out of range (state=,code=0)
> create table t(
>     b bigint generated always as identity
>         (maxvalue 1234567890.01) primary key,
>     j int);
Error: From line 3, column 19 to line 3, column 31: Numeric literal '1234567890.01' out of range (state=,code=0)
> 
> -- too many values
> create table t(
>     i int generated always as identity
>         (minvalue 100 maxvalue 500 
>         start with 350 increment by 100) primary key,
>     j int);
> insert into t (j) values (1), (2);
> insert into t (j) values (3);
Error: Sequence generator limit exceeded for LOCALDB.SEQUENCE_DDL_TEST.T (state=,code=0)
> 
> select * from t;
+------+----+
|  I   | J  |
+------+----+
| 350  | 1  |
| 450  | 2  |
+------+----+
> drop table t;
> 
> -- allow cycles
> create table t(
>     d decimal(10,0) generated always as identity
>         (minvalue 100 maxvalue 500 
>         start with 350 increment by 200 cycle) primary key,
>     j int);
> 
> -- 350, 100, 300
> insert into t (j) values (1), (2), (3);
> -- 500, 100 (fail), 300 (fail)
> insert into t (j) values (4), (5), (6);
Error: Duplicate key detected:  [ 100 ] (state=,code=0)
> -- 500
> insert into t (j) values (7);
> -- 100 (fail)
> insert into t (j) values (8);
Error: Duplicate key detected:  [ 100 ] (state=,code=0)
> 
> select * from t;
+------+----+
|  D   | J  |
+------+----+
| 100  | 2  |
| 300  | 3  |
| 350  | 1  |
| 500  | 7  |
+------+----+
> drop table t;
> 
> -- reverse increment, big values
> create table t(
>     b bigint generated always as identity
>         (minvalue 1000000000100 maxvalue 1000000000500 
>         start with 1000000000450 increment by -200 cycle) primary key,
>     j int);
> 
> -- [10000000000+] 450, 250, 500, 300, 100 
> insert into t (j) values (1), (2), (3), (4), (5);
> 
> select * from t;
+----------------+----+
|       B        | J  |
+----------------+----+
| 1000000000100  | 5  |
| 1000000000250  | 2  |
| 1000000000300  | 4  |
| 1000000000450  | 1  |
| 1000000000500  | 3  |
+----------------+----+
> drop table t;
> 
> ----------------------------------------------------------------------
> -- ALTER COLUMN
> ----------------------------------------------------------------------
> 
> create table t(
>     i int primary key,
>     b bigint generated by default as identity
>         (minvalue -10 maxvalue 0 start with -5));
> 
> -- alter sequence before it is started
> alter table t alter column b 
>     set minvalue -5;
> 
> insert into t (i) values (1), (2), (3), (4), (5), (6);
> 
> select * from t;
+----+-----+
| I  |  B  |
+----+-----+
| 1  | -5  |
| 2  | -4  |
| 3  | -3  |
| 4  | -2  |
| 5  | -1  |
| 6  | 0   |
+----+-----+
> truncate table t;
> 
> -- out of range
> alter table t alter column b 
>     restart with -20;
Error: Sequence start -20 is required to be between min value -5 and max value 0 (state=,code=0)
> 
> alter table t alter column b 
>     set minvalue 100;
Error: Sequence min value 100 cannot be greater than max value 0 (state=,code=0)
> 
> alter table t alter column b
>     restart with 0 set increment by -1;
> 
> -- insert all values: 0, -1, -2, ... -5
> insert into t (i) values (1), (2), (3), (4), (5), (6);
> 
> insert into t (i) values (7);
Error: Sequence generator limit exceeded for LOCALDB.SEQUENCE_DDL_TEST.T (state=,code=0)
> 
> select * from t;
+----+-----+
| I  |  B  |
+----+-----+
| 1  | 0   |
| 2  | -1  |
| 3  | -2  |
| 4  | -3  |
| 5  | -4  |
| 6  | -5  |
+----+-----+
> truncate table t;
> 
> -- insert -7, -9, 0, 2
> alter table t alter column b
>     set minvalue -10 set increment by -2 set cycle;
> 
> insert into t (i) values (1), (2), (3), (4);
> 
> select * from t;
+----+-----+
| I  |  B  |
+----+-----+
| 1  | -7  |
| 2  | -9  |
| 3  | 0   |
| 4  | -2  |
+----+-----+
> truncate table t;
> 
> -- single value sequence
> create table s(
>     i int primary key,
>     d decimal(10,0) generated always as identity
>         (minvalue 100 maxvalue 100));
> 
> insert into s (i) values (5);
> insert into s (i) values (10);
Error: Sequence generator limit exceeded for LOCALDB.SEQUENCE_DDL_TEST.S (state=,code=0)
> 
> alter table s alter column d 
>     set cycle;
> 
> insert into s (i) values (10);
> select * from s;
+-----+------+
|  I  |  D   |
+-----+------+
| 5   | 100  |
| 10  | 100  |
+-----+------+
> truncate table s;
> 
> ----------------------------------------------------------------------
> -- GENERATED ALWAYS
> ----------------------------------------------------------------------
> 
> insert into t values (10, -10);
> 
> insert into s values (20, 20);
Error: Cannot explicitly insert value into IDENTITY column 'D' which is ALWAYS GENERATED (state=,code=0)
> 
> ----------------------------------------------------------------------
> -- VIEWS
> ----------------------------------------------------------------------
> 
> select * from sys_boot.mgmt.sequences_view order by TABLE_NAME, COLUMN_NAME;
+------------+--------------------+-------------+--------------+------------+------------+-----------+-----------+--------+----------+
| TABLE_CAT  |    TABLE_SCHEM     | TABLE_NAME  | COLUMN_NAME  | baseValue  | increment  | minValue  | maxValue  | cycle  | expired  |
+------------+--------------------+-------------+--------------+------------+------------+-----------+-----------+--------+----------+
| LOCALDB    | SEQUENCE_DDL_TEST  | S           | D            | 100        | 1          | 100       | 100       | true   | false    |
| LOCALDB    | SEQUENCE_DDL_TEST  | T           | B            | 0          | -2         | -10       | 0         | true   | false    |
+------------+--------------------+-------------+--------------+------------+------------+-----------+-----------+--------+----------+
> 
> ----------------------------------------------------------------------
> -- INTERACTION WITH REBUILD (LDB-160)
> ----------------------------------------------------------------------
> 
> alter session implementation set jar sys_boot.sys_boot.luciddb_plugin;
> 
> create table cs(
>     i int primary key,
>     d decimal(10,0) generated always as identity
>         (minvalue 20 maxvalue 100));
> 
> insert into cs (i) values (5);
> insert into cs (i) values (10);
> 
> select * from cs order by i;
+-----+-----+
|  I  |  D  |
+-----+-----+
| 5   | 20  |
| 10  | 21  |
+-----+-----+
> 
> alter table cs rebuild;
> 
> select * from cs order by i;
+-----+-----+
|  I  |  D  |
+-----+-----+
| 5   | 20  |
| 10  | 21  |
+-----+-----+
> 
> 
> !quit
