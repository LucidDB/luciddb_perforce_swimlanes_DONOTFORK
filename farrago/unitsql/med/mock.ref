0: jdbc:farrago:> -- $Id$
0: jdbc:farrago:> -- Test mock namespace plugin
0: jdbc:farrago:> 
0: jdbc:farrago:> create server mock_foreign_server
. . . . . . . . > foreign data wrapper sys_mock_foreign;
0: jdbc:farrago:> 
0: jdbc:farrago:> create server mock_local_server
. . . . . . . . > local data wrapper sys_mock;
0: jdbc:farrago:> 
0: jdbc:farrago:> create server mock_foreign_metadata_server
. . . . . . . . > foreign data wrapper sys_mock_foreign
. . . . . . . . > options (
. . . . . . . . > foreign_schema_name 'MOCK_SCHEMA', 
. . . . . . . . > foreign_table_name 'MOCK_TABLE',
. . . . . . . . > executor_impl 'JAVA',
. . . . . . . . > row_count '3');
0: jdbc:farrago:> 
0: jdbc:farrago:> create server mock_foreign_dynamic_server
. . . . . . . . > foreign data wrapper sys_mock_foreign
. . . . . . . . > options (
. . . . . . . . > foreign_schema_name 'MOCK_SCHEMA', 
. . . . . . . . > foreign_table_name 'MOCK_TABLE',
. . . . . . . . > row_count_sql 'select current_row_count from mock_schema.dynamic_row_count');
0: jdbc:farrago:> 
0: jdbc:farrago:> create schema mock_schema;
0: jdbc:farrago:> 
0: jdbc:farrago:> set schema 'mock_schema';
0: jdbc:farrago:> 
0: jdbc:farrago:> create foreign table mock_fennel_table(
. . . . . . . . >     id int not null)
. . . . . . . . > server mock_foreign_server
. . . . . . . . > options (executor_impl 'FENNEL', row_count '3');
0: jdbc:farrago:> 
0: jdbc:farrago:> create foreign table mock_java_table(
. . . . . . . . >     id int not null)
. . . . . . . . > server mock_foreign_server
. . . . . . . . > options (executor_impl 'JAVA', row_count '3');
0: jdbc:farrago:> 
0: jdbc:farrago:> create function ramp(n int)
. . . . . . . . > returns table(i int)
. . . . . . . . > language java
. . . . . . . . > parameter style system defined java
. . . . . . . . > no sql
. . . . . . . . > external name 'class net.sf.farrago.test.FarragoTestUDR.ramp';
0: jdbc:farrago:> 
0: jdbc:farrago:> create function longer_ramp(n int)
. . . . . . . . > returns table(i int)
. . . . . . . . > language java
. . . . . . . . > parameter style system defined java
. . . . . . . . > no sql
. . . . . . . . > external name 'class net.sf.farrago.test.FarragoTestUDR.longerRamp';
0: jdbc:farrago:> 
0: jdbc:farrago:> create foreign table mock_ramp_udx_table(
. . . . . . . . >     id int not null)
. . . . . . . . > server mock_foreign_server
. . . . . . . . > options (
. . . . . . . . >     executor_impl 'JAVA', 
. . . . . . . . >     udx_specific_name 'mock_schema.ramp',
. . . . . . . . >     row_count '3');
0: jdbc:farrago:> 
0: jdbc:farrago:> create foreign table mock_longer_ramp_udx_table(
. . . . . . . . >     id int not null)
. . . . . . . . > server mock_foreign_server
. . . . . . . . > options (
. . . . . . . . >     executor_impl 'JAVA', 
. . . . . . . . >     udx_specific_name 'mock_schema.longer_ramp',
. . . . . . . . >     row_count '3');
0: jdbc:farrago:> 
0: jdbc:farrago:> create table mock_empty_table(
. . . . . . . . >     id int not null primary key)
. . . . . . . . > server mock_local_server;
0: jdbc:farrago:> 
0: jdbc:farrago:> create foreign table mock_implicit_metadata_table
. . . . . . . . > server mock_foreign_metadata_server;
0: jdbc:farrago:> 
0: jdbc:farrago:> create foreign table mock_explicit_metadata_table(
. . . . . . . . >     id int not null)
. . . . . . . . > server mock_foreign_metadata_server
. . . . . . . . > options (foreign_schema_name 'MOCK_SCHEMA', foreign_table_name 'MOCK_TABLE');
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  schema name mismatch
0: jdbc:farrago:> create foreign table bad_schema_name
. . . . . . . . > server mock_foreign_metadata_server
. . . . . . . . > options (foreign_schema_name 'BACH_SCHEMA');
Error: Mock foreign object "BACH_SCHEMA" not found (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  table name mismatch
0: jdbc:farrago:> create foreign table bad_table_name
. . . . . . . . > server mock_foreign_metadata_server
. . . . . . . . > options (foreign_table_name 'BACH_TABLE');
Error: Mock foreign object "BACH_TABLE" not found (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test create index on mock table
0: jdbc:farrago:> 
0: jdbc:farrago:> create index mock_index on mock_empty_table(id);
0: jdbc:farrago:> 
0: jdbc:farrago:> insert into mock_empty_table values (5);
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from mock_fennel_table;
+-----+
| ID  |
+-----+
| 0   |
| 0   |
| 0   |
+-----+
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from mock_java_table;
+-----+
| ID  |
+-----+
| 0   |
| 0   |
| 0   |
+-----+
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from mock_ramp_udx_table;
+-----+
| ID  |
+-----+
| 0   |
| 1   |
| 2   |
+-----+
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from mock_longer_ramp_udx_table;
+-----+
| ID  |
+-----+
| 0   |
| 1   |
| 2   |
| 3   |
| 4   |
| 5   |
+-----+
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from mock_empty_table;
+-----+
| ID  |
+-----+
+-----+
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from mock_implicit_metadata_table;
+--------------+
| MOCK_COLUMN  |
+--------------+
| 0            |
| 0            |
| 0            |
+--------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from mock_explicit_metadata_table;
+-----+
| ID  |
+-----+
| 0   |
| 0   |
| 0   |
+-----+
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from mock_foreign_metadata_server.mock_schema.mock_table;
+--------------+
| MOCK_COLUMN  |
+--------------+
| 0            |
| 0            |
| 0            |
+--------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  unknown schema name
0: jdbc:farrago:> select * from mock_foreign_metadata_server.bach_schema.mock_table;
Error: From line 1, column 15 to line 1, column 65: Table 'MOCK_FOREIGN_METADATA_SERVER.BACH_SCHEMA.MOCK_TABLE' not found (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  unknown table name
0: jdbc:farrago:> select * from mock_foreign_metadata_server.mock_schema.bach_table;
Error: From line 1, column 15 to line 1, column 65: Table 'MOCK_FOREIGN_METADATA_SERVER.MOCK_SCHEMA.BACH_TABLE' not found (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for select * from mock_fennel_table;
+------------------------------------------------------------------------+
|                                column0                                 |
+------------------------------------------------------------------------+
| FennelToIteratorConverter                                              |
|   MedMockFennelRel(table=[[LOCALDB, MOCK_SCHEMA, MOCK_FENNEL_TABLE]])  |
+------------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for select * from mock_java_table;
+------------------------------------------------------------------+
|                             column0                              |
+------------------------------------------------------------------+
| MedMockIterRel(table=[[LOCALDB, MOCK_SCHEMA, MOCK_JAVA_TABLE]])  |
+------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for select * from mock_empty_table;
+-------------------------------------------------------------------+
|                              column0                              |
+-------------------------------------------------------------------+
| MedMockIterRel(table=[[LOCALDB, MOCK_SCHEMA, MOCK_EMPTY_TABLE]])  |
+-------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> explain plan for insert into mock_empty_table values (5);
+-------------------------------------------------------------------+
|                              column0                              |
+-------------------------------------------------------------------+
| MedMockIterRel(table=[[LOCALDB, MOCK_SCHEMA, MOCK_EMPTY_TABLE]])  |
+-------------------------------------------------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> create schema mock_local_schema;
0: jdbc:farrago:> 
0: jdbc:farrago:> set schema 'mock_local_schema';
0: jdbc:farrago:> 
0: jdbc:farrago:> import foreign schema mock_schema
. . . . . . . . > from server mock_foreign_metadata_server
. . . . . . . . > into mock_local_schema;
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from mock_local_schema.mock_table;
+--------------+
| MOCK_COLUMN  |
+--------------+
| 0            |
| 0            |
| 0            |
+--------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  no metadata
0: jdbc:farrago:> import foreign schema mock_schema
. . . . . . . . > from server mock_foreign_server
. . . . . . . . > into mock_local_schema;
Error: Support for foreign schema import not available in data server "SYS_BOOT"."MOCK_FOREIGN_SERVER" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  no such schema
0: jdbc:farrago:> import foreign schema bach_schema
. . . . . . . . > from server mock_foreign_metadata_server
. . . . . . . . > into mock_local_schema;
Error: Unknown foreign schema "BACH_SCHEMA" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  duplicate table name
0: jdbc:farrago:> import foreign schema mock_schema
. . . . . . . . > from server mock_foreign_metadata_server
. . . . . . . . > into mock_local_schema;
Error: Target schema "LOCALDB"."MOCK_LOCAL_SCHEMA" already contains foreign table "MOCK_TABLE" with same name (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> create schema mock_limit_schema;
0: jdbc:farrago:> 
0: jdbc:farrago:> set schema 'mock_limit_schema';
0: jdbc:farrago:> 
0: jdbc:farrago:> import foreign schema mock_schema
. . . . . . . . > limit to (mock_table)
. . . . . . . . > from server mock_foreign_metadata_server
. . . . . . . . > into mock_limit_schema;
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from mock_limit_schema.mock_table;
+--------------+
| MOCK_COLUMN  |
+--------------+
| 0            |
| 0            |
| 0            |
+--------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  no such table
0: jdbc:farrago:> import foreign schema mock_schema
. . . . . . . . > limit to (bach_table)
. . . . . . . . > from server mock_foreign_metadata_server
. . . . . . . . > into mock_limit_schema;
Error: One or more tables not found while importing foreign schema "MOCK_SCHEMA":  [BACH_TABLE] (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> create schema mock_exclude_schema;
0: jdbc:farrago:> 
0: jdbc:farrago:> set schema 'mock_exclude_schema';
0: jdbc:farrago:> 
0: jdbc:farrago:> import foreign schema mock_schema
. . . . . . . . > except (mock_table)
. . . . . . . . > from server mock_foreign_metadata_server
. . . . . . . . > into mock_exclude_schema;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- should fail:  excluded
0: jdbc:farrago:> select * from mock_exclude_schema.mock_table;
Error: From line 1, column 15 to line 1, column 44: Table 'MOCK_EXCLUDE_SCHEMA.MOCK_TABLE' not found (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> create table mock_schema.dynamic_row_count(
. . . . . . . . >     current_row_count int not null primary key);
0: jdbc:farrago:> insert into mock_schema.dynamic_row_count values(7);
0: jdbc:farrago:> 
0: jdbc:farrago:> select count(*) from mock_foreign_dynamic_server.mock_schema.mock_table;
+---------+
| EXPR$0  |
+---------+
| 7       |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- now change the current_row_count value and verify that we get
0: jdbc:farrago:> -- a corresponding number of rows back from the mock
0: jdbc:farrago:> update mock_schema.dynamic_row_count set current_row_count=21;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- have to flush the plan cache, because the value 7 is still burned
0: jdbc:farrago:> -- into the old plan and the optimizer doesn't know that it's supposed
0: jdbc:farrago:> -- to read the new value
0: jdbc:farrago:> call sys_boot.mgmt.flush_code_cache();
0: jdbc:farrago:> 
0: jdbc:farrago:> select count(*) from mock_foreign_dynamic_server.mock_schema.mock_table;
+---------+
| EXPR$0  |
+---------+
| 21      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test browse connect functionality
0: jdbc:farrago:> create foreign data wrapper mock_browse
. . . . . . . . > library 'class net.sf.farrago.namespace.mock.MedMockForeignDataWrapper'
. . . . . . . . > language java
. . . . . . . . > options(browse_connect_description 'Go Ask The Mock Turtle');
0: jdbc:farrago:> 
0: jdbc:farrago:> -- note that none of the system wrappers should have 
0: jdbc:farrago:> -- browse_connect_description set, so don't need ORDER BY here
0: jdbc:farrago:> select * from sys_boot.mgmt.browse_connect_foreign_wrappers;
+-----------------------+-----------------------------+
| FOREIGN_WRAPPER_NAME  | BROWSE_CONNECT_DESCRIPTION  |
+-----------------------+-----------------------------+
| MOCK_BROWSE           | Go Ask The Mock Turtle      |
+-----------------------+-----------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- query for available options with no proposed settings (empty_view)
0: jdbc:farrago:> select * from table(
. . . . . . . . >   sys_boot.mgmt.browse_connect_foreign_server(
. . . . . . . . >     'MOCK_BROWSE',
. . . . . . . . >     cursor(table sys_boot.mgmt.browse_connect_empty_options)))
. . . . . . . . > order by option_ordinal, option_choice_ordinal;
+-----------------+----------------------+---------------------------------------------+---------------------+------------------------+----------------------+
| OPTION_ORDINAL  |     OPTION_NAME      |             OPTION_DESCRIPTION              | IS_OPTION_REQUIRED  | OPTION_CHOICE_ORDINAL  | OPTION_CHOICE_VALUE  |
+-----------------+----------------------+---------------------------------------------+---------------------+------------------------+----------------------+
| 0               | FOREIGN_SCHEMA_NAME  | Name of foreign schema to simulate          | false               | -1                     |                      |
| 1               | FOREIGN_TABLE_NAME   | UNLOCALIZED_FOREIGN_TABLE_NAME_DESCRIPTION  | false               | -1                     |                      |
| 2               | EXECUTOR_IMPL        | UNLOCALIZED_EXECUTOR_IMPL_DESCRIPTION       | true                | -1                     | JAVA                 |
| 2               | EXECUTOR_IMPL        | UNLOCALIZED_EXECUTOR_IMPL_DESCRIPTION       | true                | 0                      | JAVA                 |
| 2               | EXECUTOR_IMPL        | UNLOCALIZED_EXECUTOR_IMPL_DESCRIPTION       | true                | 1                      | FENNEL               |
+-----------------+----------------------+---------------------------------------------+---------------------+------------------------+----------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- query for available options with some proposed settings and verify
0: jdbc:farrago:> -- that the proposals override the defaults
0: jdbc:farrago:> select * from table(
. . . . . . . . >   sys_boot.mgmt.browse_connect_foreign_server(
. . . . . . . . >     'MOCK_BROWSE',
. . . . . . . . >     cursor(
. . . . . . . . >         values ('FOREIGN_SCHEMA_NAME', 'Larry'),
. . . . . . . . >                ('EXECUTOR_IMPL', 'FENNEL'))))
. . . . . . . . > order by option_ordinal, option_choice_ordinal;
+-----------------+----------------------+---------------------------------------------+---------------------+------------------------+----------------------+
| OPTION_ORDINAL  |     OPTION_NAME      |             OPTION_DESCRIPTION              | IS_OPTION_REQUIRED  | OPTION_CHOICE_ORDINAL  | OPTION_CHOICE_VALUE  |
+-----------------+----------------------+---------------------------------------------+---------------------+------------------------+----------------------+
| 0               | FOREIGN_SCHEMA_NAME  | Name of foreign schema to simulate          | false               | -1                     | Larry                |
| 1               | FOREIGN_TABLE_NAME   | UNLOCALIZED_FOREIGN_TABLE_NAME_DESCRIPTION  | false               | -1                     |                      |
| 2               | EXECUTOR_IMPL        | UNLOCALIZED_EXECUTOR_IMPL_DESCRIPTION       | true                | -1                     | FENNEL               |
| 2               | EXECUTOR_IMPL        | UNLOCALIZED_EXECUTOR_IMPL_DESCRIPTION       | true                | 0                      | JAVA                 |
| 2               | EXECUTOR_IMPL        | UNLOCALIZED_EXECUTOR_IMPL_DESCRIPTION       | true                | 1                      | FENNEL               |
+-----------------+----------------------+---------------------------------------------+---------------------+------------------------+----------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- query for available schemas in a configured server
0: jdbc:farrago:> select * from table(sys_boot.mgmt.browse_foreign_schemas(
. . . . . . . . >     'MOCK_FOREIGN_DYNAMIC_SERVER'))
. . . . . . . . > order by schema_name;
+--------------+--------------+
| SCHEMA_NAME  | DESCRIPTION  |
+--------------+--------------+
| MOCK_SCHEMA  | Mock schema  |
+--------------+--------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- query for available schemas in an unconfigured server (should be none)
0: jdbc:farrago:> select * from table(sys_boot.mgmt.browse_foreign_schemas(
. . . . . . . . >     'SYS_MOCK_FOREIGN_DATA_SERVER'))
. . . . . . . . > order by schema_name;
+--------------+--------------+
| SCHEMA_NAME  | DESCRIPTION  |
+--------------+--------------+
+--------------+--------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> !quit
