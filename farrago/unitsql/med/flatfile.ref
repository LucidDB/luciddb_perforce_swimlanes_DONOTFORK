0: jdbc:farrago:> -- $Id: //open/lu/dev/farrago/unitsql/med/flatfile.sql#10 $
0: jdbc:farrago:> -- Test flatfile namespace plugin
0: jdbc:farrago:> 
0: jdbc:farrago:> create schema flatfile_schema;
0: jdbc:farrago:> 
0: jdbc:farrago:> set schema 'flatfile_schema';
0: jdbc:farrago:> 
0: jdbc:farrago:> -- create wrapper for access to flatfile data
0: jdbc:farrago:> -- sys_file_wrapper has alread been allocated, but depending on a 
0: jdbc:farrago:> -- local data wrapper helps the test cleanup scripts
0: jdbc:farrago:> create foreign data wrapper local_file_wrapper
. . . . . . . . > library 'class com.lucidera.farrago.namespace.flatfile.FlatFileDataWrapper'
. . . . . . . . > language java;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- create a server for general use
0: jdbc:farrago:> create server flatfile_server
. . . . . . . . > foreign data wrapper local_file_wrapper
. . . . . . . . > options (
. . . . . . . . >     directory 'unitsql/med/flatfiles',
. . . . . . . . >     file_extension 'csv',
. . . . . . . . >     with_header 'yes', 
. . . . . . . . >     log_directory 'testlog');
0: jdbc:farrago:> 
0: jdbc:farrago:> -- create a server without headers (for detecting other errors)
0: jdbc:farrago:> create server flatfile_server_noheader
. . . . . . . . > foreign data wrapper local_file_wrapper
. . . . . . . . > options (
. . . . . . . . >     directory 'unitsql/med/flatfiles',
. . . . . . . . >     file_extension 'csv',
. . . . . . . . >     with_header 'no', 
. . . . . . . . >     log_directory 'testlog');
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> ---------------------------------------------------------------------------
0: jdbc:farrago:> -- Part 1. Parser tests
0: jdbc:farrago:> ---------------------------------------------------------------------------
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 1.1 Test a table with explicit column definitions
0: jdbc:farrago:> -- 
0: jdbc:farrago:> create foreign table flatfile_explicit_table(
. . . . . . . . >     id int not null,
. . . . . . . . >     name varchar(50) not null,
. . . . . . . . >     extra_field char(1) not null)
. . . . . . . . > server flatfile_server
. . . . . . . . > options (filename 'example');
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from flatfile_explicit_table order by 3;
+------+------------------------------------------+--------------+
|  ID  |                   NAME                   | EXTRA_FIELD  |
+------+------------------------------------------+--------------+
| 123  | Jonathan Ackerman                        | A            |
| 234  | Grady O'Neil                             | B            |
| 456  | Susan, Peter and Dave                    | C            |
| 789  | Amelia "meals" Maurice                   | E            |
| 123  | "S,"                                     | F            |
| 234  | Peter "peg leg", Jimmy & Samantha "Sam"  | G            |
+------+------------------------------------------+--------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 1.2 Test a table whose row type is very large
0: jdbc:farrago:> --     (this should not throw an error, because we want to allow a large 
0: jdbc:farrago:> --         row type as long as the data is of manageable size)
0: jdbc:farrago:> --
0: jdbc:farrago:> create foreign table flatfile_rowTypeTooBig(
. . . . . . . . >     a varchar(2000),
. . . . . . . . >     b varchar(2000),
. . . . . . . . >     c varchar(2000))
. . . . . . . . > server flatfile_server
. . . . . . . . > options (filename 'example');
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from flatfile_rowTypeTooBig;
+------+------------------------------------------+----+
|  A   |                    B                     | C  |
+------+------------------------------------------+----+
| 123  | "S,"                                     | F  |
| 123  | Jonathan Ackerman                        | A  |
| 234  | Grady O'Neil                             | B  |
| 456  | Susan, Peter and Dave                    | C  |
| 789  | Amelia "meals" Maurice                   | E  |
| 234  | Peter "peg leg", Jimmy & Samantha "Sam"  | G  |
+------+------------------------------------------+----+
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 1.3 Test a table with a missing data file
0: jdbc:farrago:> --
0: jdbc:farrago:> create foreign table flatfile_missing(
. . . . . . . . >     id int not null,
. . . . . . . . >     name varchar(50) not null,
. . . . . . . . >     extra_field char(1) not null)
. . . . . . . . > server flatfile_server
. . . . . . . . > options (filename 'missing');
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from flatfile_missing;
Error: Could not read data file unitsql/med/flatfiles/missing.csv (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 1.4 Test whether an attempt is made to log errors
0: jdbc:farrago:> --     (the following column description is invalid)
0: jdbc:farrago:> --
0: jdbc:farrago:> create server flatfile_server_locked
. . . . . . . . > foreign data wrapper local_file_wrapper
. . . . . . . . > options (
. . . . . . . . >     directory 'unitsql/med/flatfiles',
. . . . . . . . >     file_extension 'csv',
. . . . . . . . >     with_header 'no', 
. . . . . . . . >     log_directory 'unitsql/med/flatfiles');
0: jdbc:farrago:> 
0: jdbc:farrago:> create foreign table flatfile_locked(
. . . . . . . . >     id int not null,
. . . . . . . . >     name varchar(50) not null)
. . . . . . . . > server flatfile_server_locked
. . . . . . . . > options (
. . . . . . . . >     filename 'noheader',
. . . . . . . . >     log_filename 'locked');
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from flatfile_locked;
Error: Could not write log file unitsql/med/flatfiles/locked (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 1.5 Test bad line delimiter
0: jdbc:farrago:> --      (note that the delimiter does not occur in the file)
0: jdbc:farrago:> --      (note that you can also choose an empty file extension
0: jdbc:farrago:> --          as a trick to pass the full path to foreign tables)
0: jdbc:farrago:> --
0: jdbc:farrago:> create server flatfile_server_badLineDelim
. . . . . . . . > foreign data wrapper local_file_wrapper
. . . . . . . . > options (
. . . . . . . . >     file_extension '',
. . . . . . . . >     with_header 'no',
. . . . . . . . >     line_delimiter '\t', 
. . . . . . . . >     log_directory 'testlog/');
0: jdbc:farrago:> 
0: jdbc:farrago:> create foreign table flatfile_badLineDelim(
. . . . . . . . >     id int not null,
. . . . . . . . >     name varchar(50) not null,
. . . . . . . . >     extra_field char(1) not null)
. . . . . . . . > server flatfile_server_badLineDelim
. . . . . . . . > options (filename 'unitsql/med/flatfiles/noheader.csv');
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from flatfile_badLineDelim;
Error: Data file unitsql/med/flatfiles/noheader.csv has no row delimiter (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 1.6 Test bad field delimiter
0: jdbc:farrago:> --      (note that the delimiter does not occur in the file)
0: jdbc:farrago:> --
0: jdbc:farrago:> create server flatfile_server_badFieldDelim
. . . . . . . . > foreign data wrapper local_file_wrapper
. . . . . . . . > options (
. . . . . . . . >     file_extension 'csv',
. . . . . . . . >     with_header 'no',
. . . . . . . . >     field_delimiter '\t', 
. . . . . . . . >     log_directory 'testlog');
0: jdbc:farrago:> 
0: jdbc:farrago:> create foreign table flatfile_badFieldDelim(
. . . . . . . . >     id int not null,
. . . . . . . . >     name varchar(50) not null,
. . . . . . . . >     extra_field char(1) not null)
. . . . . . . . > server flatfile_server_badFieldDelim
. . . . . . . . > options (filename 'unitsql/med/flatfiles/noheader');
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from flatfile_badFieldDelim;
Error: Read no rows from file unitsql/med/flatfiles/noheader.csv; last error was: Row has no column delimiter (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 1.7 Test bad line delimiter
0: jdbc:farrago:> --     (when it occurs in the file)
0: jdbc:farrago:> --     (incomplete column is detected, because the file doesn't end 
0: jdbc:farrago:> --         with a delimiter)
0: jdbc:farrago:> --     (note data file is assumed to have at least one 'G')
0: jdbc:farrago:> --
0: jdbc:farrago:> create server flatfile_server_incompleteColumn
. . . . . . . . > foreign data wrapper local_file_wrapper
. . . . . . . . > options (
. . . . . . . . >     file_extension 'csv',
. . . . . . . . >     with_header 'no',
. . . . . . . . >     line_delimiter 'G', 
. . . . . . . . >     log_directory 'testlog');
0: jdbc:farrago:> 
0: jdbc:farrago:> create foreign table flatfile_incompleteColumn(
. . . . . . . . >     id int not null,
. . . . . . . . >     name varchar(50) not null,
. . . . . . . . >     extra_field char(1) not null)
. . . . . . . . > server flatfile_server_incompleteColumn
. . . . . . . . > options (filename 'unitsql/med/flatfiles/noheader');
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from flatfile_incompleteColumn;
Error: Read no rows from file unitsql/med/flatfiles/noheader.csv; last error was: Column has no delimiter (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 1.8 Test data file with too many columns
0: jdbc:farrago:> --
0: jdbc:farrago:> create foreign table flatfile_tooManyColumns(
. . . . . . . . >     id int not null,
. . . . . . . . >     name varchar(50) not null)
. . . . . . . . > server flatfile_server_noheader
. . . . . . . . > options (filename 'noheader');
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from flatfile_tooManyColumns;
Error: Read no rows from file unitsql/med/flatfiles/noheader.csv; last error was: Row has too many columns (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 1.9 Test data file with too few columns
0: jdbc:farrago:> --
0: jdbc:farrago:> create foreign table flatfile_tooFewColumns(
. . . . . . . . >     id int not null,
. . . . . . . . >     name varchar(50) not null,
. . . . . . . . >     extra_field char(1) not null,
. . . . . . . . >     extra_field2 char(1) not null)
. . . . . . . . > server flatfile_server_noheader
. . . . . . . . > options (filename 'example');
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from flatfile_tooFewColumns;
Error: Read no rows from file unitsql/med/flatfiles/example.csv; last error was: Row has too few columns (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 1.10 Test row which is too long (the text is larger than one page)
0: jdbc:farrago:> --      (parser recovers and returns another error, but expected error
0: jdbc:farrago:> --          can be viewed in error log)
0: jdbc:farrago:> --
0: jdbc:farrago:> create server flatfile_server_rowTooLong
. . . . . . . . > foreign data wrapper local_file_wrapper
. . . . . . . . > options (
. . . . . . . . >     directory 'unitsql/med/flatfiles',
. . . . . . . . >     file_extension 'txt',
. . . . . . . . >     with_header 'yes', 
. . . . . . . . >     log_directory 'testlog');
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from flatfile_server_rowTooLong.BCP."longrow";
+----------+-------+-------+
| longrow  | col2  | col3  |
+----------+-------+-------+
| before   | 2     | 3     |
| after    | 2     | 3     |
+----------+-------+-------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- long column quietly truncates
0: jdbc:farrago:> select * from flatfile_server_rowTooLong.BCP."longcol";
+----------+-------+-------+
| longcol  | col2  | col3  |
+----------+-------+-------+
| befo     | 2     | 3     |
| xxxx     | xxxx  | xxxx  |
| afte     | 2     | 3     |
+----------+-------+-------+
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 1.11 different escape and quote characters
0: jdbc:farrago:> --
0: jdbc:farrago:> create server flatfile_server_esc
. . . . . . . . > foreign data wrapper local_file_wrapper
. . . . . . . . > options (
. . . . . . . . >     directory 'unitsql/med/flatfiles',
. . . . . . . . >     file_extension 'esc',
. . . . . . . . >     control_file_extension 'ctl',
. . . . . . . . >     with_header 'yes', 
. . . . . . . . >     escape_char '\',
. . . . . . . . >     log_directory 'testlog');
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from flatfile_server_esc.BCP."example" order by 3;
+------+------------------------------------------+--------------+
|  ID  |                   NAME                   | EXTRA_FIELD  |
+------+------------------------------------------+--------------+
| 123  | Jonathan Ackerman                        | A            |
| 234  | Grady O'Neil                             | B            |
| 456  | Susan, Peter and Dave                    | C            |
| 789  | Amelia "meals" Maurice                   | E            |
| 123  | "S,"                                     | F            |
| 234  | Peter "peg leg", Jimmy & Samantha "Sam"  | G            |
+------+------------------------------------------+--------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> ---------------------------------------------------------------------------
0: jdbc:farrago:> -- Part 2. Test fixed position file parsing                              --
0: jdbc:farrago:> ---------------------------------------------------------------------------
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 2.1 invalid parameters
0: jdbc:farrago:> --
0: jdbc:farrago:> create server flatfile_server_fixed
. . . . . . . . > foreign data wrapper local_file_wrapper
. . . . . . . . > options (
. . . . . . . . >     directory 'unitsql/med/flatfiles',
. . . . . . . . >     file_extension 'dat',
. . . . . . . . >     with_header 'no',
. . . . . . . . >     field_delimiter '',
. . . . . . . . >     line_delimiter '\r\n', 
. . . . . . . . >     log_directory 'testlog');
Error: Fixed position parsing, enabled by setting an empty field delimiter, requires an empty quote character and an empty escape character (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 2.2 valid definition
0: jdbc:farrago:> --
0: jdbc:farrago:> create server flatfile_server_fixed
. . . . . . . . > foreign data wrapper local_file_wrapper
. . . . . . . . > options (
. . . . . . . . >     directory 'unitsql/med/flatfiles',
. . . . . . . . >     file_extension 'dat',
. . . . . . . . >     with_header 'no',
. . . . . . . . >     field_delimiter '',
. . . . . . . . >     escape_char '',
. . . . . . . . >     quote_char '',
. . . . . . . . >     line_delimiter '\r\n', 
. . . . . . . . >     log_directory 'testlog');
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from flatfile_server_fixed.BCP."fixed" order by 3;
+-------+-------------------------------------------+--------------+
|  ID   |                   NAME                    | EXTRA_FIELD  |
+-------+-------------------------------------------+--------------+
| 123   | Jonathan Ackerman                         | A            |
| 234   | Grady O'Neil                              | B            |
| 456   | Susan, Peter and Dave                     | C            |
| 789   | Amelia "meals" Maurice                    | E            |
| 123   | "S,"                                      | F            |
| 234   | Peter "peg leg", Jimmy & Samantha "Sam"   | G            |
+-------+-------------------------------------------+--------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> ---------------------------------------------------------------------------
0: jdbc:farrago:> -- Part 3. Sampling queries                                              --
0: jdbc:farrago:> ---------------------------------------------------------------------------
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 3.1 Test a describe query. 
0: jdbc:farrago:> --     This type of query returns the width of a table's fields. it is an 
0: jdbc:farrago:> --     internal query, and should not appear in user level documentation.
0: jdbc:farrago:> --
0: jdbc:farrago:> select * from flatfile_server.SAMPLE_DESC."example";
+--------------+
| FIELD_SIZES  |
+--------------+
| 3 22 11      |
+--------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 3.2 Test a sampling queries 
0: jdbc:farrago:> --     (which become important in the absence of bcp control files)
0: jdbc:farrago:> --     (there is no need to order their results, because the results appear 
0: jdbc:farrago:> --         as they do in the source file. in this case, the first line is 
0: jdbc:farrago:> --         the "header line". this feature is also undocumented.)
0: jdbc:farrago:> --
0: jdbc:farrago:> select * from flatfile_server.SAMPLE."example";
+-------+-------------------------+--------------+
| COL1  |          COL2           |     COL3     |
+-------+-------------------------+--------------+
| ID    | NAME                    | EXTRA_FIELD  |
| 123   | "S,"                    | F            |
| 123   | Jonathan Ackerman       | A            |
| 234   | Grady O'Neil            | B            |
| 456   | Susan, Peter and Dave   | C            |
| 789   | Amelia "meals" Maurice  | E            |
+-------+-------------------------+--------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 3.3 Test sampling of missing file
0: jdbc:farrago:> --
0: jdbc:farrago:> select * from flatfile_server.SAMPLE."missing";
Error: From line 1, column 15 to line 1, column 29: Table 'FLATFILE_SERVER.SAMPLE.missing' not found (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 3.4 Test sampling of an empty file (no header)
0: jdbc:farrago:> --
0: jdbc:farrago:> create server flatfile_server_empty
. . . . . . . . > foreign data wrapper local_file_wrapper
. . . . . . . . > options (
. . . . . . . . >     directory 'unitsql/med/flatfiles',
. . . . . . . . >     file_extension 'txt',
. . . . . . . . >     log_directory 'testlog');
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from flatfile_server_empty.SAMPLE."empty";
Error: Could not derive column sizes for data file unitsql/med/flatfiles/empty.txt (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- Missing header error is returned when control file is supplied
0: jdbc:farrago:> select * from flatfile_server_empty.BCP."empty";
Error: Could not read header from data file unitsql/med/flatfiles/empty.txt (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 3.5 Describe a fixed format file (illegal)
0: jdbc:farrago:> --
0: jdbc:farrago:> select * from flatfile_server_fixed.SAMPLE_DESC."fixed";
Error: Cannot derive column sizes for fixed position data file 'fixed' (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 3.6 Test sampling of a file perhaps with header, but with no data
0: jdbc:farrago:> --
0: jdbc:farrago:> select * from flatfile_server_empty.BCP."emptydata";
Error: Cannot derive column types for file unitsql/med/flatfiles/emptydata.txt (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 3.7 Test sampling of a file with nulls in header
0: jdbc:farrago:> --
0: jdbc:farrago:> select * from flatfile_server_empty.BCP."nullheader";
Error: Cannot derive column types for file unitsql/med/flatfiles/nullheader.txt (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> --
0: jdbc:farrago:> -- 3.8 Test sampling of a file with nulls in data
0: jdbc:farrago:> --
0: jdbc:farrago:> select * from flatfile_server_empty.BCP."nulldata";
+---------+-----+--------+-----+
| header  | no  | nulls  | ok  |
+---------+-----+--------+-----+
| but     |     | nulls  |     |
|         | in  | data   |     |
+---------+-----+--------+-----+
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> ---------------------------------------------------------------------------
0: jdbc:farrago:> -- Part 4. Reading metadata from bcp files                               --
0: jdbc:farrago:> ---------------------------------------------------------------------------
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test import foreign schema using wrong schema name
0: jdbc:farrago:> import foreign schema testdata
. . . . . . . . > from server flatfile_server
. . . . . . . . > into flatfile_schema;
Error: Unknown foreign schema "TESTDATA" (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test: import foreign schema
0: jdbc:farrago:> -- the directory contains an empty data file with no control file
0: jdbc:farrago:> -- fails all imports
0: jdbc:farrago:> create server flatfile_server_fail
. . . . . . . . > foreign data wrapper local_file_wrapper
. . . . . . . . > options (
. . . . . . . . >     directory 'unitsql/med/flatfiles',
. . . . . . . . >     file_extension 'fail',
. . . . . . . . >     control_file_extension 'failbcp',
. . . . . . . . >     log_directory 'testlog');
0: jdbc:farrago:> 
0: jdbc:farrago:> import foreign schema bcp
. . . . . . . . > from server flatfile_server_fail
. . . . . . . . > into flatfile_schema;
Error: Could not derive column sizes for data file unitsql/med/flatfiles/empty.fail (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test: should fail; entire import failed
0: jdbc:farrago:> select * from flatfile_schema."example" order by 3;
Error: From line 1, column 15 to line 1, column 29: Table 'FLATFILE_SCHEMA.example' not found (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test a table using implicit column definitions
0: jdbc:farrago:> create foreign table flatfile_implicit_table
. . . . . . . . > server flatfile_server
. . . . . . . . > options (filename 'example');
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from flatfile_implicit_table order by 3;
+----------+-------------------------------------------------------------------------------------------------------+---------------------------+
|    ID    |                                                 NAME                                                  |        EXTRA_FIELD        |
+----------+-------------------------------------------------------------------------------------------------------+---------------------------+
| 123      | Jonathan Ackerman                                                                                     | A                         |
| 234      | Grady O'Neil                                                                                          | B                         |
| 456      | Susan, Peter and Dave                                                                                 | C                         |
| 789      | Amelia "meals" Maurice                                                                                | E                         |
| 123      | "S,"                                                                                                  | F                         |
| 234      | Peter "peg leg", Jimmy & Samantha "Sam"                                                               | G                         |
+----------+-------------------------------------------------------------------------------------------------------+---------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test import schemas with/without bcp files
0: jdbc:farrago:> create schema flatfiledir_schema;
0: jdbc:farrago:> 
0: jdbc:farrago:> set schema 'flatfiledir_schema';
0: jdbc:farrago:> 
0: jdbc:farrago:> create server flatfiledir_server
. . . . . . . . > foreign data wrapper local_file_wrapper
. . . . . . . . > options (
. . . . . . . . >     directory 'unitsql/med/flatfiles',
. . . . . . . . >     file_extension 'csv',
. . . . . . . . >     with_header 'yes', 
. . . . . . . . >     log_directory 'testlog');
0: jdbc:farrago:> 
0: jdbc:farrago:> import foreign schema bcp
. . . . . . . . > from server flatfiledir_server
. . . . . . . . > into flatfiledir_schema;
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from flatfiledir_schema."example2" order by 3;
+------+------------------------------------------+--------------+
|  ID  |                   NAME                   | EXTRA_FIELD  |
+------+------------------------------------------+--------------+
| 123  | Jonathan Ackerman                        | A            |
| 234  | Grady O'Neil                             | B            |
| 456  | Susan, Peter and Dave                    | C            |
| 789  | Amelia "meals" Maurice                   | E            |
| 123  | "S,"                                     | F            |
| 234  | Peter "peg leg", Jimmy & Samantha "Sam"  | G            |
+------+------------------------------------------+--------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> drop schema flatfiledir_schema cascade;
0: jdbc:farrago:> create schema flatfiledir_schema;
0: jdbc:farrago:> set schema 'flatfiledir_schema';
0: jdbc:farrago:> 
0: jdbc:farrago:> import foreign schema bcp EXCEPT TABLE_NAME LIKE 'E%'
. . . . . . . . > from server flatfiledir_server
. . . . . . . . > into flatfiledir_schema;
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from flatfiledir_schema."example2" order by 3;
+------+------------------------------------------+--------------+
|  ID  |                   NAME                   | EXTRA_FIELD  |
+------+------------------------------------------+--------------+
| 123  | Jonathan Ackerman                        | A            |
| 234  | Grady O'Neil                             | B            |
| 456  | Susan, Peter and Dave                    | C            |
| 789  | Amelia "meals" Maurice                   | E            |
| 123  | "S,"                                     | F            |
| 234  | Peter "peg leg", Jimmy & Samantha "Sam"  | G            |
+------+------------------------------------------+--------------+
0: jdbc:farrago:> drop table flatfiledir_schema."example2";
0: jdbc:farrago:> drop table flatfiledir_schema."example";
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test files with null values
0: jdbc:farrago:> select * from flatfiledir_schema."withnulls" order by 3;
+------+------------------------------------------+--------------+
|  ID  |                   NAME                   | EXTRA_FIELD  |
+------+------------------------------------------+--------------+
|      |                                          |              |
| 123  |                                          |              |
|      | Susan, Peter and Dave                    |              |
| 123  | "S,"                                     | F            |
|      |                                          | G            |
| 234  | Peter "peg leg", Jimmy & Samantha "Sam"  | G            |
+------+------------------------------------------+--------------+
0: jdbc:farrago:> drop table flatfiledir_schema."withnulls";
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test badly qualified import foreign schema
0: jdbc:farrago:> import foreign schema bcp LIMIT TO ("no_table")
. . . . . . . . > from server flatfiledir_server
. . . . . . . . > into flatfiledir_schema;
Error: One or more tables not found while importing foreign schema "BCP":  [no_table] (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test qualified import foreign schema
0: jdbc:farrago:> import foreign schema bcp LIMIT TO ("example")
. . . . . . . . > from server flatfiledir_server
. . . . . . . . > into flatfiledir_schema;
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from flatfiledir_schema."example" order by 3;
+----------+-------------------------------------------------------------------------------------------------------+---------------------------+
|    ID    |                                                 NAME                                                  |        EXTRA_FIELD        |
+----------+-------------------------------------------------------------------------------------------------------+---------------------------+
| 123      | Jonathan Ackerman                                                                                     | A                         |
| 234      | Grady O'Neil                                                                                          | B                         |
| 456      | Susan, Peter and Dave                                                                                 | C                         |
| 789      | Amelia "meals" Maurice                                                                                | E                         |
| 123      | "S,"                                                                                                  | F                         |
| 234      | Peter "peg leg", Jimmy & Samantha "Sam"                                                               | G                         |
+----------+-------------------------------------------------------------------------------------------------------+---------------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test: not imported. fail
0: jdbc:farrago:> select * from flatfiledir_schema."example2" order by 3;
Error: From line 1, column 15 to line 1, column 32: Table 'FLATFILEDIR_SCHEMA.example2' not found (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> drop table flatfiledir_schema."example";
0: jdbc:farrago:> 
0: jdbc:farrago:> import foreign schema bcp LIMIT TO TABLE_NAME LIKE 'e%'
. . . . . . . . > from server flatfiledir_server
. . . . . . . . > into flatfiledir_schema;
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from flatfiledir_schema."example" order by 3;
+----------+-------------------------------------------------------------------------------------------------------+---------------------------+
|    ID    |                                                 NAME                                                  |        EXTRA_FIELD        |
+----------+-------------------------------------------------------------------------------------------------------+---------------------------+
| 123      | Jonathan Ackerman                                                                                     | A                         |
| 234      | Grady O'Neil                                                                                          | B                         |
| 456      | Susan, Peter and Dave                                                                                 | C                         |
| 789      | Amelia "meals" Maurice                                                                                | E                         |
| 123      | "S,"                                                                                                  | F                         |
| 234      | Peter "peg leg", Jimmy & Samantha "Sam"                                                               | G                         |
+----------+-------------------------------------------------------------------------------------------------------+---------------------------+
0: jdbc:farrago:> drop table flatfiledir_schema."example";
0: jdbc:farrago:> 
0: jdbc:farrago:> -- test: uses generated bcp
0: jdbc:farrago:> select * from flatfiledir_server.bcp."example2" order by 3;
+------+------------------------------------------+--------------+
|  ID  |                   NAME                   | EXTRA_FIELD  |
+------+------------------------------------------+--------------+
| 123  | Jonathan Ackerman                        | A            |
| 234  | Grady O'Neil                             | B            |
| 456  | Susan, Peter and Dave                    | C            |
| 789  | Amelia "meals" Maurice                   | E            |
| 123  | "S,"                                     | F            |
| 234  | Peter "peg leg", Jimmy & Samantha "Sam"  | G            |
+------+------------------------------------------+--------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> !quit
