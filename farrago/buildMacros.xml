<?xml version="1.0" encoding="UTF-8"?>
<!-- 
// $Id$
// Farrago is an extensible data management system.
// Copyright (C) 2005-2005 The Eigenbase Project
// Copyright (C) 2005-2005 Disruptive Tech
// Copyright (C) 2005-2005 LucidEra, Inc.
// Portions Copyright (C) 2003-2005 John V. Sichi
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later Eigenbase-approved version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//  
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307  USA
-->

<!-- Farrago build macro definitions -->

<!-- NOTE:  names defined in this file are visible to
     dependent projects, so they should always be qualified with a
     "farrago." prefix -->

<!-- These XML ENTITY "macros" help avoid redundancy in property -->
<!-- settings. They can be used with <jvmarg> or <arg> as the line -->
<!-- attribute. -->
<!DOCTYPE project [

<!ENTITY FarragoProps
"
-Dnet.sf.farrago.home=${farrago.dir}
-Dnet.sf.farrago.catalog=${project.catalog.dir}
-Djava.util.logging.config.file=${project.trace.propfile}
">

]>

<project name="farragoBuildMacros" default="unspecified">

  <!-- Project locations and properties -->

  <!-- determine Farrago home based on location of this buildfile -->
  <dirname property="farrago.dir" file="${ant.file.farragoBuildMacros}"/>

  <!-- Alias for farrago.dir to match runtime properties convention -->
  <property name="FARRAGO_HOME" location="${farrago.dir}"/>

  <!-- assume common parent of farrago and fennel  -->
  <property name="open.dir" location="${farrago.dir}/.."/>

  <!-- Override these locations in customBuild.properties -->
  <property name="thirdparty.dir" value="${open.dir}/thirdparty"/>

  <!-- import environment variables as properties -->
  <property environment="env"/>

  <!-- runtime assertion control -->
  <property name="assertions.jvmarg" value="-ea -esa"/>


  <!-- forked ant verbosity control -->
  <property name="farrago.forkVerbosity" value="-e"/>

  <!-- Java installation root -->
  <property name="javahome.dir" location="${env.JAVA_HOME}"/>

  <!-- Java source version -->
  <property name="farrago.javasrc.version" value="1.4"/>
  <condition property="farrago.javasrc.14">
    <equals arg1="${farrago.javasrc.version}" arg2="1.4"/>
  </condition>

  <!-- JRE location for test execution -->
  <property name="farrago.jre.dir" location="${javahome.dir}"/>

  <!-- if JRE location doesn't match javahome, assume we should retroweave -->
  <condition property="farrago.need.retroweave">
    <not>
      <equals arg1="${farrago.jre.dir}" arg2="${javahome.dir}"/>
    </not>
  </condition>

  <!-- import thirdparty library settings -->
  <property file="${thirdparty.dir}/build.properties"/>

  <!-- verify that required dependencies are defined -->
  <fail unless="javacc.dir"/>
  <fail unless="junit.dir"/>
  <fail unless="macker.dir"/>
  <fail unless="jalopy.dir"/>
  <fail unless="janino.dir"/>
  <fail unless="isql.dir"/>
  <fail unless="jswat.dir"/>
  <fail unless="sqlline.dir"/>
  <fail unless="sqlline.lib.dir"/>
  <fail unless="mdrlibs.dir"/>
  <fail unless="rmijdbc.dir"/>
  <fail unless="retroweaver.dir"/>


  <!-- Directories -->

  <!-- project directory for Fennel -->
  <property name="fennel.dir" location="${open.dir}/fennel"/>

  <!-- directory for non-generated Java source code -->
  <property name="farrago.src.dir" location="${farrago.dir}/src"/>

  <!-- directory for Farrago compiled class files (other than plugins) -->
  <property name="farrago.classes.dir" location="${farrago.dir}/classes"/>

  <!-- directory for Farrago compiled plugin .jars -->
  <property name="farrago.plugin.dir" location="${farrago.dir}/plugin"/>

  <!-- directory in which catalog data is stored -->
  <property name="farrago.catalog.dir" location="${farrago.dir}/catalog"/>

  <!-- overridable alias for farrago.catalog.dir -->
  <property name="project.catalog.dir" location="${farrago.catalog.dir}"/>

  <!-- overridable alias for FarragoTrace.properties -->
  <property name="project.trace.propfile" 
    location="${FarragoTrace.properties}"/>

  <!-- Alias for project.catalog.dir to match runtime properties convention -->
  <property name="FARRAGO_CATALOG_DIR" location="${project.catalog.dir}"/>

  <!-- directory in which catalog sources are generated -->
  <property name="farrago.catalog.src.dir" 
    location="${farrago.catalog.dir}/java"/>

  <!-- directory in which SQL parser source code is stored -->
  <property name="farrago.parser.sql.dir"
    location="${farrago.src.dir}/org/eigenbase/sql/parser"/>

  <!-- directory in which DDL parser source code is stored -->
  <property name="farrago.parser.ddl.dir"
    location="${farrago.src.dir}/net/sf/farrago/parser"/>

  <!-- directory in which Eigenbase resources are stored -->
  <property name="eigenbase.resource.dir"
    location="${farrago.src.dir}/org/eigenbase/resource"/>

  <!-- directory in which Farrago resources are stored -->
  <property name="farrago.resource.dir"
    location="${farrago.src.dir}/net/sf/farrago/resource"/>

  <!-- directory in which catalog data is backed up -->
  <property name="farrago.catalog.backup.dir" 
    location="${farrago.catalog.dir}/backup"/>

  <!-- directory in which catalog-related XMI files are stored -->
  <property name="farrago.xmi.dir" location="${farrago.catalog.dir}/xmi"/>

  <!-- directory in which trace files are configured and generated -->
  <property name="farrago.trace.dir" location="${farrago.dir}/trace"/>



  <!-- Files -->

  <!-- file controlling repository storage -->
  <property name="farrago.ReposStorage.propfile" 
    location="${farrago.catalog.dir}/ReposStorage.properties"/>

  <!-- NOTE:  it would be nice if we could combine parser filesets below, -->
  <!-- and use filelist instead; however, filesets/filelists have to share -->
  <!-- a common root, and the uptodate task doesn't like filelists -->

  <!-- a fileset of the common SQL parser -->
  <fileset id="farrago.parser.common.sql" dir="${farrago.parser.sql.dir}"
    includes="CommonParser.jj"/>

  <!-- a fileset of the Farrago-specific DDL parser -->
  <fileset id="farrago.parser.ddl" dir="${farrago.parser.ddl.dir}"
    includes="DdlParser.jj"/>

  <!-- a fileset of the Farrago common DDL parser -->
  <fileset id="farrago.parser.common.ddl" dir="${farrago.parser.ddl.dir}" 
    includes="CommonDdlParser.jj"/>

  <!-- XMI file containing CWM defintion  -->
  <property name="farrago.cwm.xmi" location="${farrago.xmi.dir}/cwm-1.1.xml"/>

  <!-- XMI file containing Farrago final metamodel  -->
  <property name="FarragoMetamodel.xmi"
    location="${farrago.xmi.dir}/FarragoMetamodel.xmi"/>

  <!-- Farrago metamodel XMI file before CWM references are resolved -->
  <property name="FarragoMetamodelUnresolved.xmi"
    location="${farrago.xmi.dir}/FarragoMetamodelUnresolved.xmi"/>

  <!-- XMI file containing Farrago metamodel -->
  <property name="FarragoExtMetamodel.xmi"
    location="${farrago.xmi.dir}/FarragoExtMetamodel.xmi"/>

  <!-- XMI file containing renumbered Farrago metamodel -->
  <property name="FarragoExtMetamodelTransformed.xmi"
    location="${farrago.xmi.dir}/FarragoExtMetamodelTransformed.xmi"/>

  <!-- XMI file containing UML representation of Farrago metamodel -->
  <property name="FarragoExtMetamodelUML.xmi"
    location="${farrago.xmi.dir}/FarragoExtMetamodelUML.xmi"/>

  <!-- Same as FarragoExtMetamodelUML, but with diagrams deleted -->
  <property name="FarragoExtMetamodelUMLSansDiagrams.xmi"
    location="${farrago.xmi.dir}/FarragoExtMetamodelUMLSansDiagrams.xmi"/>

  <!-- Zipfile containing Poseidon UML XMI representation of -->
  <!-- Farrago metamodel -->
  <property name="FarragoExtMetamodelUML.zuml"
    location="${farrago.xmi.dir}/FarragoExtMetamodelUML.zuml"/>

  <!-- File defining Farrago tracing -->
  <property name="FarragoTrace.properties"
    location="${farrago.trace.dir}/FarragoTrace.properties"/>

  <!-- File for Farrago trace log -->
  <property name="FarragoTrace.log"
    location="${farrago.trace.dir}/FarragoTrace.log"/>

  <!-- Classpaths -->

  <!-- Set a default for this classpath in case it's not set in a
       properties file.  The properties file will take precedence. -->
  <property name="farrago.custom.classpath" value=""/>

  <!-- xerces path -->
  <path id="xerces.classpath">
    <fileset dir=".">
      <include name="${ant.home}/lib/xml-apis.jar" if="farrago.javasrc.14" />
      <include name="${ant.home}/lib/xercesImpl.jar" if="farrago.javasrc.14" />
    </fileset>
    <fileset dir=".">
      <include name="${java.home}/lib/endorsed/xercesImpl.jar" unless="farrago.javasrc.14" />
    </fileset>
  </path>

  <!-- third-party libraries -->
  <path id="farrago.3p.classpath">
    <pathelement location="${mdrlibs.dir}/mdrant.jar"/>
    <pathelement location="${mdrlibs.dir}/nbmdr.jar"/>
    <pathelement location="${mdrlibs.dir}/mdrapi.jar"/>
    <pathelement location="${mdrlibs.dir}/jmiutils.jar"/>
    <pathelement location="${mdrlibs.dir}/mof.jar"/>
    <pathelement location="${mdrlibs.dir}/jmi.jar"/>
    <pathelement location="${mdrlibs.dir}/openide-util.jar"/>
    <pathelement location="${resgen.dir}/lib/eigenbase-resgen.jar"/>
    <pathelement location="${resgen.dir}/lib/eigenbase-xom.jar"/>
    <pathelement location="${mdrlibs.dir}/mdrjdbc.jar"/>
    <pathelement location="${junit.dir}/junit.jar"/>
    <path refid="xerces.classpath"/>
    <pathelement location="${javahome.dir}/lib/tools.jar"/>
    <pathelement location="${rmijdbc.dir}/dist/lib/RmiJdbc.jar"/>
    <pathelement location="${csvjdbc.dir}/csvjdbc.jar"/>
    <pathelement location="${janino.dir}/lib/janino.jar"/>
    <pathelement location="${openjava.dir}/openjava.jar"/>
    <pathelement location="${hsqldb.dir}/lib/hsqldb.jar"/>
    <pathelement location="${jgrapht.dir}/jgrapht-0.5.3-local.jar"/>
    <pathelement path="${farrago.custom.classpath}"/>
  </path>
  <property name="farrago.3p.classpath" refid="farrago.3p.classpath"/>

  <!-- classpath for execution -->
  <path id="farrago.run.classpath">
    <pathelement path="${farrago.3p.classpath}"/>
    <fileset dir="${retroweaver.dir}">
      <include name="release/retroweaver-rt.jar" if="farrago.need.retroweave"/>
    </fileset>
    <pathelement location="${farrago.classes.dir}"/>
    <pathelement location="${farrago.catalog.src.dir}"/>
  </path>
  <property name="farrago.run.classpath" refid="farrago.run.classpath"/>

  <!-- classpath for retroweaving -->
  <path id="farrago.retro.classpath">
    <pathelement location="${java14rt.jar}"/>
    <pathelement location="${retroweaver.dir}/release/retroweaver-rt.jar"/>
    <pathelement path="${farrago.run.classpath}"/>
  </path>
  <property name="farrago.retro.classpath" refid="farrago.retro.classpath"/>

  <!-- classpath for running from iSQL -->
  <path id="isql.classpath">
    <pathelement location="${isql.dir}/isql-core.jar"/>
  </path>
  <property name="isql.classpath" refid="isql.classpath"/>

  <!-- classpath for reentrantly invoking ant -->
  <path id="ant.classpath">
    <pathelement location="${ant.home}/lib/ant.jar"/>
    <pathelement location="${ant.home}/lib/ant-launcher.jar"/>
    <pathelement location="${ant.home}/lib/junit.jar"/>
    <path refid="xerces.classpath"/>
    <pathelement location="${ant.home}/lib/ant-junit.jar"/>
  </path>
  <property name="ant.classpath" refid="ant.classpath"/>

  <!-- classpath for running from sqlline -->
  <path id="farrago.sqlline.classpath">
    <pathelement location="${sqlline.lib.dir}/sqlline.jar"/>
    <pathelement location="${sqlline.lib.dir}/jline.jar"/>
    <pathelement path="${farrago.run.classpath}"/>
  </path>
  <property name="farrago.sqlline.classpath" refid="farrago.sqlline.classpath"/>


  <!-- Macros -->

  <!-- Macro for forking ant -->
  <macrodef name="farrago.antFork">
    <attribute name="target" default="unspecifiedTarget"/>
    <attribute name="classpathref" default="ant.classpath"/>
    <attribute name="jvm" default="${farrago.jre.dir}/bin/java"/>
    <element name="jvmargs" optional="yes"/>
    <sequential>
      <java classname="org.apache.tools.ant.Main" fork="true" failonerror="true"
        classpathref="@{classpathref}" jvm="@{jvm}">
        <jvmargs/>
        <arg value="${farrago.forkVerbosity}"/>
        <arg value="@{target}"/>
      </java>
    </sequential>
  </macrodef>

  <!-- Macro for forking ant to run an MDR task -->
  <!-- NOTE:  Logger setting squelches unwanted INFORMATIONAL messages -->
  <macrodef name="farrago.mdrFork">
    <attribute name="target" default="unspecifiedTarget"/>
    <sequential>
      <loadproperties 
        srcFile="${project.catalog.dir}/ReposStorage.properties"/>
      <farrago.antFork target="@{target}" jvm="java">
        <jvmargs>
          <sysproperty key="org.netbeans.mdr.Logger" value="256"/>
          <syspropertyset>
            <propertyref prefix="org.netbeans.mdr"/>
            <propertyref prefix="MDRStorageProperty"/>
          </syspropertyset>
        </jvmargs>
      </farrago.antFork>
    </sequential>
  </macrodef>

  <!-- Customization for javac task -->
  <presetdef name="farrago.javaCompile">
    <javac debug="on" deprecation="on" source="${farrago.javasrc.version}"/>
  </presetdef>

  <!-- Customization for java task -->
  <presetdef name="farrago.javaExec">
    <java fork="yes" failonerror="true">
      <jvmarg line="${assertions.jvmarg}"/>
      <jvmarg line="&FarragoProps;"/>
    </java>
  </presetdef>

  <!-- Macro for running JSwat -->
  <macrodef name="farrago.jswatDebug">
    <attribute name="classpath" default="unspecified"/>
    <attribute name="sourcepath" default="unspecified"/>
    <attribute name="classname" default="unspecified"/>
    <element name="jvmargs" optional="yes"/>
    <element name="programargs" optional="yes"/>
    <sequential>
      <java
        jar="${jswat.dir}/jswat.jar"
        fork="yes">
        <sysproperty key="java.ext.dirs" value="${java.home}/../lib"/>
        <arg value="classpath"/>
        <arg value="'@{classpath}'"/>
        <arg value=";"/>
        <arg value="sourcepath"/>
        <arg value="'@{sourcepath}'"/>
        <arg value=";"/>
        <arg value="options"/>
        <arg value="stopOnMain"/>
        <arg value="true"/>
        <arg value=";"/>
        <arg value="run"/>
        <arg line="${assertions.jvmarg}"/>
        <jvmargs/>
        <arg value="@{classname}"/>
        <programargs/>
      </java>
    </sequential>
  </macrodef>
 
  <!-- Macro for converting metamodel from UML to MOF -->
  <macrodef name="farrago.uml2mof">
    <attribute name="umlmodelname" default="unspecified" />
    <attribute name="outputfilename" default="unspecified" />
    <attribute name="umlsansdiagrams" default="unspecified" />
    <sequential>
      <xslt style="${farrago.xmi.dir}/deleteUmlDiagrams.xsl"
        in="@{umlmodelname}"
        out="@{umlsansdiagrams}">
      </xslt>
      <java classname="org.netbeans.lib.jmi.uml2mof.Main" 
        fork="true" failonerror="true">
        <sysproperty key="org.netbeans.mdr.Logger" value="256"/>
        <classpath>
          <pathelement location="${mdrlibs.dir}/openide-util.jar"/>
          <pathelement location="${mdrlibs.dir}/uml-1.4.jar"/>
          <pathelement location="${mdrlibs.dir}/uml2mof.jar"/>
        </classpath>
        <arg value="@{umlsansdiagrams}"/>
        <arg value="@{outputfilename}"/>
      </java>
      <delete>
        <fileset dir="." includes="mdr.bt*"/>
      </delete>
    </sequential>
  </macrodef>

  <!-- Macro for extracting a UML model from Poseidon .zuml format,
  and converting it to MOF -->
  <macrodef name="farrago.extractPoseidonModel">
    <attribute name="zumlFile" default="unspecified" />
    <attribute name="umlBasename" default="unspecified" />
    <attribute name="mofBasename" default="unspecified" />
    <attribute name="xmiDir" default="unspecified" />
    <sequential>
      <unzip src="@{zumlFile}" dest="@{xmiDir}">
        <patternset>
          <include name="@{umlBasename}.xmi"/>
        </patternset>
      </unzip>
      <farrago.uml2mof umlmodelname="@{xmiDir}/@{umlBasename}.xmi"
        outputfilename="@{xmiDir}/@{mofBasename}.xmi"
        umlsansdiagrams="@{xmiDir}/@{umlBasename}SansDiagrams.xmi"/>
    </sequential>
  </macrodef>

  <!-- Macro for performing cleansing transformations on an extension model -->
  <macrodef name="farrago.transformExtensionModel">
    <attribute name="mofBasename" default="unspecified" />
    <attribute name="xmiDir" default="unspecified" />
    <attribute name="modelPrefix" default="unspecified" />
    <sequential>
      <xslt style="${farrago.xmi.dir}/transformFEME.xsl"
        in="@{xmiDir}/@{mofBasename}.xmi"
        out="@{xmiDir}/@{mofBasename}Transformed.xmi">
        <param name="modelPrefix"
          expression="@{modelPrefix}"/>
      </xslt>
      <replace file="@{xmiDir}/@{mofBasename}Transformed.xmi"
        token="org.omg.xmi.namespace.Model" value="omg.org/mof.Model/1.3" />
    </sequential>
  </macrodef>

  <!-- Macro for combining CWM, FEM, and a single ExtModel -->
  <macrodef name="farrago.synthesizeMetamodel">
    <attribute name="extMofBasename" default="unspecified" />
    <attribute name="xmiDir" default="unspecified" />
    <attribute name="extPresent" default="true" />
    <sequential>
      <xslt style="${farrago.xmi.dir}/transformCWM.xsl"
        in="${farrago.cwm.xmi}"
        out="@{xmiDir}/FarragoMetamodelUnresolved.xmi">
        <param name="femXmiFilename"
          expression="${FarragoExtMetamodelTransformed.xmi}"/>
        <param name="extXmiFilename"
          expression="@{xmiDir}/@{extMofBasename}Transformed.xmi"/>
        <param name="extPresent" expression="@{extPresent}"/>
      </xslt>
      <xslt style="${farrago.xmi.dir}/resolveCwmRefs.xsl"
        in="@{xmiDir}/FarragoMetamodelUnresolved.xmi"
        out="@{xmiDir}/FarragoMetamodel.xmi"/>
    </sequential>
  </macrodef>

  <!-- Macro for running iSQL -->
  <macrodef name="farrago.iSQL">
    <attribute name="classpath" default="unspecified"/>
    <attribute name="propertieshome" default="unspecified"/>
    <sequential>
      <farrago.javaExec
        classname="org.isqlviewer.core.Launcher"
        classpathref="@{classpath}">
        <sysproperty key="isql.home" value="@{propertieshome}" />
      </farrago.javaExec>
    </sequential>
  </macrodef>

  <macrodef name="farrago.generateParser">
    <attribute name="combined" default="unspecified"/>
    <element name="components"/>
    <sequential>
      <delete file="@{combined}" quiet="true"/>
      <concat destfile="@{combined}" append="false">
        <components/>
      </concat>
      <chmod file="@{combined}" perm="a-w"/>
      <javacc 
        target="@{combined}" javacchome="${javacc.dir}"/>
    </sequential>
  </macrodef>

  <!-- Macro for running JUnit and sqlline tests -->
  <macrodef name="farrago.runTests">
    <element name="testfileset" optional="no"/>
    <element name="junitargs" optional="yes"/>
    <sequential>
      <fail unless="testlog.dir"/>
      <mkdir dir="${testlog.dir}"/>
      <junit printsummary="yes" fork="no" failureproperty="junit.failure"
        tempdir="${testlog.dir}" reloading="false">
        <sysproperty key="java.ext.dirs" value="${sqlline.dir}"/>
        <junitargs/>
        <formatter type="plain"/>
        <formatter type="xml"/> <!-- for integration builds -->
        <batchtest todir="${testlog.dir}" unless="junit.class">
          <testfileset/>
        </batchtest>
        <test todir="${testlog.dir}" if="junit.class"
          name="${junit.class}" />
      </junit>
      <fail message="Test failure(s)" if="junit.failure"/>
    </sequential>
  </macrodef>

  <!-- Macro for running a single forked sqlline test -->
  <macrodef name="farrago.runSqlTest">
    <attribute name="file" default="unspecified"/>
    <sequential>
      <junit printsummary="yes" fork="yes" haltonerror="yes" haltonfailure="yes"
        tempdir="${testlog.dir}" forkmode="perBatch">
        <classpath refid="farrago.sqlline.classpath"/>
        <jvmarg line="${assertions.jvmarg}"/>
        <jvmarg line="&FarragoProps;"/>
        <sysproperty key="java.ext.dirs" value="${sqlline.dir}"/>
        <sysproperty key="net.sf.farrago.fileset.unitsql"
          file="@{file}"/>
        <formatter type="plain"/>
        <formatter type="xml"/> <!-- for integration builds -->
        <test todir="${testlog.dir}" 
          name="net.sf.farrago.test.FarragoSqlTest" />
      </junit>
    </sequential>
  </macrodef>

  <target name="farrago.mdr_taskdef">
    <taskdef name="mdr" classname="org.netbeans.mdrant.MdrTask"
      classpathref="farrago.3p.classpath"/>
  </target>

  <taskdef name="retroweaver"
    classname="com.rc.retroweaver.ant.RetroWeaverTask">
    <classpath>
      <fileset dir="${retroweaver.dir}/lib" includes="**/*"/>
      <pathelement location="${retroweaver.dir}/release/retroweaver.jar"/>
    </classpath>
  </taskdef>

</project>
