0: jdbc:farrago:> -- $Id$
0: jdbc:farrago:> -- Full vertical system testing of non advanced select statements
0: jdbc:farrago:> 
0: jdbc:farrago:> -- NOTE: This script is run twice. Once with the "calcVirtualMachine" set to use fennel
0: jdbc:farrago:> -- and another time to use java. The caller of this script is setting the flag so no need
0: jdbc:farrago:> -- to do it directly unless you need to do acrobatics.
0: jdbc:farrago:> 
0: jdbc:farrago:> select empno from sales.emps order by empno asc;
+--------+
| EMPNO  |
+--------+
| 100    |
| 110    |
| 110    |
| 120    |
+--------+
0: jdbc:farrago:> select empno+1 from sales.emps order by 1;
+---------+
| EXPR$0  |
+---------+
| 101     |
| 111     |
| 111     |
| 121     |
+---------+
0: jdbc:farrago:> select empno-1 from sales.emps order by 1;
+---------+
| EXPR$0  |
+---------+
| 99      |
| 109     |
| 109     |
| 119     |
+---------+
0: jdbc:farrago:> select empno*2 from sales.emps order by 1;
+---------+
| EXPR$0  |
+---------+
| 200     |
| 220     |
| 220     |
| 240     |
+---------+
0: jdbc:farrago:> select empno/2 from sales.emps order by 1;
+---------+
| EXPR$0  |
+---------+
| 50      |
| 55      |
| 55      |
| 60      |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select empno from sales.emps where empno=110;
+--------+
| EMPNO  |
+--------+
| 110    |
| 110    |
+--------+
0: jdbc:farrago:> select empno from sales.emps where empno>=110 order by 1;
+--------+
| EMPNO  |
+--------+
| 110    |
| 110    |
| 120    |
+--------+
0: jdbc:farrago:> select empno from sales.emps where empno>110;
+--------+
| EMPNO  |
+--------+
| 120    |
+--------+
0: jdbc:farrago:> select empno from sales.emps where empno<=110 order by 1;
+--------+
| EMPNO  |
+--------+
| 100    |
| 110    |
| 110    |
+--------+
0: jdbc:farrago:> select empno from sales.emps where empno<110;
+--------+
| EMPNO  |
+--------+
| 100    |
+--------+
0: jdbc:farrago:> select empno from sales.emps where empno<>110 order by 1;
+--------+
| EMPNO  |
+--------+
| 100    |
| 120    |
+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select empno from sales.emps where empno=99999;
+--------+
| EMPNO  |
+--------+
+--------+
0: jdbc:farrago:> select empno from sales.emps where empno>=99999;
+--------+
| EMPNO  |
+--------+
+--------+
0: jdbc:farrago:> select empno from sales.emps where empno<1;
+--------+
| EMPNO  |
+--------+
+--------+
0: jdbc:farrago:> select empno from sales.emps where empno<=1;
+--------+
| EMPNO  |
+--------+
+--------+
0: jdbc:farrago:> select empno from sales.emps where empno>99999;
+--------+
| EMPNO  |
+--------+
+--------+
0: jdbc:farrago:> select empno from sales.emps where empno<>99999 order by 1;
+--------+
| EMPNO  |
+--------+
| 100    |
| 110    |
| 110    |
| 120    |
+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select empno+1 from sales.emps where empno=110;
+---------+
| EXPR$0  |
+---------+
| 111     |
| 111     |
+---------+
0: jdbc:farrago:> select empno+1 from sales.emps where empno>=110 order by 1;
+---------+
| EXPR$0  |
+---------+
| 111     |
| 111     |
| 121     |
+---------+
0: jdbc:farrago:> select empno+1 from sales.emps where empno>110;
+---------+
| EXPR$0  |
+---------+
| 121     |
+---------+
0: jdbc:farrago:> select empno+1 from sales.emps where empno<110;
+---------+
| EXPR$0  |
+---------+
| 101     |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select empno+1, empno/2 from sales.emps order by 1;
+---------+---------+
| EXPR$0  | EXPR$1  |
+---------+---------+
| 101     | 50      |
| 111     | 55      |
| 111     | 55      |
| 121     | 60      |
+---------+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select * from sales.emps where name = 'Wilma';
+--------+--------+---------+---------+-------+--------+------+-------------+----------+----------+
| EMPNO  |  NAME  | DEPTNO  | GENDER  | CITY  | EMPID  | AGE  | PUBLIC_KEY  | SLACKER  | MANAGER  |
+--------+--------+---------+---------+-------+--------+------+-------------+----------+----------+
| 120    | Wilma  | 20      | F       |       | 1      | 50   |             |          | true     |
+--------+--------+---------+---------+-------+--------+------+-------------+----------+----------+
0: jdbc:farrago:> select * from sales.emps where name = 'wilma';
+--------+-------+---------+---------+-------+--------+------+-------------+----------+----------+
| EMPNO  | NAME  | DEPTNO  | GENDER  | CITY  | EMPID  | AGE  | PUBLIC_KEY  | SLACKER  | MANAGER  |
+--------+-------+---------+---------+-------+--------+------+-------------+----------+----------+
+--------+-------+---------+---------+-------+--------+------+-------------+----------+----------+
0: jdbc:farrago:> select empno, empno from sales.emps order by 1;
+--------+--------+
| EMPNO  | EMPNO  |
+--------+--------+
| 100    | 100    |
| 110    | 110    |
| 110    | 110    |
| 120    | 120    |
+--------+--------+
0: jdbc:farrago:> --select empno,*,empno from sales.emps;
0: jdbc:farrago:> select 1 as apa, age as apa, 3 as APA, 4 as "APA" from sales.emps order by 2;
+------+------+------+------+
| APA  | APA  | APA  | APA  |
+------+------+------+------+
| 1    |      | 3    | 4    |
| 1    | 25   | 3    | 4    |
| 1    | 50   | 3    | 4    |
| 1    | 80   | 3    | 4    |
+------+------+------+------+
0: jdbc:farrago:> select 1+2 as empno, empno as empno, age as empno, 1+2 as empno from sales.emps order by 3;
+--------+--------+--------+--------+
| EMPNO  | EMPNO  | EMPNO  | EMPNO  |
+--------+--------+--------+--------+
| 3      | 110    |        | 3      |
| 3      | 100    | 25     | 3      |
| 3      | 120    | 50     | 3      |
| 3      | 110    | 80     | 3      |
+--------+--------+--------+--------+
0: jdbc:farrago:> 
0: jdbc:farrago:> select age from (select emps.* from sales.emps) order by 1;
+------+
| AGE  |
+------+
|      |
| 25   |
| 50   |
| 80   |
+------+
0: jdbc:farrago:> 
0: jdbc:farrago:> --Fails
0: jdbc:farrago:> SELECT 0.5e1.1 from sales.emps;
Error: org.eigenbase.sql.parser.SqlParseException: Encountered ".1" at line 1, column 13.
Was expecting one of:
    "AND" ...
    "AS" ...
    "BETWEEN" ...
    "FROM" ...
    "IN" ...
    "IS" ...
    "LIKE" ...
    "MEMBER" ...
    "MULTISET" ...
    "NOT" ...
    "OR" ...
    "SIMILAR" ...
    "SUBMULTISET" ...
    "," ...
    "=" ...
    ">" ...
    "<" ...
    "<=" ...
    ">=" ...
    "<>" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "||" ...
    <IDENTIFIER> ...
    <QUOTED_IDENTIFIER> ... (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> --OK 
0: jdbc:farrago:> --values 0.5e-3*1e3;
0: jdbc:farrago:> --values 0.5e-3*1.1e3;
0: jdbc:farrago:> 
0: jdbc:farrago:> values true>=true;
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values true>=false;
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values true>=unknown;
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
0: jdbc:farrago:> values false>=true;
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values false>=false;
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values false>=unknown;
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
0: jdbc:farrago:> values unknown>=true;
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
0: jdbc:farrago:> values unknown>=false;
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
0: jdbc:farrago:> values unknown>=unknown;
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
0: jdbc:farrago:> values true<=true;
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values true<=false;
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values true<=unknown;
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
0: jdbc:farrago:> values false<=true;
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values false<=false;
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values false<=unknown;
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
0: jdbc:farrago:> values unknown<=true;
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
0: jdbc:farrago:> values unknown<=false;
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
0: jdbc:farrago:> values unknown<=unknown;
+---------+
| EXPR$0  |
+---------+
|         |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- SQL2003 Part 2 Section 4.3.2 and
0: jdbc:farrago:> -- SQL2003 Part 2 Section 8.2 General Rule 4 state
0: jdbc:farrago:> -- that CLOBS (ex. BINARY/VARBINARY) may only be compared for
0: jdbc:farrago:> -- equality. Currently allow the other (>,>=, etc.) comparisons
0: jdbc:farrago:> -- as an extension.
0: jdbc:farrago:> -- tests that return true:
0: jdbc:farrago:> values   x'ff' =  x'ff';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values   x'ff' <= x'ff';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values   x'ff' >= x'ff';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values   x'00' =  x'00';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values x'00ff' =  x'00ff';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values   x'ff' >  x'00';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values x'00ff' >  x'0000';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values x'0000' >  x'00';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values   x'ff' >= x'00';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values x'00ff' >= x'0000';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values x'0000' >= x'00';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values   x'00' <  x'ff';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values   x'00' <  x'0000';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values x'0000' <  x'00ff';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values   x'00' <= x'ff';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values   x'00' <= x'0000';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values x'0000' <= x'00ff';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values   x'00' <> x'ff';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values   x'ff' <> x'00';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values x'0000' <> x'0001';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values x'0000' <> x'00';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values   x'00' <> x'0000';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- symmetric (inverted) tests return false:
0: jdbc:farrago:> values   x'ff' <>  x'ff';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values   x'00' <>  x'00';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values x'00ff' <>  x'00ff';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values   x'ff' <  x'00';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values x'00ff' <  x'0000';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values x'0000' <  x'00';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values   x'ff' <= x'00';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values x'00ff' <= x'0000';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values x'0000' <= x'00';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values   x'00' >  x'ff';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values   x'00' >  x'0000';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values x'0000' >  x'00ff';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values   x'00' >= x'ff';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values   x'00' >= x'0000';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values x'0000' >= x'00ff';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values   x'00' =  x'ff';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values   x'ff' =  x'00';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values x'0000' =  x'0001';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values x'0000' =  x'00';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values   x'00' =  x'0000';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> 
0: jdbc:farrago:> values 'a' is distinct from 'a';
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> values 'a' is distinct from 'aa';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values 'a' is distinct from 'b';
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values 1 is distinct from cast(null as integer);
+---------+
| EXPR$0  |
+---------+
| true    |
+---------+
0: jdbc:farrago:> values cast(null as integer) is distinct from cast(null as integer);
+---------+
| EXPR$0  |
+---------+
| false   |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- a few boundary cases for decimal precision 19
0: jdbc:farrago:> values cast (0.1234567890123456789 as decimal(10,0));
+---------+
| EXPR$0  |
+---------+
| 0       |
+---------+
0: jdbc:farrago:> values cast (0.8876543210987654321 as decimal(10,0));
+---------+
| EXPR$0  |
+---------+
| 1       |
+---------+
0: jdbc:farrago:> values cast (-0.8876543210987654321 as decimal(10,0));
+---------+
| EXPR$0  |
+---------+
| -1      |
+---------+
0: jdbc:farrago:> values cast (1e-5 as decimal(19,19));
+------------------------+
|         EXPR$0         |
+------------------------+
| 0.0000100000000000000  |
+------------------------+
0: jdbc:farrago:> values 1 + 0.1234567890123456789;
Error: java.lang.UnsupportedOperationException: class java.lang.String: Source type with scale 0 cannot be converted to target type with scale 19 because the smallest value of the source type is too large to be encoded by the target type (state=,code=0)
0: jdbc:farrago:> values floor(0.8876543210987654321);
+---------+
| EXPR$0  |
+---------+
| 0       |
+---------+
0: jdbc:farrago:> values floor(0.0000000000000000001);
+---------+
| EXPR$0  |
+---------+
| 0       |
+---------+
0: jdbc:farrago:> values floor(-0.0000000000000000001);
+---------+
| EXPR$0  |
+---------+
| -1      |
+---------+
0: jdbc:farrago:> values floor(-0.8876543210987654321);
+---------+
| EXPR$0  |
+---------+
| -1      |
+---------+
0: jdbc:farrago:> values ceil(0.8876543210987654321);
+---------+
| EXPR$0  |
+---------+
| 1       |
+---------+
0: jdbc:farrago:> values ceil(0.0000000000000000001);
+---------+
| EXPR$0  |
+---------+
| 1       |
+---------+
0: jdbc:farrago:> values ceil(-0.0000000000000000001);
+---------+
| EXPR$0  |
+---------+
| 0       |
+---------+
0: jdbc:farrago:> values ceil(-0.8876543210987654321);
+---------+
| EXPR$0  |
+---------+
| 0       |
+---------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- char to date conversions
0: jdbc:farrago:> -- these fail, as expected
0: jdbc:farrago:> values cast('1997-01-00' as date);
Error: could not calculate results for the following row:
[ 0 ]
Messages:
[0]:PC=0 Code=22007 (state=,code=0)
0: jdbc:farrago:> values cast('1997-02-29' as date);
Error: could not calculate results for the following row:
[ 0 ]
Messages:
[0]:PC=0 Code=22007 (state=,code=0)
0: jdbc:farrago:> values cast('1997-00-01' as date);
Error: could not calculate results for the following row:
[ 0 ]
Messages:
[0]:PC=0 Code=22007 (state=,code=0)
0: jdbc:farrago:> values cast('1997-13-01' as date);
Error: could not calculate results for the following row:
[ 0 ]
Messages:
[0]:PC=0 Code=22007 (state=,code=0)
0: jdbc:farrago:> -- this works
0: jdbc:farrago:> values cast('9999-01-01' as date);
+-------------+
|   EXPR$0    |
+-------------+
| 9999-01-01  |
+-------------+
0: jdbc:farrago:> -- FIXME: these work on Java calc, not Fennel calc (LER-2866)
0: jdbc:farrago:> -- values cast('997-01-01' as date);
0: jdbc:farrago:> -- values cast('97-01-01' as date);
0: jdbc:farrago:> -- FIXME: this fails on both calcs (LER-2866)
0: jdbc:farrago:> -- values cast('10000-01-01' as date);
0: jdbc:farrago:> 
0: jdbc:farrago:> -- NOTE: the rest of this file runs as luciddb
0: jdbc:farrago:> alter session implementation set jar sys_boot.sys_boot.luciddb_plugin;
0: jdbc:farrago:> 
0: jdbc:farrago:> -- decimal multiplication, luciddb semantics
0: jdbc:farrago:> 
0: jdbc:farrago:> -- fewer than 19 digits, keep fractional digits
0: jdbc:farrago:> values 1.000000 * 1.000000;
+-----------------+
|     EXPR$0      |
+-----------------+
| 1.000000000000  |
+-----------------+
0: jdbc:farrago:> -- greater than 19 digits, take off a few fractional digits
0: jdbc:farrago:> values 123456789.000000 * 1.000000;
+----------------------+
|        EXPR$0        |
+----------------------+
| 123456789.000000000  |
+----------------------+
0: jdbc:farrago:> -- many integer digits, limit fractional digits to 6 digits
0: jdbc:farrago:> values 123456789.000 
. . . . . . . . >   * cast(1.000000 as decimal(18,6))
. . . . . . . . >   * cast(1.000000 as decimal(18,6));
+-------------------+
|      EXPR$0       |
+-------------------+
| 123456789.000000  |
+-------------------+
0: jdbc:farrago:> -- check large value
0: jdbc:farrago:> values cast(123456789.000000 * 10000.000000 as decimal(18,3));
+--------------------+
|       EXPR$0       |
+--------------------+
| 1234567890000.000  |
+--------------------+
0: jdbc:farrago:> 
0: jdbc:farrago:> -- decimal division, luciddb semantics
0: jdbc:farrago:> 
0: jdbc:farrago:> -- luciddb preserves the desired scale, but caps it at 6 to preserve the 
0: jdbc:farrago:> -- integral part and avoid subsequent overflows
0: jdbc:farrago:> values (
. . . . . . . . >   cast(158229.4028 as decimal(19,4)) 
. . . . . . . . >   / cast(5523083.9328 as decimal(19,4)));
+-----------+
|  EXPR$0   |
+-----------+
| 0.028649  |
+-----------+
0: jdbc:farrago:> values (
. . . . . . . . >   cast (123456789012 as decimal(19,4))
. . . . . . . . >   / cast (1000000000 as decimal(19,0)));
+-------------+
|   EXPR$0    |
+-------------+
| 123.456789  |
+-------------+
0: jdbc:farrago:> values (cast((1.0/1000000.0) + 123456789012 as decimal(18,3)));
+-------------------+
|      EXPR$0       |
+-------------------+
| 123456789012.000  |
+-------------------+
0: jdbc:farrago:> values (
. . . . . . . . >   cast(158229.4028 as decimal(19,8)) 
. . . . . . . . >   / cast(5523083.9328 as decimal(19,8)));
+-----------+
|  EXPR$0   |
+-----------+
| 0.028649  |
+-----------+
0: jdbc:farrago:> values (
. . . . . . . . >   cast(1234567 as decimal(19,0)) 
. . . . . . . . >   / cast(0.000001 as decimal(19,8)));
+-----------------------+
|        EXPR$0         |
+-----------------------+
| 1234567000000.000000  |
+-----------------------+
0: jdbc:farrago:> -- we lose very small values
0: jdbc:farrago:> values 1.0/10000000.0;
+-----------+
|  EXPR$0   |
+-----------+
| 0.000000  |
+-----------+
0: jdbc:farrago:> -- detect overflow errors
0: jdbc:farrago:> values (
. . . . . . . . >   cast(12345678 as decimal(19,0)) 
. . . . . . . . >   / cast(0.000001 as decimal(19,8)));
Error: could not calculate results for the following row:
[ 0 ]
Messages:
[0]:PC=7 Code=22003 (state=,code=0)
0: jdbc:farrago:> 
0: jdbc:farrago:> -- end selectSimple.sql
0: jdbc:farrago:> 
0: jdbc:farrago:> !quit
