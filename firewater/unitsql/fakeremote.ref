> -- $Id$
> -- Tests for Firewater query optimization for plans distributed over
> -- remote servers (but faked so that we don't actually need
> -- any storage nodes running)
> 
> create or replace server fakeremote_server
> foreign data wrapper sys_firewater_fakeremote_wrapper
> options (user_name 'sa');
> 
> create partition qp1 on (fakeremote_server);
> 
> create partition qp2 on (fakeremote_server);
> 
> create schema m;
> 
> create table m.t1(i int, j int)
> options (partitioning 'HASH');
> 
> create table m.t2(i int, j int)
> options (partitioning 'NONE');
> 
> create label l1;
> 
> drop label l1;
> 
> !set outputformat csv
> 
> -- test basic table access
> explain plan for select * from m.t1;
'column0'
'FennelToIteratorConverter'
'  FennelMergeRel'
'    IteratorToFennelConverter'
'      ResultSetToFarragoIteratorConverter'
'        MedJdbcQueryRel(foreignSql=[SELECT *'
'FROM "QP1"."M"."T1"])'
'    IteratorToFennelConverter'
'      ResultSetToFarragoIteratorConverter'
'        MedJdbcQueryRel(foreignSql=[SELECT *'
'FROM "QP2"."M"."T1"])'
> 
> -- test projection pushdown through union
> explain plan for select i from m.t1;
'column0'
'FennelToIteratorConverter'
'  FennelMergeRel'
'    IteratorToFennelConverter'
'      ResultSetToFarragoIteratorConverter'
'        MedJdbcQueryRel(foreignSql=[SELECT "I"'
'FROM "QP1"."M"."T1"])'
'    IteratorToFennelConverter'
'      ResultSetToFarragoIteratorConverter'
'        MedJdbcQueryRel(foreignSql=[SELECT "I"'
'FROM "QP2"."M"."T1"])'
> 
> -- test filter pushdown through union
> explain plan for select i from m.t1 where j > 3;
'column0'
'FennelToIteratorConverter'
'  FennelMergeRel'
'    IteratorToFennelConverter'
'      ResultSetToFarragoIteratorConverter'
'        MedJdbcQueryRel(foreignSql=[SELECT "I"'
'FROM "QP1"."M"."T1"'
'WHERE "J" > 3])'
'    IteratorToFennelConverter'
'      ResultSetToFarragoIteratorConverter'
'        MedJdbcQueryRel(foreignSql=[SELECT "I"'
'FROM "QP2"."M"."T1"'
'WHERE "J" > 3])'
> 
> -- test GROUP BY pushdown through union
> explain plan for select i,sum(j),count(*) from m.t1 group by i;
'column0'
'IterCalcRel(expr#0..2=[{inputs}], expr#3=[CAST($t2):BIGINT NOT NULL], proj#0..1=[{exprs}], EXPR$2=[$t3])'
'  FennelToIteratorConverter'
'    LhxAggRel(groupCount=[1], EXPR$1=[SUM($1)], EXPR$2=[SUM($2)])'
'      FennelMergeRel'
'        IteratorToFennelConverter'
'          ResultSetToFarragoIteratorConverter'
'            MedJdbcQueryRel(foreignSql=[SELECT "I", SUM("J"), COUNT(*)'
'FROM (SELECT *'
'FROM "QP1"."M"."T1")'
'GROUP BY "I"])'
'        IteratorToFennelConverter'
'          ResultSetToFarragoIteratorConverter'
'            MedJdbcQueryRel(foreignSql=[SELECT "I", SUM("J"), COUNT(*)'
'FROM (SELECT *'
'FROM "QP2"."M"."T1")'
'GROUP BY "I"])'
> 
> -- test GROUP BY with AVG
> explain plan for select i,avg(j) from m.t1 group by i;
'column0'
'IterCalcRel(expr#0..2=[{inputs}], expr#3=[CAST($t1):DOUBLE], expr#4=[CAST($t2):BIGINT NOT NULL], expr#5=[CAST($t4):DOUBLE NOT NULL], expr#6=[/($t3, $t5)], expr#7=[1E6], expr#8=[*($t6, $t7)], expr#9=[CAST($t8):BIGINT], expr#10=[Reinterpret($t9)], expr#11=[Reinterpret($t10)], expr#12=[0], expr#13=[>($t11, $t12)], expr#14=[500000], expr#15=[+($t11, $t14)], expr#16=[-($t11, $t14)], expr#17=[CASE($t13, $t15, $t16)], expr#18=[1000000], expr#19=[/INT($t17, $t18)], expr#20=[CAST($t19):INTEGER], I=[$t0], EXPR$1=[$t20])'
'  FennelToIteratorConverter'
'    LhxAggRel(groupCount=[1], agg#0=[SUM($1)], agg#1=[SUM($2)])'
'      FennelMergeRel'
'        IteratorToFennelConverter'
'          ResultSetToFarragoIteratorConverter'
'            MedJdbcQueryRel(foreignSql=[SELECT "I", SUM("J"), COUNT("J")'
'FROM (SELECT *'
'FROM "QP1"."M"."T1")'
'GROUP BY "I"])'
'        IteratorToFennelConverter'
'          ResultSetToFarragoIteratorConverter'
'            MedJdbcQueryRel(foreignSql=[SELECT "I", SUM("J"), COUNT("J")'
'FROM (SELECT *'
'FROM "QP2"."M"."T1")'
'GROUP BY "I"])'
> 
> -- test GROUP BY with DISTINCT COUNT
> explain plan for select i,count(distinct j), sum(j) from m.t1 group by i;
'column0'
'FennelToIteratorConverter'
'  FennelReshapeRel(projection=[[0, 3, 1]], outputRowType=[RecordType(INTEGER I, BIGINT NOT NULL EXPR$1, INTEGER EXPR$2) NOT NULL])'
'    LhxJoinRel(leftKeys=[[0]], rightKeys=[[0]], filterNulls=[[]], joinType=[INNER])'
'      LhxAggRel(groupCount=[1], EXPR$2=[SUM($1)])'
'        FennelMergeRel'
'          IteratorToFennelConverter'
'            ResultSetToFarragoIteratorConverter'
'              MedJdbcQueryRel(foreignSql=[SELECT "I", SUM("J")'
'FROM (SELECT *'
'FROM "QP1"."M"."T1")'
'GROUP BY "I"])'
'          IteratorToFennelConverter'
'            ResultSetToFarragoIteratorConverter'
'              MedJdbcQueryRel(foreignSql=[SELECT "I", SUM("J")'
'FROM (SELECT *'
'FROM "QP2"."M"."T1")'
'GROUP BY "I"])'
'      LhxAggRel(groupCount=[1], EXPR$1=[COUNT($1)])'
'        LhxAggRel(groupCount=[2])'
'          FennelMergeRel'
'            IteratorToFennelConverter'
'              ResultSetToFarragoIteratorConverter'
'                MedJdbcQueryRel(foreignSql=[SELECT "I", "J"'
'FROM (SELECT *'
'FROM "QP1"."M"."T1")'
'GROUP BY "I", "J"])'
'            IteratorToFennelConverter'
'              ResultSetToFarragoIteratorConverter'
'                MedJdbcQueryRel(foreignSql=[SELECT "I", "J"'
'FROM (SELECT *'
'FROM "QP2"."M"."T1")'
'GROUP BY "I", "J"])'
> 
> -- test pushdown of GROUP BY with filter
> explain plan for select i,sum(j) from m.t1 where i > 100 group by i;
'column0'
'FennelToIteratorConverter'
'  LhxAggRel(groupCount=[1], EXPR$1=[SUM($1)])'
'    FennelMergeRel'
'      IteratorToFennelConverter'
'        ResultSetToFarragoIteratorConverter'
'          MedJdbcQueryRel(foreignSql=[SELECT "I", SUM("J")'
'FROM (SELECT *'
'FROM "QP1"."M"."T1"'
'WHERE "I" > 100)'
'GROUP BY "I"])'
'      IteratorToFennelConverter'
'        ResultSetToFarragoIteratorConverter'
'          MedJdbcQueryRel(foreignSql=[SELECT "I", SUM("J")'
'FROM (SELECT *'
'FROM "QP2"."M"."T1"'
'WHERE "I" > 100)'
'GROUP BY "I"])'
> 
> -- test arbitrary choice of replica
> explain plan for select * from m.t2;
'column0'
'ResultSetToFarragoIteratorConverter'
'  MedJdbcQueryRel(foreignSql=[SELECT *'
'FROM "FIREWATER_REPLICA"."M"."T2"])'
> 
> -- test pushdown of JOIN
> explain plan for select * from m.t1, m.t2 where t1.i=t2.i;
'column0'
'FennelToIteratorConverter'
'  FennelMergeRel'
'    IteratorToFennelConverter'
'      ResultSetToFarragoIteratorConverter'
'        MedJdbcQueryRel(foreignSql=[SELECT *'
'FROM (SELECT *'
'FROM "QP1"."M"."T1") AS "LEFT_INPUT",'
'(SELECT *'
'FROM "FIREWATER_REPLICA"."M"."T2") AS "RIGHT_INPUT"'
'WHERE "LEFT_INPUT"."I" = "RIGHT_INPUT"."I"])'
'    IteratorToFennelConverter'
'      ResultSetToFarragoIteratorConverter'
'        MedJdbcQueryRel(foreignSql=[SELECT *'
'FROM (SELECT *'
'FROM "QP2"."M"."T1") AS "LEFT_INPUT",'
'(SELECT *'
'FROM "FIREWATER_REPLICA"."M"."T2") AS "RIGHT_INPUT"'
'WHERE "LEFT_INPUT"."I" = "RIGHT_INPUT"."I"])'
> 
> !quit
