======================================================================
PLATFORMS

So far, Fennel development has been targeted to Linux x86 and Mingw
(with a Cygwin build environment), so the code is unlikely to build or
run without modification on any other platform.  If you are building
for Mingw, read INSTALL.mingw also before attempting the instructions
below.

======================================================================
DEPENDENCIES

Use either g++ 3.3.x or 4.1.x.  Versions between 3.4 and 4.0 do not
work well with Fennel.

The Fennel build is based on GNU autotools.  Versions known to work
are automake-1.8.3; autoconf-2.59; libtool-1.5.6; and make-3.8x.

Fennel itself relies on the Boost library from http://www.boost.org
(at least v1.33), and STLport from http://www.stlport.com (at least
v4.6.2).  Optionally, Fennel can use the ICU library from
http://oss.software.ibm.com/icu for i18n support (this doesn't work
with mingw yet).

Source archives for all of the above dependencies are included in the
thirdparty directory of the full Eigenbase source distribution, as
well as in the perforce.eigenbase.org Perforce server which hosts the
Fennel source code.  If you have a Fennel-only source distribution,
you'll need to either get the full Eigenbase source distribution or
download the dependencies yourself.

To build and install the autotools versions known to work, cd to the
thirdparty directory, run "make autotools", and follow the directions
given.

The next section on automated configuration assumes that you have
the thirdparty directory available.  If not, use the subsequent
section on manual configuration.  

If you are building Fennel as part of Farrago, use Farrago's build
instructions instead of any of the instructions below.

======================================================================
AUTOMATED CONFIGURATION

The simplest way to configure and build Fennel is to run:

./initBuild.sh 

This script will execute all of the steps laid out below, assuming
the presence of the thirdparty directory with the same parent
directory as fennel.  The initBuild.sh script will change to
../thirdparty, extract the copies of Boost, and STLport archived
there and build them.

Run with the --help option to get a full list of flags supported
by the script.

======================================================================
MANUAL CONFIGURATION

If for some reason you can't use the automated configuration script above:

autoreconf --force --install (not needed if building from a tarball)
./configure --with-boost=$BOOST_DIR --with-stlport=$STLPORT_DIR \
    [--with-icu=$ICU_DIR] \
    [--with-farrago] [--with-optimization] [--with-debug]

(If you are building with support for the companion project Farrago,
you must have JAVA_HOME defined.  See http://farrago.sourceforge.net
if you don't know what Farrago is.)

You must supply the source locations for external libraries via
--with-boost and --with-stlport (and optionally --with-icu).
Instructions are provided below on how to build these libraries for
use by Fennel.  (This is only required for the first build; after that
the third-party libraries never change until an upgrade is required.)

The default is a debug build; for a release build, specify
--with-optimization.  

If at some point you run into configuration/build problems and need to
retry after upgrading required tools, beware of cached information
left behind by a failed run.  The safest thing to do is to delete
everything and restart from a clean source tree; at the very least, rm
-rf the autom4te.cache directory.

configure generates scripts in the build subdirectory which will build
the third-party libraries for you; run them as follows (if you
experience errors with buildStlportLibs.sh, read the comments at the
top of the script to resolve the problem):

cd build
buildStlportLibs.sh
buildBoostLibs.sh
# optional
buildICULibs.sh

Finally, build Fennel itself:

cd ..
make

======================================================================
RUN TESTS

I have not yet tried "make install" so I doubt
that it does anything correctly; for now, just run from the build
directly.  For this to work, you need to modify your LD_LIBRARY_PATH;
configure generates a script for this purpose, which you should source
before running anything which links with Fennel:

. fennelenv.sh

To test the build, execute the command "make check", which will run
all unit tests.

======================================================================
DEBUG

To debug, run gdb on an executable in the test/.libs directory.  (gdb
doesn't work on the wrappers in the test directory.)
======================================================================
