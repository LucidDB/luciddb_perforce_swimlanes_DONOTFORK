%{
/* Flex options Used:
 * noyywrap - Do not specify a yywrap function.  Scanner will behave as
 *            if yywrap() always returns 1, so that when the EOF is reached,
 *            the scanner will terminate.
 * c++      - Generate c++ flex scanner (a re-entrant scanner)
 * full     - Generate a fast, noninteractive scanner with a full table
 *            NOTE: This also causes a 7-bit scanner to be generated,
 *                  which should be okay since the Calculator BNF
 *                  only uses 7-bit ascii characters.
 * backup   - Generate lex.backup for checking if rules causes scanner backup
 *            For best performance, the scanner should not have any backup.
 *            TODO: Need to eliminate backup introduced by adding support
 *                  for parsing exponential notation for reals.
 *
 * prefix   - Specifies prefix to use instead of "yy"
 *            NOTE: Because we are generating C++ scanner, this option
 *                  is pretty much useless.  Keep this option mainly for
 *                  consistency with the prefix used for bison.
 * outfile  - Specifies the name of the output file to use. 
 *            NOTE: Use "lex.yy.c" since that what automake expects the
 *                  output file to be, automake will use lex.yy.c to generate
 *                  the final output file "CalcLexer.cpp"
 * yyclass  - Specifies the name of the C++ class to generate 
 *
 * NOTE: Do not use the yylineno option to keep track of line numbers
 *       since that causes a compiler warning about yy_flex_realloc being
 *       defined but not used.  Instead, keep track of lineno ourselves
 *       since we are already keeping tracking of other location information.
 */
%}

%option c++
%option full
%option backup

%option prefix="CalcYY"
%option outfile="lex.yy.c"
%option yyclass="CalcLexer"

%{
/* Undefine _XOPEN_SOURCE to avoid compiler warnings when including
   fennel/common/CommonPreamble.h */

#ifdef _XOPEN_SOURCE
#undef _XOPEN_SOURCE
#endif

#include "fennel/common/CommonPreamble.h"

/* Include CalcLexer.h to get the definition of the CalcLexer class,
   but don't need to include the original flex header since that
   will already been included in the generated C++ file */
#define  DONOT_INCLUDE_FLEX_HEADER
#include "fennel/disruptivetech/calc/CalcLexer.h"

#include "fennel/disruptivetech/calc/CalcGrammar.h"
#include "fennel/disruptivetech/calc/CalcAssemblerException.h"

#if YY_FLEX_MAJOR_VERSION < 2 || (YY_FLEX_MAJOR_VERSION == 2 && YY_FLEX_MINOR_VERSION < 5) || (YY_FLEX_MAJOR_VERSION == 2 && YY_FLEX_MINOR_VERSION == 5 && YY_FLEX_SUBMINOR_VERSION < 34)

int yywrap();

#endif


/* need this for checking results of strtoull, strtoll, strtod */
#include <errno.h>

/* For each token, update the location information */
#define YY_USER_ACTION updateLocation();

using namespace fennel;

/*FENNEL_BEGIN_CPPFILE("$Id$")*/
%}

DIGIT       [0-9]
HEX         [A-Fa-f0-9]
NAME        [a-zA-Z_][a-zA-Z_0-9]*
%s          expect_name
%s          comment

%%

"/*"                 BEGIN(comment);

<comment><<EOF>>     LexerError("Unterminated comment");
<comment>"*"+"/"     BEGIN(INITIAL);
<comment>[\n]+       {
                       /* eat up new lines.  Reset column to 1. */
                       yycolno=1;
                       yylineno+=yyleng;
                     }
<comment>[^*\n]*       /* eat anything that's not a '*' */
<comment>"*"+[^*/\n]*  /* eat up '*'s not followed by '/'s */


"0x"{HEX}* { 
                yylval.v_string = hex2string(yytext+2, yyleng-2); 
                return STRING; 
           }

"'"         BEGIN(expect_name);
   
<expect_name>{NAME}      { 
                yylval.v_string = yytext;
                BEGIN(INITIAL);
                return NAME; 
            }

<expect_name>. BEGIN(INITIAL);

","         return COMMA;
";"         return TERM;
"T"         return CODE_START;
"@"         return AT;
"("         return LPAREN;
")"         return RPAREN;

"L"         { yylval.u.v_regset = RegisterReference::ELocal;   return REG_LOCAL;   }
"S"         { yylval.u.v_regset = RegisterReference::EStatus;  return REG_STATUS;  }
"I"         { yylval.u.v_regset = RegisterReference::EInput;   return REG_INPUT;   }
"O"         { yylval.u.v_regset = RegisterReference::EOutput;  return REG_OUTPUT;  }
"C"         { yylval.u.v_regset = RegisterReference::ELiteral; return REG_LITERAL; }
"V"         { return VALUES; }

"s1"        { yylval.u.v_type = STANDARD_TYPE_INT_8;      return TYPE_FIXED; }
"u1"        { yylval.u.v_type = STANDARD_TYPE_UINT_8;     return TYPE_FIXED; }
"s2"        { yylval.u.v_type = STANDARD_TYPE_INT_16;     return TYPE_FIXED; }
"u2"        { yylval.u.v_type = STANDARD_TYPE_UINT_16;    return TYPE_FIXED; }
"s4"        { yylval.u.v_type = STANDARD_TYPE_INT_32;     return TYPE_FIXED; }
"u4"        { yylval.u.v_type = STANDARD_TYPE_UINT_32;    return TYPE_FIXED; }
"s8"        { yylval.u.v_type = STANDARD_TYPE_INT_64;     return TYPE_FIXED; }
"u8"        { yylval.u.v_type = STANDARD_TYPE_UINT_64;    return TYPE_FIXED; }
"bo"        { yylval.u.v_type = STANDARD_TYPE_BOOL;       return TYPE_FIXED; }
"r"         { yylval.u.v_type = STANDARD_TYPE_REAL;       return TYPE_FIXED; }
"d"         { yylval.u.v_type = STANDARD_TYPE_DOUBLE;     return TYPE_FIXED; }
"c"         { yylval.u.v_type = STANDARD_TYPE_CHAR;       return TYPE_VARIABLE; }
"vc"        { yylval.u.v_type = STANDARD_TYPE_VARCHAR;    return TYPE_VARIABLE; }
"b"         { yylval.u.v_type = STANDARD_TYPE_BINARY;     return TYPE_VARIABLE; }
"vb"        { yylval.u.v_type = STANDARD_TYPE_VARBINARY;  return TYPE_VARIABLE; }

[A-Za-z]+   { yylval.v_opcode = yytext; return OPCODE; }

{DIGIT}+    {
                errno = 0;
                yylval.u.v_uint64 = strtoull(yytext, NULL, 10);
                if (errno != 0)
                    LexerError(strerror(errno));
                return UNSIGNED_INTEGER;
            }

-{DIGIT}+   {
                errno = 0;
                yylval.u.v_int64 = strtoll(yytext, NULL, 10);
                if (errno != 0)
                    LexerError(strerror(errno));
                return NEGATIVE_INTEGER;
            }

-?{DIGIT}+"."?{DIGIT}*([eE][+-]?{DIGIT}+)?   {
                errno = 0;
                yylval.u.v_double = strtod(yytext, NULL);
                if (errno != 0)
                    LexerError(strerror(errno));
                return REAL;
            }

[ \t\r]+    /* eat up whitespace */
[\n]+       {
               /* eat up new lines.  Reset column to 1. */
               yycolno=1;
               yylineno+=yyleng;
            }

.           return UNKNOWN_TOKEN;

%%

void CalcLexer::updateLocation()
{   
    /* 
     * This function does not handle tokens that span multiple lines.
     */
    yyloc.first_line   = yylineno;
    yyloc.first_column = yycolno;
    yyloc.first_pos    = yypos;
    yycolno += yyleng;
    yypos += yyleng;
    yyloc.last_line   = yylineno;
    yyloc.last_column = yycolno-1;
    yyloc.last_pos    = yypos-1;
}

void CalcLexer::LexerError(const char* msg)
{     
    throw CalcAssemblerException(msg, getLocation()); 
}

int CalcLexer::hex(char ch)
{
  if ((ch >= 'a') && (ch <= 'f')) return (ch-'a'+10);
  else if ((ch >= '0') && (ch <= '9')) return (ch-'0');
  else if ((ch >= 'A') && (ch <= 'F')) return (ch-'A'+10);
  else throw CalcAssemblerException("Invalid hex character", getLocation());  
}

/* convert the hex array pointed to by buf into binary string */
string CalcLexer::hex2string(const char *buf, uint buflen)
{   
    int i, count;
    unsigned char ch;

    assert(buf != NULL);
    if ((buflen % 2) != 0) {
        throw CalcAssemblerException("Invalid hex encoded string", getLocation());
    }

    count = buflen/2;

    string str(count, 0);

    for (i=0; i<count; i++) {
        ch = hex(*buf++) << 4;
        ch = ch + hex(*buf++);
        str[i] = ch;
    }
    return str;
}

#if YY_FLEX_MAJOR_VERSION > 2 || (YY_FLEX_MAJOR_VERSION == 2 && YY_FLEX_MINOR_VERSION > 5) || (YY_FLEX_MAJOR_VERSION == 2 && YY_FLEX_MINOR_VERSION == 5 && YY_FLEX_SUBMINOR_VERSION > 33)

int CalcYYFlexLexer::yywrap() { return 1; }

#else

int yywrap() { return 1; }

#endif

/*FENNEL_END_CPPFILE("$Id$")*/
