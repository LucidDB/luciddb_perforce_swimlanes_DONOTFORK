dnl Process this file with autoconf to produce a configure script.
AC_INIT
AC_PREREQ(2.54)
AC_REVISION($Id:$)

AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

AC_CONFIG_HEADERS(config.h)
AC_CONFIG_SRCDIR([common/CommonPreamble.h])

AM_INIT_AUTOMAKE(fennel, 0.5.0)

dnl Define CXXFLAGS before AC_PROG_CXX to suppress the default autoconf
dnl compiler options
CXXFLAGS="-pipe -ftemplate-depth-64 \
-Wall -Wno-unused-parameter -Wno-sign-compare -Werror \
-D_REENTRANT -D_STLP_USE_DYNAMIC_LIB=1 -D_STLP_NO_ANACHRONISMS=1 -DBOOST_NO_HASH=1"

dnl Checks for programs.
AC_PROG_CXX
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_LEX
AC_PROG_YACC

if test "$LEX" != "flex"; then
   AC_MSG_ERROR([Fennel build requires flex])
fi

if test "$YACC" != "bison -y"; then
   AC_MSG_ERROR([Fennel build requires bison])
fi

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h malloc.h unistd.h aio.h libaio.h sched.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_MODE_T
AC_TYPE_SIZE_T

dnl Checks for library functions.  We dynamically load libaio, since
dnl it is not always available, so override AC_CHECK_LIB to disable
dnl automatic -l append
AC_FUNC_MMAP
AC_CHECK_FUNCS(strerror)
AC_CHECK_LIB(aio,io_queue_init,[ found_libaio=true ])

if test "$found_libaio" = "true"
then
    AC_DEFINE([HAVE_LIBAIO],[1],[Define to 1 if you have the `aio' library (-laio).])
fi

dnl Check if Farrago support is desired
AC_ARG_WITH([farrago],
    AC_HELP_STRING([--with-farrago],[whether to include Farrago support]),
    [ with_farrago=$withval ],
    [ with_farrago=no ])

dnl Only attempt to use native libuuid if building without Farrago.
dnl With Farrago, always use java.util.UUID via JNI.
if test "with_farrago" = "no"
then

    AC_CHECK_HEADERS(uuid/uuid.h uuid.h)
    AC_CHECK_LIB(uuid,uuid_generate,[ found_old_libuuid=true ])
    AC_CHECK_LIB(uuid,uuid_make,[ found_new_libuuid=true ])

    dnl Starting with v0.9.4, libuuid changed APIs
    if test "$found_old_libuuid" = "true"
    then
        AC_DEFINE([HAVE_LIBUUID],[1],[Define to 1 if you have the `uuid' library (-luuid).])
        LIBS="-luuid $LIBS"
    fi

    if test "$found_new_libuuid" = "true"
    then
        AC_DEFINE([HAVE_LIBUUID],[1],[Define to 1 if you have the `uuid' library (-luuid).])
        AC_DEFINE([HAVE_LIBUUID_NEW],[1],[Define to 1 if you have `uuid' library 0.9.4 or later (-luuid).])
        LIBS="-luuid $LIBS"
    fi

fi

dnl Check for Boost location
AC_ARG_WITH([boost],
    AC_HELP_STRING([--with-boost],[location of unzipped Boost directory]),
    [ boost_location=$withval ],
    AC_MSG_ERROR([--with-boost=/path/to/boost_x_y_z must be specified.]))
AC_CHECK_FILE([$boost_location/boost/config.hpp],
    ,
    AC_MSG_ERROR([invalid Boost location specified]))
AC_SUBST(boost_location)

dnl Check for STLport location
AC_ARG_WITH([stlport],
    AC_HELP_STRING([--with-stlport],[location of unzipped STLport directory]),
    [ stlport_location=$withval ],
    AC_MSG_ERROR([--with-stlport=/path/to/stlport_x_y_z must be specified.]))
AC_CHECK_FILE([$stlport_location/stlport/stl/_config.h],
        ,
        AC_MSG_ERROR([invalid STLport location specified]))
AC_SUBST(stlport_location)

dnl Check if ICU support is desired
AC_ARG_WITH([icu],
   AC_HELP_STRING([--with-icu],[location of unzipped ICU directory]),
   [ icu_location=$withval ],
   [ icu_location="" ])
if test "$icu_location" != ""
then
   AC_CHECK_FILE([$icu_location/source/runConfigureICU],
      ,
      AC_MSG_ERROR([invalid ICU location specified]))
   ICU_LIB_DATA=icudata
   ICU_LIB_COMMON=icuuc
   ICU_LIB_DIR=$icu_location/lib
   ICU_LD_FLAGS="-L$ICU_LIB_DIR -l$ICU_LIB_DATA -L$ICU_LIB_DIR -l$ICU_LIB_COMMON";
   icu_include="-I$icu_location/include";
   CXXFLAGS="$CXXFLAGS -DHAVE_ICU"
   AC_SUBST(icu_location)
else
   ICU_LD_FLAGS=
   icu_include=
fi
AC_SUBST(ICU_LD_FLAGS)
AC_SUBST(icu_include)

dnl See ICU readme.html#HowToPackage for details on the various libraries
AC_SUBST(ICU_LIB_DATA)
AC_SUBST(ICU_LIB_COMMON)
AC_SUBST(ICU_LIB_DIR)

dnl Farrago requires Java
if test "$with_farrago" = "yes"
then
    farrago_subdir="farrago"
    if test "x$JAVA_HOME" = "x"; then
        AC_MSG_ERROR([Farrago build requires Java, but JAVA_HOME is not set])
    fi
    AC_SUBST(JAVA_HOME)
else
    farrago_subdir=""
fi
AC_SUBST(farrago_subdir)

dnl Endian bigendian littleendian
dnl note that BIG_ENDIAN and LITTLE_ENDIAN already defined for gcc
AC_C_BIGENDIAN(
    [endianness=-DBIGENDIAN],
    [endianness=-DLITTLEENDIAN],
    AC_MSG_ERROR([Endian not defined for this platform]))
CXXFLAGS="$CXXFLAGS $endianness"

dnl Linuxy defaults
BOOST_LINKAGE=runtime-link-dynamic/shared-linkable-true
BOOST_TOOLSET=gcc-stlport
DLLEXT=so
STLPORT_LIB_BASE=stlport_gcc
EXTRA_LDFLAGS="-lpthread -lstdc++ -lgcc_s -lrt -ldl -release $VERSION"
boost_jam_platform=linuxx86
lib_path_var=LD_LIBRARY_PATH
jdk_platform=linux

dnl TODO:  figure out how to reliably determine the correct boost_jam_platform
dnl On SuSE amd64, it came out just linux without the x86.

dnl Cygwin tweaks.
if test "$target_os" = "cygwin" 
then
    if test "$with_farrago" = "yes"; then
        AC_MSG_ERROR([Farrago build is not supported on Cygwin; use mingw])
    fi
    dnl libtool requires libdl.a, which doesn't exist on Cygwin
    AC_CHECK_LIB(dl, regerror, [], 
        AC_MSG_ERROR(["You must make libdl available by doing ln -s libcygwin.a libdl.a under /usr/lib"]))
    BOOST_LINKAGE=runtime-link-dynamic
    DLLEXT=dll
    STLPORT_LIB_BASE=stlport_cygwin
    boost_jam_platform=cygwinx86
    lib_path_var=PATH
fi

dnl On Cygwin and Mingw, libfenneltest cannot be built
dnl as a shared library because of forward references, so build it
dnl as a convenience library instead.  But on other platforms, building
dnl it as a shared library helps reduce test executable sizes.
AM_CONDITIONAL(STATIC_TEST_LIBRARY,\
test "$target_os" = "cygwin" -o "$target_os" = "mingw32")

AM_CONDITIONAL(HAVE_LIBAIO,test "$found_libaio" = "true")
AM_CONDITIONAL(HAVE_LIBUUID,test "$found_old_libuuid" = "true" || "$found_new_libuuid" = "true")
AM_CONDITIONAL(HAVE_LIBUUID_NEW,test "$found_new_libuuid" = "true")

dnl TODO:  combine common mingw/cygwin stuff under host rather than target.

dnl NOTE:  The postdeps line below took a while to figure out.
dnl It allows the latest libtool to make a special exception for
dnl linking the static -stdc++ into fennel dynamic libs.  Also,
dnl for Windows we currently do not use -release because the
dnl lack of symlinks makes it hard to load the correct JNI DLL.

dnl Mingw tweaks
if test "$target_os" = "mingw32"
then
    dnl Use -Wno-format so we can use %I64 in printf/scanf without warning
    CXXFLAGS="$CXXFLAGS -Wno-format -mthreads"
    postdeps="-lstdc++"
    EXTRA_LDFLAGS="-lstdc++ -lws2_32 -lrpcrt4 -Wl,--kill-at -Wl,--export-all-symbols -Wl,--allow-multiple-definition -no-undefined"
    dnl BOOST_LINKAGE=runtime-link-dynamic
    DLLEXT=dll
    boost_jam_platform=cygwinx86
    jdk_platform=win32
    lib_path_var=PATH
    BOOST_TOOLSET=gcc-nocygwin
    AC_CONFIG_COMMANDS(
        [/usr/include/mingw/FlexLexer.h],
        [(cd /usr/include/mingw && rm -f FlexLexer.h && \
             ln -s /usr/include/FlexLexer.h FlexLexer.h)])
fi

dnl Optimization setting
AC_ARG_WITH([optimization],
    AC_HELP_STRING([--with-optimization],[build optimized executables]),
    [with_optimization=$withval],
    [with_optimization=no])
if test "$with_optimization" = "no"
then
    CXXFLAGS="$CXXFLAGS -D_STLP_DEBUG=1 -D_STLP_DEBUG_UNINITIALIZED=1 -DDEBUG"
    BOOST_LIB_SUFFIX=gcc-mt-gdp-1_33
    STLPORT_LIB=${STLPORT_LIB_BASE}_stldebug
else
    CXXFLAGS="$CXXFLAGS -O3 -DNDEBUG -Wno-unused-variable"
    if test "$target_os" = "mingw32"
    then
        dnl optimized mingw build encounters bogus errors for -Wuninitialized
        CXXFLAGS="$CXXFLAGS -Wno-uninitialized"
    fi
    BOOST_LIB_SUFFIX=gcc-mt-p-1_33
    STLPORT_LIB=$STLPORT_LIB_BASE
fi

dnl Debug setting
AC_ARG_WITH([debug],
    AC_HELP_STRING([--with-debug],[build executables with debug info]),
    [with_debug=$withval],
    [with_debug=yes])
if test "$with_debug" = "yes"
then
    CXXFLAGS="$CXXFLAGS -g"
fi

BOOST_THREADLIB=boost_thread-$BOOST_LIB_SUFFIX
BOOST_REGEXLIB=boost_regex-$BOOST_LIB_SUFFIX
BOOST_DATETIMELIB=boost_date_time-$BOOST_LIB_SUFFIX
BOOST_FILESYSTEMLIB=boost_filesystem-$BOOST_LIB_SUFFIX

dnl Shared library support
AC_DISABLE_STATIC
AC_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)

DIST_DIR=$PACKAGE-$VERSION

AC_SUBST(boost_jam_platform)
AC_SUBST(jdk_platform)
AC_SUBST(target_os)
AC_SUBST(lib_path_var)
AC_SUBST(BOOST_FILESYSTEMLIB)
AC_SUBST(BOOST_DATETIMELIB)
AC_SUBST(BOOST_REGEXLIB)
AC_SUBST(BOOST_THREADLIB)
AC_SUBST(BOOST_TOOLSET)
AC_SUBST(STLPORT_LIB_BASE)
AC_SUBST(STLPORT_LIB)
AC_SUBST(MINGW_LDFLAGS)
AC_SUBST(EXTRA_LDFLAGS)
AC_SUBST(DIST_DIR)

AC_CONFIG_FILES([fennelenv.sh build/defineVariables.sh \
Makefile common/Makefile synch/Makefile \
device/Makefile cache/Makefile segment/Makefile \
txn/Makefile tuple/Makefile exec/Makefile btree/Makefile \
db/Makefile ftrs/Makefile \
libfennel/Makefile test/Makefile farrago/Makefile \
disruptivetech/Makefile \
disruptivetech/calc/Makefile \
disruptivetech/xo/Makefile \
disruptivetech/libfennel_dt/Makefile \
disruptivetech/test/Makefile \
disruptivetech/farrago/Makefile \
lucidera/Makefile \
lucidera/hashexe/Makefile \
lucidera/bitmap/Makefile \
lucidera/colstore/Makefile \
lucidera/flatfile/Makefile \
lucidera/sorter/Makefile \
lucidera/libfennel_lu/Makefile \
lucidera/test/Makefile \
lucidera/farrago/Makefile \
build/Makefile \
])

AC_OUTPUT
