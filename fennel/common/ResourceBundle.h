/*
// $Id$
// Fennel is a library of data storage and processing components.
// Copyright (C) 2005-2005 The Eigenbase Project
// Copyright (C) 2004-2005 Disruptive Tech
// Copyright (C) 2005-2005 Red Square, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later Eigenbase-approved version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307  USA
*/

#ifndef Fennel_ResourceBundle_Included
#define Fennel_ResourceBundle_Included

#include <functional>
#include <map>
#include <set>
#include <string>

#include "fennel/common/Locale.h"

FENNEL_BEGIN_NAMESPACE

using namespace std;

class ResourceBundle
{
protected:
    explicit ResourceBundle(
        const string &baseName,
        const Locale &locale,
        const string &location);
    virtual ~ResourceBundle();

    void setParent(ResourceBundle *bundle);

public:
    const set<string> getKeys() const;
    const string &getMessage(const string &key) const;
    bool hasMessage(const string &key) const;

    const string &getBaseName() const;
    const Locale &getLocale() const;

    static void setGlobalResourceFileLocation(const string &location);

private:
    void loadMessages();

    const string _baseName;
    const Locale _locale;
    const string _location;

    ResourceBundle *_parent;

    map<string, string> _messages;
};


// Template for instantiating specific resource bundles.
// _GRB is a class generated by MonRG's resgen.
// _BC must be a map<Locale, _GRB *, localeLess>.
// _BC_ITER must be _BC::iterator

// TODO: SZ: why can't I just use  _BC::iterator in the function?
// REVIEW jvs 18-Feb-2005:  try typedef typename _BC::iterator _BC_ITER;

// TODO: make thread safe

template<class _GRB, class _BC, class _BC_ITER>
_GRB *makeInstance(
    _BC &bundleCache,
    const Locale &locale)
{
    _BC_ITER iter = bundleCache.find(locale);
    if (iter == bundleCache.end()) {
        _GRB *bundle = new _GRB(locale);

        if (locale.hasParentLocale()) {
            // lookup the parent bundle
            _GRB *parentBundle = makeInstance<_GRB, _BC, _BC_ITER>(
                bundleCache,
                locale.getParentLocale());
      
            bundle->setParent(parentBundle);
        } else if (locale != Locale("")) {
            // lookup the default bundle
            _GRB *defaultBundle = makeInstance<_GRB, _BC, _BC_ITER>(
                bundleCache,
                Locale(""));
      
            bundle->setParent(defaultBundle);
        }
    
        bundleCache[locale] = bundle;
        return bundle;
    }
  
    return (*iter).second;
}

FENNEL_END_NAMESPACE

#endif // not Fennel_ResourceBundle_Included
