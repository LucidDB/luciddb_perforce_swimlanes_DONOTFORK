<?xml version="1.0" ?>
<!-- $Id$ -->

<resourceBundle
  static="false"
  locale="en_US"
  cppNamespace="fennel"
  cppCommonInclude="CommonPreamble.h">
  <!-- additional attributes for resourceBundle:
       cppExceptionClassName: Name of an exception class to use if
                              none is specified for a given exception
                              element.
       cppExceptionClassLocation: Header file for previous.
       cppChainExceptions: set to "true" if exceptions support
                           chaining.  Requires all exception types to
                           have two constructors: one that takes
                           std::string, and another that takes
                           std::string and a const T * const where T
                           is the C++ exception class. -->


  <!-- Example resource message with an exception.  Commented out 
       because Fennel does not use the exception generation mechanism.
       Attributes specified here override the above
       cppExceptionClassName and cppExceptionClassLocation
       attributes. 

  <exception
    id="2"
    name="exampleError"
    cppClassName="ExampleExcn" cppClassLocation="fennel/common/SysCallExcn.h">
    <text>Whoops: {0}</text>
  </exception>

  -->

  <!-- NOTE: message id range 440000-450000 is reserved to avoid
  overlap with Farrago -->

  <message id="440010" name="sysCallFailed">
    <text>System call failed:  {0}</text>
  </message>

  <message id="440020" name="duplicateKeyDetected">
    <text>Duplicate key detected:  {0}</text>
  </message>

  <message id="440030" name="internalError">
    <text>Internal error:  {0}</text>
  </message>

  <message id="440040" name="executionAborted">
    <text>Execution aborted</text>
  </message>

  <message id="440050" name="rowTooLong">
    <text>Row size ({0,number,#} bytes) exceeds maximum ({1,number,#} bytes); row data:  {2}</text>
  </message>

  <message id="440060" name="invalidParam">
    <text>Invalid parameter setting.  Setting must be between {0} and {1}.</text>
  </message>

  <message id="440065" name="scalarQueryReturnedMultipleRows">
    <text>Scalar query returned more than one row</text>
  </message>

  <message id="440070" name="scratchMemExhausted">
    <text>Cache scratch memory exhausted</text>
  </message>

  <message id="440080" name="uniqueConstraintViolated">
    <text>Unique constraint violation</text>
  </message>

  <message id="440090" name="incompatibleDataFormat">
    <text>Incompatible data format encountered</text>
  </message>

  <message id="440100" name="libaioRequired">
    <text>Linux requires libaio package</text>
  </message>

  <!-- message id range 441000-441999 reserved for external data wrapper -->

  <!-- message id range 441900-441999 reserved for flatfile data wrapper -->

  <message id="441900" name="readDataFailed">
    <text>Could not read data file {0}</text>
  </message>

  <message id="441905" name="dataTransferFailed">
    <text>Could not access file {0} (size {1,number,#} bytes)</text>
  </message>

  <message id="441910" name="writeLogFailed">
    <text>Could not write log file {0}</text>
  </message>

  <message id="441915" name="noRowsReturned">
    <text>Read no rows from file {0}; last error was: {1}</text>
  </message>

  <message id="441920" name="errorsEncountered">
    <text>Encountered errors while processing file {0}; please see log file {1} for more information</text>
  </message>

  <message id="441925" name="noRowDelimiter">
    <text>Data file {0} has no row delimiter</text>
  </message>

  <message id="441930" name="incompleteColumn">
    <text>Column has no delimiter</text>
  </message>

  <message id="441935" name="noColumnDelimiter">
    <text>Row has no column delimiter</text>
  </message>

  <message id="441940" name="tooFewColumns">
    <text>Row has too few columns</text>
  </message>

  <message id="441945" name="tooManyColumns">
    <text>Row has too many columns</text>
  </message>

  <message id="441950" name="rowTextTooLong">
    <text>Row text was too large</text>
  </message>

  <message id="441955" name="flatfileDescribeFailed">
    <text>Could not derive column sizes for data file {0}</text>
  </message>

  <message id="441960" name="flatfileNoHeader">
    <text>Could not read header from data file {0}: {1}</text>
  </message>

  <message id="441970" name="flatfileMappedRequiresLenient">
    <text>Flat file columns cannot be mapped without lenient mode</text>
  </message>

  <message id="441980" name="flatfileNoMappedColumns">
    <text>Could not map flat file columns because the flat file header {0} contained none of the target columns {1}</text>
  </message>

</resourceBundle>

